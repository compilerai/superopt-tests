=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%7%bbentry L3%8%d L3%9%bbentry L3%11%bbentry L3%19%bbentry L3%20%d L3%21%bbentry L3%23%bbentry E0%0%d
=Edges:
L0%0%d => L3%7%bbentry
L3%7%bbentry => L3%8%d
L3%8%d => L3%11%bbentry
L3%8%d => L3%9%bbentry
L3%9%bbentry => E0%0%d
L3%11%bbentry => L3%19%bbentry
L3%19%bbentry => L3%20%d
L3%20%d => L3%23%bbentry
L3%20%d => L3%21%bbentry
L3%21%bbentry => L3%7%bbentry (backedge) 
L3%23%bbentry => L3%19%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%19%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%20%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%21%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%23%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%7%bbentry => L3%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%8%d => L3%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%8%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%11%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%19%bbentry
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%19%bbentry => L3%20%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%20%d => L3%23%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%20%d => L3%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%21%bbentry => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%23%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 31 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 32 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%8%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%20%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%7%bbentry
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=Loc 36 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 37 in src.spec.foo.
REGMEM
spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=Loc 38 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-13.E0%0%d
1 : input.spec-%tmpvar-13.E0%0%d : BV:32
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-18.E0%0%d
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=Loc 44 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-15.L3%7%bbentry
1 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-16.L3%7%bbentry
1 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=Loc 47 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%tmpvar-11.L3%7%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%tmpvar-5.L3%7%bbentry : BV:32
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%tmpvar-6.L3%7%bbentry : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%19%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-u-0.L3%7%bbentry
1 : input.spec-%var-u-0.L3%7%bbentry : UNIT
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%19%bbentry
1 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 57 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%19%bbentry
1 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%19%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%tmpvar-3.L3%19%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%var-x_ij-0.L3%19%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%7%bbentry
35, 36, 43, 
=live locs at L3%8%d
33, 35, 36, 43, 
=live locs at L3%9%bbentry
43, 
=live locs at L3%11%bbentry
33, 35, 36, 43, 
=live locs at L3%19%bbentry
36, 37, 38, 51, 52, 
=live locs at L3%20%d
34, 36, 37, 38, 51, 52, 
=live locs at L3%21%bbentry
36, 51, 52, 
=live locs at L3%23%bbentry
34, 36, 37, 38, 51, 52, 
=live locs at E0%0%d
42[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 31, 32
=loc definedness at L3%7%bbentry
1, 31, 32, 35, 36, 43, 45, 46, 47
=loc definedness at L3%8%d
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%9%bbentry
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%11%bbentry
1, 31, 32, 33, 35, 36, 43, 45, 46, 47
=loc definedness at L3%19%bbentry
1, 31, 32, 33, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%20%d
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%21%bbentry
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at L3%23%bbentry
1, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 51, 52, 54, 55, 56, 57
=loc definedness at E0%0%d
1, 31, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%7%bbentry
35, 36
=branch affecting variable locs at L3%8%d
33, 35, 36
=branch affecting variable locs at L3%9%bbentry

=branch affecting variable locs at L3%11%bbentry
33, 35, 36
=branch affecting variable locs at L3%19%bbentry
36, 37, 38, 51
=branch affecting variable locs at L3%20%d
34, 36, 37, 38, 51
=branch affecting variable locs at L3%21%bbentry
36, 51
=branch affecting variable locs at L3%23%bbentry
36, 37, 38, 51
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 35 {input.spec-%var-i-0.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 36 {input.spec-%var-x-0.L3%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 43 {input.spec-%var-ret-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 45 {input.spec-%tmpvar-15.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 46 {input.spec-%tmpvar-16.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 47 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d for loc_id 33 {input.spec-%tmpvar-7.L3%8%d }
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 39 {input.spec-%tmpvar-13.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 40 {input.spec-%tmpvar-14.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 41 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 42 {input.spec-%tmpvar-18.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 44 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 37 {input.spec-%var-j-0.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 38 {input.spec-%var-x_i-0.L3%19%bbentry }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 51 {input.spec-%tmpvar-9.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 54 {input.spec-%tmpvar-10.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 55 {input.spec-%tmpvar-8.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 56 {input.spec-%var-x_i-1.L3%19%bbentry }
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 57 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d for loc_id 34 {input.spec-%tmpvar-0.L3%20%d }
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 35 {input.spec-%var-i-0.L3%7%bbentry }
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 43 {input.spec-%var-ret-1.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 47 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 48 {input.spec-%tmpvar-11.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 49 {input.spec-%tmpvar-5.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 50 {input.spec-%tmpvar-6.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 53 {input.spec-%var-u-0.L3%7%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 37 {input.spec-%var-j-0.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 57 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 58 {input.spec-%tmpvar-1.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 59 {input.spec-%tmpvar-2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 60 {input.spec-%tmpvar-3.L3%19%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-x_ij-0.L3%19%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%7%bbentry:
vacuous mls at L3%8%d:
vacuous mls at L3%9%bbentry:
vacuous mls at L3%11%bbentry:
vacuous mls at L3%19%bbentry:
vacuous mls at L3%20%d:
vacuous mls at L3%21%bbentry:
vacuous mls at L3%23%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%7%bbentry:
non-vacuous mls at L3%8%d:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at L3%11%bbentry:
non-vacuous mls at L3%19%bbentry:
non-vacuous mls at L3%20%d:
non-vacuous mls at L3%21%bbentry:
non-vacuous mls at L3%23%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 36
=loc_expr
140524 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 45
=loc_expr
140553 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140554 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140559 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140560 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 58
=loc_expr
140562 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 45 expr
1 : input.spec-%tmpvar-15.L3%7%bbentry : BV:32
=loc 45 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 46 expr
1 : input.spec-%tmpvar-16.L3%7%bbentry : BV:32
=loc 46 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-10.L3%19%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-8.L3%19%bbentry : BV:32
=loc 55 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 58 expr
1 : input.spec-%tmpvar-1.L3%19%bbentry : BV:32
=loc 58 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 45 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%bbentry=>L3%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%9%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%11%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%11%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%19%bbentry=>L3%20%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%21%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%23%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%21%bbentry=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%23%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%7%bbentry
=spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%bbentry=>L3%8%d
=spec-%tmpvar-7.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>E0%0%d
=spec-%tmpvar-13.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%11%bbentry=>L3%19%bbentry
=spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%19%bbentry=>L3%20%d
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%23%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%21%bbentry=>L3%7%bbentry
=spec-%var-i-0.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-11.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-5.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-6.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%23%bbentry=>L3%19%bbentry
=spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-x_ij-0.L3%19%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%7%bbentry for src.spec.foo
=suffixpath_at_L3%7%bbentry.graph_edge_composition
(L0%0%d=>L3%7%bbentry)
=suffixpath_at_L3%8%d for src.spec.foo
=suffixpath_at_L3%8%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*(L3%7%bbentry=>L3%8%d))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%9%bbentry)))
=suffixpath_at_L3%11%bbentry for src.spec.foo
=suffixpath_at_L3%11%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%11%bbentry)))
=suffixpath_at_L3%19%bbentry for src.spec.foo
=suffixpath_at_L3%19%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*(L3%11%bbentry=>L3%19%bbentry))))
=suffixpath_at_L3%20%d for src.spec.foo
=suffixpath_at_L3%20%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*(L3%19%bbentry=>L3%20%d)))))
=suffixpath_at_L3%21%bbentry for src.spec.foo
=suffixpath_at_L3%21%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%21%bbentry))))))
=suffixpath_at_L3%23%bbentry for src.spec.foo
=suffixpath_at_L3%23%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%23%bbentry))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%9%bbentry)*(L3%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry done
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d done
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry done
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d done
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry done
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry done
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry done
tfg.assumes_around_edge at L3%23%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%23%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end7%1%d Lfor.inc5%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end7%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc5%1%d
Lfor.body3%1%d => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc5%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end7%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end7%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc5%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 35 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc5 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc6, %for.inc5 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end7%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end7, !dbg !27*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end7, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %add, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc5%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc5, !dbg !44)*  br label %for.inc5, !dbg !44)*  br label %for.inc5, !dbg !44)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !36))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !36*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !36))*(  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36*(  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36*  %arrayidx4 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !36)))*((((  %1 = load i32, i32* %arrayidx4, align 4, !dbg !36*  %1 = load i32, i32* %arrayidx4, align 4, !dbg !36)*(((  %add = add i32 %ret.1, %1, !dbg !38*  br label %for.inc, !dbg !39)*  br label %for.inc, !dbg !39)*  br label %for.inc, !dbg !39))*(((((  %inc = add i32 %j.0, 1, !dbg !40*  br label %for.cond1, !dbg !41, !llvm.loop !42)*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %add, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !41, !llvm.loop !42))*  br label %for.cond1, !dbg !41, !llvm.loop !42)*(  br label %for.cond1, !dbg !41, !llvm.loop !42*  br label %for.cond1, !dbg !41, !llvm.loop !42)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: Lfor.inc5%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc6 = add i32 %i.0, 1, !dbg !45*  br label %for.cond, !dbg !46, !llvm.loop !47)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc5 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc6, %for.inc5 ], !dbg !22*  br label %for.cond, !dbg !46, !llvm.loop !47))*  br label %for.cond, !dbg !46, !llvm.loop !47)*(  br label %for.cond, !dbg !46, !llvm.loop !47*  br label %for.cond, !dbg !46, !llvm.loop !47))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end7%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !49
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100046 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100047 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100048 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100049 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100050 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100051 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100052 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=Loc 100067 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100086 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055, 100059, 
=live locs at Lfor.body3%1%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100060, 100067, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055[f], 100059, 
=live locs at Lfor.cond%2%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100055[f], 100057, 100059, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100060, 100067, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100058, 100059, 100060, 100067, 
=live locs at Lfor.end7%1%d
100050, 100055[f], 
=live locs at Lfor.inc5%1%d
100006, 100012, 100015, 100047, 100048, 100049, 100050, 100059, 100067, 
=live locs at E0%0%d
100050, 100055[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.body3%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.cond%2%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at Lfor.end7%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100059, 100061, 100062, 100063, 100085, 100086
=loc definedness at Lfor.inc5%1%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100055, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100067, 100068, 100069, 100070, 100085, 100086
=loc definedness at E0%0%d
100006, 100012, 100015, 100042, 100043, 100044, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100059, 100061, 100062, 100063, 100085, 100086

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100059
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100059, 100060
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100059
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100057, 100059
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100059, 100060
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100058, 100059, 100060
=branch affecting variable locs at Lfor.end7%1%d

=branch affecting variable locs at Lfor.inc5%1%d
100006, 100012, 100059
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100061 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100085 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100086 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100060 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100067 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100068 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100069 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100060 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100067 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100071 {input.dst.llvm-%0.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100072 {input.dst.llvm-%1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100073 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100074 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100075 {input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100076 {input.dst.llvm-%add.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100077 {input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100078 {input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100079 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100080 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100081 {input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100082 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100057 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end7%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end7%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100058 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc5%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc5%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100053 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100054 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d for loc_id 100056 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end7%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100055 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100059 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100063 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100065 {input.dst.llvm-%inc6.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry for loc_id 100066 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end7%1%d:
vacuous mls at Lfor.inc5%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end7%1%d:
non-vacuous mls at Lfor.inc5%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140380 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140381 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140379 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140460 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140461 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140463 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140465 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100036
=loc_expr
140467 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100041
=loc_expr
140391 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100042
=loc_expr
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100043
=loc_expr
140385 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100044
=loc_expr
140386 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100053
=loc_expr
140661 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140662 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140663 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140664 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140665 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140668 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140669 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100085
=loc_expr
140685 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100086
=loc_expr
140686 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100056 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100056 spreled-expr
140267 : retaddr_const : BV:32
=loc 100061 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100061 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100062 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100062 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100068 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100068 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100085 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100085 spreled-expr
140391 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100086 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100086 spreled-expr
140390 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100056 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end7%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc5%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end7%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end7%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc5%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end7%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end7%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end7%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc5%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc5%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end7%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end7%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
2
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end7%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end7%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end7%1%d)))
=suffixpath_at_Lfor.inc5%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc5%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc5%1%d))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end7%1%d)*(Lfor.end7%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140379 : input.dst.llvm-%x : BV:32
140365 : 4 { 0x4 +1.0e1025 } : INT
140392 : islangaligned(140379, 140365) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=LhsExpr
140508 : 4 { 0x4 +1.0e1025 } : BV:64
140614 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140410 : 32 { 0x20 +1.0e1025 } : INT
140635 : bvsign_ext(140614, 140410) : BV:64
140754 : bvmul(140508, 140635) : BV:64
140414 : 63 { 0x3f +1.0e1025 } : INT
140755 : bvextract(140754, 140414, 140410) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140634 : bvslt(140614, 140276) : BOOL
140416 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140768 : ite(140634, 140416, 140276) : BV:32
140770 : eq(140755, 140768) : BOOL
140365 : 4 { 0x4 +1.0e1025 } : INT
140772 : isindexforsize(140770, 140365) : BOOL
140379 : input.dst.llvm-%x : BV:32
140362 : 4 { 0x4 +1.47e129 } : BV:32
140701 : bvmul(140362, 140614) : BV:32
140704 : bvadd(140379, 140701) : BV:32
140774 : isgepoffset(140704, 140701) : BOOL
140778 : islangaligned(140704, 140365) : BOOL
140382 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140383 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140494 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140366 : 0 { 0x0 } : BOOL
140710 : select(140382, 140383, 140494, 140704, 140365, 140366) : BV:32
140780 : islangaligned(140710, 140365) : BOOL
140783 : and(140778, 140780) : BOOL
140616 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140650 : bvsign_ext(140616, 140410) : BV:64
140796 : bvmul(140508, 140650) : BV:64
140797 : bvextract(140796, 140414, 140410) : BV:32
140649 : bvslt(140616, 140276) : BOOL
140810 : ite(140649, 140416, 140276) : BV:32
140812 : eq(140797, 140810) : BOOL
140814 : isindexforsize(140812, 140365) : BOOL
140713 : bvmul(140362, 140616) : BV:32
140715 : bvadd(140710, 140713) : BV:32
140816 : isgepoffset(140715, 140713) : BOOL
140821 : and(140772, 140774, 140778, 140783, 140814, 140816) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=LhsExpr
140382 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140383 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140494 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140379 : input.dst.llvm-%x : BV:32
140362 : 4 { 0x4 +1.47e129 } : BV:32
140614 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140701 : bvmul(140362, 140614) : BV:32
140704 : bvadd(140379, 140701) : BV:32
140365 : 4 { 0x4 +1.0e1025 } : INT
140366 : 0 { 0x0 } : BOOL
140710 : select(140382, 140383, 140494, 140704, 140365, 140366) : BV:32
140616 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140713 : bvmul(140362, 140616) : BV:32
140715 : bvadd(140710, 140713) : BV:32
140736 : islangaligned(140715, 140365) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end7%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end7%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc5%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc5%1%d done
tfg.assumes_around_edge at Lfor.end7%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end7%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc5%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc5%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.body3%3%d
=linename
line 5
=pc
Lfor.body3%4%d
=linename
line 5
=pc
Lfor.body3%5%d
=linename
line 5
=pc
Lfor.body3%6%d
=linename
line 6
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 7
=pc
Lfor.end7%1%d
=linename
line 8
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc5%1%d
=linename
line 3
=pc
Lfor.inc5%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 14
=pc
Lfor.body3%2%d
=column_name
 at column 14
=pc
Lfor.body3%3%d
=column_name
 at column 14
=pc
Lfor.body3%4%d
=column_name
 at column 14
=pc
Lfor.body3%5%d
=column_name
 at column 11
=pc
Lfor.body3%6%d
=column_name
 at column 5
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end7%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc5%1%d
=column_name
 at column 31
=pc
Lfor.inc5%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%3%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%4%d
=line_and_column
(line 5 at column 14)
=pc
Lfor.body3%5%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.body3%6%d
=line_and_column
line 6
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 7
=pc
Lfor.end7%1%d
=line_and_column
line 8
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc5%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc5%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%n : L0%0%d : n'
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx4]_4
input.dst.llvm-%add : Lfor.body3%6%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%inc6 : Lfor.inc5%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset
input.dst.llvm-%arrayidx4 : L0%0%d : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx4
=dst.llvm-%arrayidx4 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx4 val_scevb
=dst.llvm-%arrayidx4 val_scevb scev
=dst.llvm-%arrayidx4 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx4 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 val_scevb scev scev_expr done
=dst.llvm-%arrayidx4 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx4 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb
=dst.llvm-%arrayidx4 atuse_scevb scev
=dst.llvm-%arrayidx4 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx4 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx4 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx4 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx4 atexit_scev
=dst.llvm-%arrayidx4 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx4 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx4 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx4 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
19 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
19 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
20 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc6
=dst.llvm-%inc6 loop pc: Lfor.cond%1%d
=dst.llvm-%inc6 val_scevb
=dst.llvm-%inc6 val_scevb scev
=dst.llvm-%inc6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc6 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
21 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc6 val_scevb scev scev_expr done
=dst.llvm-%inc6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb
=dst.llvm-%inc6 atuse_scevb scev
=dst.llvm-%inc6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc6 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
21 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc6 atuse_scevb scev scev_expr done
=dst.llvm-%inc6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc6 atexit_scev
=dst.llvm-%inc6 atexit_scev loop: L0%0%d
=dst.llvm-%inc6 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc6 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
22 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc6 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.end7%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc5%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 12 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 18 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 19 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end7%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%inc6.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc5%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%add.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body3%1%d=>Lfor.cond1%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc6.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple7.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%7%bbentry_Lfor.cond%1%bbentry L3%19%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 35 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*(L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc5%1%d#{0,0})*(Lfor.inc5%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*(((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*((L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})*((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{1,0})))))+((L3%20%d#{0,0}=>L3%23%bbentry#{0,0})*(L3%23%bbentry#{0,0}=>L3%19%bbentry#{1,0}))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*(Lfor.body3%1%d#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end7%1%d#{0,0})*(Lfor.end7%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B4.C1.D2.E1
=Locs end
=Liveness in foo.A2.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L3%7%bbentry_Lfor.cond%1%bbentry

=live locs at L3%19%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B4.C1.D2.E1

=Branch affecting variable locs in foo.A2.B4.C1.D2.E1

=Relevant Memlabels in foo.A2.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 8d7f67e6c34a26d5fa1effacc12e639b
=input.spec-%var-x-1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda54 : BV:32
11 : Lambda52 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda53 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda54 : BV:32
11 : Lambda52 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda53 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1072488283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1072488284; 1072488287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1072488288; 1496640175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1496640176; 1496640179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1496640180; 4258622623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4258622624; 4258622627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4258622628; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1496640176 { 0x5934eab0 +1.41341209e51 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1072488284 { 0x3fecdf5c +1.85056638e0 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4258622624 { 0xfdd56ca0 -36344672 -1.66737747e124 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1072488284 { 0x3fecdf5c +1.85056638e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1072488287 { 0x3fecdf5f +1.85056674e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4258622624 { 0xfdd56ca0 -36344672 -1.66737747e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4258622627 { 0xfdd56ca3 -36344669 -1.66737782e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1496640176 { 0x5934eab0 +1.41341209e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1496640179 { 0x5934eab3 +1.41341245e51 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 d09c4e8a9de670431946f1578675bf62
=input.spec-%var-x-1
1 : Lambda77 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda80 : BV:32
11 : Lambda78 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda79 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda86 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda89 : BV:32
11 : Lambda87 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda88 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 264935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 264936; 264939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 264940; 942163231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 942163232; 942163235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 942163236; 2684642531 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2684642532; 2684642535 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2684642536; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 264936 { 0x40ae8 +1.3158283e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2684642532 { 0xa00464e4 -1610324764 -1.3432893e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 942163232 { 0x38284520 +1.31460952e241 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2684642532 { 0xa00464e4 -1610324764 -1.3432893e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2684642535 { 0xa00464e7 -1610324761 -1.3432929e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 942163232 { 0x38284520 +1.31460952e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 942163235 { 0x38284523 +1.31460988e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 264936 { 0x40ae8 +1.3158283e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 264939 { 0x40aeb +1.3158318e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce25.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce25 3e4325da58589f9e4e7edcabb44369f
=input.spec-%var-x-1
1 : Lambda151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda154 : BV:32
11 : Lambda152 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda153 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda154 : BV:32
11 : Lambda152 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda153 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 707125783 ] -> 0, [ 707125784; 707125784 ] -> 128, [ 707125785; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 626279043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 626279044; 626279047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 626279048; 707125783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 707125784; 707125787 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 707125788; 1244027327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1244027328; 1244027331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1244027332; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 626279044 { 0x25544284 +1.65827989e203 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1244027328 { 0x4a2659c0 +1.29961395e21 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 626279044 { 0x25544284 +1.65827989e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 626279047 { 0x25544287 +1.65828025e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1244027328 { 0x4a2659c0 +1.29961395e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1244027331 { 0x4a2659c3 +1.29961431e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 707125787 { 0x2a25e21b +1.29596269e213 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda122 : BV:32
2 : Lambda123 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda127 : BV:32
2 : Lambda128 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1269331065
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce26.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce26 8d0bd64f35c9411dafd649fa255f4c8
=input.spec-%var-x-1
1 : Lambda173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda176 : BV:32
11 : Lambda174 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda175 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 528 { 0x210 +1.6294e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda176 : BV:32
11 : Lambda174 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda175 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 528 { 0x210 +1.6294e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 527 ] -> 0, [ 528; 528 ] -> 2, [ 529; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 528; 531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 532; 895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 896; 899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 900; 66051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 66052; 66055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 66056; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 528 { 0x210 +1.6294e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 896 { 0x380 +1.10681e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 66052 { 0x10204 +1.787401e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 896 { 0x380 +1.10681e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 899 { 0x383 +1.10716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 66052 { 0x10204 +1.787401e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 66055 { 0x10207 +1.787436e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 528 { 0x210 +1.6294e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 531 { 0x213 +1.6330e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda133 : BV:32
2 : Lambda134 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 528 { 0x210 +1.6294e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda138 : BV:32
2 : Lambda139 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 528 { 0x210 +1.6294e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1641489885
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce47.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce47 f7f1c86cb8c36c2e5354cf55a791bce
=input.spec-%var-x-1
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda234 : BV:32
11 : Lambda232 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda233 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda234 : BV:32
11 : Lambda232 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda233 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1978462187 ] -> 0, [ 1978462188; 1978462188 ] -> 1, [ 1978462189; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1978462187 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1978462188; 1978462191 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1978462192; 2364063719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2364063720; 2364063723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2364063724; 2675444035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2675444036; 2675444039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2675444040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2364063720 { 0x8ce8bfe8 -1930903576 -1.81835651e154 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2675444036 { 0x9f780944 -1619523260 -1.93778276e191 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2364063720 { 0x8ce8bfe8 -1930903576 -1.81835651e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2364063723 { 0x8ce8bfeb -1930903573 -1.81835687e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2675444036 { 0x9f780944 -1619523260 -1.93778276e191 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2675444039 { 0x9f780947 -1619523257 -1.93778312e191 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1978462191 { 0x75ecefef +1.85107219e108 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda202 : BV:32
2 : Lambda203 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda207 : BV:32
2 : Lambda208 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4226644475
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce69.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce69 206fcc5ae995e5ba838ba3a7f494cc
=input.spec-%var-x-1
1 : Lambda311 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : Lambda312 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda313 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
21 : eq(19, 20) : BOOL
22 : 128 { 0x80 -128 } : BV:8
23 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
24 : eq(19, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : ite(24, 22, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : eq(29, 23) : BOOL
32 : ite(31, 22, 25) : BV:8
33 : ite(30, 22, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : ite(37, 22, 25) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : bvadd(17, 18) : BV:32
41 : eq(40, 20) : BOOL
42 : eq(40, 23) : BOOL
43 : ite(42, 22, 25) : BV:8
44 : ite(41, 22, 43) : BV:8
45 : bvconcat(27, 33, 39, 44) : BV:32
46 : bvadd(14, 16, 45) : BV:32
47 : eq(46, 20) : BOOL
48 : eq(46, 23) : BOOL
49 : ite(48, 22, 25) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : bvadd(28, 16, 45) : BV:32
52 : eq(51, 20) : BOOL
53 : eq(51, 23) : BOOL
54 : ite(53, 22, 25) : BV:8
55 : ite(52, 22, 54) : BV:8
56 : bvadd(34, 16, 45) : BV:32
57 : eq(56, 20) : BOOL
58 : eq(56, 23) : BOOL
59 : ite(58, 22, 25) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : bvadd(16, 45) : BV:32
62 : eq(61, 20) : BOOL
63 : eq(61, 23) : BOOL
64 : ite(63, 22, 25) : BV:8
65 : ite(62, 22, 64) : BV:8
66 : bvconcat(50, 55, 60, 65) : BV:32
67 : lambda(13, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(12, 67) : MAP[BV:32 -> BV:32]
69 : lambda(10, 68) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
70 : map(9, 69) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
71 : sym_const(70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda311 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : Lambda312 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda313 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
21 : eq(19, 20) : BOOL
22 : 128 { 0x80 -128 } : BV:8
23 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
24 : eq(19, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : ite(24, 22, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : eq(29, 23) : BOOL
32 : ite(31, 22, 25) : BV:8
33 : ite(30, 22, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : ite(37, 22, 25) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : bvadd(17, 18) : BV:32
41 : eq(40, 20) : BOOL
42 : eq(40, 23) : BOOL
43 : ite(42, 22, 25) : BV:8
44 : ite(41, 22, 43) : BV:8
45 : bvconcat(27, 33, 39, 44) : BV:32
46 : bvadd(14, 16, 45) : BV:32
47 : eq(46, 20) : BOOL
48 : eq(46, 23) : BOOL
49 : ite(48, 22, 25) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : bvadd(28, 16, 45) : BV:32
52 : eq(51, 20) : BOOL
53 : eq(51, 23) : BOOL
54 : ite(53, 22, 25) : BV:8
55 : ite(52, 22, 54) : BV:8
56 : bvadd(34, 16, 45) : BV:32
57 : eq(56, 20) : BOOL
58 : eq(56, 23) : BOOL
59 : ite(58, 22, 25) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : bvadd(16, 45) : BV:32
62 : eq(61, 20) : BOOL
63 : eq(61, 23) : BOOL
64 : ite(63, 22, 25) : BV:8
65 : ite(62, 22, 64) : BV:8
66 : bvconcat(50, 55, 60, 65) : BV:32
67 : lambda(13, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(12, 67) : MAP[BV:32 -> BV:32]
69 : lambda(10, 68) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
70 : map(9, 69) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
71 : sym_const(70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1738598139 ] -> 0, [ 1738598140; 1738598140 ] -> 128, [ 1738598141; 1738598142 ] -> 0, [ 1738598143; 1738598143 ] -> 128, [ 1738598144; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1554251703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1554251704; 1554251707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1554251708; 1738598139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1738598140; 1738598143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1738598144; 2728497139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2728497140; 2728497143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2728497144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2728497140 { 0xa2a18ff4 -1566470156 -1.26220560e198 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1554251704 { 0x5ca3ffb8 +1.28124141e58 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1554251704 { 0x5ca3ffb8 +1.28124141e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1554251707 { 0x5ca3ffbb +1.28124177e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2728497140 { 0xa2a18ff4 -1566470156 -1.26220560e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2728497143 { 0xa2a18ff7 -1566470153 -1.26220595e198 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda282 : BV:32
2 : Lambda283 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda287 : BV:32
2 : Lambda288 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3947113804
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3v487.ce70.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3v487.ce70 96e4f31596bd326095af4650b81df65b
=input.spec-%var-x-1
1 : Lambda333 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda336 : BV:32
11 : Lambda334 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda335 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 33554464 { 0x2000020 +1.381e133 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
24 : eq(19, 23) : BOOL
25 : 32 { 0x20 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda333 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda336 : BV:32
11 : Lambda334 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda335 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 33554464 { 0x2000020 +1.381e133 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
24 : eq(19, 23) : BOOL
25 : 32 { 0x20 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 33554464 { 0x2000020 +1.381e133 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 269557767 ] -> 0, [ 269557768; 269557768 ] -> 32, [ 269557769; 269557770 ] -> 0, [ 269557771; 269557771 ] -> 2, [ 269557772; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3346099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3346100; 3346103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3346104; 269557767 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 269557768; 269557771 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 269557772; 1343766599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1343766600; 1343766603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1343766604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1343766600 { 0x50184048 +1.18946170e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3346100 { 0x330eb4 +1.39888620e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2056759925 { 0x7a97aa75 +1.18488943e118 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2056759925 { 0x7a97aa75 +1.18488943e118 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3346100 { 0x330eb4 +1.39888620e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3346103 { 0x330eb7 +1.39888656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1343766600 { 0x50184048 +1.18946170e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1343766603 { 0x5018404b +1.18946206e33 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda293 : BV:32
2 : Lambda294 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 33554464 { 0x2000020 +1.381e133 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda298 : BV:32
2 : Lambda299 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 33554464 { 0x2000020 +1.381e133 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
712337475
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce91.num_edges_traversed2
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce91 3d7083b763d1fb5b6a1f511de816034
=input.spec-%var-x-1
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda396 : BV:32
18 : Lambda394 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda395 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda396 : BV:32
18 : Lambda394 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda395 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2454 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2455 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1128861687 ] -> 0, [ 1128861688; 1128861688 ] -> 16, [ 1128861689; 1543947460 ] -> 0, [ 1543947461; 1543947461 ] -> 1, [ 1543947462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1128861687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1128861688; 1128861691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1128861692; 1543947459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1543947460; 1543947463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1543947464; 3960085711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3960085712; 3960085715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3960085716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2450 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2451 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2458 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2459 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1543947463 { 0x5c06c4c7 +1.5288016e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1128861691 { 0x43490ffb +1.57080018e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3960085715 { 0xec0a1cd3 -334881581 -1.7900464e89 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda364 : BV:32
2 : Lambda365 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda369 : BV:32
2 : Lambda370 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2441249403
=counter_example_end
=global nodece 7 num_edges_traversed 2
=global nodece 7 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce92.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce92 324b81f6092921e835aeb21c1eaf54
=input.spec-%var-x-1
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda418 : BV:32
11 : Lambda416 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda417 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda418 : BV:32
11 : Lambda416 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda417 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 16732019 ] -> 0, [ 16732020; 16732020 ] -> 16, [ 16732021; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 16732019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16732020; 16732023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 16732024; 16945127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16945128; 16945131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 16945132; 2147632071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147632072; 2147632075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147632076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147632072 { 0x800243c8 -2147335224 -1.1769351e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 16945128 { 0x1028fe8 +1.2001667e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1170441650 { 0x45c385b2 +1.52751755e12 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170441650 { 0x45c385b2 +1.52751755e12 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 16945128 { 0x1028fe8 +1.2001667e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 16945131 { 0x1028feb +1.2001702e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 16732023 { 0xff4f77 +1.99461257e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147632072 { 0x800243c8 -2147335224 -1.1769351e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147632075 { 0x800243cb -2147335221 -1.1769387e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda375 : BV:32
2 : Lambda376 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda380 : BV:32
2 : Lambda381 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1840430835
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce113.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce113 d022acc7c14c41b073edb1aaa37ea56
=input.spec-%var-x-1
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda480 : BV:32
18 : Lambda478 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda479 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda480 : BV:32
18 : Lambda478 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda479 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2434 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2435 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3303498735 ] -> 0, [ 3303498736; 3303498736 ] -> 2, [ 3303498737; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1902474199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1902474200; 1902474203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1902474204; 2779208627 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2779208628; 2779208631 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2779208632; 3303498735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3303498736; 3303498739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3303498740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2779208628 { 0xa5a75bb4 -1515758668 -1.30748605e204 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1902474200 { 0x716573d8 +1.79259777e99 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2430 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2431 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
13 : eq(11, 12) : BOOL
14 : 2 { 0x2 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2438 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2439 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3303498739 { 0xc4e763f3 -991468557 -1.80773770e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1902474200 { 0x716573d8 +1.79259777e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1902474203 { 0x716573db +1.79259812e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2779208628 { 0xa5a75bb4 -1515758668 -1.30748605e204 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2779208631 { 0xa5a75bb7 -1515758665 -1.30748641e204 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda446 : BV:32
2 : Lambda447 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda451 : BV:32
2 : Lambda452 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
867572303
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce135.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce135 4df7ad74126b563b4d260fea996161a
=input.spec-%var-x-1
1 : Lambda561 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda564 : BV:32
17 : Lambda562 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda563 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda561 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda564 : BV:32
17 : Lambda562 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda563 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2418 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2419 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 472070135 ] -> 0, [ 472070136; 472070136 ] -> 1, [ 472070137; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 472070135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 472070136; 472070139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 472070140; 1604762235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1604762236; 1604762239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1604762240; 3649015795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3649015796; 3649015799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3649015800; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1604762236 { 0x5fa6ba7c +1.30256605e64 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3649015796 { 0xd97f8ff4 -645951500 -1.99658060e51 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2414 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2415 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2422 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2423 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 472070139 { 0x1c2337fb +1.27514588e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3649015796 { 0xd97f8ff4 -645951500 -1.99658060e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3649015799 { 0xd97f8ff7 -645951497 -1.99658095e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1604762236 { 0x5fa6ba7c +1.30256605e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1604762239 { 0x5fa6ba7f +1.30256640e64 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda530 : BV:32
2 : Lambda531 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda535 : BV:32
2 : Lambda536 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce157.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce157 2af0833e1126e27fd4315f4dc66abb9c
=input.spec-%var-x-1
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda644 : BV:32
11 : Lambda642 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda643 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
24 : eq(19, 23) : BOOL
25 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
26 : eq(19, 25) : BOOL
27 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda644 : BV:32
11 : Lambda642 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda643 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
24 : eq(19, 23) : BOOL
25 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
26 : eq(19, 25) : BOOL
27 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1777298643 ] -> 4, [ 1777298644; 1777298647 ] -> 0, [ 1777298648; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1524960039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1524960040; 1524960043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1524960044; 1777298643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1777298644; 1777298647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1777298648; 3349973779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3349973780; 3349973783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3349973784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1524960040 { 0x5ae50b28 +1.78940296e54 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3349973780 { 0xc7ac8b14 -944993516 -1.34799432e16 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3349973780 { 0xc7ac8b14 -944993516 -1.34799432e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3349973783 { 0xc7ac8b17 -944993513 -1.34799468e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1524960040 { 0x5ae50b28 +1.78940296e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1524960043 { 0x5ae50b2b +1.78940331e54 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda612 : BV:32
2 : Lambda613 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda617 : BV:32
2 : Lambda618 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1609363582
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce179.num_edges_traversed2
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce179 578ae154baeaf8cabb3fd67c4c41fcb
=input.spec-%var-x-1
1 : Lambda739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda742 : BV:32
17 : Lambda740 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda741 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda742 : BV:32
17 : Lambda740 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda741 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2398 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2399 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
14 : eq(9, 13) : BOOL
15 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
16 : eq(9, 15) : BOOL
17 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
18 : eq(9, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 12, 19) : BV:8
21 : ite(16, 12, 20) : BV:8
22 : ite(14, 12, 21) : BV:8
23 : ite(11, 12, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : eq(25, 15) : BOOL
29 : eq(25, 17) : BOOL
30 : ite(29, 12, 19) : BV:8
31 : ite(28, 12, 30) : BV:8
32 : ite(27, 12, 31) : BV:8
33 : ite(26, 12, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 17) : BOOL
40 : ite(39, 12, 19) : BV:8
41 : ite(38, 12, 40) : BV:8
42 : ite(37, 12, 41) : BV:8
43 : ite(36, 12, 42) : BV:8
44 : bvadd(7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 17) : BOOL
49 : ite(48, 12, 19) : BV:8
50 : ite(47, 12, 49) : BV:8
51 : ite(46, 12, 50) : BV:8
52 : ite(45, 12, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(4, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(3, 54) : MAP[BV:32 -> BV:32]
56 : sym_const(55) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1618590963 ] -> 0, [ 1618590964; 1618590967 ] -> 255, [ 1618590968; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 922566007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 922566008; 922566011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 922566012; 1618590963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1618590964; 1618590967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1618590968; 1621415375 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1621415376; 1621415379 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1621415380; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1621415376 { 0x60a4d5d0 +1.28777503e66 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 922566008 { 0x36fd3d78 +1.97843837e238 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1778129394 { 0x69fc19f2 +1.96954178e84 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2394 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda2395 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
18 : eq(11, 17) : BOOL
19 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
20 : eq(11, 19) : BOOL
21 : 0 { 0x0 } : BV:8
22 : ite(20, 14, 21) : BV:8
23 : ite(18, 14, 22) : BV:8
24 : ite(16, 14, 23) : BV:8
25 : ite(13, 14, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : eq(27, 17) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 14, 21) : BV:8
33 : ite(30, 14, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 14, 34) : BV:8
36 : bvadd(1, 9, 10) : BV:32
37 : eq(36, 12) : BOOL
38 : eq(36, 15) : BOOL
39 : eq(36, 17) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 14, 21) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 14, 42) : BV:8
44 : ite(37, 14, 43) : BV:8
45 : bvadd(9, 10) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 14, 21) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : ite(47, 14, 51) : BV:8
53 : ite(46, 14, 52) : BV:8
54 : bvconcat(25, 35, 44, 53) : BV:32
55 : lambda(6, 54) : FUNCTION[BV:32 -> BV:32]
56 : map(5, 55) : MAP[BV:32 -> BV:32]
57 : sum(1, 2, 56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
58 : sym_const(57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2402 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda2403 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
14 : eq(9, 13) : BOOL
15 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
16 : eq(9, 15) : BOOL
17 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
18 : eq(9, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 12, 19) : BV:8
21 : ite(16, 12, 20) : BV:8
22 : ite(14, 12, 21) : BV:8
23 : ite(11, 12, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : eq(25, 15) : BOOL
29 : eq(25, 17) : BOOL
30 : ite(29, 12, 19) : BV:8
31 : ite(28, 12, 30) : BV:8
32 : ite(27, 12, 31) : BV:8
33 : ite(26, 12, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 17) : BOOL
40 : ite(39, 12, 19) : BV:8
41 : ite(38, 12, 40) : BV:8
42 : ite(37, 12, 41) : BV:8
43 : ite(36, 12, 42) : BV:8
44 : bvadd(7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 17) : BOOL
49 : ite(48, 12, 19) : BV:8
50 : ite(47, 12, 49) : BV:8
51 : ite(46, 12, 50) : BV:8
52 : ite(45, 12, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(4, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(3, 54) : MAP[BV:32 -> BV:32]
56 : sym_const(55) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778129394 { 0x69fc19f2 +1.96954178e84 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 922566008 { 0x36fd3d78 +1.97843837e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 922566011 { 0x36fd3d7b +1.97843873e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1621415376 { 0x60a4d5d0 +1.28777503e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1621415379 { 0x60a4d5d3 +1.28777539e66 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda708 : BV:32
2 : Lambda709 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda713 : BV:32
2 : Lambda714 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1106379559
=counter_example_end
=global nodece 12 num_edges_traversed 2
=global nodece 12 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce201.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce201 29a50663275bc5ddfdef1363b17cb
=input.spec-%var-x-1
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2382 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2383 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 21247 ] -> 128, [ 21248; 21251 ] -> 0, [ 21252; 301993999 ] -> 128, [ 301994000; 301994000 ] -> 16, [ 301994001; 1344291779 ] -> 128, [ 1344291780; 1344291782 ] -> 0, [ 1344291783; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 21247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 21248; 21251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 21252; 301993999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301994000; 301994003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301994004; 1344291779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1344291780; 1344291783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1344291784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2378 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2379 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : bvadd(30, 32, 5) : BV:32
34 : 21251 { 0x5303 +1.253331e129 } : BV:32
35 : eq(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 21248 { 0x5300 +1.253295e129 } : BV:32
38 : eq(33, 37) : BOOL
39 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
40 : eq(33, 39) : BOOL
41 : 21250 { 0x5302 +1.253319e129 } : BV:32
42 : eq(33, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(33, 43) : BOOL
45 : eq(33, 5) : BOOL
46 : 21249 { 0x5301 +1.253307e129 } : BV:32
47 : eq(33, 46) : BOOL
48 : eq(33, 30) : BOOL
49 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
50 : eq(33, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
53 : eq(33, 52) : BOOL
54 : eq(33, 1) : BOOL
55 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
56 : eq(33, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : ite(56, 36, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 36, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 36, 61) : BV:8
63 : ite(47, 36, 62) : BV:8
64 : ite(45, 36, 63) : BV:8
65 : ite(44, 36, 64) : BV:8
66 : ite(42, 36, 65) : BV:8
67 : ite(40, 36, 66) : BV:8
68 : ite(38, 36, 67) : BV:8
69 : ite(35, 36, 68) : BV:8
70 : bvadd(43, 32, 5) : BV:32
71 : eq(70, 34) : BOOL
72 : eq(70, 37) : BOOL
73 : eq(70, 39) : BOOL
74 : eq(70, 41) : BOOL
75 : eq(70, 43) : BOOL
76 : eq(70, 5) : BOOL
77 : eq(70, 46) : BOOL
78 : eq(70, 30) : BOOL
79 : eq(70, 49) : BOOL
80 : eq(70, 52) : BOOL
81 : eq(70, 1) : BOOL
82 : eq(70, 55) : BOOL
83 : ite(82, 36, 57) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 51, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 36, 88) : BV:8
90 : ite(75, 36, 89) : BV:8
91 : ite(74, 36, 90) : BV:8
92 : ite(73, 36, 91) : BV:8
93 : ite(72, 36, 92) : BV:8
94 : ite(71, 36, 93) : BV:8
95 : bvadd(1, 32, 5) : BV:32
96 : eq(95, 34) : BOOL
97 : eq(95, 37) : BOOL
98 : eq(95, 39) : BOOL
99 : eq(95, 41) : BOOL
100 : eq(95, 43) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 30) : BOOL
104 : eq(95, 49) : BOOL
105 : eq(95, 52) : BOOL
106 : eq(95, 1) : BOOL
107 : eq(95, 55) : BOOL
108 : ite(107, 36, 57) : BV:8
109 : ite(106, 36, 108) : BV:8
110 : ite(105, 36, 109) : BV:8
111 : ite(104, 51, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 36, 112) : BV:8
114 : ite(101, 36, 113) : BV:8
115 : ite(100, 36, 114) : BV:8
116 : ite(99, 36, 115) : BV:8
117 : ite(98, 36, 116) : BV:8
118 : ite(97, 36, 117) : BV:8
119 : ite(96, 36, 118) : BV:8
120 : bvadd(32, 5) : BV:32
121 : eq(120, 34) : BOOL
122 : eq(120, 37) : BOOL
123 : eq(120, 39) : BOOL
124 : eq(120, 41) : BOOL
125 : eq(120, 43) : BOOL
126 : eq(120, 5) : BOOL
127 : eq(120, 46) : BOOL
128 : eq(120, 30) : BOOL
129 : eq(120, 49) : BOOL
130 : eq(120, 52) : BOOL
131 : eq(120, 1) : BOOL
132 : eq(120, 55) : BOOL
133 : ite(132, 36, 57) : BV:8
134 : ite(131, 36, 133) : BV:8
135 : ite(130, 36, 134) : BV:8
136 : ite(129, 51, 135) : BV:8
137 : ite(128, 36, 136) : BV:8
138 : ite(127, 36, 137) : BV:8
139 : ite(126, 36, 138) : BV:8
140 : ite(125, 36, 139) : BV:8
141 : ite(124, 36, 140) : BV:8
142 : ite(123, 36, 141) : BV:8
143 : ite(122, 36, 142) : BV:8
144 : ite(121, 36, 143) : BV:8
145 : bvconcat(69, 94, 119, 144) : BV:32
146 : ite(29, 5, 145) : BV:32
147 : lambda(27, 146) : FUNCTION[BV:32 -> BV:32]
148 : map(26, 147) : MAP[BV:32 -> BV:32]
149 : sum(1, 2, 148) : SUM[UNIT,MAP[BV:32 -> BV:32]]
150 : sym_const(149) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2386 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2387 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1344291783 { 0x502043c7 +1.25206840e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 21251 { 0x5303 +1.253331e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301994003 { 0x12001013 +1.49054e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda790 : BV:32
2 : Lambda791 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda795 : BV:32
2 : Lambda796 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda798 : BV:32
2 : Lambda799 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda802 : BV:32
2 : Lambda803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3216037387
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce223.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce223 39b4232a0813c9edebe27845623506e
=input.spec-%var-x-1
1 : Lambda904 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda907 : BV:32
11 : Lambda905 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda906 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 6 { 0x6 +1.71e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 5 { 0x5 +1.59e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : eq(18, 15) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 21, 27) : BV:8
29 : ite(25, 21, 28) : BV:8
30 : ite(23, 21, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvadd(32, 17, 2) : BV:32
34 : eq(33, 19) : BOOL
35 : eq(33, 22) : BOOL
36 : eq(33, 24) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 21, 27) : BV:8
39 : ite(36, 21, 38) : BV:8
40 : ite(35, 21, 39) : BV:8
41 : ite(34, 21, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 17, 2) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 21, 27) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 2) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 15) : BOOL
57 : ite(56, 21, 27) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(31, 41, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 15) : BOOL
67 : ite(66, 21, 27) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(32, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 15) : BOOL
76 : ite(75, 21, 27) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(42, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 15) : BOOL
85 : ite(84, 21, 27) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 15) : BOOL
94 : ite(93, 21, 27) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : lambda(10, 100) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
102 : map(9, 101) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
103 : sym_const(102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda904 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda907 : BV:32
11 : Lambda905 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda906 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 6 { 0x6 +1.71e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 5 { 0x5 +1.59e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : eq(18, 15) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 21, 27) : BV:8
29 : ite(25, 21, 28) : BV:8
30 : ite(23, 21, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvadd(32, 17, 2) : BV:32
34 : eq(33, 19) : BOOL
35 : eq(33, 22) : BOOL
36 : eq(33, 24) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 21, 27) : BV:8
39 : ite(36, 21, 38) : BV:8
40 : ite(35, 21, 39) : BV:8
41 : ite(34, 21, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 17, 2) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 21, 27) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 2) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 15) : BOOL
57 : ite(56, 21, 27) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(31, 41, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 15) : BOOL
67 : ite(66, 21, 27) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(32, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 15) : BOOL
76 : ite(75, 21, 27) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(42, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 15) : BOOL
85 : ite(84, 21, 27) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 15) : BOOL
94 : ite(93, 21, 27) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : lambda(10, 100) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
102 : map(9, 101) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
103 : sym_const(102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 7 ] -> 255, [ 8; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8; 144547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 144548; 144551 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 144552; 8297615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8297616; 8297619 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8297620; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8297616 { 0x7e9c90 +1.98915290e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 144548 { 0x234a4 +1.1723146e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8297616 { 0x7e9c90 +1.98915290e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 8297619 { 0x7e9c93 +1.98915326e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 144548 { 0x234a4 +1.1723146e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 144551 { 0x234a7 +1.1723182e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda875 : BV:32
2 : Lambda876 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : eq(8, 4) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 11, 17) : BV:8
19 : ite(15, 11, 18) : BV:8
20 : ite(13, 11, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 14) : BOOL
27 : eq(23, 4) : BOOL
28 : ite(27, 11, 17) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 6, 7) : BV:32
34 : eq(33, 9) : BOOL
35 : eq(33, 12) : BOOL
36 : eq(33, 14) : BOOL
37 : eq(33, 4) : BOOL
38 : ite(37, 11, 17) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : ite(35, 11, 39) : BV:8
41 : ite(34, 11, 40) : BV:8
42 : bvadd(6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 14) : BOOL
46 : eq(42, 4) : BOOL
47 : ite(46, 11, 17) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : bvconcat(21, 31, 41, 50) : BV:32
52 : bvadd(3, 5, 51) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 4) : BOOL
57 : ite(56, 11, 17) : BV:8
58 : ite(55, 11, 57) : BV:8
59 : ite(54, 11, 58) : BV:8
60 : ite(53, 11, 59) : BV:8
61 : bvadd(22, 5, 51) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 14) : BOOL
65 : eq(61, 4) : BOOL
66 : ite(65, 11, 17) : BV:8
67 : ite(64, 11, 66) : BV:8
68 : ite(63, 11, 67) : BV:8
69 : ite(62, 11, 68) : BV:8
70 : bvadd(32, 5, 51) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 4) : BOOL
75 : ite(74, 11, 17) : BV:8
76 : ite(73, 11, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : bvadd(5, 51) : BV:32
80 : eq(79, 9) : BOOL
81 : eq(79, 12) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 4) : BOOL
84 : ite(83, 11, 17) : BV:8
85 : ite(82, 11, 84) : BV:8
86 : ite(81, 11, 85) : BV:8
87 : ite(80, 11, 86) : BV:8
88 : bvconcat(60, 69, 78, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda880 : BV:32
2 : Lambda881 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : eq(8, 4) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 11, 17) : BV:8
19 : ite(15, 11, 18) : BV:8
20 : ite(13, 11, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 14) : BOOL
27 : eq(23, 4) : BOOL
28 : ite(27, 11, 17) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 6, 7) : BV:32
34 : eq(33, 9) : BOOL
35 : eq(33, 12) : BOOL
36 : eq(33, 14) : BOOL
37 : eq(33, 4) : BOOL
38 : ite(37, 11, 17) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : ite(35, 11, 39) : BV:8
41 : ite(34, 11, 40) : BV:8
42 : bvadd(6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 14) : BOOL
46 : eq(42, 4) : BOOL
47 : ite(46, 11, 17) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : bvconcat(21, 31, 41, 50) : BV:32
52 : bvadd(3, 5, 51) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 4) : BOOL
57 : ite(56, 11, 17) : BV:8
58 : ite(55, 11, 57) : BV:8
59 : ite(54, 11, 58) : BV:8
60 : ite(53, 11, 59) : BV:8
61 : bvadd(22, 5, 51) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 14) : BOOL
65 : eq(61, 4) : BOOL
66 : ite(65, 11, 17) : BV:8
67 : ite(64, 11, 66) : BV:8
68 : ite(63, 11, 67) : BV:8
69 : ite(62, 11, 68) : BV:8
70 : bvadd(32, 5, 51) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 4) : BOOL
75 : ite(74, 11, 17) : BV:8
76 : ite(73, 11, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : bvadd(5, 51) : BV:32
80 : eq(79, 9) : BOOL
81 : eq(79, 12) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 4) : BOOL
84 : ite(83, 11, 17) : BV:8
85 : ite(82, 11, 84) : BV:8
86 : ite(81, 11, 85) : BV:8
87 : ite(80, 11, 86) : BV:8
88 : bvconcat(60, 69, 78, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2015713600
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3v487.ce1289.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce1289 488f216510171823deda6cfa751d8de2
=input.spec-%var-x-1
1 : Lambda2213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2216 : BV:32
18 : Lambda2214 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2215 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2221 : BV:32
18 : Lambda2219 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2220 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2362 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2363 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 4015 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4016; 4019 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4020; 67633731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67633732; 67633735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67633736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2358 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 65535 { 0xffff +1.781238e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 65536 { 0x10000 +1.781250e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 65537 { 0x10001 +1.781261e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2359 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2366 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2367 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4019 { 0xfb3 +1.47910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67633735 { 0x4080247 +1.6256949e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda2173 : BV:32
2 : Lambda2174 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda2182 : BV:32
2 : Lambda2183 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2186 : BV:32
2 : Lambda2187 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2167834873
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce1290.num_edges_traversed0
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1290 d83e978143897cf9b82f7ae17e2cf8dc
=input.spec-%var-x-1
1 : Lambda2233 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2236 : BV:32
18 : Lambda2234 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda2235 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 100 { 0x64 } : BV:8
28 : eq(25, 21) : BOOL
29 : 220 { 0xdc -36 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 224 { 0xe0 -32 } : BV:8
33 : 251 { 0xfb -5 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2240 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2243 : BV:32
18 : Lambda2241 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda2242 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 100 { 0x64 } : BV:8
28 : eq(25, 21) : BOOL
29 : 220 { 0xdc -36 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 224 { 0xe0 -32 } : BV:8
33 : 251 { 0xfb -5 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 100, [ 1; 1 ] -> 224, [ 2; 2 ] -> 251, [ 3; 3 ] -> 220, [ 4; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 965663723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 965663724; 965663727 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 965663728; 1449050095 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1449050096; 1449050099 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1449050100; 2867653343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2867653344; 2867653347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2867653348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 965663724 { 0x398edbec +1.11608648e244 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1449050096 { 0x565ebff0 +1.74023246e45 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2867653344 { 0xaaeceae0 -1427313952 -1.85091781e214 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1449050096 { 0x565ebff0 +1.74023246e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1449050099 { 0x565ebff3 +1.74023282e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2867653344 { 0xaaeceae0 -1427313952 -1.85091781e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2867653347 { 0xaaeceae3 -1427313949 -1.85091817e214 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 965663724 { 0x398edbec +1.11608648e244 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 965663727 { 0x398edbef +1.11608684e244 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda2194 : BV:32
2 : Lambda2195 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 100 { 0x64 } : BV:8
11 : eq(7, 3) : BOOL
12 : 220 { 0xdc -36 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 224 { 0xe0 -32 } : BV:8
16 : 251 { 0xfb -5 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2196 : BV:32
2 : Lambda2197 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 100 { 0x64 } : BV:8
11 : eq(7, 3) : BOOL
12 : 220 { 0xdc -36 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 224 { 0xe0 -32 } : BV:8
16 : 251 { 0xfb -5 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
660659624
=counter_example_end
=global nodece 16 num_edges_traversed 0
=global nodece 16 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce3970.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce3970 1c7f42112ae0eb2256b1dba2d29d372b
=input.spec-%var-x-1
1 : Lambda7858 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7861 : BV:32
18 : Lambda7859 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda7860 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : bvmul(37, 17) : BV:32
77 : bvadd(34, 76) : BV:32
78 : eq(77, 2) : BOOL
79 : 254 { 0xfe -2 } : BV:8
80 : eq(77, 34) : BOOL
81 : 253 { 0xfd -3 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(77, 82) : BOOL
84 : 2 { 0x2 +1.23e129 } : BV:32
85 : eq(77, 84) : BOOL
86 : 90 { 0x5a } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 81, 88) : BV:8
90 : ite(80, 81, 89) : BV:8
91 : ite(78, 79, 90) : BV:8
92 : bvadd(84, 76) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 34) : BOOL
95 : eq(92, 82) : BOOL
96 : eq(92, 84) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 81, 97) : BV:8
99 : ite(94, 81, 98) : BV:8
100 : ite(93, 79, 99) : BV:8
101 : bvadd(82, 76) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 34) : BOOL
104 : eq(101, 82) : BOOL
105 : eq(101, 84) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 81, 106) : BV:8
108 : ite(103, 81, 107) : BV:8
109 : ite(102, 79, 108) : BV:8
110 : eq(76, 2) : BOOL
111 : eq(76, 34) : BOOL
112 : eq(76, 82) : BOOL
113 : eq(76, 84) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 81, 114) : BV:8
116 : ite(111, 81, 115) : BV:8
117 : ite(110, 79, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(34, 75, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 34) : BOOL
122 : eq(119, 82) : BOOL
123 : eq(119, 84) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 81, 124) : BV:8
126 : ite(121, 81, 125) : BV:8
127 : ite(120, 79, 126) : BV:8
128 : bvadd(84, 75, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 34) : BOOL
131 : eq(128, 82) : BOOL
132 : eq(128, 84) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 81, 133) : BV:8
135 : ite(130, 81, 134) : BV:8
136 : ite(129, 79, 135) : BV:8
137 : bvadd(82, 75, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 34) : BOOL
140 : eq(137, 82) : BOOL
141 : eq(137, 84) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 81, 142) : BV:8
144 : ite(139, 81, 143) : BV:8
145 : ite(138, 79, 144) : BV:8
146 : bvadd(75, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 34) : BOOL
149 : eq(146, 82) : BOOL
150 : eq(146, 84) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 81, 151) : BV:8
153 : ite(148, 81, 152) : BV:8
154 : ite(147, 79, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(55, 2, 155) : BV:32
157 : ite(74, 155, 156) : BV:32
158 : ite(55, 2, 157) : BV:32
159 : lambda(52, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(51, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda7863 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7866 : BV:32
18 : Lambda7864 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda7865 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : bvmul(37, 17) : BV:32
58 : bvadd(34, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : 254 { 0xfe -2 } : BV:8
61 : eq(58, 34) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(58, 63) : BOOL
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : eq(58, 65) : BOOL
67 : 90 { 0x5a } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 62, 69) : BV:8
71 : ite(61, 62, 70) : BV:8
72 : ite(59, 60, 71) : BV:8
73 : bvadd(65, 57) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 34) : BOOL
76 : eq(73, 63) : BOOL
77 : eq(73, 65) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 62, 78) : BV:8
80 : ite(75, 62, 79) : BV:8
81 : ite(74, 60, 80) : BV:8
82 : bvadd(63, 57) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 34) : BOOL
85 : eq(82, 63) : BOOL
86 : eq(82, 65) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 62, 88) : BV:8
90 : ite(83, 60, 89) : BV:8
91 : eq(57, 2) : BOOL
92 : eq(57, 34) : BOOL
93 : eq(57, 63) : BOOL
94 : eq(57, 65) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 62, 95) : BV:8
97 : ite(92, 62, 96) : BV:8
98 : ite(91, 60, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(34, 56, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 34) : BOOL
103 : eq(100, 63) : BOOL
104 : eq(100, 65) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 62, 105) : BV:8
107 : ite(102, 62, 106) : BV:8
108 : ite(101, 60, 107) : BV:8
109 : bvadd(65, 56, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 34) : BOOL
112 : eq(109, 63) : BOOL
113 : eq(109, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 62, 114) : BV:8
116 : ite(111, 62, 115) : BV:8
117 : ite(110, 60, 116) : BV:8
118 : bvadd(63, 56, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 34) : BOOL
121 : eq(118, 63) : BOOL
122 : eq(118, 65) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 62, 123) : BV:8
125 : ite(120, 62, 124) : BV:8
126 : ite(119, 60, 125) : BV:8
127 : bvadd(56, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 34) : BOOL
130 : eq(127, 63) : BOOL
131 : eq(127, 65) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 62, 132) : BV:8
134 : ite(129, 62, 133) : BV:8
135 : ite(128, 60, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(55, 2, 136) : BV:32
138 : lambda(52, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(51, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9061 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9062 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvmul(8, 25) : BV:32
29 : 4250598910 { 0xfd5afdfe -44368386 -1.71087622e123 } : BV:32
30 : bvadd(5, 28, 29) : BV:32
31 : eq(30, 3) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : eq(30, 5) : BOOL
34 : 253 { 0xfd -3 } : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : eq(30, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : eq(30, 37) : BOOL
39 : 90 { 0x5a } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 34, 41) : BV:8
43 : ite(33, 34, 42) : BV:8
44 : ite(31, 32, 43) : BV:8
45 : bvadd(37, 28, 29) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 5) : BOOL
48 : eq(45, 35) : BOOL
49 : eq(45, 37) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 34, 51) : BV:8
53 : ite(46, 32, 52) : BV:8
54 : bvadd(35, 28, 29) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 5) : BOOL
57 : eq(54, 35) : BOOL
58 : eq(54, 37) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 34, 59) : BV:8
61 : ite(56, 34, 60) : BV:8
62 : ite(55, 32, 61) : BV:8
63 : bvadd(28, 29) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 5) : BOOL
66 : eq(63, 35) : BOOL
67 : eq(63, 37) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 34, 68) : BV:8
70 : ite(65, 34, 69) : BV:8
71 : ite(64, 32, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(27, 3, 72) : BV:32
74 : lambda(25, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(24, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 254, [ 1; 1 ] -> 253, [ 2; 2 ] -> 90, [ 3; 3 ] -> 253, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1988873635 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1988873636; 1988873639 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1988873640; 2010853167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2010853168; 2010853171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2010853172; 2024608171 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2024608172; 2024608175 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2024608176; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1988873636 { 0x768bcda4 +1.9221315e110 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2024608172 { 0x78ad11ac +1.35210180e114 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2010853168 { 0x77db2f30 +1.71237754e112 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9057 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda9058 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvmul(10, 27) : BV:32
31 : 4250598910 { 0xfd5afdfe -44368386 -1.71087622e123 } : BV:32
32 : bvadd(7, 30, 31) : BV:32
33 : eq(32, 5) : BOOL
34 : 254 { 0xfe -2 } : BV:8
35 : eq(32, 7) : BOOL
36 : 253 { 0xfd -3 } : BV:8
37 : eq(32, 1) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(32, 38) : BOOL
40 : 90 { 0x5a } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 36, 42) : BV:8
44 : ite(35, 36, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : bvadd(38, 30, 31) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 7) : BOOL
49 : eq(46, 1) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 40, 41) : BV:8
52 : ite(49, 36, 51) : BV:8
53 : ite(48, 36, 52) : BV:8
54 : ite(47, 34, 53) : BV:8
55 : bvadd(1, 30, 31) : BV:32
56 : eq(55, 5) : BOOL
57 : eq(55, 7) : BOOL
58 : eq(55, 1) : BOOL
59 : eq(55, 38) : BOOL
60 : ite(59, 40, 41) : BV:8
61 : ite(58, 36, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : bvadd(30, 31) : BV:32
65 : eq(64, 5) : BOOL
66 : eq(64, 7) : BOOL
67 : eq(64, 1) : BOOL
68 : eq(64, 38) : BOOL
69 : ite(68, 40, 41) : BV:8
70 : ite(67, 36, 69) : BV:8
71 : ite(66, 36, 70) : BV:8
72 : ite(65, 34, 71) : BV:8
73 : bvconcat(45, 54, 63, 72) : BV:32
74 : ite(29, 5, 73) : BV:32
75 : lambda(27, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(26, 75) : MAP[BV:32 -> BV:32]
77 : sum(1, 2, 76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
78 : sym_const(77) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9065 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9066 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvmul(8, 25) : BV:32
29 : 4250598910 { 0xfd5afdfe -44368386 -1.71087622e123 } : BV:32
30 : bvadd(5, 28, 29) : BV:32
31 : eq(30, 3) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : eq(30, 5) : BOOL
34 : 253 { 0xfd -3 } : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : eq(30, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : eq(30, 37) : BOOL
39 : 90 { 0x5a } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 34, 41) : BV:8
43 : ite(33, 34, 42) : BV:8
44 : ite(31, 32, 43) : BV:8
45 : bvadd(37, 28, 29) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 5) : BOOL
48 : eq(45, 35) : BOOL
49 : eq(45, 37) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 34, 50) : BV:8
52 : ite(47, 34, 51) : BV:8
53 : ite(46, 32, 52) : BV:8
54 : bvadd(35, 28, 29) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 5) : BOOL
57 : eq(54, 35) : BOOL
58 : eq(54, 37) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 34, 59) : BV:8
61 : ite(56, 34, 60) : BV:8
62 : ite(55, 32, 61) : BV:8
63 : bvadd(28, 29) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 5) : BOOL
66 : eq(63, 35) : BOOL
67 : eq(63, 37) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 34, 68) : BV:8
70 : ite(65, 34, 69) : BV:8
71 : ite(64, 32, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(27, 3, 72) : BV:32
74 : lambda(25, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(24, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2024608172 { 0x78ad11ac +1.35210180e114 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2024608175 { 0x78ad11af +1.35210216e114 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2010853168 { 0x77db2f30 +1.71237754e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2010853171 { 0x77db2f33 +1.71237790e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1988873636 { 0x768bcda4 +1.9221315e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1988873639 { 0x768bcda7 +1.9221351e110 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda7815 : BV:32
2 : Lambda7816 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870913 { 0x20000001 +1.11e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 536870912 { 0x20000000 +1.0e193 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda7820 : BV:32
2 : Lambda7821 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 536870913 { 0x20000001 +1.11e193 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : bvmul(33, 1) : BV:32
50 : bvadd(30, 49) : BV:32
51 : eq(50, 3) : BOOL
52 : 254 { 0xfe -2 } : BV:8
53 : eq(50, 30) : BOOL
54 : 253 { 0xfd -3 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(50, 55) : BOOL
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(50, 57) : BOOL
59 : 90 { 0x5a } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 54, 61) : BV:8
63 : ite(53, 54, 62) : BV:8
64 : ite(51, 52, 63) : BV:8
65 : bvadd(57, 49) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 30) : BOOL
68 : eq(65, 55) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 54, 70) : BV:8
72 : ite(67, 54, 71) : BV:8
73 : ite(66, 52, 72) : BV:8
74 : bvadd(55, 49) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 30) : BOOL
77 : eq(74, 55) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 54, 79) : BV:8
81 : ite(76, 54, 80) : BV:8
82 : ite(75, 52, 81) : BV:8
83 : eq(49, 3) : BOOL
84 : eq(49, 30) : BOOL
85 : eq(49, 55) : BOOL
86 : eq(49, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 54, 87) : BV:8
89 : ite(84, 54, 88) : BV:8
90 : ite(83, 52, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(30, 48, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 30) : BOOL
95 : eq(92, 55) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 54, 97) : BV:8
99 : ite(94, 54, 98) : BV:8
100 : ite(93, 52, 99) : BV:8
101 : bvadd(57, 48, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 30) : BOOL
104 : eq(101, 55) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 54, 106) : BV:8
108 : ite(103, 54, 107) : BV:8
109 : ite(102, 52, 108) : BV:8
110 : bvadd(55, 48, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 30) : BOOL
113 : eq(110, 55) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 54, 115) : BV:8
117 : ite(112, 54, 116) : BV:8
118 : ite(111, 52, 117) : BV:8
119 : bvadd(48, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 30) : BOOL
122 : eq(119, 55) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 54, 124) : BV:8
126 : ite(121, 54, 125) : BV:8
127 : ite(120, 52, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(47, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda7826 : BV:32
2 : Lambda7827 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870913 { 0x20000001 +1.11e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 536870912 { 0x20000000 +1.0e193 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda7822 : BV:32
2 : Lambda7823 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 254 { 0xfe -2 } : BV:8
14 : eq(11, 7) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 90 { 0x5a } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(17, 15, 22) : BV:8
24 : ite(14, 15, 23) : BV:8
25 : ite(12, 13, 24) : BV:8
26 : bvadd(18, 10) : BV:32
27 : eq(26, 3) : BOOL
28 : eq(26, 7) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 20, 21) : BV:8
32 : ite(29, 15, 31) : BV:8
33 : ite(28, 15, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : bvadd(16, 10) : BV:32
36 : eq(35, 3) : BOOL
37 : eq(35, 7) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 18) : BOOL
40 : ite(39, 20, 21) : BV:8
41 : ite(38, 15, 40) : BV:8
42 : ite(37, 15, 41) : BV:8
43 : ite(36, 13, 42) : BV:8
44 : eq(10, 3) : BOOL
45 : eq(10, 7) : BOOL
46 : eq(10, 16) : BOOL
47 : eq(10, 18) : BOOL
48 : ite(47, 20, 21) : BV:8
49 : ite(46, 15, 48) : BV:8
50 : ite(45, 15, 49) : BV:8
51 : ite(44, 13, 50) : BV:8
52 : bvconcat(25, 34, 43, 51) : BV:32
53 : bvadd(7, 9, 52) : BV:32
54 : eq(53, 3) : BOOL
55 : eq(53, 7) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 18) : BOOL
58 : ite(57, 20, 21) : BV:8
59 : ite(56, 15, 58) : BV:8
60 : ite(55, 15, 59) : BV:8
61 : ite(54, 13, 60) : BV:8
62 : bvadd(18, 9, 52) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 7) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 18) : BOOL
67 : ite(66, 20, 21) : BV:8
68 : ite(65, 15, 67) : BV:8
69 : ite(64, 15, 68) : BV:8
70 : ite(63, 13, 69) : BV:8
71 : bvadd(16, 9, 52) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 7) : BOOL
74 : eq(71, 16) : BOOL
75 : eq(71, 18) : BOOL
76 : ite(75, 20, 21) : BV:8
77 : ite(74, 15, 76) : BV:8
78 : ite(73, 15, 77) : BV:8
79 : ite(72, 13, 78) : BV:8
80 : bvadd(9, 52) : BV:32
81 : eq(80, 3) : BOOL
82 : eq(80, 7) : BOOL
83 : eq(80, 16) : BOOL
84 : eq(80, 18) : BOOL
85 : ite(84, 20, 21) : BV:8
86 : ite(83, 15, 85) : BV:8
87 : ite(82, 15, 86) : BV:8
88 : ite(81, 13, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : ite(6, 3, 89) : BV:32
91 : lambda(1, 2, 90) : FUNCTION[BV:32,BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3123825932
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce4008.num_edges_traversed1
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce4008 95d3b158f4e885d1583f6982f6165af2
=input.spec-%var-x-1
1 : Lambda7963 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7966 : BV:32
18 : Lambda7964 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7965 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 11 { 0xb +1.131e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 247 { 0xf7 -9 } : BV:8
29 : 10 { 0xa +1.119e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 156 { 0x9c -100 } : BV:8
32 : 9 { 0x9 +1.107e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 120 { 0x78 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 8 { 0x8 +1.95e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda7970 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7973 : BV:32
18 : Lambda7971 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7972 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 11 { 0xb +1.131e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 247 { 0xf7 -9 } : BV:8
29 : 10 { 0xa +1.119e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 156 { 0x9c -100 } : BV:8
32 : 9 { 0x9 +1.107e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 120 { 0x78 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 8 { 0x8 +1.95e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9099 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda9100 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4154244984 { 0xf79cbf78 -140722312 -1.22459316e112 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 11 { 0xb +1.131e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 247 { 0xf7 -9 } : BV:8
13 : 10 { 0xa +1.119e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : 9 { 0x9 +1.107e129 } : BV:32
17 : eq(9, 16) : BOOL
18 : 191 { 0xbf -65 } : BV:8
19 : 120 { 0x78 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 8 ] -> 120, [ 9; 9 ] -> 191, [ 10; 10 ] -> 156, [ 11; 11 ] -> 247, [ 12; 4294967295 ] -> 120, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2176729279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2176729280; 2176729283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2176729284; 4081843187 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4081843188; 4081843191 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4081843192; 4269680595 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4269680596; 4269680599 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4269680600; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4269680596 { 0xfe7e27d4 -25286700 -1.98559045e125 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4081843188 { 0xf34bfbf4 -213124108 -1.59362649e103 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2176729280 { 0x81be40c0 -2118238016 -1.48635101e132 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9095 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda9096 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 4154244984 { 0xf79cbf78 -140722312 -1.22459316e112 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 11 { 0xb +1.131e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 247 { 0xf7 -9 } : BV:8
15 : 10 { 0xa +1.119e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 156 { 0x9c -100 } : BV:8
18 : 9 { 0x9 +1.107e129 } : BV:32
19 : eq(11, 18) : BOOL
20 : 191 { 0xbf -65 } : BV:8
21 : 120 { 0x78 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : eq(26, 18) : BOOL
30 : ite(29, 20, 21) : BV:8
31 : ite(28, 17, 30) : BV:8
32 : ite(27, 14, 31) : BV:8
33 : bvadd(1, 9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : ite(36, 20, 21) : BV:8
38 : ite(35, 17, 37) : BV:8
39 : ite(34, 14, 38) : BV:8
40 : bvadd(9, 10) : BV:32
41 : eq(40, 12) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : ite(43, 20, 21) : BV:8
45 : ite(42, 17, 44) : BV:8
46 : ite(41, 14, 45) : BV:8
47 : bvconcat(24, 32, 39, 46) : BV:32
48 : lambda(6, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(5, 48) : MAP[BV:32 -> BV:32]
50 : sum(1, 2, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9103 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda9104 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4154244984 { 0xf79cbf78 -140722312 -1.22459316e112 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 11 { 0xb +1.131e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 247 { 0xf7 -9 } : BV:8
13 : 10 { 0xa +1.119e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : 9 { 0x9 +1.107e129 } : BV:32
17 : eq(9, 16) : BOOL
18 : 191 { 0xbf -65 } : BV:8
19 : 120 { 0x78 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4081843188 { 0xf34bfbf4 -213124108 -1.59362649e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4081843191 { 0xf34bfbf7 -213124105 -1.59362685e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2176729280 { 0x81be40c0 -2118238016 -1.48635101e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2176729283 { 0x81be40c3 -2118238013 -1.48635137e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4269680596 { 0xfe7e27d4 -25286700 -1.98559045e125 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4269680599 { 0xfe7e27d7 -25286697 -1.98559081e125 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda7925 : BV:32
2 : Lambda7926 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 11 { 0xb +1.131e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 247 { 0xf7 -9 } : BV:8
11 : 10 { 0xa +1.119e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 156 { 0x9c -100 } : BV:8
14 : 9 { 0x9 +1.107e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 191 { 0xbf -65 } : BV:8
17 : 120 { 0x78 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 8 { 0x8 +1.95e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda7927 : BV:32
2 : Lambda7928 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 11 { 0xb +1.131e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 247 { 0xf7 -9 } : BV:8
11 : 10 { 0xa +1.119e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 156 { 0x9c -100 } : BV:8
14 : 9 { 0x9 +1.107e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 191 { 0xbf -65 } : BV:8
17 : 120 { 0x78 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 8 { 0x8 +1.95e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2340562054
=counter_example_end
=global nodece 18 num_edges_traversed 1
=global nodece 18 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3v487.ce4009.num_edges_traversed1
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce4009 4e566cc2d6e1c734307fdd8b73fdad7
=input.spec-%var-x-1
1 : Lambda7985 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7988 : BV:32
18 : Lambda7986 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 8193 { 0x2001 +1.97668e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 32767 { 0x7fff +1.390613e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32769 { 0x8001 +1.390636e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 32768 { 0x8000 +1.390625e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda7987 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda7990 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7993 : BV:32
18 : Lambda7991 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 8193 { 0x2001 +1.97668e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 32767 { 0x7fff +1.390613e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32769 { 0x8001 +1.390636e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 32768 { 0x8000 +1.390625e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda7992 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9115 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32769 { 0x8001 +1.390636e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 32768 { 0x8000 +1.390625e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9116 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 10) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(13, 25) : BOOL
35 : bvule(25, 13) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 13, 13) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.llvm-%m
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8; 52611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 52612; 52615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 52616; 2147516287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147516288; 2147516291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147516292; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147516288 { 0x80007f80 -2147451008 -1.389099e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 52612 { 0xcd84 +1.627183e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9111 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 32767 { 0x7fff +1.390613e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 32769 { 0x8001 +1.390636e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 32768 { 0x8000 +1.390625e129 } : BV:32
16 : bvule(15, 3) : BOOL
17 : bvule(3, 15) : BOOL
18 : and(16, 17) : BOOL
19 : ite(18, 15, 15) : BV:32
20 : ite(14, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda9112 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 12) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(15, 27) : BOOL
37 : bvule(27, 15) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 15, 15) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9119 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32769 { 0x8001 +1.390636e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 32768 { 0x8000 +1.390625e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9120 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 10) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(13, 25) : BOOL
35 : bvule(25, 13) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 13, 13) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147516288 { 0x80007f80 -2147451008 -1.389099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147516291 { 0x80007f83 -2147451005 -1.389134e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 52612 { 0xcd84 +1.627183e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 52615 { 0xcd87 +1.627219e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda7937 : BV:32
2 : Lambda7938 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 8193 { 0x2001 +1.97668e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 32767 { 0x7fff +1.390613e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 32768 { 0x8000 +1.390625e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda7946 : BV:32
2 : Lambda7947 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 8193 { 0x2001 +1.97668e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 32767 { 0x7fff +1.390613e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32769 { 0x8001 +1.390636e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 32768 { 0x8000 +1.390625e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda7950 : BV:32
2 : Lambda7951 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 8191 { 0x1fff +1.97644e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8192 { 0x2000 +1.97656e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 8193 { 0x2001 +1.97668e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 32767 { 0x7fff +1.390613e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 32769 { 0x8001 +1.390636e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 32768 { 0x8000 +1.390625e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2406956396
=counter_example_end
=global nodece 19 num_edges_traversed 1
=global nodece 19 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce4046.num_edges_traversed1
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce4046 9bce877855ce91b53d5862553a51c91a
=input.spec-%var-x-1
1 : Lambda8073 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8076 : BV:32
18 : Lambda8074 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 524289 { 0x80001 +1.6250011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda8075 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 140 { 0x8c -116 } : BV:8
81 : eq(78, 74) : BOOL
82 : 225 { 0xe1 -31 } : BV:8
83 : eq(78, 36) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : eq(78, 40) : BOOL
86 : 216 { 0xd8 -40 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda8078 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8081 : BV:32
18 : Lambda8079 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 524289 { 0x80001 +1.6250011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda8080 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 140 { 0x8c -116 } : BV:8
62 : eq(59, 55) : BOOL
63 : 225 { 0xe1 -31 } : BV:8
64 : eq(59, 36) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : eq(59, 40) : BOOL
67 : 216 { 0xd8 -40 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9137 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda9138 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 24) : BV:32
30 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
31 : bvadd(27, 29, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : 140 { 0x8c -116 } : BV:8
34 : eq(31, 27) : BOOL
35 : 225 { 0xe1 -31 } : BV:8
36 : eq(31, 7) : BOOL
37 : 223 { 0xdf -33 } : BV:8
38 : eq(31, 11) : BOOL
39 : 216 { 0xd8 -40 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 37, 41) : BV:8
43 : ite(34, 35, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : bvadd(11, 29, 30) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 27) : BOOL
48 : eq(45, 7) : BOOL
49 : eq(45, 11) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 37, 50) : BV:8
52 : ite(47, 35, 51) : BV:8
53 : ite(46, 33, 52) : BV:8
54 : bvadd(7, 29, 30) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 7) : BOOL
58 : eq(54, 11) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 37, 59) : BV:8
61 : ite(56, 35, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : bvadd(29, 30) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 7) : BOOL
67 : eq(63, 11) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 37, 68) : BV:8
70 : ite(65, 35, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(26, 3, 72) : BV:32
74 : lambda(24, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(23, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 140, [ 1; 1 ] -> 223, [ 2; 2 ] -> 216, [ 3; 3 ] -> 225, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059478939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059478940; 1059478943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059478944; 2715420247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2715420248; 2715420251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2715420252; 3966472715 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3966472716; 3966472719 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3966472720; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059478940 { 0x3f265d9c +1.29973173e255 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3966472716 { 0xec6b920c -328494580 -1.84039449e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2715420248 { 0xa1da0658 -1579547048 -1.70331859e196 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9133 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9134 : BV:32
26 : eq(25, 5) : BOOL
27 : and(4, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
32 : bvadd(28, 30, 31) : BV:32
33 : eq(32, 5) : BOOL
34 : 140 { 0x8c -116 } : BV:8
35 : eq(32, 28) : BOOL
36 : 225 { 0xe1 -31 } : BV:8
37 : eq(32, 1) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : eq(32, 12) : BOOL
40 : 216 { 0xd8 -40 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 38, 42) : BV:8
44 : ite(35, 36, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : bvadd(12, 30, 31) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 1) : BOOL
50 : eq(46, 12) : BOOL
51 : ite(50, 40, 41) : BV:8
52 : ite(49, 38, 51) : BV:8
53 : ite(48, 36, 52) : BV:8
54 : ite(47, 34, 53) : BV:8
55 : bvadd(1, 30, 31) : BV:32
56 : eq(55, 5) : BOOL
57 : eq(55, 28) : BOOL
58 : eq(55, 1) : BOOL
59 : eq(55, 12) : BOOL
60 : ite(59, 40, 41) : BV:8
61 : ite(58, 38, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : bvadd(30, 31) : BV:32
65 : eq(64, 5) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 1) : BOOL
68 : eq(64, 12) : BOOL
69 : ite(68, 40, 41) : BV:8
70 : ite(67, 38, 69) : BV:8
71 : ite(66, 36, 70) : BV:8
72 : ite(65, 34, 71) : BV:8
73 : bvconcat(45, 54, 63, 72) : BV:32
74 : ite(27, 5, 73) : BV:32
75 : lambda(25, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(24, 75) : MAP[BV:32 -> BV:32]
77 : sum(1, 2, 76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
78 : sym_const(77) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9141 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda9142 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 24) : BV:32
30 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
31 : bvadd(27, 29, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : 140 { 0x8c -116 } : BV:8
34 : eq(31, 27) : BOOL
35 : 225 { 0xe1 -31 } : BV:8
36 : eq(31, 7) : BOOL
37 : 223 { 0xdf -33 } : BV:8
38 : eq(31, 11) : BOOL
39 : 216 { 0xd8 -40 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 37, 41) : BV:8
43 : ite(34, 35, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : bvadd(11, 29, 30) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 27) : BOOL
48 : eq(45, 7) : BOOL
49 : eq(45, 11) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 37, 50) : BV:8
52 : ite(47, 35, 51) : BV:8
53 : ite(46, 33, 52) : BV:8
54 : bvadd(7, 29, 30) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 7) : BOOL
58 : eq(54, 11) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 37, 59) : BV:8
61 : ite(56, 35, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : bvadd(29, 30) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 7) : BOOL
67 : eq(63, 11) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 37, 68) : BV:8
70 : ite(65, 35, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(26, 3, 72) : BV:32
74 : lambda(24, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(23, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3966472716 { 0xec6b920c -328494580 -1.84039449e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3966472719 { 0xec6b920f -328494577 -1.84039485e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2715420248 { 0xa1da0658 -1579547048 -1.70331859e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2715420251 { 0xa1da065b -1579547045 -1.70331895e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059478940 { 0x3f265d9c +1.29973173e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059478943 { 0x3f265d9f +1.29973208e255 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda8030 : BV:32
2 : Lambda8031 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 524289 { 0x80001 +1.6250011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda8035 : BV:32
2 : Lambda8036 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 524288 { 0x80000 +1.6250000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 524289 { 0x80001 +1.6250011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 140 { 0x8c -116 } : BV:8
54 : eq(51, 47) : BOOL
55 : 225 { 0xe1 -31 } : BV:8
56 : eq(51, 32) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : eq(51, 36) : BOOL
59 : 216 { 0xd8 -40 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda8041 : BV:32
2 : Lambda8042 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 524289 { 0x80001 +1.6250011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda8037 : BV:32
2 : Lambda8038 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 140 { 0x8c -116 } : BV:8
14 : eq(11, 7) : BOOL
15 : 225 { 0xe1 -31 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 223 { 0xdf -33 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 216 { 0xd8 -40 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1234228002
=counter_example_end
=global nodece 20 num_edges_traversed 1
=global nodece 20 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3.ce4084.num_edges_traversed1
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce4084 fc1b1b9dbd68f3ea90dc6199e7ccb8
=input.spec-%var-x-1
1 : Lambda8197 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8200 : BV:32
18 : Lambda8198 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda8199 : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : 243 { 0xf3 -13 } : BV:8
72 : eq(69, 65) : BOOL
73 : 215 { 0xd7 -41 } : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : eq(69, 74) : BOOL
76 : 255 { 0xff -1 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(69, 77) : BOOL
79 : 247 { 0xf7 -9 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : bvadd(77, 68) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 65) : BOOL
88 : eq(85, 74) : BOOL
89 : eq(85, 77) : BOOL
90 : ite(89, 79, 80) : BV:8
91 : ite(88, 76, 90) : BV:8
92 : ite(87, 73, 91) : BV:8
93 : ite(86, 71, 92) : BV:8
94 : bvadd(74, 68) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 74) : BOOL
98 : eq(94, 77) : BOOL
99 : ite(98, 79, 80) : BV:8
100 : ite(97, 76, 99) : BV:8
101 : ite(96, 73, 100) : BV:8
102 : ite(95, 71, 101) : BV:8
103 : eq(68, 2) : BOOL
104 : eq(68, 65) : BOOL
105 : eq(68, 74) : BOOL
106 : eq(68, 77) : BOOL
107 : ite(106, 79, 80) : BV:8
108 : ite(105, 76, 107) : BV:8
109 : ite(104, 73, 108) : BV:8
110 : ite(103, 71, 109) : BV:8
111 : bvconcat(84, 93, 102, 110) : BV:32
112 : bvadd(65, 67, 111) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 65) : BOOL
115 : eq(112, 74) : BOOL
116 : eq(112, 77) : BOOL
117 : ite(116, 79, 80) : BV:8
118 : ite(115, 76, 117) : BV:8
119 : ite(114, 73, 118) : BV:8
120 : ite(113, 71, 119) : BV:8
121 : bvadd(77, 67, 111) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 65) : BOOL
124 : eq(121, 74) : BOOL
125 : eq(121, 77) : BOOL
126 : ite(125, 79, 80) : BV:8
127 : ite(124, 76, 126) : BV:8
128 : ite(123, 73, 127) : BV:8
129 : ite(122, 71, 128) : BV:8
130 : bvadd(74, 67, 111) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 65) : BOOL
133 : eq(130, 74) : BOOL
134 : eq(130, 77) : BOOL
135 : ite(134, 79, 80) : BV:8
136 : ite(133, 76, 135) : BV:8
137 : ite(132, 73, 136) : BV:8
138 : ite(131, 71, 137) : BV:8
139 : bvadd(67, 111) : BV:32
140 : eq(139, 2) : BOOL
141 : eq(139, 65) : BOOL
142 : eq(139, 74) : BOOL
143 : eq(139, 77) : BOOL
144 : ite(143, 79, 80) : BV:8
145 : ite(142, 76, 144) : BV:8
146 : ite(141, 73, 145) : BV:8
147 : ite(140, 71, 146) : BV:8
148 : bvconcat(120, 129, 138, 147) : BV:32
149 : ite(49, 2, 148) : BV:32
150 : ite(64, 148, 149) : BV:32
151 : ite(49, 2, 150) : BV:32
152 : lambda(46, 151) : FUNCTION[BV:32 -> BV:32]
153 : map(45, 152) : MAP[BV:32 -> BV:32]
154 : lambda(17, 153) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
155 : map(16, 154) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
156 : sym_const(155) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda8202 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8205 : BV:32
18 : Lambda8203 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda8204 : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 2) : BOOL
56 : 243 { 0xf3 -13 } : BV:8
57 : eq(54, 50) : BOOL
58 : 215 { 0xd7 -41 } : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : eq(54, 59) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(54, 62) : BOOL
64 : 247 { 0xf7 -9 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(57, 58, 67) : BV:8
69 : ite(55, 56, 68) : BV:8
70 : bvadd(62, 53) : BV:32
71 : eq(70, 2) : BOOL
72 : eq(70, 50) : BOOL
73 : eq(70, 59) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 58, 76) : BV:8
78 : ite(71, 56, 77) : BV:8
79 : bvadd(59, 53) : BV:32
80 : eq(79, 2) : BOOL
81 : eq(79, 50) : BOOL
82 : eq(79, 59) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 58, 85) : BV:8
87 : ite(80, 56, 86) : BV:8
88 : eq(53, 2) : BOOL
89 : eq(53, 50) : BOOL
90 : eq(53, 59) : BOOL
91 : eq(53, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 58, 93) : BV:8
95 : ite(88, 56, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(50, 52, 96) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 50) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 58, 103) : BV:8
105 : ite(98, 56, 104) : BV:8
106 : bvadd(62, 52, 96) : BV:32
107 : eq(106, 2) : BOOL
108 : eq(106, 50) : BOOL
109 : eq(106, 59) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 58, 112) : BV:8
114 : ite(107, 56, 113) : BV:8
115 : bvadd(59, 52, 96) : BV:32
116 : eq(115, 2) : BOOL
117 : eq(115, 50) : BOOL
118 : eq(115, 59) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 58, 121) : BV:8
123 : ite(116, 56, 122) : BV:8
124 : bvadd(52, 96) : BV:32
125 : eq(124, 2) : BOOL
126 : eq(124, 50) : BOOL
127 : eq(124, 59) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 58, 130) : BV:8
132 : ite(125, 56, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9267 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : ite(11, 8, 8) : BV:32
13 : ite(7, 3, 12) : BV:32
14 : eq(13, 3) : BOOL
15 : and(2, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 2, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda9268 : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 3623354355 { 0xd7f7fff3 -671612941 -1.93749845e48 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : 243 { 0xf3 -13 } : BV:8
29 : eq(26, 22) : BOOL
30 : 215 { 0xd7 -41 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(26, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : eq(26, 34) : BOOL
36 : 247 { 0xf7 -9 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : bvadd(34, 24, 25) : BV:32
43 : eq(42, 3) : BOOL
44 : eq(42, 22) : BOOL
45 : eq(42, 31) : BOOL
46 : eq(42, 34) : BOOL
47 : ite(46, 36, 37) : BV:8
48 : ite(45, 33, 47) : BV:8
49 : ite(44, 30, 48) : BV:8
50 : ite(43, 28, 49) : BV:8
51 : bvadd(31, 24, 25) : BV:32
52 : eq(51, 3) : BOOL
53 : eq(51, 22) : BOOL
54 : eq(51, 31) : BOOL
55 : eq(51, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 28, 58) : BV:8
60 : bvadd(24, 25) : BV:32
61 : eq(60, 3) : BOOL
62 : eq(60, 22) : BOOL
63 : eq(60, 31) : BOOL
64 : eq(60, 34) : BOOL
65 : ite(64, 36, 37) : BV:8
66 : ite(63, 33, 65) : BV:8
67 : ite(62, 30, 66) : BV:8
68 : ite(61, 28, 67) : BV:8
69 : bvconcat(41, 50, 59, 68) : BV:32
70 : ite(21, 3, 69) : BV:32
71 : lambda(19, 70) : FUNCTION[BV:32 -> BV:32]
72 : map(18, 71) : MAP[BV:32 -> BV:32]
73 : sym_const(72) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 243, [ 1; 1 ] -> 255, [ 2; 2 ] -> 247, [ 3; 3 ] -> 215, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1886261579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1886261580; 1886261583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1886261584; 2644049335 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2644049336; 2644049339 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2644049340; 3429399283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3429399284; 3429399287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3429399288; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2644049336 { 0x9d98fdb8 -1650917960 -1.19524288e188 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1886261580 { 0x706e114c +1.85990285e97 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3429399284 { 0xcc687af4 -865568012 -1.81625223e25 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9263 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 10, 10) : BV:32
15 : ite(9, 5, 14) : BV:32
16 : eq(15, 5) : BOOL
17 : and(4, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 4, 18) : BOOL
20 : lambda(3, 19) : FUNCTION[BV:32 -> BOOL]
21 : Lambda9264 : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvmul(25, 21) : BV:32
27 : 3623354355 { 0xd7f7fff3 -671612941 -1.93749845e48 } : BV:32
28 : bvadd(24, 26, 27) : BV:32
29 : eq(28, 5) : BOOL
30 : 243 { 0xf3 -13 } : BV:8
31 : eq(28, 24) : BOOL
32 : 215 { 0xd7 -41 } : BV:8
33 : eq(28, 1) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : eq(28, 35) : BOOL
37 : 247 { 0xf7 -9 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(31, 32, 40) : BV:8
42 : ite(29, 30, 41) : BV:8
43 : bvadd(35, 26, 27) : BV:32
44 : eq(43, 5) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 1) : BOOL
47 : eq(43, 35) : BOOL
48 : ite(47, 37, 38) : BV:8
49 : ite(46, 34, 48) : BV:8
50 : ite(45, 32, 49) : BV:8
51 : ite(44, 30, 50) : BV:8
52 : bvadd(1, 26, 27) : BV:32
53 : eq(52, 5) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 1) : BOOL
56 : eq(52, 35) : BOOL
57 : ite(56, 37, 38) : BV:8
58 : ite(55, 34, 57) : BV:8
59 : ite(54, 32, 58) : BV:8
60 : ite(53, 30, 59) : BV:8
61 : bvadd(26, 27) : BV:32
62 : eq(61, 5) : BOOL
63 : eq(61, 24) : BOOL
64 : eq(61, 1) : BOOL
65 : eq(61, 35) : BOOL
66 : ite(65, 37, 38) : BV:8
67 : ite(64, 34, 66) : BV:8
68 : ite(63, 32, 67) : BV:8
69 : ite(62, 30, 68) : BV:8
70 : bvconcat(42, 51, 60, 69) : BV:32
71 : ite(23, 5, 70) : BV:32
72 : lambda(21, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(20, 72) : MAP[BV:32 -> BV:32]
74 : sum(1, 2, 73) : SUM[UNIT,MAP[BV:32 -> BV:32]]
75 : sym_const(74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9271 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : ite(11, 8, 8) : BV:32
13 : ite(7, 3, 12) : BV:32
14 : eq(13, 3) : BOOL
15 : and(2, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 2, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda9272 : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 3623354355 { 0xd7f7fff3 -671612941 -1.93749845e48 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : 243 { 0xf3 -13 } : BV:8
29 : eq(26, 22) : BOOL
30 : 215 { 0xd7 -41 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(26, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : eq(26, 34) : BOOL
36 : 247 { 0xf7 -9 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : bvadd(34, 24, 25) : BV:32
43 : eq(42, 3) : BOOL
44 : eq(42, 22) : BOOL
45 : eq(42, 31) : BOOL
46 : eq(42, 34) : BOOL
47 : ite(46, 36, 37) : BV:8
48 : ite(45, 33, 47) : BV:8
49 : ite(44, 30, 48) : BV:8
50 : ite(43, 28, 49) : BV:8
51 : bvadd(31, 24, 25) : BV:32
52 : eq(51, 3) : BOOL
53 : eq(51, 22) : BOOL
54 : eq(51, 31) : BOOL
55 : eq(51, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 28, 58) : BV:8
60 : bvadd(24, 25) : BV:32
61 : eq(60, 3) : BOOL
62 : eq(60, 22) : BOOL
63 : eq(60, 31) : BOOL
64 : eq(60, 34) : BOOL
65 : ite(64, 36, 37) : BV:8
66 : ite(63, 33, 65) : BV:8
67 : ite(62, 30, 66) : BV:8
68 : ite(61, 28, 67) : BV:8
69 : bvconcat(41, 50, 59, 68) : BV:32
70 : ite(21, 3, 69) : BV:32
71 : lambda(19, 70) : FUNCTION[BV:32 -> BV:32]
72 : map(18, 71) : MAP[BV:32 -> BV:32]
73 : sym_const(72) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1886261580 { 0x706e114c +1.85990285e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1886261583 { 0x706e114f +1.85990321e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3429399284 { 0xcc687af4 -865568012 -1.81625223e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3429399287 { 0xcc687af7 -865568009 -1.81625258e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2644049336 { 0x9d98fdb8 -1650917960 -1.19524288e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2644049339 { 0x9d98fdbb -1650917957 -1.19524323e188 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda8154 : BV:32
2 : Lambda8155 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 8 { 0x8 +1.95e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda8159 : BV:32
2 : Lambda8160 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 9 { 0x9 +1.107e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 3) : BOOL
48 : 243 { 0xf3 -13 } : BV:8
49 : eq(46, 42) : BOOL
50 : 215 { 0xd7 -41 } : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : eq(46, 51) : BOOL
53 : 255 { 0xff -1 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(46, 54) : BOOL
56 : 247 { 0xf7 -9 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(47, 48, 60) : BV:8
62 : bvadd(54, 45) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 42) : BOOL
65 : eq(62, 51) : BOOL
66 : eq(62, 54) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 53, 67) : BV:8
69 : ite(64, 50, 68) : BV:8
70 : ite(63, 48, 69) : BV:8
71 : bvadd(51, 45) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 42) : BOOL
74 : eq(71, 51) : BOOL
75 : eq(71, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 53, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : ite(72, 48, 78) : BV:8
80 : eq(45, 3) : BOOL
81 : eq(45, 42) : BOOL
82 : eq(45, 51) : BOOL
83 : eq(45, 54) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 53, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : ite(80, 48, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(42, 44, 88) : BV:32
90 : eq(89, 3) : BOOL
91 : eq(89, 42) : BOOL
92 : eq(89, 51) : BOOL
93 : eq(89, 54) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 53, 94) : BV:8
96 : ite(91, 50, 95) : BV:8
97 : ite(90, 48, 96) : BV:8
98 : bvadd(54, 44, 88) : BV:32
99 : eq(98, 3) : BOOL
100 : eq(98, 42) : BOOL
101 : eq(98, 51) : BOOL
102 : eq(98, 54) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 53, 103) : BV:8
105 : ite(100, 50, 104) : BV:8
106 : ite(99, 48, 105) : BV:8
107 : bvadd(51, 44, 88) : BV:32
108 : eq(107, 3) : BOOL
109 : eq(107, 42) : BOOL
110 : eq(107, 51) : BOOL
111 : eq(107, 54) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 53, 112) : BV:8
114 : ite(109, 50, 113) : BV:8
115 : ite(108, 48, 114) : BV:8
116 : bvadd(44, 88) : BV:32
117 : eq(116, 3) : BOOL
118 : eq(116, 42) : BOOL
119 : eq(116, 51) : BOOL
120 : eq(116, 54) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 53, 121) : BV:8
123 : ite(118, 50, 122) : BV:8
124 : ite(117, 48, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(6, 3, 125) : BV:32
127 : ite(41, 125, 126) : BV:32
128 : ite(6, 3, 127) : BV:32
129 : lambda(1, 2, 128) : FUNCTION[BV:32,BV:32 -> BV:32]
130 : sym_const(129) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda8165 : BV:32
2 : Lambda8166 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 8 { 0x8 +1.95e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda8161 : BV:32
2 : Lambda8162 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 243 { 0xf3 -13 } : BV:8
14 : eq(11, 7) : BOOL
15 : 215 { 0xd7 -41 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2894109566
=counter_example_end
=global nodece 21 num_edges_traversed 1
=global nodece 21 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce5131.num_edges_traversed0
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce5131 a8c7ac23d9d3d49239a53ea56b5ecb7
=input.spec-%var-x-1
1 : Lambda12116 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12119 : BV:32
18 : Lambda12117 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12118 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12129 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12132 : BV:32
18 : Lambda12130 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12131 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12135 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12136 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 132; 135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 136; 8126479 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8126480; 8126483 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8126484; 2390753283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2390753284; 2390753287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2390753288; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8126480 { 0x7c0010 +1.96875190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2390753284 { 0x8e800004 -1904214012 -1.47e158 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda12122 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda12123 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12139 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12140 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 135 { 0x87 +1.1609e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2390753284 { 0x8e800004 -1904214012 -1.47e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2390753287 { 0x8e800007 -1904214009 -1.83e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8126480 { 0x7c0010 +1.96875190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8126483 { 0x7c0013 +1.96875226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2806986544
=counter_example_end
=global nodece 22 num_edges_traversed 0
=global nodece 22 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 23
=global nodece 23 nodece z3.ce5132.num_edges_traversed0
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce5132 da78c38f8114a7ed741796ef20614416
=input.spec-%var-x-1
1 : Lambda12160 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12163 : BV:32
18 : Lambda12161 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12162 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12176 : BV:32
18 : Lambda12174 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12175 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12179 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12180 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3553850027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3553850028; 3553850031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3553850032; 3799832003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3799832004; 3799832007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3799832008; 4064437311 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4064437312; 4064437315 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4064437316; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4064437312 { 0xf2426440 -230529984 -1.51868438e101 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3553850028 { 0xd3d372ac -741117268 -1.65193700e40 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3799832004 { 0xe27cd5c4 -495135292 -1.97527360e69 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda12166 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda12167 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12183 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12184 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3553850028 { 0xd3d372ac -741117268 -1.65193700e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3553850031 { 0xd3d372af -741117265 -1.65193736e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3799832004 { 0xe27cd5c4 -495135292 -1.97527360e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3799832007 { 0xe27cd5c7 -495135289 -1.97527396e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4064437312 { 0xf2426440 -230529984 -1.51868438e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4064437315 { 0xf2426443 -230529981 -1.51868474e101 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2006219726
=counter_example_end
=global nodece 23 num_edges_traversed 0
=global nodece 23 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce5226.num_edges_traversed4
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce5226 e4f7f90e9885a9c4eba2e4396d4ae3
=input.spec-%var-x-1
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda396 : BV:32
18 : Lambda394 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda395 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda396 : BV:32
18 : Lambda394 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda395 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12199 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda12200 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1128861687 ] -> 0, [ 1128861688; 1128861688 ] -> 16, [ 1128861689; 1543947460 ] -> 0, [ 1543947461; 1543947461 ] -> 1, [ 1543947462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1128861687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1128861688; 1128861691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1128861692; 1543947459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1543947460; 1543947463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1543947464; 3960085711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3960085712; 3960085715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3960085716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda12195 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda12196 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12203 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda12204 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1543947463 { 0x5c06c4c7 +1.5288016e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1128861691 { 0x43490ffb +1.57080018e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3960085715 { 0xec0a1cd3 -334881581 -1.7900464e89 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda364 : BV:32
2 : Lambda365 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda369 : BV:32
2 : Lambda370 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2441249403
=counter_example_end
=global nodece 24 num_edges_traversed 4
=global nodece 24 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce5260.num_edges_traversed6
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce5260 ace2e376fb91db2887569892a8d03526
=input.spec-%var-x-1
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda396 : BV:32
18 : Lambda394 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda395 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda396 : BV:32
18 : Lambda394 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda395 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12219 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda12220 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1128861687 ] -> 0, [ 1128861688; 1128861688 ] -> 16, [ 1128861689; 1543947460 ] -> 0, [ 1543947461; 1543947461 ] -> 1, [ 1543947462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1128861687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1128861688; 1128861691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1128861692; 1543947459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1543947460; 1543947463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1543947464; 3960085711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3960085712; 3960085715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3960085716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda12215 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda12216 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
16 : eq(11, 15) : BOOL
17 : 16 { 0x10 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12223 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda12224 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1543947463 { 0x5c06c4c7 +1.5288016e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1128861691 { 0x43490ffb +1.57080018e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3960085715 { 0xec0a1cd3 -334881581 -1.7900464e89 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda364 : BV:32
2 : Lambda365 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda369 : BV:32
2 : Lambda370 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2441249403
=counter_example_end
=global nodece 25 num_edges_traversed 6
=global nodece 25 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 26
=global nodece 26 nodece z3.ce5294.num_edges_traversed7
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce5294 2eb1858cdeb24ad111d6b9afaf203d22
=input.spec-%var-x-1
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda396 : BV:32
18 : Lambda394 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda395 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda393 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda396 : BV:32
18 : Lambda394 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda395 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
28 : eq(26, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1128861687 ] -> 0, [ 1128861688; 1128861688 ] -> 16, [ 1128861689; 1543947460 ] -> 0, [ 1543947461; 1543947461 ] -> 1, [ 1543947462; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1128861687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1128861688; 1128861691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1128861692; 1543947459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1543947460; 1543947463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1543947464; 3960085711 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3960085712; 3960085715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3960085716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1543947460 { 0x5c06c4c4 +1.5287981e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1543947463 { 0x5c06c4c7 +1.5288016e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1128861691 { 0x43490ffb +1.57080018e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3960085712 { 0xec0a1cd0 -334881584 -1.7900428e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3960085715 { 0xec0a1cd3 -334881581 -1.7900464e89 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda364 : BV:32
2 : Lambda365 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda369 : BV:32
2 : Lambda370 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1543947461 { 0x5c06c4c5 +1.5287992e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1128861688 { 0x43490ff8 +1.57079982e7 } : BV:32
13 : eq(8, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2441249403
=counter_example_end
=global nodece 26 num_edges_traversed 7
=global nodece 26 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3.ce5216.num_edges_traversed3
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(epsilon)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce5216 837cb3ba3bd176db53f6f8dd8378f2a5
=input.spec-%var-x-1
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda480 : BV:32
18 : Lambda478 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda479 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda480 : BV:32
18 : Lambda478 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda479 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3303498735 ] -> 0, [ 3303498736; 3303498736 ] -> 2, [ 3303498737; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1902474199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1902474200; 1902474203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1902474204; 2779208627 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2779208628; 2779208631 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2779208632; 3303498735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3303498736; 3303498739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3303498740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2779208628 { 0xa5a75bb4 -1515758668 -1.30748605e204 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1902474200 { 0x716573d8 +1.79259777e99 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3303498739 { 0xc4e763f3 -991468557 -1.80773770e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1902474200 { 0x716573d8 +1.79259777e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1902474203 { 0x716573db +1.79259812e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2779208628 { 0xa5a75bb4 -1515758668 -1.30748605e204 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2779208631 { 0xa5a75bb7 -1515758665 -1.30748641e204 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda446 : BV:32
2 : Lambda447 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda451 : BV:32
2 : Lambda452 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3303498736 { 0xc4e763f0 -991468560 -1.80773735e10 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
867572303
=counter_example_end
=global nodece 27 num_edges_traversed 3
=global nodece 27 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3.ce5206.num_edges_traversed3
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(epsilon)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3.ce5206 7b8df4db5da7c1a17cd68e9a1ed44520
=input.spec-%var-x-1
1 : Lambda561 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda564 : BV:32
17 : Lambda562 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda563 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda561 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda564 : BV:32
17 : Lambda562 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda563 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 472070135 ] -> 0, [ 472070136; 472070136 ] -> 1, [ 472070137; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 472070135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 472070136; 472070139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 472070140; 1604762235 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1604762236; 1604762239 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1604762240; 3649015795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3649015796; 3649015799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3649015800; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1604762236 { 0x5fa6ba7c +1.30256605e64 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3649015796 { 0xd97f8ff4 -645951500 -1.99658060e51 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 472070139 { 0x1c2337fb +1.27514588e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3649015796 { 0xd97f8ff4 -645951500 -1.99658060e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3649015799 { 0xd97f8ff7 -645951497 -1.99658095e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1604762236 { 0x5fa6ba7c +1.30256605e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1604762239 { 0x5fa6ba7f +1.30256640e64 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda530 : BV:32
2 : Lambda531 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda535 : BV:32
2 : Lambda536 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 472070136 { 0x1c2337f8 +1.27514553e185 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 28 num_edges_traversed 3
=global nodece 28 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3.ce5196.num_edges_traversed3
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(epsilon)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3.ce5196 f3e010dee478f895962c4fde7132e99
=input.spec-%var-x-1
1 : Lambda739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda742 : BV:32
17 : Lambda740 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda741 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda742 : BV:32
17 : Lambda740 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda741 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1618590963 ] -> 0, [ 1618590964; 1618590967 ] -> 255, [ 1618590968; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 922566007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 922566008; 922566011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 922566012; 1618590963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1618590964; 1618590967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1618590968; 1621415375 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1621415376; 1621415379 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1621415380; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1621415376 { 0x60a4d5d0 +1.28777503e66 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 922566008 { 0x36fd3d78 +1.97843837e238 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778129394 { 0x69fc19f2 +1.96954178e84 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 922566008 { 0x36fd3d78 +1.97843837e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 922566011 { 0x36fd3d7b +1.97843873e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1621415376 { 0x60a4d5d0 +1.28777503e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1621415379 { 0x60a4d5d3 +1.28777539e66 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda708 : BV:32
2 : Lambda709 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda713 : BV:32
2 : Lambda714 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1618590965 { 0x6079bcf5 +1.95107901e65 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1618590966 { 0x6079bcf6 +1.95107913e65 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1618590964 { 0x6079bcf4 +1.95107889e65 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1618590967 { 0x6079bcf7 +1.95107924e65 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1106379559
=counter_example_end
=global nodece 29 num_edges_traversed 3
=global nodece 29 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 30
=global nodece 30 nodece z3.ce5174.num_edges_traversed2
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(epsilon)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce5174 472ecc2bda1aa415b1c464bda45965
=input.spec-%var-x-1
1 : Lambda7963 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7966 : BV:32
18 : Lambda7964 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7965 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 11 { 0xb +1.131e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 247 { 0xf7 -9 } : BV:8
29 : 10 { 0xa +1.119e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 156 { 0x9c -100 } : BV:8
32 : 9 { 0x9 +1.107e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 120 { 0x78 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 8 { 0x8 +1.95e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda7970 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7973 : BV:32
18 : Lambda7971 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7972 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 11 { 0xb +1.131e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 247 { 0xf7 -9 } : BV:8
29 : 10 { 0xa +1.119e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 156 { 0x9c -100 } : BV:8
32 : 9 { 0x9 +1.107e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 191 { 0xbf -65 } : BV:8
35 : 120 { 0x78 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 8 { 0x8 +1.95e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 8 ] -> 120, [ 9; 9 ] -> 191, [ 10; 10 ] -> 156, [ 11; 11 ] -> 247, [ 12; 4294967295 ] -> 120, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2176729279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2176729280; 2176729283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2176729284; 4081843187 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4081843188; 4081843191 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4081843192; 4269680595 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4269680596; 4269680599 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4269680600; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4269680596 { 0xfe7e27d4 -25286700 -1.98559045e125 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4081843188 { 0xf34bfbf4 -213124108 -1.59362649e103 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2176729280 { 0x81be40c0 -2118238016 -1.48635101e132 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 529432909 { 0x1f8e814d +1.11332094e192 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 854328905 { 0x32ec0649 +1.84394180e230 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4081843188 { 0xf34bfbf4 -213124108 -1.59362649e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4081843191 { 0xf34bfbf7 -213124105 -1.59362685e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2176729280 { 0x81be40c0 -2118238016 -1.48635101e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2176729283 { 0x81be40c3 -2118238013 -1.48635137e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4269680596 { 0xfe7e27d4 -25286700 -1.98559045e125 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4269680599 { 0xfe7e27d7 -25286697 -1.98559081e125 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda7925 : BV:32
2 : Lambda7926 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 11 { 0xb +1.131e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 247 { 0xf7 -9 } : BV:8
11 : 10 { 0xa +1.119e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 156 { 0x9c -100 } : BV:8
14 : 9 { 0x9 +1.107e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 191 { 0xbf -65 } : BV:8
17 : 120 { 0x78 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 8 { 0x8 +1.95e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda7927 : BV:32
2 : Lambda7928 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 11 { 0xb +1.131e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 247 { 0xf7 -9 } : BV:8
11 : 10 { 0xa +1.119e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 156 { 0x9c -100 } : BV:8
14 : 9 { 0x9 +1.107e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 191 { 0xbf -65 } : BV:8
17 : 120 { 0x78 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 8 { 0x8 +1.95e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
277478158
=counter_example_end
=global nodece 30 num_edges_traversed 2
=global nodece 30 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 31
=global nodece 31 nodece z3v487.ce5152.num_edges_traversed1
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce5152 b14df1c2702a422f8c355c0f469bbb9
=input.spec-%var-x-1
1 : Lambda12116 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12119 : BV:32
18 : Lambda12117 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12118 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12129 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12132 : BV:32
18 : Lambda12130 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12131 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 132; 135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 136; 8126479 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8126480; 8126483 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8126484; 2390753283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2390753284; 2390753287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2390753288; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8126480 { 0x7c0010 +1.96875190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2390753284 { 0x8e800004 -1904214012 -1.47e158 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1628922835 { 0x611763d3 +1.18273389e67 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1790685438 { 0x6abbb0fe +1.46633887e86 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 135 { 0x87 +1.1609e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2390753284 { 0x8e800004 -1904214012 -1.47e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2390753287 { 0x8e800007 -1904214009 -1.83e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8126480 { 0x7c0010 +1.96875190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8126483 { 0x7c0013 +1.96875226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1121306488
=counter_example_end
=global nodece 31 num_edges_traversed 1
=global nodece 31 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 32
=global nodece 32 nodece z3v487.ce5419.num_edges_traversed1
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3v487.ce5419 bdaf27256e41212f75fe7ad6ac1b68b
=input.spec-%var-x-1
1 : Lambda12736 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131072 { 0x20000 +1.1562500e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12739 : BV:32
18 : Lambda12737 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12738 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12749 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131072 { 0x20000 +1.1562500e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12752 : BV:32
18 : Lambda12750 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda12751 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda12755 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12756 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 132; 135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 136; 1055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1056; 1059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1060; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1056 { 0x420 +1.12588e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2004127049 { 0x77748d49 +1.91056168e111 } : BV:32
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda12742 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda12743 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda12759 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda12760 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1454994738 { 0x56b97532 +1.44888901e46 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 135 { 0x87 +1.1609e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1056 { 0x420 +1.12588e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059 { 0x423 +1.12624e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2334414385
=counter_example_end
=global nodece 32 num_edges_traversed 1
=global nodece 32 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 33
=global nodece 33 nodece z3.ce5481.num_edges_traversed1
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3.ce5481 caf0c7f92c4ecd865e3a27f09b74c682
=input.spec-%var-x-1
1 : Lambda13111 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13114 : BV:32
18 : Lambda13112 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13113 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13121 : BV:32
18 : Lambda13119 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13120 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda13158 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13159 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 240 { 0xf0 -16 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 223 { 0xdf -33 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 66 { 0x42 +1.786e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 240, [ 1; 1 ] -> 255, [ 2; 2 ] -> 223, [ 3; 3 ] -> 239, [ 4; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1210561407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1210561408; 1210561411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1210561412; 1500699135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1500699136; 1500699139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1500699140; 4042915859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4042915860; 4042915863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4042915864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda13154 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda13155 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 240 { 0xf0 -16 } : BV:8
15 : eq(11, 7) : BOOL
16 : 239 { 0xef -17 } : BV:8
17 : eq(11, 1) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 223 { 0xdf -33 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda13162 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13163 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 240 { 0xf0 -16 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 223 { 0xdf -33 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1210561411 { 0x4827b383 +1.31016576e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1500699139 { 0x5972da03 +1.89727818e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4042915863 { 0xf0fa0017 -252051433 -1.95312774e98 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda13078 : BV:32
2 : Lambda13079 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda13080 : BV:32
2 : Lambda13081 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1426499698
=counter_example_end
=global nodece 33 num_edges_traversed 1
=global nodece 33 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 34
=global nodece 34 nodece z3.ce5513.num_edges_traversed3
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce5513 7a22e47ef60bc563c4d2f158dc1495b
=input.spec-%var-x-1
1 : Lambda13111 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13114 : BV:32
18 : Lambda13112 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13113 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13121 : BV:32
18 : Lambda13119 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13120 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda13178 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13179 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 240 { 0xf0 -16 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 223 { 0xdf -33 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 66 { 0x42 +1.786e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 240, [ 1; 1 ] -> 255, [ 2; 2 ] -> 223, [ 3; 3 ] -> 239, [ 4; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1210561407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1210561408; 1210561411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1210561412; 1500699135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1500699136; 1500699139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1500699140; 4042915859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4042915860; 4042915863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4042915864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 165064901 { 0x9d6b0c5 +1.67726957e148 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda13174 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda13175 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 240 { 0xf0 -16 } : BV:8
15 : eq(11, 7) : BOOL
16 : 239 { 0xef -17 } : BV:8
17 : eq(11, 1) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 223 { 0xdf -33 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda13182 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13183 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 3755991007 { 0xdfdfdfdf -538976289 -1.74901950e64 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 240 { 0xf0 -16 } : BV:8
13 : eq(9, 5) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 223 { 0xdf -33 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1430535191 { 0x55443c17 +1.53308379e43 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1210561411 { 0x4827b383 +1.31016576e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1500699139 { 0x5972da03 +1.89727818e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4042915863 { 0xf0fa0017 -252051433 -1.95312774e98 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda13078 : BV:32
2 : Lambda13079 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda13080 : BV:32
2 : Lambda13081 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
704365434
=counter_example_end
=global nodece 34 num_edges_traversed 3
=global nodece 34 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 35
=global nodece 35 nodece z3.ce5547.num_edges_traversed4
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(epsilon)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3.ce5547 e144e68e61822d2d4de2d58277868e0
=input.spec-%var-x-1
1 : Lambda13111 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13114 : BV:32
18 : Lambda13112 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13113 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65 { 0x41 +1.774e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 66 { 0x42 +1.786e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13121 : BV:32
18 : Lambda13119 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13120 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 240 { 0xf0 -16 } : BV:8
28 : eq(25, 21) : BOOL
29 : 239 { 0xef -17 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 223 { 0xdf -33 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 66 { 0x42 +1.786e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 240, [ 1; 1 ] -> 255, [ 2; 2 ] -> 223, [ 3; 3 ] -> 239, [ 4; 4294967295 ] -> 223, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1210561407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1210561408; 1210561411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1210561412; 1500699135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1500699136; 1500699139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1500699140; 4042915859 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4042915860; 4042915863 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4042915864; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 165064902 { 0x9d6b0c6 +1.67726969e148 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1430535192 { 0x55443c18 +1.53308391e43 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1210561408 { 0x4827b380 +1.31016540e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1210561411 { 0x4827b383 +1.31016576e17 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1500699136 { 0x5972da00 +1.89727783e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1500699139 { 0x5972da03 +1.89727818e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4042915860 { 0xf0fa0014 -252051436 -1.95312738e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4042915863 { 0xf0fa0017 -252051433 -1.95312774e98 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda13078 : BV:32
2 : Lambda13079 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 65 ] -> true, [ 66; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda13080 : BV:32
2 : Lambda13081 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 240 { 0xf0 -16 } : BV:8
11 : eq(7, 3) : BOOL
12 : 239 { 0xef -17 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 223 { 0xdf -33 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
704365434
=counter_example_end
=global nodece 35 num_edges_traversed 4
=global nodece 35 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 36
=global nodece 36 nodece z3.ce5572.num_edges_traversed1
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3.ce5572 3aa67fb52da8409780553c54bf3d6c99
=input.spec-%var-x-1
1 : Lambda13654 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4097 { 0x1001 +1.48840e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4098 { 0x1002 +1.48851e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13657 : BV:32
18 : Lambda13655 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13656 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13667 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4097 { 0x1001 +1.48840e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4098 { 0x1002 +1.48851e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13670 : BV:32
18 : Lambda13668 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13669 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda13673 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda13674 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4098 { 0x1002 +1.48851e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1058114539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1058114540; 1058114543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1058114544; 2168270131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2168270132; 2168270135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2168270136; 2472622219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2472622220; 2472622223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2472622224; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2472622220 { 0x9361388c -1822345076 -1.75953817e167 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1058114540 { 0x3f118bec +1.13708257e255 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2168270132 { 0x813d2d34 -2126697164 -1.47794198e131 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 344670059 { 0x148b3f6b +1.8787286e170 } : BV:32
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 512 { 0x200 +1.6103e129 } : BV:32
2 : unit : UNIT
3 : Lambda13660 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda13661 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda13677 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda13678 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 370992489 { 0x161ce569 +1.22575104e173 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1058114540 { 0x3f118bec +1.13708257e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1058114543 { 0x3f118bef +1.13708293e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2168270132 { 0x813d2d34 -2126697164 -1.47794198e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2168270135 { 0x813d2d37 -2126697161 -1.47794234e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2472622220 { 0x9361388c -1822345076 -1.75953817e167 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2472622223 { 0x9361388f -1822345073 -1.75953853e167 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4097 ] -> true, [ 4098; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4097 ] -> true, [ 4098; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2126887965
=counter_example_end
=global nodece 36 num_edges_traversed 1
=global nodece 36 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 37
=global nodece 37 nodece z3v487.ce5634.num_edges_traversed1
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3v487.ce5634 afbe5d374151c474afbdfc8e8393a116
=input.spec-%var-x-1
1 : Lambda13831 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13834 : BV:32
18 : Lambda13832 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13833 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13844 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13847 : BV:32
18 : Lambda13845 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13846 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda13850 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda13851 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 63 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 64; 67 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 68; 131087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131088; 131091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131088 { 0x20010 +1.1562690e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1325635381 { 0x4f039735 +1.2805197e31 } : BV:32
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda13837 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda13838 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda13854 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda13855 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1985446985 { 0x76578449 +1.68372452e109 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131088 { 0x20010 +1.1562690e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131091 { 0x20013 +1.1562726e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 67 { 0x43 +1.798e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2405084562
=counter_example_end
=global nodece 37 num_edges_traversed 1
=global nodece 37 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 38
=global nodece 38 nodece z3v487.ce5664.num_edges_traversed2
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3v487.ce5664 ca36cbc273deae66ae375c193269740
=input.spec-%var-x-1
1 : Lambda13831 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13834 : BV:32
18 : Lambda13832 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13833 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13844 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13847 : BV:32
18 : Lambda13845 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13846 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda13914 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13915 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 63 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 64; 67 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 68; 131087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131088; 131091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131088 { 0x20010 +1.1562690e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1325635381 { 0x4f039735 +1.2805197e31 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda13910 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda13911 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda13918 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda13919 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1985446985 { 0x76578449 +1.68372452e109 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131088 { 0x20010 +1.1562690e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131091 { 0x20013 +1.1562726e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 67 { 0x43 +1.798e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2405084562
=counter_example_end
=global nodece 38 num_edges_traversed 2
=global nodece 38 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 39
=global nodece 39 nodece z3v487.ce5686.num_edges_traversed3
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(epsilon)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3v487.ce5686 5a79e6f449dbadbe57b33047b6cf8253
=input.spec-%var-x-1
1 : Lambda13831 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13834 : BV:32
18 : Lambda13832 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13833 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda13844 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda13847 : BV:32
18 : Lambda13845 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda13846 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 63 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 64; 67 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 68; 131087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131088; 131091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131088 { 0x20010 +1.1562690e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1325635382 { 0x4f039736 +1.2805209e31 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1985446986 { 0x7657844a +1.68372464e109 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131088 { 0x20010 +1.1562690e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131091 { 0x20013 +1.1562726e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 67 { 0x43 +1.798e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2405084562
=counter_example_end
=global nodece 39 num_edges_traversed 3
=global nodece 39 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 40
=global nodece 40 nodece z3.ce5730.num_edges_traversed1
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3.ce5730 b6a082196799c53cde56ee429b5addb
=input.spec-%var-x-1
1 : Lambda14240 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3756654519 { 0xdfe9ffb7 -538312777 -1.82811629e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14243 : BV:32
18 : Lambda14241 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14242 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 88 { 0x58 } : BV:8
28 : eq(25, 21) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 255 { 0xff -1 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3756654519 { 0xdfe9ffb7 -538312777 -1.82811629e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14250 : BV:32
18 : Lambda14248 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14249 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 88 { 0x58 } : BV:8
28 : eq(25, 21) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 255 { 0xff -1 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14287 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14288 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 88 { 0x58 } : BV:8
13 : eq(9, 5) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 255 { 0xff -1 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 88, [ 1; 1 ] -> 253, [ 2; 2 ] -> 255, [ 3; 3 ] -> 251, [ 4; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 643147971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 643147972; 643147975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 643147976; 1298037251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1298037252; 1298037255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1298037256; 2127019007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2127019008; 2127019011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2127019012; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1298037252 { 0x4d5e7a04 +1.73809862e27 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2127019008 { 0x7ec7bc00 +1.56042480e126 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 643147972 { 0x2655a8c4 +1.66921281e205 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda14283 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda14284 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 88 { 0x58 } : BV:8
15 : eq(11, 7) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : eq(11, 1) : BOOL
18 : 253 { 0xfd -3 } : BV:8
19 : 255 { 0xff -1 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14291 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14292 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 88 { 0x58 } : BV:8
13 : eq(9, 5) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 255 { 0xff -1 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2127019008 { 0x7ec7bc00 +1.56042480e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2127019011 { 0x7ec7bc03 +1.56042516e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 643147972 { 0x2655a8c4 +1.66921281e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 643147975 { 0x2655a8c7 +1.66921317e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1298037252 { 0x4d5e7a04 +1.73809862e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1298037255 { 0x4d5e7a07 +1.73809897e27 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3756654519 ] -> true, [ 3756654520; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda14207 : BV:32
2 : Lambda14208 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 88 { 0x58 } : BV:8
11 : eq(7, 3) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 255 { 0xff -1 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3756654519 ] -> true, [ 3756654520; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda14209 : BV:32
2 : Lambda14210 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 88 { 0x58 } : BV:8
11 : eq(7, 3) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 255 { 0xff -1 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3987203816
=counter_example_end
=global nodece 40 num_edges_traversed 1
=global nodece 40 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 41
=global nodece 41 nodece z3.ce5762.num_edges_traversed3
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3.ce5762 763b7aeecb870aaddc4d47fc180f44
=input.spec-%var-x-1
1 : Lambda14240 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3756654519 { 0xdfe9ffb7 -538312777 -1.82811629e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14243 : BV:32
18 : Lambda14241 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14242 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 88 { 0x58 } : BV:8
28 : eq(25, 21) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 255 { 0xff -1 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3756654519 { 0xdfe9ffb7 -538312777 -1.82811629e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14250 : BV:32
18 : Lambda14248 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14249 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 88 { 0x58 } : BV:8
28 : eq(25, 21) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 255 { 0xff -1 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14307 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14308 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4227857752 { 0xfbfffd58 -67109544 -1.99991893e120 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 88 { 0x58 } : BV:8
13 : eq(9, 5) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 255 { 0xff -1 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 88, [ 1; 1 ] -> 253, [ 2; 2 ] -> 255, [ 3; 3 ] -> 251, [ 4; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 643147971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 643147972; 643147975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 643147976; 1298037251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1298037252; 1298037255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1298037256; 2127019007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2127019008; 2127019011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2127019012; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1298037252 { 0x4d5e7a04 +1.73809862e27 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2127019008 { 0x7ec7bc00 +1.56042480e126 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 643147972 { 0x2655a8c4 +1.66921281e205 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1042186248 { 0x3e1e8008 +1.23828220e253 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda14303 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda14304 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 4227857752 { 0xfbfffd58 -67109544 -1.99991893e120 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 88 { 0x58 } : BV:8
15 : eq(11, 7) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : eq(11, 1) : BOOL
18 : 253 { 0xfd -3 } : BV:8
19 : 255 { 0xff -1 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14311 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14312 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4227857752 { 0xfbfffd58 -67109544 -1.99991893e120 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 88 { 0x58 } : BV:8
13 : eq(9, 5) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 255 { 0xff -1 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 75876245 { 0x485c795 +1.4515326e138 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2127019008 { 0x7ec7bc00 +1.56042480e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2127019011 { 0x7ec7bc03 +1.56042516e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 643147972 { 0x2655a8c4 +1.66921281e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 643147975 { 0x2655a8c7 +1.66921317e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1298037252 { 0x4d5e7a04 +1.73809862e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1298037255 { 0x4d5e7a07 +1.73809897e27 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3756654519 ] -> true, [ 3756654520; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda14207 : BV:32
2 : Lambda14208 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 88 { 0x58 } : BV:8
11 : eq(7, 3) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 255 { 0xff -1 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3756654519 ] -> true, [ 3756654520; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda14209 : BV:32
2 : Lambda14210 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 88 { 0x58 } : BV:8
11 : eq(7, 3) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 255 { 0xff -1 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1069732912
=counter_example_end
=global nodece 41 num_edges_traversed 3
=global nodece 41 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 42
=global nodece 42 nodece z3.ce5796.num_edges_traversed4
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(epsilon)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3.ce5796 78ecf3431046c92086134d5f47868fb9
=input.spec-%var-x-1
1 : Lambda14240 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3756654519 { 0xdfe9ffb7 -538312777 -1.82811629e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14243 : BV:32
18 : Lambda14241 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14242 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 88 { 0x58 } : BV:8
28 : eq(25, 21) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 255 { 0xff -1 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3756654519 { 0xdfe9ffb7 -538312777 -1.82811629e64 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14250 : BV:32
18 : Lambda14248 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14249 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 88 { 0x58 } : BV:8
28 : eq(25, 21) : BOOL
29 : 251 { 0xfb -5 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 255 { 0xff -1 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3756654520 { 0xdfe9ffb8 -538312776 -1.82811641e64 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 88, [ 1; 1 ] -> 253, [ 2; 2 ] -> 255, [ 3; 3 ] -> 251, [ 4; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 643147971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 643147972; 643147975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 643147976; 1298037251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1298037252; 1298037255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1298037256; 2127019007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2127019008; 2127019011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2127019012; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1298037252 { 0x4d5e7a04 +1.73809862e27 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2127019008 { 0x7ec7bc00 +1.56042480e126 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 643147972 { 0x2655a8c4 +1.66921281e205 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1042186249 { 0x3e1e8009 +1.23828232e253 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 75876246 { 0x485c796 +1.4515337e138 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2127019008 { 0x7ec7bc00 +1.56042480e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2127019011 { 0x7ec7bc03 +1.56042516e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 643147972 { 0x2655a8c4 +1.66921281e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 643147975 { 0x2655a8c7 +1.66921317e205 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1298037252 { 0x4d5e7a04 +1.73809862e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1298037255 { 0x4d5e7a07 +1.73809897e27 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3756654519 ] -> true, [ 3756654520; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda14207 : BV:32
2 : Lambda14208 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 88 { 0x58 } : BV:8
11 : eq(7, 3) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 255 { 0xff -1 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3756654519 ] -> true, [ 3756654520; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda14209 : BV:32
2 : Lambda14210 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 88 { 0x58 } : BV:8
11 : eq(7, 3) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 255 { 0xff -1 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1069732912
=counter_example_end
=global nodece 42 num_edges_traversed 4
=global nodece 42 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 43
=global nodece 43 nodece z3v487.ce5821.num_edges_traversed1
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3v487.ce5821 1d81fb48d09f8a85255160c98e163eaf
=input.spec-%var-x-1
1 : Lambda14663 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3825205247 { 0xe3ffffff -469762049 -1.99999988e72 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3825205248 { 0xe4000000 -469762048 -1.0e73 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14666 : BV:32
18 : Lambda14664 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14665 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14676 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3825205247 { 0xe3ffffff -469762049 -1.99999988e72 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3825205248 { 0xe4000000 -469762048 -1.0e73 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14679 : BV:32
18 : Lambda14677 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda14678 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14682 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda14683 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3825205248 { 0xe4000000 -469762048 -1.0e73 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 256; 259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 260; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1706912336 { 0x65bd6a50 +1.47980690e76 } : BV:32
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda14669 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda14670 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14686 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda14687 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 18726063 { 0x11dbcaf +1.23232066e131 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 259 { 0x103 +1.3087e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3825205247 ] -> true, [ 3825205248; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3825205247 ] -> true, [ 3825205248; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3765115029
=counter_example_end
=global nodece 43 num_edges_traversed 1
=global nodece 43 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 44
=global nodece 44 nodece z3.ce5883.num_edges_traversed1
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3.ce5883 ce2ae084eaaa5d4bd9ea11cc2485db9d
=input.spec-%var-x-1
1 : Lambda14936 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda14939 : BV:32
17 : Lambda14937 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda14938 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 246 { 0xf6 -10 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 27 { 0x1b } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 181 { 0xb5 -75 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14943 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda14946 : BV:32
17 : Lambda14944 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda14945 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 246 { 0xf6 -10 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 27 { 0x1b } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 181 { 0xb5 -75 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda14983 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14984 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4246468277 { 0xfd1bf6b5 -48499019 -1.21846640e123 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 246 { 0xf6 -10 } : BV:8
13 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 27 { 0x1b } : BV:8
16 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
17 : eq(9, 16) : BOOL
18 : 181 { 0xb5 -75 } : BV:8
19 : 253 { 0xfd -3 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967287 ] -> 253, [ 4294967288; 4294967288 ] -> 181, [ 4294967289; 4294967289 ] -> 246, [ 4294967290; 4294967290 ] -> 27, [ 4294967291; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 115723351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 115723352; 115723355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 115723356; 736885603 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 736885604; 736885607 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 736885608; 2494515579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2494515580; 2494515583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2494515584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2494515580 { 0x94af497c -1800451716 -1.36943006e170 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 736885604 { 0x2bebfb64 +1.84360933e216 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 115723352 { 0x6e5cc58 +1.79529857e142 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda14979 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda14980 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 4246468277 { 0xfd1bf6b5 -48499019 -1.21846640e123 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 246 { 0xf6 -10 } : BV:8
15 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 27 { 0x1b } : BV:8
18 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 181 { 0xb5 -75 } : BV:8
21 : 253 { 0xfd -3 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : eq(26, 18) : BOOL
30 : ite(29, 20, 21) : BV:8
31 : ite(28, 17, 30) : BV:8
32 : ite(27, 14, 31) : BV:8
33 : bvadd(1, 9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : ite(36, 20, 21) : BV:8
38 : ite(35, 17, 37) : BV:8
39 : ite(34, 14, 38) : BV:8
40 : bvadd(9, 10) : BV:32
41 : eq(40, 12) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : ite(43, 20, 21) : BV:8
45 : ite(42, 17, 44) : BV:8
46 : ite(41, 14, 45) : BV:8
47 : bvconcat(24, 32, 39, 46) : BV:32
48 : lambda(6, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(5, 48) : MAP[BV:32 -> BV:32]
50 : sum(1, 2, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda14987 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda14988 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4246468277 { 0xfd1bf6b5 -48499019 -1.21846640e123 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 246 { 0xf6 -10 } : BV:8
13 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 27 { 0x1b } : BV:8
16 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
17 : eq(9, 16) : BOOL
18 : 181 { 0xb5 -75 } : BV:8
19 : 253 { 0xfd -3 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 736885604 { 0x2bebfb64 +1.84360933e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 736885607 { 0x2bebfb67 +1.84360969e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 115723352 { 0x6e5cc58 +1.79529857e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 115723355 { 0x6e5cc5b +1.79529893e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2494515580 { 0x94af497c -1800451716 -1.36943006e170 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2494515583 { 0x94af497f -1800451713 -1.36943042e170 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda14903 : BV:32
2 : Lambda14904 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 27 { 0x1b } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 181 { 0xb5 -75 } : BV:8
17 : 253 { 0xfd -3 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda14905 : BV:32
2 : Lambda14906 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 27 { 0x1b } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 181 { 0xb5 -75 } : BV:8
17 : 253 { 0xfd -3 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4052976062
=counter_example_end
=global nodece 44 num_edges_traversed 1
=global nodece 44 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 45
=global nodece 45 nodece z3.ce5915.num_edges_traversed2
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce5915 94e5252e724ef51c246d7dd831a7113
=input.spec-%var-x-1
1 : Lambda14936 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda14939 : BV:32
17 : Lambda14937 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda14938 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 246 { 0xf6 -10 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 27 { 0x1b } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 181 { 0xb5 -75 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda14943 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda14946 : BV:32
17 : Lambda14944 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda14945 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 246 { 0xf6 -10 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 27 { 0x1b } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 181 { 0xb5 -75 } : BV:8
34 : 253 { 0xfd -3 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967287 ] -> 253, [ 4294967288; 4294967288 ] -> 181, [ 4294967289; 4294967289 ] -> 246, [ 4294967290; 4294967290 ] -> 27, [ 4294967291; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 115723351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 115723352; 115723355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 115723356; 736885603 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 736885604; 736885607 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 736885608; 2494515579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2494515580; 2494515583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2494515584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2494515580 { 0x94af497c -1800451716 -1.36943006e170 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 736885604 { 0x2bebfb64 +1.84360933e216 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 115723352 { 0x6e5cc58 +1.79529857e142 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2006308871 { 0x7795d807 +1.17065513e112 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1152291165 { 0x44ae915d +1.36381113e10 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 736885604 { 0x2bebfb64 +1.84360933e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 736885607 { 0x2bebfb67 +1.84360969e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 115723352 { 0x6e5cc58 +1.79529857e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 115723355 { 0x6e5cc5b +1.79529893e142 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2494515580 { 0x94af497c -1800451716 -1.36943006e170 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2494515583 { 0x94af497f -1800451713 -1.36943042e170 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda14903 : BV:32
2 : Lambda14904 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 27 { 0x1b } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 181 { 0xb5 -75 } : BV:8
17 : 253 { 0xfd -3 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda14905 : BV:32
2 : Lambda14906 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 246 { 0xf6 -10 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 27 { 0x1b } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 181 { 0xb5 -75 } : BV:8
17 : 253 { 0xfd -3 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3583657286
=counter_example_end
=global nodece 45 num_edges_traversed 2
=global nodece 45 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 46
=global nodece 46 nodece z3.ce5944.num_edges_traversed1
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3.ce5944 226bf754cd0288a11affd2016572c1a
=input.spec-%var-x-1
1 : Lambda15353 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15356 : BV:32
17 : Lambda15354 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15355 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15366 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15369 : BV:32
17 : Lambda15367 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15368 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda15372 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda15373 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 41943043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 41943044; 41943047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 41943048; 2878023327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2878023328; 2878023331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2878023332; 2952823471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2952823472; 2952823475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2952823476; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2952823472 { 0xb00082b0 -1342143824 -1.398826e225 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2878023328 { 0xab8b26a0 -1416943968 -1.8711624e216 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 41943044 { 0x2800004 +1.47e134 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1818470839 { 0x6c63a9b7 +1.77861678e89 } : BV:32
=input.spec-%tmpvar-11.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
2 : unit : UNIT
3 : Lambda15359 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda15360 : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda15376 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda15377 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1698758202 { 0x6540fe3a +1.50775837e75 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc6.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc5.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2878023328 { 0xab8b26a0 -1416943968 -1.8711624e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2878023331 { 0xab8b26a3 -1416943965 -1.8711659e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 41943044 { 0x2800004 +1.47e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 41943047 { 0x2800007 +1.83e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2952823472 { 0xb00082b0 -1342143824 -1.398826e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2952823475 { 0xb00082b3 -1342143821 -1.398862e225 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
816926111
=counter_example_end
=global nodece 46 num_edges_traversed 1
=global nodece 46 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 47
=global nodece 47 nodece z3.ce5988.num_edges_traversed0
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3.ce5988 9cb83317cf1935525727fc813d2a5a3
=input.spec-%var-x-1
1 : Lambda15690 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15693 : BV:32
18 : Lambda15691 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15692 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 119 { 0x77 } : BV:8
83 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 64 { 0x40 } : BV:8
86 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
87 : eq(80, 86) : BOOL
88 : 177 { 0xb1 -79 } : BV:8
89 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 34 { 0x22 } : BV:8
92 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 1 { 0x1 } : BV:8
95 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 235 { 0xeb -21 } : BV:8
98 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 255 { 0xff -1 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(96, 97, 102) : BV:8
104 : ite(93, 94, 103) : BV:8
105 : ite(90, 91, 104) : BV:8
106 : ite(87, 88, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(81, 82, 107) : BV:8
109 : bvadd(95, 79) : BV:32
110 : eq(109, 78) : BOOL
111 : eq(109, 83) : BOOL
112 : eq(109, 86) : BOOL
113 : eq(109, 89) : BOOL
114 : eq(109, 92) : BOOL
115 : eq(109, 95) : BOOL
116 : eq(109, 98) : BOOL
117 : ite(116, 100, 101) : BV:8
118 : ite(115, 97, 117) : BV:8
119 : ite(114, 94, 118) : BV:8
120 : ite(113, 91, 119) : BV:8
121 : ite(112, 88, 120) : BV:8
122 : ite(111, 85, 121) : BV:8
123 : ite(110, 82, 122) : BV:8
124 : bvadd(98, 79) : BV:32
125 : eq(124, 78) : BOOL
126 : eq(124, 83) : BOOL
127 : eq(124, 86) : BOOL
128 : eq(124, 89) : BOOL
129 : eq(124, 92) : BOOL
130 : eq(124, 95) : BOOL
131 : eq(124, 98) : BOOL
132 : ite(131, 100, 101) : BV:8
133 : ite(130, 97, 132) : BV:8
134 : ite(129, 94, 133) : BV:8
135 : ite(128, 91, 134) : BV:8
136 : ite(127, 88, 135) : BV:8
137 : ite(126, 85, 136) : BV:8
138 : ite(125, 82, 137) : BV:8
139 : bvadd(86, 79) : BV:32
140 : eq(139, 78) : BOOL
141 : eq(139, 83) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 89) : BOOL
144 : eq(139, 92) : BOOL
145 : eq(139, 95) : BOOL
146 : eq(139, 98) : BOOL
147 : ite(146, 100, 101) : BV:8
148 : ite(145, 97, 147) : BV:8
149 : ite(144, 94, 148) : BV:8
150 : ite(143, 91, 149) : BV:8
151 : ite(142, 88, 150) : BV:8
152 : ite(141, 85, 151) : BV:8
153 : ite(140, 82, 152) : BV:8
154 : bvconcat(108, 123, 138, 153) : BV:32
155 : bvadd(75, 77, 154) : BV:32
156 : eq(155, 78) : BOOL
157 : eq(155, 83) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : ite(162, 100, 101) : BV:8
164 : ite(161, 97, 163) : BV:8
165 : ite(160, 94, 164) : BV:8
166 : ite(159, 91, 165) : BV:8
167 : ite(158, 88, 166) : BV:8
168 : ite(157, 85, 167) : BV:8
169 : ite(156, 82, 168) : BV:8
170 : 2 { 0x2 +1.23e129 } : BV:32
171 : bvadd(170, 77, 154) : BV:32
172 : eq(171, 78) : BOOL
173 : eq(171, 83) : BOOL
174 : eq(171, 86) : BOOL
175 : eq(171, 89) : BOOL
176 : eq(171, 92) : BOOL
177 : eq(171, 95) : BOOL
178 : eq(171, 98) : BOOL
179 : ite(178, 100, 101) : BV:8
180 : ite(177, 97, 179) : BV:8
181 : ite(176, 94, 180) : BV:8
182 : ite(175, 91, 181) : BV:8
183 : ite(174, 88, 182) : BV:8
184 : ite(173, 85, 183) : BV:8
185 : ite(172, 82, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 77, 154) : BV:32
188 : eq(187, 78) : BOOL
189 : eq(187, 83) : BOOL
190 : eq(187, 86) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : eq(187, 98) : BOOL
195 : ite(194, 100, 101) : BV:8
196 : ite(193, 97, 195) : BV:8
197 : ite(192, 94, 196) : BV:8
198 : ite(191, 91, 197) : BV:8
199 : ite(190, 88, 198) : BV:8
200 : ite(189, 85, 199) : BV:8
201 : ite(188, 82, 200) : BV:8
202 : bvadd(77, 154) : BV:32
203 : eq(202, 78) : BOOL
204 : eq(202, 83) : BOOL
205 : eq(202, 86) : BOOL
206 : eq(202, 89) : BOOL
207 : eq(202, 92) : BOOL
208 : eq(202, 95) : BOOL
209 : eq(202, 98) : BOOL
210 : ite(209, 100, 101) : BV:8
211 : ite(208, 97, 210) : BV:8
212 : ite(207, 94, 211) : BV:8
213 : ite(206, 91, 212) : BV:8
214 : ite(205, 88, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 82, 215) : BV:8
217 : bvconcat(169, 185, 201, 216) : BV:32
218 : ite(55, 2, 217) : BV:32
219 : ite(74, 217, 218) : BV:32
220 : ite(55, 2, 219) : BV:32
221 : lambda(52, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(51, 221) : MAP[BV:32 -> BV:32]
223 : lambda(17, 222) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
224 : map(16, 223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
225 : sym_const(224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15698 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15701 : BV:32
18 : Lambda15699 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15700 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 119 { 0x77 } : BV:8
64 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 64 { 0x40 } : BV:8
67 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
68 : eq(61, 67) : BOOL
69 : 177 { 0xb1 -79 } : BV:8
70 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 34 { 0x22 } : BV:8
73 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 1 { 0x1 } : BV:8
76 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 235 { 0xeb -21 } : BV:8
79 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 255 { 0xff -1 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(71, 72, 85) : BV:8
87 : ite(68, 69, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(76, 60) : BV:32
91 : eq(90, 59) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 67) : BOOL
94 : eq(90, 70) : BOOL
95 : eq(90, 73) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 63, 103) : BV:8
105 : bvadd(79, 60) : BV:32
106 : eq(105, 59) : BOOL
107 : eq(105, 64) : BOOL
108 : eq(105, 67) : BOOL
109 : eq(105, 70) : BOOL
110 : eq(105, 73) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 72, 115) : BV:8
117 : ite(108, 69, 116) : BV:8
118 : ite(107, 66, 117) : BV:8
119 : ite(106, 63, 118) : BV:8
120 : bvadd(67, 60) : BV:32
121 : eq(120, 59) : BOOL
122 : eq(120, 64) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 70) : BOOL
125 : eq(120, 73) : BOOL
126 : eq(120, 76) : BOOL
127 : eq(120, 79) : BOOL
128 : ite(127, 81, 82) : BV:8
129 : ite(126, 78, 128) : BV:8
130 : ite(125, 75, 129) : BV:8
131 : ite(124, 72, 130) : BV:8
132 : ite(123, 69, 131) : BV:8
133 : ite(122, 66, 132) : BV:8
134 : ite(121, 63, 133) : BV:8
135 : bvconcat(89, 104, 119, 134) : BV:32
136 : bvadd(56, 58, 135) : BV:32
137 : eq(136, 59) : BOOL
138 : eq(136, 64) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : ite(143, 81, 82) : BV:8
145 : ite(142, 78, 144) : BV:8
146 : ite(141, 75, 145) : BV:8
147 : ite(140, 72, 146) : BV:8
148 : ite(139, 69, 147) : BV:8
149 : ite(138, 66, 148) : BV:8
150 : ite(137, 63, 149) : BV:8
151 : 2 { 0x2 +1.23e129 } : BV:32
152 : bvadd(151, 58, 135) : BV:32
153 : eq(152, 59) : BOOL
154 : eq(152, 64) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 70) : BOOL
157 : eq(152, 73) : BOOL
158 : eq(152, 76) : BOOL
159 : eq(152, 79) : BOOL
160 : ite(159, 81, 82) : BV:8
161 : ite(158, 78, 160) : BV:8
162 : ite(157, 75, 161) : BV:8
163 : ite(156, 72, 162) : BV:8
164 : ite(155, 69, 163) : BV:8
165 : ite(154, 66, 164) : BV:8
166 : ite(153, 63, 165) : BV:8
167 : 1 { 0x1 +1.11e129 } : BV:32
168 : bvadd(167, 58, 135) : BV:32
169 : eq(168, 59) : BOOL
170 : eq(168, 64) : BOOL
171 : eq(168, 67) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : eq(168, 79) : BOOL
176 : ite(175, 81, 82) : BV:8
177 : ite(174, 78, 176) : BV:8
178 : ite(173, 75, 177) : BV:8
179 : ite(172, 72, 178) : BV:8
180 : ite(171, 69, 179) : BV:8
181 : ite(170, 66, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : bvadd(58, 135) : BV:32
184 : eq(183, 59) : BOOL
185 : eq(183, 64) : BOOL
186 : eq(183, 67) : BOOL
187 : eq(183, 70) : BOOL
188 : eq(183, 73) : BOOL
189 : eq(183, 76) : BOOL
190 : eq(183, 79) : BOOL
191 : ite(190, 81, 82) : BV:8
192 : ite(189, 78, 191) : BV:8
193 : ite(188, 75, 192) : BV:8
194 : ite(187, 72, 193) : BV:8
195 : ite(186, 69, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 63, 196) : BV:8
198 : bvconcat(150, 166, 182, 197) : BV:32
199 : ite(55, 2, 198) : BV:32
200 : lambda(52, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(51, 200) : MAP[BV:32 -> BV:32]
202 : lambda(17, 201) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
203 : map(16, 202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
204 : sym_const(203) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda15703 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15704 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 177 { 0xb1 -79 } : BV:8
33 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 235 { 0xeb -21 } : BV:8
42 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
=input.dst.llvm-%n
1 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4210691 ] -> 0, [ 4210692; 4210692 ] -> 177, [ 4210693; 4210693 ] -> 255, [ 4210694; 4210694 ] -> 235, [ 4210695; 4210695 ] -> 119, [ 4210696; 4751360 ] -> 0, [ 4751361; 4751361 ] -> 1, [ 4751362; 4751362 ] -> 64, [ 4751363; 4751363 ] -> 34, [ 4751364; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 469761035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 469761036; 469761039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 469761040; 474120191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 474120192; 474120195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 474120196; 1078329347 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1078329348; 1078329351 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1078329352; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1078329348 { 0x40460004 +1.54687547e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 474120192 { 0x1c428000 +1.51953125e185 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 469761036 { 0x1bfffc0c +1.99987936e184 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 135167 { 0x20fff +1.1611316e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 135168 { 0x21000 +1.1611328e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 256 { 0x100 +1.3051e129 } : BV:32
2 : unit : UNIT
3 : Lambda15695 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 255 { 0xff +1.3039e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : bvule(1, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(8, 9, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda15696 : BV:32
19 : eq(18, 4) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 18) : BV:32
23 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 119 { 0x77 } : BV:8
28 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 64 { 0x40 } : BV:8
31 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
32 : eq(24, 31) : BOOL
33 : 177 { 0xb1 -79 } : BV:8
34 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
35 : eq(24, 34) : BOOL
36 : 34 { 0x22 } : BV:8
37 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
38 : eq(24, 37) : BOOL
39 : 1 { 0x1 } : BV:8
40 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
41 : eq(24, 40) : BOOL
42 : 235 { 0xeb -21 } : BV:8
43 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
44 : eq(24, 43) : BOOL
45 : 255 { 0xff -1 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : ite(26, 27, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 22, 23) : BV:32
56 : eq(55, 25) : BOOL
57 : eq(55, 28) : BOOL
58 : eq(55, 31) : BOOL
59 : eq(55, 34) : BOOL
60 : eq(55, 37) : BOOL
61 : eq(55, 40) : BOOL
62 : eq(55, 43) : BOOL
63 : ite(62, 45, 46) : BV:8
64 : ite(61, 42, 63) : BV:8
65 : ite(60, 39, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 33, 66) : BV:8
68 : ite(57, 30, 67) : BV:8
69 : ite(56, 27, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 22, 23) : BV:32
72 : eq(71, 25) : BOOL
73 : eq(71, 28) : BOOL
74 : eq(71, 31) : BOOL
75 : eq(71, 34) : BOOL
76 : eq(71, 37) : BOOL
77 : eq(71, 40) : BOOL
78 : eq(71, 43) : BOOL
79 : ite(78, 45, 46) : BV:8
80 : ite(77, 42, 79) : BV:8
81 : ite(76, 39, 80) : BV:8
82 : ite(75, 36, 81) : BV:8
83 : ite(74, 33, 82) : BV:8
84 : ite(73, 30, 83) : BV:8
85 : ite(72, 27, 84) : BV:8
86 : bvadd(22, 23) : BV:32
87 : eq(86, 25) : BOOL
88 : eq(86, 28) : BOOL
89 : eq(86, 31) : BOOL
90 : eq(86, 34) : BOOL
91 : eq(86, 37) : BOOL
92 : eq(86, 40) : BOOL
93 : eq(86, 43) : BOOL
94 : ite(93, 45, 46) : BV:8
95 : ite(92, 42, 94) : BV:8
96 : ite(91, 39, 95) : BV:8
97 : ite(90, 36, 96) : BV:8
98 : ite(89, 33, 97) : BV:8
99 : ite(88, 30, 98) : BV:8
100 : ite(87, 27, 99) : BV:8
101 : bvconcat(53, 69, 85, 100) : BV:32
102 : ite(19, 4, 101) : BV:32
103 : lambda(18, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(17, 103) : MAP[BV:32 -> BV:32]
105 : sum(1, 2, 104) : SUM[UNIT,MAP[BV:32 -> BV:32]]
106 : sym_const(105) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda15706 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15707 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 177 { 0xb1 -79 } : BV:8
33 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 235 { 0xeb -21 } : BV:8
42 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 135167 { 0x20fff +1.1611316e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 474120192 { 0x1c428000 +1.51953125e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 474120195 { 0x1c428003 +1.51953160e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 469761036 { 0x1bfffc0c +1.99987936e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 469761039 { 0x1bfffc0f +1.99987971e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1078329348 { 0x40460004 +1.54687547e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1078329351 { 0x40460007 +1.54687583e1 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 33573577 ] -> true, [ 33573578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda15617 : BV:32
2 : Lambda15618 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15622 : BV:32
2 : Lambda15623 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 255 { 0xff +1.3039e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 256 { 0x100 +1.3051e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 257 { 0x101 +1.3063e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 119 { 0x77 } : BV:8
56 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 64 { 0x40 } : BV:8
59 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
60 : eq(53, 59) : BOOL
61 : 177 { 0xb1 -79 } : BV:8
62 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 34 { 0x22 } : BV:8
65 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 1 { 0x1 } : BV:8
68 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 235 { 0xeb -21 } : BV:8
71 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 255 { 0xff -1 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(54, 55, 80) : BV:8
82 : bvadd(68, 52) : BV:32
83 : eq(82, 51) : BOOL
84 : eq(82, 56) : BOOL
85 : eq(82, 59) : BOOL
86 : eq(82, 62) : BOOL
87 : eq(82, 65) : BOOL
88 : eq(82, 68) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 70, 90) : BV:8
92 : ite(87, 67, 91) : BV:8
93 : ite(86, 64, 92) : BV:8
94 : ite(85, 61, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 55, 95) : BV:8
97 : bvadd(71, 52) : BV:32
98 : eq(97, 51) : BOOL
99 : eq(97, 56) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : eq(97, 65) : BOOL
103 : eq(97, 68) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : ite(100, 61, 108) : BV:8
110 : ite(99, 58, 109) : BV:8
111 : ite(98, 55, 110) : BV:8
112 : bvadd(59, 52) : BV:32
113 : eq(112, 51) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 62) : BOOL
117 : eq(112, 65) : BOOL
118 : eq(112, 68) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 70, 120) : BV:8
122 : ite(117, 67, 121) : BV:8
123 : ite(116, 64, 122) : BV:8
124 : ite(115, 61, 123) : BV:8
125 : ite(114, 58, 124) : BV:8
126 : ite(113, 55, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(48, 50, 127) : BV:32
129 : eq(128, 51) : BOOL
130 : eq(128, 56) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 70, 136) : BV:8
138 : ite(133, 67, 137) : BV:8
139 : ite(132, 64, 138) : BV:8
140 : ite(131, 61, 139) : BV:8
141 : ite(130, 58, 140) : BV:8
142 : ite(129, 55, 141) : BV:8
143 : 2 { 0x2 +1.23e129 } : BV:32
144 : bvadd(143, 50, 127) : BV:32
145 : eq(144, 51) : BOOL
146 : eq(144, 56) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 62) : BOOL
149 : eq(144, 65) : BOOL
150 : eq(144, 68) : BOOL
151 : eq(144, 71) : BOOL
152 : ite(151, 73, 74) : BV:8
153 : ite(150, 70, 152) : BV:8
154 : ite(149, 67, 153) : BV:8
155 : ite(148, 64, 154) : BV:8
156 : ite(147, 61, 155) : BV:8
157 : ite(146, 58, 156) : BV:8
158 : ite(145, 55, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 50, 127) : BV:32
161 : eq(160, 51) : BOOL
162 : eq(160, 56) : BOOL
163 : eq(160, 59) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : eq(160, 71) : BOOL
168 : ite(167, 73, 74) : BV:8
169 : ite(166, 70, 168) : BV:8
170 : ite(165, 67, 169) : BV:8
171 : ite(164, 64, 170) : BV:8
172 : ite(163, 61, 171) : BV:8
173 : ite(162, 58, 172) : BV:8
174 : ite(161, 55, 173) : BV:8
175 : bvadd(50, 127) : BV:32
176 : eq(175, 51) : BOOL
177 : eq(175, 56) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 62) : BOOL
180 : eq(175, 65) : BOOL
181 : eq(175, 68) : BOOL
182 : eq(175, 71) : BOOL
183 : ite(182, 73, 74) : BV:8
184 : ite(181, 70, 183) : BV:8
185 : ite(180, 67, 184) : BV:8
186 : ite(179, 64, 185) : BV:8
187 : ite(178, 61, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 55, 188) : BV:8
190 : bvconcat(142, 158, 174, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : ite(47, 190, 191) : BV:32
193 : ite(6, 3, 192) : BV:32
194 : lambda(1, 2, 193) : FUNCTION[BV:32,BV:32 -> BV:32]
195 : sym_const(194) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33573577 ] -> true, [ 33573578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda15628 : BV:32
2 : Lambda15629 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15624 : BV:32
2 : Lambda15625 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 119 { 0x77 } : BV:8
15 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 177 { 0xb1 -79 } : BV:8
21 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 235 { 0xeb -21 } : BV:8
30 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(18, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda15635 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda15639 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda15643 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3231792512
=counter_example_end
=global nodece 47 num_edges_traversed 0
=global nodece 47 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 48
=global nodece 48 nodece z3v487.ce5989.num_edges_traversed0
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3v487.ce5989 d3496e462b0c3dab099ee8ca7f0b240
=input.spec-%var-x-1
1 : Lambda15723 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2149211515 { 0x801a5d7b -2145755781 -1.20597779e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2149211516 { 0x801a5d7c -2145755780 -1.20597791e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15726 : BV:32
18 : Lambda15724 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2149211517 { 0x801a5d7d -2145755779 -1.20597803e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 31 { 0x1f +1.369e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32 { 0x20 +1.381e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33 { 0x21 +1.393e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15725 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 134217731 { 0x8000003 +1.35e145 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
63 : eq(61, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
66 : eq(61, 65) : BOOL
67 : 5 { 0x5 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : 134217730 { 0x8000002 +1.23e145 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : eq(72, 65) : BOOL
75 : ite(74, 67, 68) : BV:8
76 : ite(73, 64, 75) : BV:8
77 : 134217729 { 0x8000001 +1.11e145 } : BV:32
78 : bvadd(77, 60) : BV:32
79 : eq(78, 62) : BOOL
80 : eq(78, 65) : BOOL
81 : ite(80, 67, 68) : BV:8
82 : ite(79, 64, 81) : BV:8
83 : 134217728 { 0x8000000 +1.0e145 } : BV:32
84 : bvadd(83, 60) : BV:32
85 : eq(84, 62) : BOOL
86 : eq(84, 65) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 64, 87) : BV:8
89 : bvconcat(70, 76, 82, 88) : BV:32
90 : bvadd(56, 58, 89) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 65) : BOOL
93 : ite(92, 67, 68) : BV:8
94 : ite(91, 64, 93) : BV:8
95 : 2 { 0x2 +1.23e129 } : BV:32
96 : bvadd(95, 58, 89) : BV:32
97 : eq(96, 62) : BOOL
98 : eq(96, 65) : BOOL
99 : ite(98, 67, 68) : BV:8
100 : ite(97, 64, 99) : BV:8
101 : 1 { 0x1 +1.11e129 } : BV:32
102 : bvadd(101, 58, 89) : BV:32
103 : eq(102, 62) : BOOL
104 : eq(102, 65) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 64, 105) : BV:8
107 : bvadd(58, 89) : BV:32
108 : eq(107, 62) : BOOL
109 : eq(107, 65) : BOOL
110 : ite(109, 67, 68) : BV:8
111 : ite(108, 64, 110) : BV:8
112 : bvconcat(94, 100, 106, 111) : BV:32
113 : ite(55, 2, 112) : BV:32
114 : lambda(52, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(51, 114) : MAP[BV:32 -> BV:32]
116 : lambda(17, 115) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
117 : map(16, 116) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
118 : sym_const(117) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15731 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2149211515 { 0x801a5d7b -2145755781 -1.20597779e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2149211516 { 0x801a5d7c -2145755780 -1.20597791e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15734 : BV:32
18 : Lambda15732 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2149211517 { 0x801a5d7d -2145755779 -1.20597803e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 31 { 0x1f +1.369e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 32 { 0x20 +1.381e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33 { 0x21 +1.393e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15733 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 134217731 { 0x8000003 +1.35e145 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
85 : eq(80, 84) : BOOL
86 : 5 { 0x5 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : 134217730 { 0x8000002 +1.23e145 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : eq(91, 84) : BOOL
94 : ite(93, 86, 87) : BV:8
95 : ite(92, 83, 94) : BV:8
96 : 134217729 { 0x8000001 +1.11e145 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : ite(99, 86, 87) : BV:8
101 : ite(98, 83, 100) : BV:8
102 : 134217728 { 0x8000000 +1.0e145 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 83, 106) : BV:8
108 : bvconcat(89, 95, 101, 107) : BV:32
109 : bvadd(75, 77, 108) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : ite(111, 86, 87) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 77, 108) : BV:32
116 : eq(115, 81) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 86, 87) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 77, 108) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 83, 124) : BV:8
126 : bvadd(77, 108) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : ite(128, 86, 87) : BV:8
130 : ite(127, 83, 129) : BV:8
131 : bvconcat(113, 119, 125, 130) : BV:32
132 : ite(55, 2, 131) : BV:32
133 : ite(74, 131, 132) : BV:32
134 : ite(55, 2, 133) : BV:32
135 : lambda(52, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(51, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda15736 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15737 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 67110144 { 0x4000500 +1.15258e137 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
25 : eq(23, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
28 : eq(23, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : eq(34, 27) : BOOL
37 : ite(36, 29, 30) : BV:8
38 : ite(35, 26, 37) : BV:8
39 : 1 { 0x1 +1.11e129 } : BV:32
40 : bvadd(39, 21, 22) : BV:32
41 : eq(40, 24) : BOOL
42 : eq(40, 27) : BOOL
43 : ite(42, 29, 30) : BV:8
44 : ite(41, 26, 43) : BV:8
45 : bvadd(21, 22) : BV:32
46 : eq(45, 24) : BOOL
47 : eq(45, 27) : BOOL
48 : ite(47, 29, 30) : BV:8
49 : ite(46, 26, 48) : BV:8
50 : bvconcat(32, 38, 44, 49) : BV:32
51 : ite(18, 2, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sym_const(53) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%n
1 : 2149211516 { 0x801a5d7c -2145755780 -1.20597791e129 } : BV:32
=input.dst.llvm-%m
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 138412028 ] -> 0, [ 138412029; 138412029 ] -> 5, [ 138412030; 138412030 ] -> 0, [ 138412031; 138412031 ] -> 4, [ 138412032; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4392679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4392680; 4392683 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4392684; 33564671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33564672; 33564675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 33564676; 2147486723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147486724; 2147486727 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147486728; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 33564672 { 0x2002800 +1.122070e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147486724 { 0x80000c04 -2147480572 -1.36668e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4392680 { 0x4306e8 +1.52364826e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1074790399 { 0x400fffff +1.12499988e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1074790400 { 0x40100000 +1.12500000e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda15728 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 31 { 0x1f +1.369e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32 { 0x20 +1.381e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15729 : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 67110144 { 0x4000500 +1.15258e137 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
30 : eq(25, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 23, 24) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 23, 24) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(23, 24) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : ite(20, 4, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : sum(1, 2, 55) : SUM[UNIT,MAP[BV:32 -> BV:32]]
57 : sym_const(56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda15739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15740 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 67110144 { 0x4000500 +1.15258e137 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
25 : eq(23, 24) : BOOL
26 : 4 { 0x4 } : BV:8
27 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
28 : eq(23, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : eq(34, 27) : BOOL
37 : ite(36, 29, 30) : BV:8
38 : ite(35, 26, 37) : BV:8
39 : 1 { 0x1 +1.11e129 } : BV:32
40 : bvadd(39, 21, 22) : BV:32
41 : eq(40, 24) : BOOL
42 : eq(40, 27) : BOOL
43 : ite(42, 29, 30) : BV:8
44 : ite(41, 26, 43) : BV:8
45 : bvadd(21, 22) : BV:32
46 : eq(45, 24) : BOOL
47 : eq(45, 27) : BOOL
48 : ite(47, 29, 30) : BV:8
49 : ite(46, 26, 48) : BV:8
50 : bvconcat(32, 38, 44, 49) : BV:32
51 : ite(18, 2, 50) : BV:32
52 : lambda(17, 51) : FUNCTION[BV:32 -> BV:32]
53 : map(16, 52) : MAP[BV:32 -> BV:32]
54 : sym_const(53) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1074790399 { 0x400fffff +1.12499988e1 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147486724 { 0x80000c04 -2147480572 -1.36668e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147486727 { 0x80000c07 -2147480569 -1.36704e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4392680 { 0x4306e8 +1.52364826e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4392683 { 0x4306eb +1.52364861e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 33564672 { 0x2002800 +1.122070e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 33564675 { 0x2002803 +1.122106e133 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2149211515 ] -> true, [ 2149211516; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda15648 : BV:32
2 : Lambda15649 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2149211515 { 0x801a5d7b -2145755781 -1.20597779e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2149211517 { 0x801a5d7d -2145755779 -1.20597803e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2149211516 { 0x801a5d7c -2145755780 -1.20597791e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 31 { 0x1f +1.369e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33 { 0x21 +1.393e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15653 : BV:32
2 : Lambda15654 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 134217731 { 0x8000003 +1.35e145 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : 134217730 { 0x8000002 +1.23e145 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : eq(23, 16) : BOOL
26 : ite(25, 18, 19) : BV:8
27 : ite(24, 15, 26) : BV:8
28 : 134217729 { 0x8000001 +1.11e145 } : BV:32
29 : bvadd(28, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 16) : BOOL
32 : ite(31, 18, 19) : BV:8
33 : ite(30, 15, 32) : BV:8
34 : 134217728 { 0x8000000 +1.0e145 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : ite(37, 18, 19) : BV:8
39 : ite(36, 15, 38) : BV:8
40 : bvconcat(21, 27, 33, 39) : BV:32
41 : bvadd(7, 9, 40) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 16) : BOOL
44 : ite(43, 18, 19) : BV:8
45 : ite(42, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 9, 40) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : ite(49, 18, 19) : BV:8
51 : ite(48, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 9, 40) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : ite(55, 18, 19) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : bvadd(9, 40) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : ite(60, 18, 19) : BV:8
62 : ite(59, 15, 61) : BV:8
63 : bvconcat(45, 51, 57, 62) : BV:32
64 : ite(6, 3, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2149211515 ] -> true, [ 2149211516; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda15657 : BV:32
2 : Lambda15658 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2149211515 { 0x801a5d7b -2145755781 -1.20597779e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2149211517 { 0x801a5d7d -2145755779 -1.20597803e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2149211516 { 0x801a5d7c -2145755780 -1.20597791e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 31 { 0x1f +1.369e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 32 { 0x20 +1.381e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33 { 0x21 +1.393e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15661 : BV:32
2 : Lambda15662 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2149211515 { 0x801a5d7b -2145755781 -1.20597779e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2149211516 { 0x801a5d7c -2145755780 -1.20597791e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2149211517 { 0x801a5d7d -2145755779 -1.20597803e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 31 { 0x1f +1.369e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 32 { 0x20 +1.381e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 33 { 0x21 +1.393e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 134217731 { 0x8000003 +1.35e145 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
58 : eq(53, 57) : BOOL
59 : 5 { 0x5 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : 134217730 { 0x8000002 +1.23e145 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : eq(64, 57) : BOOL
67 : ite(66, 59, 60) : BV:8
68 : ite(65, 56, 67) : BV:8
69 : 134217729 { 0x8000001 +1.11e145 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : ite(72, 59, 60) : BV:8
74 : ite(71, 56, 73) : BV:8
75 : 134217728 { 0x8000000 +1.0e145 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : bvconcat(62, 68, 74, 80) : BV:32
82 : bvadd(48, 50, 81) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : ite(84, 59, 60) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : bvadd(87, 50, 81) : BV:32
89 : eq(88, 54) : BOOL
90 : eq(88, 57) : BOOL
91 : ite(90, 59, 60) : BV:8
92 : ite(89, 56, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 50, 81) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : bvadd(50, 81) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : ite(101, 59, 60) : BV:8
103 : ite(100, 56, 102) : BV:8
104 : bvconcat(86, 92, 98, 103) : BV:32
105 : ite(6, 3, 104) : BV:32
106 : ite(47, 104, 105) : BV:32
107 : ite(6, 3, 106) : BV:32
108 : lambda(1, 2, 107) : FUNCTION[BV:32,BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda15666 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 67110144 { 0x4000500 +1.15258e137 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
10 : eq(8, 9) : BOOL
11 : 4 { 0x4 } : BV:8
12 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda15670 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 67110144 { 0x4000500 +1.15258e137 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
10 : eq(8, 9) : BOOL
11 : 4 { 0x4 } : BV:8
12 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda15674 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 67110144 { 0x4000500 +1.15258e137 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 138412031 { 0x83fffff +1.49999988e145 } : BV:32
10 : eq(8, 9) : BOOL
11 : 4 { 0x4 } : BV:8
12 : 138412029 { 0x83ffffd +1.49999964e145 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : ite(3, 2, 35) : BV:32
37 : lambda(1, 36) : FUNCTION[BV:32 -> BV:32]
38 : sym_const(37) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2446014189
=counter_example_end
=global nodece 48 num_edges_traversed 0
=global nodece 48 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 49
=global nodece 49 nodece z3v487.ce6107.num_edges_traversed3
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(epsilon)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3v487.ce6107 f5bc1d17da318b2d143416b0facea5
=input.spec-%var-x-1
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2382 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2383 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 21247 ] -> 128, [ 21248; 21251 ] -> 0, [ 21252; 301993999 ] -> 128, [ 301994000; 301994000 ] -> 16, [ 301994001; 1344291779 ] -> 128, [ 1344291780; 1344291782 ] -> 0, [ 1344291783; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 21247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 21248; 21251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 21252; 301993999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301994000; 301994003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301994004; 1344291779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1344291780; 1344291783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1344291784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2378 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2379 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : bvadd(30, 32, 5) : BV:32
34 : 21251 { 0x5303 +1.253331e129 } : BV:32
35 : eq(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 21248 { 0x5300 +1.253295e129 } : BV:32
38 : eq(33, 37) : BOOL
39 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
40 : eq(33, 39) : BOOL
41 : 21250 { 0x5302 +1.253319e129 } : BV:32
42 : eq(33, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(33, 43) : BOOL
45 : eq(33, 5) : BOOL
46 : 21249 { 0x5301 +1.253307e129 } : BV:32
47 : eq(33, 46) : BOOL
48 : eq(33, 30) : BOOL
49 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
50 : eq(33, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
53 : eq(33, 52) : BOOL
54 : eq(33, 1) : BOOL
55 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
56 : eq(33, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : ite(56, 36, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 36, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 36, 61) : BV:8
63 : ite(47, 36, 62) : BV:8
64 : ite(45, 36, 63) : BV:8
65 : ite(44, 36, 64) : BV:8
66 : ite(42, 36, 65) : BV:8
67 : ite(40, 36, 66) : BV:8
68 : ite(38, 36, 67) : BV:8
69 : ite(35, 36, 68) : BV:8
70 : bvadd(43, 32, 5) : BV:32
71 : eq(70, 34) : BOOL
72 : eq(70, 37) : BOOL
73 : eq(70, 39) : BOOL
74 : eq(70, 41) : BOOL
75 : eq(70, 43) : BOOL
76 : eq(70, 5) : BOOL
77 : eq(70, 46) : BOOL
78 : eq(70, 30) : BOOL
79 : eq(70, 49) : BOOL
80 : eq(70, 52) : BOOL
81 : eq(70, 1) : BOOL
82 : eq(70, 55) : BOOL
83 : ite(82, 36, 57) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 51, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 36, 88) : BV:8
90 : ite(75, 36, 89) : BV:8
91 : ite(74, 36, 90) : BV:8
92 : ite(73, 36, 91) : BV:8
93 : ite(72, 36, 92) : BV:8
94 : ite(71, 36, 93) : BV:8
95 : bvadd(1, 32, 5) : BV:32
96 : eq(95, 34) : BOOL
97 : eq(95, 37) : BOOL
98 : eq(95, 39) : BOOL
99 : eq(95, 41) : BOOL
100 : eq(95, 43) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 30) : BOOL
104 : eq(95, 49) : BOOL
105 : eq(95, 52) : BOOL
106 : eq(95, 1) : BOOL
107 : eq(95, 55) : BOOL
108 : ite(107, 36, 57) : BV:8
109 : ite(106, 36, 108) : BV:8
110 : ite(105, 36, 109) : BV:8
111 : ite(104, 51, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 36, 112) : BV:8
114 : ite(101, 36, 113) : BV:8
115 : ite(100, 36, 114) : BV:8
116 : ite(99, 36, 115) : BV:8
117 : ite(98, 36, 116) : BV:8
118 : ite(97, 36, 117) : BV:8
119 : ite(96, 36, 118) : BV:8
120 : bvadd(32, 5) : BV:32
121 : eq(120, 34) : BOOL
122 : eq(120, 37) : BOOL
123 : eq(120, 39) : BOOL
124 : eq(120, 41) : BOOL
125 : eq(120, 43) : BOOL
126 : eq(120, 5) : BOOL
127 : eq(120, 46) : BOOL
128 : eq(120, 30) : BOOL
129 : eq(120, 49) : BOOL
130 : eq(120, 52) : BOOL
131 : eq(120, 1) : BOOL
132 : eq(120, 55) : BOOL
133 : ite(132, 36, 57) : BV:8
134 : ite(131, 36, 133) : BV:8
135 : ite(130, 36, 134) : BV:8
136 : ite(129, 51, 135) : BV:8
137 : ite(128, 36, 136) : BV:8
138 : ite(127, 36, 137) : BV:8
139 : ite(126, 36, 138) : BV:8
140 : ite(125, 36, 139) : BV:8
141 : ite(124, 36, 140) : BV:8
142 : ite(123, 36, 141) : BV:8
143 : ite(122, 36, 142) : BV:8
144 : ite(121, 36, 143) : BV:8
145 : bvconcat(69, 94, 119, 144) : BV:32
146 : ite(29, 5, 145) : BV:32
147 : lambda(27, 146) : FUNCTION[BV:32 -> BV:32]
148 : map(26, 147) : MAP[BV:32 -> BV:32]
149 : sum(1, 2, 148) : SUM[UNIT,MAP[BV:32 -> BV:32]]
150 : sym_const(149) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2386 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2387 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1344291783 { 0x502043c7 +1.25206840e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 21251 { 0x5303 +1.253331e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301994003 { 0x12001013 +1.49054e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda790 : BV:32
2 : Lambda791 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda795 : BV:32
2 : Lambda796 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda798 : BV:32
2 : Lambda799 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda802 : BV:32
2 : Lambda803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3216037387
=counter_example_end
=global nodece 49 num_edges_traversed 3
=global nodece 49 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3v487.ce6143.num_edges_traversed4
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3v487.ce6143 f18fbda72a71b6432ca2f83dd535f63
=input.spec-%var-x-1
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2382 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2383 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 21247 ] -> 128, [ 21248; 21251 ] -> 0, [ 21252; 301993999 ] -> 128, [ 301994000; 301994000 ] -> 16, [ 301994001; 1344291779 ] -> 128, [ 1344291780; 1344291782 ] -> 0, [ 1344291783; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 21247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 21248; 21251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 21252; 301993999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301994000; 301994003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301994004; 1344291779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1344291780; 1344291783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1344291784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2378 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2379 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : bvadd(30, 32, 5) : BV:32
34 : 21251 { 0x5303 +1.253331e129 } : BV:32
35 : eq(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 21248 { 0x5300 +1.253295e129 } : BV:32
38 : eq(33, 37) : BOOL
39 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
40 : eq(33, 39) : BOOL
41 : 21250 { 0x5302 +1.253319e129 } : BV:32
42 : eq(33, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(33, 43) : BOOL
45 : eq(33, 5) : BOOL
46 : 21249 { 0x5301 +1.253307e129 } : BV:32
47 : eq(33, 46) : BOOL
48 : eq(33, 30) : BOOL
49 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
50 : eq(33, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
53 : eq(33, 52) : BOOL
54 : eq(33, 1) : BOOL
55 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
56 : eq(33, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : ite(56, 36, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 36, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 36, 61) : BV:8
63 : ite(47, 36, 62) : BV:8
64 : ite(45, 36, 63) : BV:8
65 : ite(44, 36, 64) : BV:8
66 : ite(42, 36, 65) : BV:8
67 : ite(40, 36, 66) : BV:8
68 : ite(38, 36, 67) : BV:8
69 : ite(35, 36, 68) : BV:8
70 : bvadd(43, 32, 5) : BV:32
71 : eq(70, 34) : BOOL
72 : eq(70, 37) : BOOL
73 : eq(70, 39) : BOOL
74 : eq(70, 41) : BOOL
75 : eq(70, 43) : BOOL
76 : eq(70, 5) : BOOL
77 : eq(70, 46) : BOOL
78 : eq(70, 30) : BOOL
79 : eq(70, 49) : BOOL
80 : eq(70, 52) : BOOL
81 : eq(70, 1) : BOOL
82 : eq(70, 55) : BOOL
83 : ite(82, 36, 57) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 51, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 36, 88) : BV:8
90 : ite(75, 36, 89) : BV:8
91 : ite(74, 36, 90) : BV:8
92 : ite(73, 36, 91) : BV:8
93 : ite(72, 36, 92) : BV:8
94 : ite(71, 36, 93) : BV:8
95 : bvadd(1, 32, 5) : BV:32
96 : eq(95, 34) : BOOL
97 : eq(95, 37) : BOOL
98 : eq(95, 39) : BOOL
99 : eq(95, 41) : BOOL
100 : eq(95, 43) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 30) : BOOL
104 : eq(95, 49) : BOOL
105 : eq(95, 52) : BOOL
106 : eq(95, 1) : BOOL
107 : eq(95, 55) : BOOL
108 : ite(107, 36, 57) : BV:8
109 : ite(106, 36, 108) : BV:8
110 : ite(105, 36, 109) : BV:8
111 : ite(104, 51, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 36, 112) : BV:8
114 : ite(101, 36, 113) : BV:8
115 : ite(100, 36, 114) : BV:8
116 : ite(99, 36, 115) : BV:8
117 : ite(98, 36, 116) : BV:8
118 : ite(97, 36, 117) : BV:8
119 : ite(96, 36, 118) : BV:8
120 : bvadd(32, 5) : BV:32
121 : eq(120, 34) : BOOL
122 : eq(120, 37) : BOOL
123 : eq(120, 39) : BOOL
124 : eq(120, 41) : BOOL
125 : eq(120, 43) : BOOL
126 : eq(120, 5) : BOOL
127 : eq(120, 46) : BOOL
128 : eq(120, 30) : BOOL
129 : eq(120, 49) : BOOL
130 : eq(120, 52) : BOOL
131 : eq(120, 1) : BOOL
132 : eq(120, 55) : BOOL
133 : ite(132, 36, 57) : BV:8
134 : ite(131, 36, 133) : BV:8
135 : ite(130, 36, 134) : BV:8
136 : ite(129, 51, 135) : BV:8
137 : ite(128, 36, 136) : BV:8
138 : ite(127, 36, 137) : BV:8
139 : ite(126, 36, 138) : BV:8
140 : ite(125, 36, 139) : BV:8
141 : ite(124, 36, 140) : BV:8
142 : ite(123, 36, 141) : BV:8
143 : ite(122, 36, 142) : BV:8
144 : ite(121, 36, 143) : BV:8
145 : bvconcat(69, 94, 119, 144) : BV:32
146 : ite(29, 5, 145) : BV:32
147 : lambda(27, 146) : FUNCTION[BV:32 -> BV:32]
148 : map(26, 147) : MAP[BV:32 -> BV:32]
149 : sum(1, 2, 148) : SUM[UNIT,MAP[BV:32 -> BV:32]]
150 : sym_const(149) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2386 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2387 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 2155905152 { 0x80808080 -2139062144 -1.392150e130 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1344291783 { 0x502043c7 +1.25206840e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 21251 { 0x5303 +1.253331e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301994003 { 0x12001013 +1.49054e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda790 : BV:32
2 : Lambda791 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda795 : BV:32
2 : Lambda796 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda798 : BV:32
2 : Lambda799 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda802 : BV:32
2 : Lambda803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3216037387
=counter_example_end
=global nodece 50 num_edges_traversed 4
=global nodece 50 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 51
=global nodece 51 nodece z3v487.ce6172.num_edges_traversed5
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3v487.ce6172 e1a1e910929274b7baaae67bb75a3860
=input.spec-%var-x-1
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda829 : BV:32
18 : Lambda827 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda828 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 21251 { 0x5303 +1.253331e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 21248 { 0x5300 +1.253295e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
67 : eq(60, 66) : BOOL
68 : 21250 { 0x5302 +1.253319e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : eq(60, 2) : BOOL
73 : 21249 { 0x5301 +1.253307e129 } : BV:32
74 : eq(60, 73) : BOOL
75 : eq(60, 56) : BOOL
76 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
77 : eq(60, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
80 : eq(60, 79) : BOOL
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : eq(60, 81) : BOOL
83 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
84 : eq(60, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : ite(84, 63, 85) : BV:8
87 : ite(82, 63, 86) : BV:8
88 : ite(80, 63, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : ite(75, 63, 89) : BV:8
91 : ite(74, 63, 90) : BV:8
92 : ite(72, 63, 91) : BV:8
93 : ite(71, 63, 92) : BV:8
94 : ite(69, 63, 93) : BV:8
95 : ite(67, 63, 94) : BV:8
96 : ite(65, 63, 95) : BV:8
97 : ite(62, 63, 96) : BV:8
98 : bvadd(70, 59, 2) : BV:32
99 : eq(98, 61) : BOOL
100 : eq(98, 64) : BOOL
101 : eq(98, 66) : BOOL
102 : eq(98, 68) : BOOL
103 : eq(98, 70) : BOOL
104 : eq(98, 2) : BOOL
105 : eq(98, 73) : BOOL
106 : eq(98, 56) : BOOL
107 : eq(98, 76) : BOOL
108 : eq(98, 79) : BOOL
109 : eq(98, 81) : BOOL
110 : eq(98, 83) : BOOL
111 : ite(110, 63, 85) : BV:8
112 : ite(109, 63, 111) : BV:8
113 : ite(108, 63, 112) : BV:8
114 : ite(107, 78, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 63, 115) : BV:8
117 : ite(104, 63, 116) : BV:8
118 : ite(103, 63, 117) : BV:8
119 : ite(102, 63, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : ite(100, 63, 120) : BV:8
122 : ite(99, 63, 121) : BV:8
123 : bvadd(81, 59, 2) : BV:32
124 : eq(123, 61) : BOOL
125 : eq(123, 64) : BOOL
126 : eq(123, 66) : BOOL
127 : eq(123, 68) : BOOL
128 : eq(123, 70) : BOOL
129 : eq(123, 2) : BOOL
130 : eq(123, 73) : BOOL
131 : eq(123, 56) : BOOL
132 : eq(123, 76) : BOOL
133 : eq(123, 79) : BOOL
134 : eq(123, 81) : BOOL
135 : eq(123, 83) : BOOL
136 : ite(135, 63, 85) : BV:8
137 : ite(134, 63, 136) : BV:8
138 : ite(133, 63, 137) : BV:8
139 : ite(132, 78, 138) : BV:8
140 : ite(131, 63, 139) : BV:8
141 : ite(130, 63, 140) : BV:8
142 : ite(129, 63, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : ite(127, 63, 143) : BV:8
145 : ite(126, 63, 144) : BV:8
146 : ite(125, 63, 145) : BV:8
147 : ite(124, 63, 146) : BV:8
148 : bvadd(59, 2) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 66) : BOOL
152 : eq(148, 68) : BOOL
153 : eq(148, 70) : BOOL
154 : eq(148, 2) : BOOL
155 : eq(148, 73) : BOOL
156 : eq(148, 56) : BOOL
157 : eq(148, 76) : BOOL
158 : eq(148, 79) : BOOL
159 : eq(148, 81) : BOOL
160 : eq(148, 83) : BOOL
161 : ite(160, 63, 85) : BV:8
162 : ite(159, 63, 161) : BV:8
163 : ite(158, 63, 162) : BV:8
164 : ite(157, 78, 163) : BV:8
165 : ite(156, 63, 164) : BV:8
166 : ite(155, 63, 165) : BV:8
167 : ite(154, 63, 166) : BV:8
168 : ite(153, 63, 167) : BV:8
169 : ite(152, 63, 168) : BV:8
170 : ite(151, 63, 169) : BV:8
171 : ite(150, 63, 170) : BV:8
172 : ite(149, 63, 171) : BV:8
173 : bvconcat(97, 122, 147, 172) : BV:32
174 : bvadd(56, 58, 173) : BV:32
175 : eq(174, 61) : BOOL
176 : eq(174, 64) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 68) : BOOL
179 : eq(174, 70) : BOOL
180 : eq(174, 2) : BOOL
181 : eq(174, 73) : BOOL
182 : eq(174, 56) : BOOL
183 : eq(174, 76) : BOOL
184 : eq(174, 79) : BOOL
185 : eq(174, 81) : BOOL
186 : eq(174, 83) : BOOL
187 : ite(186, 63, 85) : BV:8
188 : ite(185, 63, 187) : BV:8
189 : ite(184, 63, 188) : BV:8
190 : ite(183, 78, 189) : BV:8
191 : ite(182, 63, 190) : BV:8
192 : ite(181, 63, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 63, 193) : BV:8
195 : ite(178, 63, 194) : BV:8
196 : ite(177, 63, 195) : BV:8
197 : ite(176, 63, 196) : BV:8
198 : ite(175, 63, 197) : BV:8
199 : bvadd(70, 58, 173) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 66) : BOOL
203 : eq(199, 68) : BOOL
204 : eq(199, 70) : BOOL
205 : eq(199, 2) : BOOL
206 : eq(199, 73) : BOOL
207 : eq(199, 56) : BOOL
208 : eq(199, 76) : BOOL
209 : eq(199, 79) : BOOL
210 : eq(199, 81) : BOOL
211 : eq(199, 83) : BOOL
212 : ite(211, 63, 85) : BV:8
213 : ite(210, 63, 212) : BV:8
214 : ite(209, 63, 213) : BV:8
215 : ite(208, 78, 214) : BV:8
216 : ite(207, 63, 215) : BV:8
217 : ite(206, 63, 216) : BV:8
218 : ite(205, 63, 217) : BV:8
219 : ite(204, 63, 218) : BV:8
220 : ite(203, 63, 219) : BV:8
221 : ite(202, 63, 220) : BV:8
222 : ite(201, 63, 221) : BV:8
223 : ite(200, 63, 222) : BV:8
224 : bvadd(81, 58, 173) : BV:32
225 : eq(224, 61) : BOOL
226 : eq(224, 64) : BOOL
227 : eq(224, 66) : BOOL
228 : eq(224, 68) : BOOL
229 : eq(224, 70) : BOOL
230 : eq(224, 2) : BOOL
231 : eq(224, 73) : BOOL
232 : eq(224, 56) : BOOL
233 : eq(224, 76) : BOOL
234 : eq(224, 79) : BOOL
235 : eq(224, 81) : BOOL
236 : eq(224, 83) : BOOL
237 : ite(236, 63, 85) : BV:8
238 : ite(235, 63, 237) : BV:8
239 : ite(234, 63, 238) : BV:8
240 : ite(233, 78, 239) : BV:8
241 : ite(232, 63, 240) : BV:8
242 : ite(231, 63, 241) : BV:8
243 : ite(230, 63, 242) : BV:8
244 : ite(229, 63, 243) : BV:8
245 : ite(228, 63, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : ite(226, 63, 246) : BV:8
248 : ite(225, 63, 247) : BV:8
249 : bvadd(58, 173) : BV:32
250 : eq(249, 61) : BOOL
251 : eq(249, 64) : BOOL
252 : eq(249, 66) : BOOL
253 : eq(249, 68) : BOOL
254 : eq(249, 70) : BOOL
255 : eq(249, 2) : BOOL
256 : eq(249, 73) : BOOL
257 : eq(249, 56) : BOOL
258 : eq(249, 76) : BOOL
259 : eq(249, 79) : BOOL
260 : eq(249, 81) : BOOL
261 : eq(249, 83) : BOOL
262 : ite(261, 63, 85) : BV:8
263 : ite(260, 63, 262) : BV:8
264 : ite(259, 63, 263) : BV:8
265 : ite(258, 78, 264) : BV:8
266 : ite(257, 63, 265) : BV:8
267 : ite(256, 63, 266) : BV:8
268 : ite(255, 63, 267) : BV:8
269 : ite(254, 63, 268) : BV:8
270 : ite(253, 63, 269) : BV:8
271 : ite(252, 63, 270) : BV:8
272 : ite(251, 63, 271) : BV:8
273 : ite(250, 63, 272) : BV:8
274 : bvconcat(198, 223, 248, 273) : BV:32
275 : ite(55, 2, 274) : BV:32
276 : lambda(52, 275) : FUNCTION[BV:32 -> BV:32]
277 : map(51, 276) : MAP[BV:32 -> BV:32]
278 : lambda(17, 277) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
279 : map(16, 278) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
280 : sym_const(279) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2382 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2383 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 16843008 { 0x1010100 +1.784301e131 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 21247 ] -> 128, [ 21248; 21251 ] -> 0, [ 21252; 301993999 ] -> 128, [ 301994000; 301994000 ] -> 16, [ 301994001; 1344291779 ] -> 128, [ 1344291780; 1344291782 ] -> 0, [ 1344291783; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 21247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 21248; 21251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 21252; 301993999 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301994000; 301994003 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301994004; 1344291779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1344291780; 1344291783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1344291784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2378 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2379 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : bvadd(30, 32, 5) : BV:32
34 : 21251 { 0x5303 +1.253331e129 } : BV:32
35 : eq(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 21248 { 0x5300 +1.253295e129 } : BV:32
38 : eq(33, 37) : BOOL
39 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
40 : eq(33, 39) : BOOL
41 : 21250 { 0x5302 +1.253319e129 } : BV:32
42 : eq(33, 41) : BOOL
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : eq(33, 43) : BOOL
45 : eq(33, 5) : BOOL
46 : 21249 { 0x5301 +1.253307e129 } : BV:32
47 : eq(33, 46) : BOOL
48 : eq(33, 30) : BOOL
49 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
50 : eq(33, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
53 : eq(33, 52) : BOOL
54 : eq(33, 1) : BOOL
55 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
56 : eq(33, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : ite(56, 36, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 36, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(48, 36, 61) : BV:8
63 : ite(47, 36, 62) : BV:8
64 : ite(45, 36, 63) : BV:8
65 : ite(44, 36, 64) : BV:8
66 : ite(42, 36, 65) : BV:8
67 : ite(40, 36, 66) : BV:8
68 : ite(38, 36, 67) : BV:8
69 : ite(35, 36, 68) : BV:8
70 : bvadd(43, 32, 5) : BV:32
71 : eq(70, 34) : BOOL
72 : eq(70, 37) : BOOL
73 : eq(70, 39) : BOOL
74 : eq(70, 41) : BOOL
75 : eq(70, 43) : BOOL
76 : eq(70, 5) : BOOL
77 : eq(70, 46) : BOOL
78 : eq(70, 30) : BOOL
79 : eq(70, 49) : BOOL
80 : eq(70, 52) : BOOL
81 : eq(70, 1) : BOOL
82 : eq(70, 55) : BOOL
83 : ite(82, 36, 57) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 36, 84) : BV:8
86 : ite(79, 51, 85) : BV:8
87 : ite(78, 36, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 36, 88) : BV:8
90 : ite(75, 36, 89) : BV:8
91 : ite(74, 36, 90) : BV:8
92 : ite(73, 36, 91) : BV:8
93 : ite(72, 36, 92) : BV:8
94 : ite(71, 36, 93) : BV:8
95 : bvadd(1, 32, 5) : BV:32
96 : eq(95, 34) : BOOL
97 : eq(95, 37) : BOOL
98 : eq(95, 39) : BOOL
99 : eq(95, 41) : BOOL
100 : eq(95, 43) : BOOL
101 : eq(95, 5) : BOOL
102 : eq(95, 46) : BOOL
103 : eq(95, 30) : BOOL
104 : eq(95, 49) : BOOL
105 : eq(95, 52) : BOOL
106 : eq(95, 1) : BOOL
107 : eq(95, 55) : BOOL
108 : ite(107, 36, 57) : BV:8
109 : ite(106, 36, 108) : BV:8
110 : ite(105, 36, 109) : BV:8
111 : ite(104, 51, 110) : BV:8
112 : ite(103, 36, 111) : BV:8
113 : ite(102, 36, 112) : BV:8
114 : ite(101, 36, 113) : BV:8
115 : ite(100, 36, 114) : BV:8
116 : ite(99, 36, 115) : BV:8
117 : ite(98, 36, 116) : BV:8
118 : ite(97, 36, 117) : BV:8
119 : ite(96, 36, 118) : BV:8
120 : bvadd(32, 5) : BV:32
121 : eq(120, 34) : BOOL
122 : eq(120, 37) : BOOL
123 : eq(120, 39) : BOOL
124 : eq(120, 41) : BOOL
125 : eq(120, 43) : BOOL
126 : eq(120, 5) : BOOL
127 : eq(120, 46) : BOOL
128 : eq(120, 30) : BOOL
129 : eq(120, 49) : BOOL
130 : eq(120, 52) : BOOL
131 : eq(120, 1) : BOOL
132 : eq(120, 55) : BOOL
133 : ite(132, 36, 57) : BV:8
134 : ite(131, 36, 133) : BV:8
135 : ite(130, 36, 134) : BV:8
136 : ite(129, 51, 135) : BV:8
137 : ite(128, 36, 136) : BV:8
138 : ite(127, 36, 137) : BV:8
139 : ite(126, 36, 138) : BV:8
140 : ite(125, 36, 139) : BV:8
141 : ite(124, 36, 140) : BV:8
142 : ite(123, 36, 141) : BV:8
143 : ite(122, 36, 142) : BV:8
144 : ite(121, 36, 143) : BV:8
145 : bvconcat(69, 94, 119, 144) : BV:32
146 : ite(29, 5, 145) : BV:32
147 : lambda(27, 146) : FUNCTION[BV:32 -> BV:32]
148 : map(26, 147) : MAP[BV:32 -> BV:32]
149 : sum(1, 2, 148) : SUM[UNIT,MAP[BV:32 -> BV:32]]
150 : sym_const(149) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2386 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2387 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : bvadd(28, 30, 3) : BV:32
32 : 21251 { 0x5303 +1.253331e129 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 21248 { 0x5300 +1.253295e129 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
38 : eq(31, 37) : BOOL
39 : 21250 { 0x5302 +1.253319e129 } : BV:32
40 : eq(31, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : eq(31, 41) : BOOL
43 : eq(31, 3) : BOOL
44 : 21249 { 0x5301 +1.253307e129 } : BV:32
45 : eq(31, 44) : BOOL
46 : eq(31, 28) : BOOL
47 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
48 : eq(31, 47) : BOOL
49 : 16 { 0x10 } : BV:8
50 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
51 : eq(31, 50) : BOOL
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : eq(31, 52) : BOOL
54 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
55 : eq(31, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : ite(55, 34, 56) : BV:8
58 : ite(53, 34, 57) : BV:8
59 : ite(51, 34, 58) : BV:8
60 : ite(48, 49, 59) : BV:8
61 : ite(46, 34, 60) : BV:8
62 : ite(45, 34, 61) : BV:8
63 : ite(43, 34, 62) : BV:8
64 : ite(42, 34, 63) : BV:8
65 : ite(40, 34, 64) : BV:8
66 : ite(38, 34, 65) : BV:8
67 : ite(36, 34, 66) : BV:8
68 : ite(33, 34, 67) : BV:8
69 : bvadd(41, 30, 3) : BV:32
70 : eq(69, 32) : BOOL
71 : eq(69, 35) : BOOL
72 : eq(69, 37) : BOOL
73 : eq(69, 39) : BOOL
74 : eq(69, 41) : BOOL
75 : eq(69, 3) : BOOL
76 : eq(69, 44) : BOOL
77 : eq(69, 28) : BOOL
78 : eq(69, 47) : BOOL
79 : eq(69, 50) : BOOL
80 : eq(69, 52) : BOOL
81 : eq(69, 54) : BOOL
82 : ite(81, 34, 56) : BV:8
83 : ite(80, 34, 82) : BV:8
84 : ite(79, 34, 83) : BV:8
85 : ite(78, 49, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 34, 86) : BV:8
88 : ite(75, 34, 87) : BV:8
89 : ite(74, 34, 88) : BV:8
90 : ite(73, 34, 89) : BV:8
91 : ite(72, 34, 90) : BV:8
92 : ite(71, 34, 91) : BV:8
93 : ite(70, 34, 92) : BV:8
94 : bvadd(52, 30, 3) : BV:32
95 : eq(94, 32) : BOOL
96 : eq(94, 35) : BOOL
97 : eq(94, 37) : BOOL
98 : eq(94, 39) : BOOL
99 : eq(94, 41) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 28) : BOOL
103 : eq(94, 47) : BOOL
104 : eq(94, 50) : BOOL
105 : eq(94, 52) : BOOL
106 : eq(94, 54) : BOOL
107 : ite(106, 34, 56) : BV:8
108 : ite(105, 34, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 49, 109) : BV:8
111 : ite(102, 34, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 34, 112) : BV:8
114 : ite(99, 34, 113) : BV:8
115 : ite(98, 34, 114) : BV:8
116 : ite(97, 34, 115) : BV:8
117 : ite(96, 34, 116) : BV:8
118 : ite(95, 34, 117) : BV:8
119 : bvadd(30, 3) : BV:32
120 : eq(119, 32) : BOOL
121 : eq(119, 35) : BOOL
122 : eq(119, 37) : BOOL
123 : eq(119, 39) : BOOL
124 : eq(119, 41) : BOOL
125 : eq(119, 3) : BOOL
126 : eq(119, 44) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 47) : BOOL
129 : eq(119, 50) : BOOL
130 : eq(119, 52) : BOOL
131 : eq(119, 54) : BOOL
132 : ite(131, 34, 56) : BV:8
133 : ite(130, 34, 132) : BV:8
134 : ite(129, 34, 133) : BV:8
135 : ite(128, 49, 134) : BV:8
136 : ite(127, 34, 135) : BV:8
137 : ite(126, 34, 136) : BV:8
138 : ite(125, 34, 137) : BV:8
139 : ite(124, 34, 138) : BV:8
140 : ite(123, 34, 139) : BV:8
141 : ite(122, 34, 140) : BV:8
142 : ite(121, 34, 141) : BV:8
143 : ite(120, 34, 142) : BV:8
144 : bvconcat(68, 93, 118, 143) : BV:32
145 : ite(27, 3, 144) : BV:32
146 : lambda(25, 145) : FUNCTION[BV:32 -> BV:32]
147 : map(24, 146) : MAP[BV:32 -> BV:32]
148 : sym_const(147) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 16843008 { 0x1010100 +1.784301e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1693888432 { 0x64f6afb0 +1.92723655e74 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1344291783 { 0x502043c7 +1.25206840e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 21248 { 0x5300 +1.253295e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 21251 { 0x5303 +1.253331e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301994003 { 0x12001013 +1.49054e165 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda790 : BV:32
2 : Lambda791 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda795 : BV:32
2 : Lambda796 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda798 : BV:32
2 : Lambda799 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905039 { 0x8080800f -2139062257 -1.390803e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905040 { 0x80808010 -2139062256 -1.390815e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905041 { 0x80808011 -2139062255 -1.390827e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda802 : BV:32
2 : Lambda803 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 21251 { 0x5303 +1.253331e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 21248 { 0x5300 +1.253295e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1344291782 { 0x502043c6 +1.25206828e33 } : BV:32
18 : eq(11, 17) : BOOL
19 : 21250 { 0x5302 +1.253319e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : eq(11, 3) : BOOL
24 : 21249 { 0x5301 +1.253307e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : eq(11, 7) : BOOL
27 : 301994000 { 0x12001010 +1.49018e165 } : BV:32
28 : eq(11, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1344291780 { 0x502043c4 +1.25206804e33 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : eq(11, 32) : BOOL
34 : 1344291781 { 0x502043c5 +1.25206816e33 } : BV:32
35 : eq(11, 34) : BOOL
36 : 128 { 0x80 -128 } : BV:8
37 : ite(35, 14, 36) : BV:8
38 : ite(33, 14, 37) : BV:8
39 : ite(31, 14, 38) : BV:8
40 : ite(28, 29, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(25, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(22, 14, 43) : BV:8
45 : ite(20, 14, 44) : BV:8
46 : ite(18, 14, 45) : BV:8
47 : ite(16, 14, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(21, 10, 3) : BV:32
50 : eq(49, 12) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 17) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 3) : BOOL
56 : eq(49, 24) : BOOL
57 : eq(49, 7) : BOOL
58 : eq(49, 27) : BOOL
59 : eq(49, 30) : BOOL
60 : eq(49, 32) : BOOL
61 : eq(49, 34) : BOOL
62 : ite(61, 14, 36) : BV:8
63 : ite(60, 14, 62) : BV:8
64 : ite(59, 14, 63) : BV:8
65 : ite(58, 29, 64) : BV:8
66 : ite(57, 14, 65) : BV:8
67 : ite(56, 14, 66) : BV:8
68 : ite(55, 14, 67) : BV:8
69 : ite(54, 14, 68) : BV:8
70 : ite(53, 14, 69) : BV:8
71 : ite(52, 14, 70) : BV:8
72 : ite(51, 14, 71) : BV:8
73 : ite(50, 14, 72) : BV:8
74 : bvadd(32, 10, 3) : BV:32
75 : eq(74, 12) : BOOL
76 : eq(74, 15) : BOOL
77 : eq(74, 17) : BOOL
78 : eq(74, 19) : BOOL
79 : eq(74, 21) : BOOL
80 : eq(74, 3) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 7) : BOOL
83 : eq(74, 27) : BOOL
84 : eq(74, 30) : BOOL
85 : eq(74, 32) : BOOL
86 : eq(74, 34) : BOOL
87 : ite(86, 14, 36) : BV:8
88 : ite(85, 14, 87) : BV:8
89 : ite(84, 14, 88) : BV:8
90 : ite(83, 29, 89) : BV:8
91 : ite(82, 14, 90) : BV:8
92 : ite(81, 14, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 14, 93) : BV:8
95 : ite(78, 14, 94) : BV:8
96 : ite(77, 14, 95) : BV:8
97 : ite(76, 14, 96) : BV:8
98 : ite(75, 14, 97) : BV:8
99 : bvadd(10, 3) : BV:32
100 : eq(99, 12) : BOOL
101 : eq(99, 15) : BOOL
102 : eq(99, 17) : BOOL
103 : eq(99, 19) : BOOL
104 : eq(99, 21) : BOOL
105 : eq(99, 3) : BOOL
106 : eq(99, 24) : BOOL
107 : eq(99, 7) : BOOL
108 : eq(99, 27) : BOOL
109 : eq(99, 30) : BOOL
110 : eq(99, 32) : BOOL
111 : eq(99, 34) : BOOL
112 : ite(111, 14, 36) : BV:8
113 : ite(110, 14, 112) : BV:8
114 : ite(109, 14, 113) : BV:8
115 : ite(108, 29, 114) : BV:8
116 : ite(107, 14, 115) : BV:8
117 : ite(106, 14, 116) : BV:8
118 : ite(105, 14, 117) : BV:8
119 : ite(104, 14, 118) : BV:8
120 : ite(103, 14, 119) : BV:8
121 : ite(102, 14, 120) : BV:8
122 : ite(101, 14, 121) : BV:8
123 : ite(100, 14, 122) : BV:8
124 : bvconcat(48, 73, 98, 123) : BV:32
125 : bvadd(7, 9, 124) : BV:32
126 : eq(125, 12) : BOOL
127 : eq(125, 15) : BOOL
128 : eq(125, 17) : BOOL
129 : eq(125, 19) : BOOL
130 : eq(125, 21) : BOOL
131 : eq(125, 3) : BOOL
132 : eq(125, 24) : BOOL
133 : eq(125, 7) : BOOL
134 : eq(125, 27) : BOOL
135 : eq(125, 30) : BOOL
136 : eq(125, 32) : BOOL
137 : eq(125, 34) : BOOL
138 : ite(137, 14, 36) : BV:8
139 : ite(136, 14, 138) : BV:8
140 : ite(135, 14, 139) : BV:8
141 : ite(134, 29, 140) : BV:8
142 : ite(133, 14, 141) : BV:8
143 : ite(132, 14, 142) : BV:8
144 : ite(131, 14, 143) : BV:8
145 : ite(130, 14, 144) : BV:8
146 : ite(129, 14, 145) : BV:8
147 : ite(128, 14, 146) : BV:8
148 : ite(127, 14, 147) : BV:8
149 : ite(126, 14, 148) : BV:8
150 : bvadd(21, 9, 124) : BV:32
151 : eq(150, 12) : BOOL
152 : eq(150, 15) : BOOL
153 : eq(150, 17) : BOOL
154 : eq(150, 19) : BOOL
155 : eq(150, 21) : BOOL
156 : eq(150, 3) : BOOL
157 : eq(150, 24) : BOOL
158 : eq(150, 7) : BOOL
159 : eq(150, 27) : BOOL
160 : eq(150, 30) : BOOL
161 : eq(150, 32) : BOOL
162 : eq(150, 34) : BOOL
163 : ite(162, 14, 36) : BV:8
164 : ite(161, 14, 163) : BV:8
165 : ite(160, 14, 164) : BV:8
166 : ite(159, 29, 165) : BV:8
167 : ite(158, 14, 166) : BV:8
168 : ite(157, 14, 167) : BV:8
169 : ite(156, 14, 168) : BV:8
170 : ite(155, 14, 169) : BV:8
171 : ite(154, 14, 170) : BV:8
172 : ite(153, 14, 171) : BV:8
173 : ite(152, 14, 172) : BV:8
174 : ite(151, 14, 173) : BV:8
175 : bvadd(32, 9, 124) : BV:32
176 : eq(175, 12) : BOOL
177 : eq(175, 15) : BOOL
178 : eq(175, 17) : BOOL
179 : eq(175, 19) : BOOL
180 : eq(175, 21) : BOOL
181 : eq(175, 3) : BOOL
182 : eq(175, 24) : BOOL
183 : eq(175, 7) : BOOL
184 : eq(175, 27) : BOOL
185 : eq(175, 30) : BOOL
186 : eq(175, 32) : BOOL
187 : eq(175, 34) : BOOL
188 : ite(187, 14, 36) : BV:8
189 : ite(186, 14, 188) : BV:8
190 : ite(185, 14, 189) : BV:8
191 : ite(184, 29, 190) : BV:8
192 : ite(183, 14, 191) : BV:8
193 : ite(182, 14, 192) : BV:8
194 : ite(181, 14, 193) : BV:8
195 : ite(180, 14, 194) : BV:8
196 : ite(179, 14, 195) : BV:8
197 : ite(178, 14, 196) : BV:8
198 : ite(177, 14, 197) : BV:8
199 : ite(176, 14, 198) : BV:8
200 : bvadd(9, 124) : BV:32
201 : eq(200, 12) : BOOL
202 : eq(200, 15) : BOOL
203 : eq(200, 17) : BOOL
204 : eq(200, 19) : BOOL
205 : eq(200, 21) : BOOL
206 : eq(200, 3) : BOOL
207 : eq(200, 24) : BOOL
208 : eq(200, 7) : BOOL
209 : eq(200, 27) : BOOL
210 : eq(200, 30) : BOOL
211 : eq(200, 32) : BOOL
212 : eq(200, 34) : BOOL
213 : ite(212, 14, 36) : BV:8
214 : ite(211, 14, 213) : BV:8
215 : ite(210, 14, 214) : BV:8
216 : ite(209, 29, 215) : BV:8
217 : ite(208, 14, 216) : BV:8
218 : ite(207, 14, 217) : BV:8
219 : ite(206, 14, 218) : BV:8
220 : ite(205, 14, 219) : BV:8
221 : ite(204, 14, 220) : BV:8
222 : ite(203, 14, 221) : BV:8
223 : ite(202, 14, 222) : BV:8
224 : ite(201, 14, 223) : BV:8
225 : bvconcat(149, 174, 199, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : ite(6, 3, 226) : BV:32
228 : lambda(1, 2, 227) : FUNCTION[BV:32,BV:32 -> BV:32]
229 : sym_const(228) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3216037387
=counter_example_end
=global nodece 51 num_edges_traversed 5
=global nodece 51 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 52
=global nodece 52 nodece z3v487.ce6097.num_edges_traversed2
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(epsilon)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3v487.ce6097 b64e3f6227f06bdd410944346c9f45d
=input.spec-%var-x-1
1 : Lambda2213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2216 : BV:32
18 : Lambda2214 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2215 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2221 : BV:32
18 : Lambda2219 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2220 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2362 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2363 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 4015 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4016; 4019 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4020; 67633731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67633732; 67633735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67633736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2358 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 65535 { 0xffff +1.781238e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 65536 { 0x10000 +1.781250e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 65537 { 0x10001 +1.781261e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2359 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2366 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2367 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4019 { 0xfb3 +1.47910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67633735 { 0x4080247 +1.6256949e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda2173 : BV:32
2 : Lambda2174 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda2182 : BV:32
2 : Lambda2183 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2186 : BV:32
2 : Lambda2187 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2167834873
=counter_example_end
=global nodece 52 num_edges_traversed 2
=global nodece 52 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3v487.ce6202.num_edges_traversed3
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3v487.ce6202 773f1664bd1fa23c9e6bc0695a8d635c
=input.spec-%var-x-1
1 : Lambda2213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2216 : BV:32
18 : Lambda2214 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2215 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2221 : BV:32
18 : Lambda2219 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2220 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2362 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2363 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 4015 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4016; 4019 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4020; 67633731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67633732; 67633735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67633736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2358 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 65535 { 0xffff +1.781238e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 65536 { 0x10000 +1.781250e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 65537 { 0x10001 +1.781261e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2359 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2366 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2367 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4019 { 0xfb3 +1.47910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67633735 { 0x4080247 +1.6256949e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda2173 : BV:32
2 : Lambda2174 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda2182 : BV:32
2 : Lambda2183 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2186 : BV:32
2 : Lambda2187 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2167834873
=counter_example_end
=global nodece 53 num_edges_traversed 3
=global nodece 53 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3v487.ce6231.num_edges_traversed4
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(epsilon)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3v487.ce6231 b1a29222c42c9c67e5d65ef59eea74a
=input.spec-%var-x-1
1 : Lambda2213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2216 : BV:32
18 : Lambda2214 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2215 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda2218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2221 : BV:32
18 : Lambda2219 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda2220 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda2362 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2363 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 4015 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4016; 4019 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4020; 67633731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67633732; 67633735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67633736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda2358 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 65535 { 0xffff +1.781238e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 65536 { 0x10000 +1.781250e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 65537 { 0x10001 +1.781261e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda2359 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda2366 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 65535 { 0xffff +1.781238e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 65537 { 0x10001 +1.781261e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda2367 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4016 { 0xfb0 +1.47874e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4019 { 0xfb3 +1.47910e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67633732 { 0x4080244 +1.6256914e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67633735 { 0x4080247 +1.6256949e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda2173 : BV:32
2 : Lambda2174 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda2182 : BV:32
2 : Lambda2183 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda2186 : BV:32
2 : Lambda2187 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2167834873
=counter_example_end
=global nodece 54 num_edges_traversed 4
=global nodece 54 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 55
=global nodece 55 nodece z3.ce6073.num_edges_traversed2
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(epsilon)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce6073 1fe6287d70aedef5a87ff62484db5
=input.spec-%var-x-1
1 : Lambda8073 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8076 : BV:32
18 : Lambda8074 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 524289 { 0x80001 +1.6250011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda8075 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 140 { 0x8c -116 } : BV:8
81 : eq(78, 74) : BOOL
82 : 225 { 0xe1 -31 } : BV:8
83 : eq(78, 36) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : eq(78, 40) : BOOL
86 : 216 { 0xd8 -40 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda8078 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8081 : BV:32
18 : Lambda8079 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 524289 { 0x80001 +1.6250011e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda8080 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 140 { 0x8c -116 } : BV:8
62 : eq(59, 55) : BOOL
63 : 225 { 0xe1 -31 } : BV:8
64 : eq(59, 36) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : eq(59, 40) : BOOL
67 : 216 { 0xd8 -40 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda9137 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda9138 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 24) : BV:32
30 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
31 : bvadd(27, 29, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : 140 { 0x8c -116 } : BV:8
34 : eq(31, 27) : BOOL
35 : 225 { 0xe1 -31 } : BV:8
36 : eq(31, 7) : BOOL
37 : 223 { 0xdf -33 } : BV:8
38 : eq(31, 11) : BOOL
39 : 216 { 0xd8 -40 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 37, 41) : BV:8
43 : ite(34, 35, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : bvadd(11, 29, 30) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 27) : BOOL
48 : eq(45, 7) : BOOL
49 : eq(45, 11) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 37, 50) : BV:8
52 : ite(47, 35, 51) : BV:8
53 : ite(46, 33, 52) : BV:8
54 : bvadd(7, 29, 30) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 7) : BOOL
58 : eq(54, 11) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 37, 59) : BV:8
61 : ite(56, 35, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : bvadd(29, 30) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 7) : BOOL
67 : eq(63, 11) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 37, 68) : BV:8
70 : ite(65, 35, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(26, 3, 72) : BV:32
74 : lambda(24, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(23, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 140, [ 1; 1 ] -> 223, [ 2; 2 ] -> 216, [ 3; 3 ] -> 225, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059478939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059478940; 1059478943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059478944; 2715420247 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2715420248; 2715420251 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2715420252; 3966472715 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3966472716; 3966472719 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3966472720; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059478940 { 0x3f265d9c +1.29973173e255 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3966472716 { 0xec6b920c -328494580 -1.84039449e89 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2715420248 { 0xa1da0658 -1579547048 -1.70331859e196 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda9133 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda9134 : BV:32
26 : eq(25, 5) : BOOL
27 : and(4, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
32 : bvadd(28, 30, 31) : BV:32
33 : eq(32, 5) : BOOL
34 : 140 { 0x8c -116 } : BV:8
35 : eq(32, 28) : BOOL
36 : 225 { 0xe1 -31 } : BV:8
37 : eq(32, 1) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : eq(32, 12) : BOOL
40 : 216 { 0xd8 -40 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 38, 42) : BV:8
44 : ite(35, 36, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : bvadd(12, 30, 31) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 1) : BOOL
50 : eq(46, 12) : BOOL
51 : ite(50, 40, 41) : BV:8
52 : ite(49, 38, 51) : BV:8
53 : ite(48, 36, 52) : BV:8
54 : ite(47, 34, 53) : BV:8
55 : bvadd(1, 30, 31) : BV:32
56 : eq(55, 5) : BOOL
57 : eq(55, 28) : BOOL
58 : eq(55, 1) : BOOL
59 : eq(55, 12) : BOOL
60 : ite(59, 40, 41) : BV:8
61 : ite(58, 38, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 34, 62) : BV:8
64 : bvadd(30, 31) : BV:32
65 : eq(64, 5) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 1) : BOOL
68 : eq(64, 12) : BOOL
69 : ite(68, 40, 41) : BV:8
70 : ite(67, 38, 69) : BV:8
71 : ite(66, 36, 70) : BV:8
72 : ite(65, 34, 71) : BV:8
73 : bvconcat(45, 54, 63, 72) : BV:32
74 : ite(27, 5, 73) : BV:32
75 : lambda(25, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(24, 75) : MAP[BV:32 -> BV:32]
77 : sum(1, 2, 76) : SUM[UNIT,MAP[BV:32 -> BV:32]]
78 : sym_const(77) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda9141 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda9142 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : 3 { 0x3 +1.35e129 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 24) : BV:32
30 : 3789086604 { 0xe1d8df8c -505880692 -1.69432210e68 } : BV:32
31 : bvadd(27, 29, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : 140 { 0x8c -116 } : BV:8
34 : eq(31, 27) : BOOL
35 : 225 { 0xe1 -31 } : BV:8
36 : eq(31, 7) : BOOL
37 : 223 { 0xdf -33 } : BV:8
38 : eq(31, 11) : BOOL
39 : 216 { 0xd8 -40 } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(36, 37, 41) : BV:8
43 : ite(34, 35, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : bvadd(11, 29, 30) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 27) : BOOL
48 : eq(45, 7) : BOOL
49 : eq(45, 11) : BOOL
50 : ite(49, 39, 40) : BV:8
51 : ite(48, 37, 50) : BV:8
52 : ite(47, 35, 51) : BV:8
53 : ite(46, 33, 52) : BV:8
54 : bvadd(7, 29, 30) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 7) : BOOL
58 : eq(54, 11) : BOOL
59 : ite(58, 39, 40) : BV:8
60 : ite(57, 37, 59) : BV:8
61 : ite(56, 35, 60) : BV:8
62 : ite(55, 33, 61) : BV:8
63 : bvadd(29, 30) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 7) : BOOL
67 : eq(63, 11) : BOOL
68 : ite(67, 39, 40) : BV:8
69 : ite(66, 37, 68) : BV:8
70 : ite(65, 35, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : bvconcat(44, 53, 62, 71) : BV:32
73 : ite(26, 3, 72) : BV:32
74 : lambda(24, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(23, 74) : MAP[BV:32 -> BV:32]
76 : sym_const(75) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3966472716 { 0xec6b920c -328494580 -1.84039449e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3966472719 { 0xec6b920f -328494577 -1.84039485e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2715420248 { 0xa1da0658 -1579547048 -1.70331859e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2715420251 { 0xa1da065b -1579547045 -1.70331895e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059478940 { 0x3f265d9c +1.29973173e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059478943 { 0x3f265d9f +1.29973208e255 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda8030 : BV:32
2 : Lambda8031 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 524289 { 0x80001 +1.6250011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda8035 : BV:32
2 : Lambda8036 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 524288 { 0x80000 +1.6250000e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 524289 { 0x80001 +1.6250011e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 140 { 0x8c -116 } : BV:8
54 : eq(51, 47) : BOOL
55 : 225 { 0xe1 -31 } : BV:8
56 : eq(51, 32) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : eq(51, 36) : BOOL
59 : 216 { 0xd8 -40 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda8041 : BV:32
2 : Lambda8042 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 524289 { 0x80001 +1.6250011e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda8037 : BV:32
2 : Lambda8038 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 140 { 0x8c -116 } : BV:8
14 : eq(11, 7) : BOOL
15 : 225 { 0xe1 -31 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 223 { 0xdf -33 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 216 { 0xd8 -40 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1234228002
=counter_example_end
=global nodece 55 num_edges_traversed 2
=global nodece 55 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 56
=global nodece 56 nodece z3.ce6018.num_edges_traversed1
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce6018 7a631fb74756ff54bb2bb1e5cb207e3d
=input.spec-%var-x-1
1 : Lambda15690 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15693 : BV:32
18 : Lambda15691 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15692 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 119 { 0x77 } : BV:8
83 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 64 { 0x40 } : BV:8
86 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
87 : eq(80, 86) : BOOL
88 : 177 { 0xb1 -79 } : BV:8
89 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 34 { 0x22 } : BV:8
92 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 1 { 0x1 } : BV:8
95 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 235 { 0xeb -21 } : BV:8
98 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 255 { 0xff -1 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(96, 97, 102) : BV:8
104 : ite(93, 94, 103) : BV:8
105 : ite(90, 91, 104) : BV:8
106 : ite(87, 88, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(81, 82, 107) : BV:8
109 : bvadd(95, 79) : BV:32
110 : eq(109, 78) : BOOL
111 : eq(109, 83) : BOOL
112 : eq(109, 86) : BOOL
113 : eq(109, 89) : BOOL
114 : eq(109, 92) : BOOL
115 : eq(109, 95) : BOOL
116 : eq(109, 98) : BOOL
117 : ite(116, 100, 101) : BV:8
118 : ite(115, 97, 117) : BV:8
119 : ite(114, 94, 118) : BV:8
120 : ite(113, 91, 119) : BV:8
121 : ite(112, 88, 120) : BV:8
122 : ite(111, 85, 121) : BV:8
123 : ite(110, 82, 122) : BV:8
124 : bvadd(98, 79) : BV:32
125 : eq(124, 78) : BOOL
126 : eq(124, 83) : BOOL
127 : eq(124, 86) : BOOL
128 : eq(124, 89) : BOOL
129 : eq(124, 92) : BOOL
130 : eq(124, 95) : BOOL
131 : eq(124, 98) : BOOL
132 : ite(131, 100, 101) : BV:8
133 : ite(130, 97, 132) : BV:8
134 : ite(129, 94, 133) : BV:8
135 : ite(128, 91, 134) : BV:8
136 : ite(127, 88, 135) : BV:8
137 : ite(126, 85, 136) : BV:8
138 : ite(125, 82, 137) : BV:8
139 : bvadd(86, 79) : BV:32
140 : eq(139, 78) : BOOL
141 : eq(139, 83) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 89) : BOOL
144 : eq(139, 92) : BOOL
145 : eq(139, 95) : BOOL
146 : eq(139, 98) : BOOL
147 : ite(146, 100, 101) : BV:8
148 : ite(145, 97, 147) : BV:8
149 : ite(144, 94, 148) : BV:8
150 : ite(143, 91, 149) : BV:8
151 : ite(142, 88, 150) : BV:8
152 : ite(141, 85, 151) : BV:8
153 : ite(140, 82, 152) : BV:8
154 : bvconcat(108, 123, 138, 153) : BV:32
155 : bvadd(75, 77, 154) : BV:32
156 : eq(155, 78) : BOOL
157 : eq(155, 83) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : ite(162, 100, 101) : BV:8
164 : ite(161, 97, 163) : BV:8
165 : ite(160, 94, 164) : BV:8
166 : ite(159, 91, 165) : BV:8
167 : ite(158, 88, 166) : BV:8
168 : ite(157, 85, 167) : BV:8
169 : ite(156, 82, 168) : BV:8
170 : 2 { 0x2 +1.23e129 } : BV:32
171 : bvadd(170, 77, 154) : BV:32
172 : eq(171, 78) : BOOL
173 : eq(171, 83) : BOOL
174 : eq(171, 86) : BOOL
175 : eq(171, 89) : BOOL
176 : eq(171, 92) : BOOL
177 : eq(171, 95) : BOOL
178 : eq(171, 98) : BOOL
179 : ite(178, 100, 101) : BV:8
180 : ite(177, 97, 179) : BV:8
181 : ite(176, 94, 180) : BV:8
182 : ite(175, 91, 181) : BV:8
183 : ite(174, 88, 182) : BV:8
184 : ite(173, 85, 183) : BV:8
185 : ite(172, 82, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 77, 154) : BV:32
188 : eq(187, 78) : BOOL
189 : eq(187, 83) : BOOL
190 : eq(187, 86) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : eq(187, 98) : BOOL
195 : ite(194, 100, 101) : BV:8
196 : ite(193, 97, 195) : BV:8
197 : ite(192, 94, 196) : BV:8
198 : ite(191, 91, 197) : BV:8
199 : ite(190, 88, 198) : BV:8
200 : ite(189, 85, 199) : BV:8
201 : ite(188, 82, 200) : BV:8
202 : bvadd(77, 154) : BV:32
203 : eq(202, 78) : BOOL
204 : eq(202, 83) : BOOL
205 : eq(202, 86) : BOOL
206 : eq(202, 89) : BOOL
207 : eq(202, 92) : BOOL
208 : eq(202, 95) : BOOL
209 : eq(202, 98) : BOOL
210 : ite(209, 100, 101) : BV:8
211 : ite(208, 97, 210) : BV:8
212 : ite(207, 94, 211) : BV:8
213 : ite(206, 91, 212) : BV:8
214 : ite(205, 88, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 82, 215) : BV:8
217 : bvconcat(169, 185, 201, 216) : BV:32
218 : ite(55, 2, 217) : BV:32
219 : ite(74, 217, 218) : BV:32
220 : ite(55, 2, 219) : BV:32
221 : lambda(52, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(51, 221) : MAP[BV:32 -> BV:32]
223 : lambda(17, 222) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
224 : map(16, 223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
225 : sym_const(224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15698 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15701 : BV:32
18 : Lambda15699 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15700 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 119 { 0x77 } : BV:8
64 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 64 { 0x40 } : BV:8
67 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
68 : eq(61, 67) : BOOL
69 : 177 { 0xb1 -79 } : BV:8
70 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 34 { 0x22 } : BV:8
73 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 1 { 0x1 } : BV:8
76 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 235 { 0xeb -21 } : BV:8
79 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 255 { 0xff -1 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(71, 72, 85) : BV:8
87 : ite(68, 69, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(76, 60) : BV:32
91 : eq(90, 59) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 67) : BOOL
94 : eq(90, 70) : BOOL
95 : eq(90, 73) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 63, 103) : BV:8
105 : bvadd(79, 60) : BV:32
106 : eq(105, 59) : BOOL
107 : eq(105, 64) : BOOL
108 : eq(105, 67) : BOOL
109 : eq(105, 70) : BOOL
110 : eq(105, 73) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 72, 115) : BV:8
117 : ite(108, 69, 116) : BV:8
118 : ite(107, 66, 117) : BV:8
119 : ite(106, 63, 118) : BV:8
120 : bvadd(67, 60) : BV:32
121 : eq(120, 59) : BOOL
122 : eq(120, 64) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 70) : BOOL
125 : eq(120, 73) : BOOL
126 : eq(120, 76) : BOOL
127 : eq(120, 79) : BOOL
128 : ite(127, 81, 82) : BV:8
129 : ite(126, 78, 128) : BV:8
130 : ite(125, 75, 129) : BV:8
131 : ite(124, 72, 130) : BV:8
132 : ite(123, 69, 131) : BV:8
133 : ite(122, 66, 132) : BV:8
134 : ite(121, 63, 133) : BV:8
135 : bvconcat(89, 104, 119, 134) : BV:32
136 : bvadd(56, 58, 135) : BV:32
137 : eq(136, 59) : BOOL
138 : eq(136, 64) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : ite(143, 81, 82) : BV:8
145 : ite(142, 78, 144) : BV:8
146 : ite(141, 75, 145) : BV:8
147 : ite(140, 72, 146) : BV:8
148 : ite(139, 69, 147) : BV:8
149 : ite(138, 66, 148) : BV:8
150 : ite(137, 63, 149) : BV:8
151 : 2 { 0x2 +1.23e129 } : BV:32
152 : bvadd(151, 58, 135) : BV:32
153 : eq(152, 59) : BOOL
154 : eq(152, 64) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 70) : BOOL
157 : eq(152, 73) : BOOL
158 : eq(152, 76) : BOOL
159 : eq(152, 79) : BOOL
160 : ite(159, 81, 82) : BV:8
161 : ite(158, 78, 160) : BV:8
162 : ite(157, 75, 161) : BV:8
163 : ite(156, 72, 162) : BV:8
164 : ite(155, 69, 163) : BV:8
165 : ite(154, 66, 164) : BV:8
166 : ite(153, 63, 165) : BV:8
167 : 1 { 0x1 +1.11e129 } : BV:32
168 : bvadd(167, 58, 135) : BV:32
169 : eq(168, 59) : BOOL
170 : eq(168, 64) : BOOL
171 : eq(168, 67) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : eq(168, 79) : BOOL
176 : ite(175, 81, 82) : BV:8
177 : ite(174, 78, 176) : BV:8
178 : ite(173, 75, 177) : BV:8
179 : ite(172, 72, 178) : BV:8
180 : ite(171, 69, 179) : BV:8
181 : ite(170, 66, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : bvadd(58, 135) : BV:32
184 : eq(183, 59) : BOOL
185 : eq(183, 64) : BOOL
186 : eq(183, 67) : BOOL
187 : eq(183, 70) : BOOL
188 : eq(183, 73) : BOOL
189 : eq(183, 76) : BOOL
190 : eq(183, 79) : BOOL
191 : ite(190, 81, 82) : BV:8
192 : ite(189, 78, 191) : BV:8
193 : ite(188, 75, 192) : BV:8
194 : ite(187, 72, 193) : BV:8
195 : ite(186, 69, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 63, 196) : BV:8
198 : bvconcat(150, 166, 182, 197) : BV:32
199 : ite(55, 2, 198) : BV:32
200 : lambda(52, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(51, 200) : MAP[BV:32 -> BV:32]
202 : lambda(17, 201) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
203 : map(16, 202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
204 : sym_const(203) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda15703 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15704 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 177 { 0xb1 -79 } : BV:8
33 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 235 { 0xeb -21 } : BV:8
42 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
=input.dst.llvm-%n
1 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4210691 ] -> 0, [ 4210692; 4210692 ] -> 177, [ 4210693; 4210693 ] -> 255, [ 4210694; 4210694 ] -> 235, [ 4210695; 4210695 ] -> 119, [ 4210696; 4751360 ] -> 0, [ 4751361; 4751361 ] -> 1, [ 4751362; 4751362 ] -> 64, [ 4751363; 4751363 ] -> 34, [ 4751364; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 469761035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 469761036; 469761039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 469761040; 474120191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 474120192; 474120195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 474120196; 1078329347 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1078329348; 1078329351 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1078329352; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1078329348 { 0x40460004 +1.54687547e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 474120192 { 0x1c428000 +1.51953125e185 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 469761036 { 0x1bfffc0c +1.99987936e184 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 135167 { 0x20fff +1.1611316e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 135168 { 0x21000 +1.1611328e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 256 { 0x100 +1.3051e129 } : BV:32
2 : unit : UNIT
3 : Lambda15695 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 255 { 0xff +1.3039e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : bvule(1, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(8, 9, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda15696 : BV:32
19 : eq(18, 4) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 18) : BV:32
23 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 119 { 0x77 } : BV:8
28 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 64 { 0x40 } : BV:8
31 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
32 : eq(24, 31) : BOOL
33 : 177 { 0xb1 -79 } : BV:8
34 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
35 : eq(24, 34) : BOOL
36 : 34 { 0x22 } : BV:8
37 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
38 : eq(24, 37) : BOOL
39 : 1 { 0x1 } : BV:8
40 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
41 : eq(24, 40) : BOOL
42 : 235 { 0xeb -21 } : BV:8
43 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
44 : eq(24, 43) : BOOL
45 : 255 { 0xff -1 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : ite(26, 27, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 22, 23) : BV:32
56 : eq(55, 25) : BOOL
57 : eq(55, 28) : BOOL
58 : eq(55, 31) : BOOL
59 : eq(55, 34) : BOOL
60 : eq(55, 37) : BOOL
61 : eq(55, 40) : BOOL
62 : eq(55, 43) : BOOL
63 : ite(62, 45, 46) : BV:8
64 : ite(61, 42, 63) : BV:8
65 : ite(60, 39, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 33, 66) : BV:8
68 : ite(57, 30, 67) : BV:8
69 : ite(56, 27, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 22, 23) : BV:32
72 : eq(71, 25) : BOOL
73 : eq(71, 28) : BOOL
74 : eq(71, 31) : BOOL
75 : eq(71, 34) : BOOL
76 : eq(71, 37) : BOOL
77 : eq(71, 40) : BOOL
78 : eq(71, 43) : BOOL
79 : ite(78, 45, 46) : BV:8
80 : ite(77, 42, 79) : BV:8
81 : ite(76, 39, 80) : BV:8
82 : ite(75, 36, 81) : BV:8
83 : ite(74, 33, 82) : BV:8
84 : ite(73, 30, 83) : BV:8
85 : ite(72, 27, 84) : BV:8
86 : bvadd(22, 23) : BV:32
87 : eq(86, 25) : BOOL
88 : eq(86, 28) : BOOL
89 : eq(86, 31) : BOOL
90 : eq(86, 34) : BOOL
91 : eq(86, 37) : BOOL
92 : eq(86, 40) : BOOL
93 : eq(86, 43) : BOOL
94 : ite(93, 45, 46) : BV:8
95 : ite(92, 42, 94) : BV:8
96 : ite(91, 39, 95) : BV:8
97 : ite(90, 36, 96) : BV:8
98 : ite(89, 33, 97) : BV:8
99 : ite(88, 30, 98) : BV:8
100 : ite(87, 27, 99) : BV:8
101 : bvconcat(53, 69, 85, 100) : BV:32
102 : ite(19, 4, 101) : BV:32
103 : lambda(18, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(17, 103) : MAP[BV:32 -> BV:32]
105 : sum(1, 2, 104) : SUM[UNIT,MAP[BV:32 -> BV:32]]
106 : sym_const(105) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1796147881 { 0x6b0f0aa9 +1.11751282e87 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda15706 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15707 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 177 { 0xb1 -79 } : BV:8
33 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 235 { 0xeb -21 } : BV:8
42 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 135167 { 0x20fff +1.1611316e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1716516271 { 0x664ff5af +1.62468516e77 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 474120192 { 0x1c428000 +1.51953125e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 474120195 { 0x1c428003 +1.51953160e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 469761036 { 0x1bfffc0c +1.99987936e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 469761039 { 0x1bfffc0f +1.99987971e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1078329348 { 0x40460004 +1.54687547e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1078329351 { 0x40460007 +1.54687583e1 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 33573577 ] -> true, [ 33573578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda15617 : BV:32
2 : Lambda15618 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15622 : BV:32
2 : Lambda15623 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 255 { 0xff +1.3039e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 256 { 0x100 +1.3051e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 257 { 0x101 +1.3063e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 119 { 0x77 } : BV:8
56 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 64 { 0x40 } : BV:8
59 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
60 : eq(53, 59) : BOOL
61 : 177 { 0xb1 -79 } : BV:8
62 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 34 { 0x22 } : BV:8
65 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 1 { 0x1 } : BV:8
68 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 235 { 0xeb -21 } : BV:8
71 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 255 { 0xff -1 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(54, 55, 80) : BV:8
82 : bvadd(68, 52) : BV:32
83 : eq(82, 51) : BOOL
84 : eq(82, 56) : BOOL
85 : eq(82, 59) : BOOL
86 : eq(82, 62) : BOOL
87 : eq(82, 65) : BOOL
88 : eq(82, 68) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 70, 90) : BV:8
92 : ite(87, 67, 91) : BV:8
93 : ite(86, 64, 92) : BV:8
94 : ite(85, 61, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 55, 95) : BV:8
97 : bvadd(71, 52) : BV:32
98 : eq(97, 51) : BOOL
99 : eq(97, 56) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : eq(97, 65) : BOOL
103 : eq(97, 68) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : ite(100, 61, 108) : BV:8
110 : ite(99, 58, 109) : BV:8
111 : ite(98, 55, 110) : BV:8
112 : bvadd(59, 52) : BV:32
113 : eq(112, 51) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 62) : BOOL
117 : eq(112, 65) : BOOL
118 : eq(112, 68) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 70, 120) : BV:8
122 : ite(117, 67, 121) : BV:8
123 : ite(116, 64, 122) : BV:8
124 : ite(115, 61, 123) : BV:8
125 : ite(114, 58, 124) : BV:8
126 : ite(113, 55, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(48, 50, 127) : BV:32
129 : eq(128, 51) : BOOL
130 : eq(128, 56) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 70, 136) : BV:8
138 : ite(133, 67, 137) : BV:8
139 : ite(132, 64, 138) : BV:8
140 : ite(131, 61, 139) : BV:8
141 : ite(130, 58, 140) : BV:8
142 : ite(129, 55, 141) : BV:8
143 : 2 { 0x2 +1.23e129 } : BV:32
144 : bvadd(143, 50, 127) : BV:32
145 : eq(144, 51) : BOOL
146 : eq(144, 56) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 62) : BOOL
149 : eq(144, 65) : BOOL
150 : eq(144, 68) : BOOL
151 : eq(144, 71) : BOOL
152 : ite(151, 73, 74) : BV:8
153 : ite(150, 70, 152) : BV:8
154 : ite(149, 67, 153) : BV:8
155 : ite(148, 64, 154) : BV:8
156 : ite(147, 61, 155) : BV:8
157 : ite(146, 58, 156) : BV:8
158 : ite(145, 55, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 50, 127) : BV:32
161 : eq(160, 51) : BOOL
162 : eq(160, 56) : BOOL
163 : eq(160, 59) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : eq(160, 71) : BOOL
168 : ite(167, 73, 74) : BV:8
169 : ite(166, 70, 168) : BV:8
170 : ite(165, 67, 169) : BV:8
171 : ite(164, 64, 170) : BV:8
172 : ite(163, 61, 171) : BV:8
173 : ite(162, 58, 172) : BV:8
174 : ite(161, 55, 173) : BV:8
175 : bvadd(50, 127) : BV:32
176 : eq(175, 51) : BOOL
177 : eq(175, 56) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 62) : BOOL
180 : eq(175, 65) : BOOL
181 : eq(175, 68) : BOOL
182 : eq(175, 71) : BOOL
183 : ite(182, 73, 74) : BV:8
184 : ite(181, 70, 183) : BV:8
185 : ite(180, 67, 184) : BV:8
186 : ite(179, 64, 185) : BV:8
187 : ite(178, 61, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 55, 188) : BV:8
190 : bvconcat(142, 158, 174, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : ite(47, 190, 191) : BV:32
193 : ite(6, 3, 192) : BV:32
194 : lambda(1, 2, 193) : FUNCTION[BV:32,BV:32 -> BV:32]
195 : sym_const(194) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33573577 ] -> true, [ 33573578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda15628 : BV:32
2 : Lambda15629 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15624 : BV:32
2 : Lambda15625 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 119 { 0x77 } : BV:8
15 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 177 { 0xb1 -79 } : BV:8
21 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 235 { 0xeb -21 } : BV:8
30 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(18, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda15635 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda15639 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda15643 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4278254536
=counter_example_end
=global nodece 56 num_edges_traversed 1
=global nodece 56 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce6296.num_edges_traversed2
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(epsilon)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce6296 a7c3fee94c93199744cc6efff46f52ad
=input.spec-%var-x-1
1 : Lambda15690 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15693 : BV:32
18 : Lambda15691 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15692 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 119 { 0x77 } : BV:8
83 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 64 { 0x40 } : BV:8
86 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
87 : eq(80, 86) : BOOL
88 : 177 { 0xb1 -79 } : BV:8
89 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 34 { 0x22 } : BV:8
92 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 1 { 0x1 } : BV:8
95 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 235 { 0xeb -21 } : BV:8
98 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 255 { 0xff -1 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(96, 97, 102) : BV:8
104 : ite(93, 94, 103) : BV:8
105 : ite(90, 91, 104) : BV:8
106 : ite(87, 88, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(81, 82, 107) : BV:8
109 : bvadd(95, 79) : BV:32
110 : eq(109, 78) : BOOL
111 : eq(109, 83) : BOOL
112 : eq(109, 86) : BOOL
113 : eq(109, 89) : BOOL
114 : eq(109, 92) : BOOL
115 : eq(109, 95) : BOOL
116 : eq(109, 98) : BOOL
117 : ite(116, 100, 101) : BV:8
118 : ite(115, 97, 117) : BV:8
119 : ite(114, 94, 118) : BV:8
120 : ite(113, 91, 119) : BV:8
121 : ite(112, 88, 120) : BV:8
122 : ite(111, 85, 121) : BV:8
123 : ite(110, 82, 122) : BV:8
124 : bvadd(98, 79) : BV:32
125 : eq(124, 78) : BOOL
126 : eq(124, 83) : BOOL
127 : eq(124, 86) : BOOL
128 : eq(124, 89) : BOOL
129 : eq(124, 92) : BOOL
130 : eq(124, 95) : BOOL
131 : eq(124, 98) : BOOL
132 : ite(131, 100, 101) : BV:8
133 : ite(130, 97, 132) : BV:8
134 : ite(129, 94, 133) : BV:8
135 : ite(128, 91, 134) : BV:8
136 : ite(127, 88, 135) : BV:8
137 : ite(126, 85, 136) : BV:8
138 : ite(125, 82, 137) : BV:8
139 : bvadd(86, 79) : BV:32
140 : eq(139, 78) : BOOL
141 : eq(139, 83) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 89) : BOOL
144 : eq(139, 92) : BOOL
145 : eq(139, 95) : BOOL
146 : eq(139, 98) : BOOL
147 : ite(146, 100, 101) : BV:8
148 : ite(145, 97, 147) : BV:8
149 : ite(144, 94, 148) : BV:8
150 : ite(143, 91, 149) : BV:8
151 : ite(142, 88, 150) : BV:8
152 : ite(141, 85, 151) : BV:8
153 : ite(140, 82, 152) : BV:8
154 : bvconcat(108, 123, 138, 153) : BV:32
155 : bvadd(75, 77, 154) : BV:32
156 : eq(155, 78) : BOOL
157 : eq(155, 83) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : ite(162, 100, 101) : BV:8
164 : ite(161, 97, 163) : BV:8
165 : ite(160, 94, 164) : BV:8
166 : ite(159, 91, 165) : BV:8
167 : ite(158, 88, 166) : BV:8
168 : ite(157, 85, 167) : BV:8
169 : ite(156, 82, 168) : BV:8
170 : 2 { 0x2 +1.23e129 } : BV:32
171 : bvadd(170, 77, 154) : BV:32
172 : eq(171, 78) : BOOL
173 : eq(171, 83) : BOOL
174 : eq(171, 86) : BOOL
175 : eq(171, 89) : BOOL
176 : eq(171, 92) : BOOL
177 : eq(171, 95) : BOOL
178 : eq(171, 98) : BOOL
179 : ite(178, 100, 101) : BV:8
180 : ite(177, 97, 179) : BV:8
181 : ite(176, 94, 180) : BV:8
182 : ite(175, 91, 181) : BV:8
183 : ite(174, 88, 182) : BV:8
184 : ite(173, 85, 183) : BV:8
185 : ite(172, 82, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 77, 154) : BV:32
188 : eq(187, 78) : BOOL
189 : eq(187, 83) : BOOL
190 : eq(187, 86) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : eq(187, 98) : BOOL
195 : ite(194, 100, 101) : BV:8
196 : ite(193, 97, 195) : BV:8
197 : ite(192, 94, 196) : BV:8
198 : ite(191, 91, 197) : BV:8
199 : ite(190, 88, 198) : BV:8
200 : ite(189, 85, 199) : BV:8
201 : ite(188, 82, 200) : BV:8
202 : bvadd(77, 154) : BV:32
203 : eq(202, 78) : BOOL
204 : eq(202, 83) : BOOL
205 : eq(202, 86) : BOOL
206 : eq(202, 89) : BOOL
207 : eq(202, 92) : BOOL
208 : eq(202, 95) : BOOL
209 : eq(202, 98) : BOOL
210 : ite(209, 100, 101) : BV:8
211 : ite(208, 97, 210) : BV:8
212 : ite(207, 94, 211) : BV:8
213 : ite(206, 91, 212) : BV:8
214 : ite(205, 88, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 82, 215) : BV:8
217 : bvconcat(169, 185, 201, 216) : BV:32
218 : ite(55, 2, 217) : BV:32
219 : ite(74, 217, 218) : BV:32
220 : ite(55, 2, 219) : BV:32
221 : lambda(52, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(51, 221) : MAP[BV:32 -> BV:32]
223 : lambda(17, 222) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
224 : map(16, 223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
225 : sym_const(224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15698 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15701 : BV:32
18 : Lambda15699 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 255 { 0xff +1.3039e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 256 { 0x100 +1.3051e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 257 { 0x101 +1.3063e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15700 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 119 { 0x77 } : BV:8
64 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 64 { 0x40 } : BV:8
67 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
68 : eq(61, 67) : BOOL
69 : 177 { 0xb1 -79 } : BV:8
70 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 34 { 0x22 } : BV:8
73 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 1 { 0x1 } : BV:8
76 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 235 { 0xeb -21 } : BV:8
79 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 255 { 0xff -1 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(71, 72, 85) : BV:8
87 : ite(68, 69, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(62, 63, 88) : BV:8
90 : bvadd(76, 60) : BV:32
91 : eq(90, 59) : BOOL
92 : eq(90, 64) : BOOL
93 : eq(90, 67) : BOOL
94 : eq(90, 70) : BOOL
95 : eq(90, 73) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 63, 103) : BV:8
105 : bvadd(79, 60) : BV:32
106 : eq(105, 59) : BOOL
107 : eq(105, 64) : BOOL
108 : eq(105, 67) : BOOL
109 : eq(105, 70) : BOOL
110 : eq(105, 73) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 72, 115) : BV:8
117 : ite(108, 69, 116) : BV:8
118 : ite(107, 66, 117) : BV:8
119 : ite(106, 63, 118) : BV:8
120 : bvadd(67, 60) : BV:32
121 : eq(120, 59) : BOOL
122 : eq(120, 64) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 70) : BOOL
125 : eq(120, 73) : BOOL
126 : eq(120, 76) : BOOL
127 : eq(120, 79) : BOOL
128 : ite(127, 81, 82) : BV:8
129 : ite(126, 78, 128) : BV:8
130 : ite(125, 75, 129) : BV:8
131 : ite(124, 72, 130) : BV:8
132 : ite(123, 69, 131) : BV:8
133 : ite(122, 66, 132) : BV:8
134 : ite(121, 63, 133) : BV:8
135 : bvconcat(89, 104, 119, 134) : BV:32
136 : bvadd(56, 58, 135) : BV:32
137 : eq(136, 59) : BOOL
138 : eq(136, 64) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : ite(143, 81, 82) : BV:8
145 : ite(142, 78, 144) : BV:8
146 : ite(141, 75, 145) : BV:8
147 : ite(140, 72, 146) : BV:8
148 : ite(139, 69, 147) : BV:8
149 : ite(138, 66, 148) : BV:8
150 : ite(137, 63, 149) : BV:8
151 : 2 { 0x2 +1.23e129 } : BV:32
152 : bvadd(151, 58, 135) : BV:32
153 : eq(152, 59) : BOOL
154 : eq(152, 64) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 70) : BOOL
157 : eq(152, 73) : BOOL
158 : eq(152, 76) : BOOL
159 : eq(152, 79) : BOOL
160 : ite(159, 81, 82) : BV:8
161 : ite(158, 78, 160) : BV:8
162 : ite(157, 75, 161) : BV:8
163 : ite(156, 72, 162) : BV:8
164 : ite(155, 69, 163) : BV:8
165 : ite(154, 66, 164) : BV:8
166 : ite(153, 63, 165) : BV:8
167 : 1 { 0x1 +1.11e129 } : BV:32
168 : bvadd(167, 58, 135) : BV:32
169 : eq(168, 59) : BOOL
170 : eq(168, 64) : BOOL
171 : eq(168, 67) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : eq(168, 79) : BOOL
176 : ite(175, 81, 82) : BV:8
177 : ite(174, 78, 176) : BV:8
178 : ite(173, 75, 177) : BV:8
179 : ite(172, 72, 178) : BV:8
180 : ite(171, 69, 179) : BV:8
181 : ite(170, 66, 180) : BV:8
182 : ite(169, 63, 181) : BV:8
183 : bvadd(58, 135) : BV:32
184 : eq(183, 59) : BOOL
185 : eq(183, 64) : BOOL
186 : eq(183, 67) : BOOL
187 : eq(183, 70) : BOOL
188 : eq(183, 73) : BOOL
189 : eq(183, 76) : BOOL
190 : eq(183, 79) : BOOL
191 : ite(190, 81, 82) : BV:8
192 : ite(189, 78, 191) : BV:8
193 : ite(188, 75, 192) : BV:8
194 : ite(187, 72, 193) : BV:8
195 : ite(186, 69, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 63, 196) : BV:8
198 : bvconcat(150, 166, 182, 197) : BV:32
199 : ite(55, 2, 198) : BV:32
200 : lambda(52, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(51, 200) : MAP[BV:32 -> BV:32]
202 : lambda(17, 201) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
203 : map(16, 202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
204 : sym_const(203) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda15703 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15704 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 177 { 0xb1 -79 } : BV:8
33 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 235 { 0xeb -21 } : BV:8
42 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
=input.dst.llvm-%n
1 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
=input.dst.llvm-%m
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4210691 ] -> 0, [ 4210692; 4210692 ] -> 177, [ 4210693; 4210693 ] -> 255, [ 4210694; 4210694 ] -> 235, [ 4210695; 4210695 ] -> 119, [ 4210696; 4751360 ] -> 0, [ 4751361; 4751361 ] -> 1, [ 4751362; 4751362 ] -> 64, [ 4751363; 4751363 ] -> 34, [ 4751364; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 469761035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 469761036; 469761039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 469761040; 474120191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 474120192; 474120195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 474120196; 1078329347 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1078329348; 1078329351 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1078329352; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1078329348 { 0x40460004 +1.54687547e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 474120192 { 0x1c428000 +1.51953125e185 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 469761036 { 0x1bfffc0c +1.99987936e184 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 135167 { 0x20fff +1.1611316e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 135168 { 0x21000 +1.1611328e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 256 { 0x100 +1.3051e129 } : BV:32
2 : unit : UNIT
3 : Lambda15695 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 255 { 0xff +1.3039e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : bvule(1, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(8, 9, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda15696 : BV:32
19 : eq(18, 4) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 18) : BV:32
23 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 119 { 0x77 } : BV:8
28 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 64 { 0x40 } : BV:8
31 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
32 : eq(24, 31) : BOOL
33 : 177 { 0xb1 -79 } : BV:8
34 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
35 : eq(24, 34) : BOOL
36 : 34 { 0x22 } : BV:8
37 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
38 : eq(24, 37) : BOOL
39 : 1 { 0x1 } : BV:8
40 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
41 : eq(24, 40) : BOOL
42 : 235 { 0xeb -21 } : BV:8
43 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
44 : eq(24, 43) : BOOL
45 : 255 { 0xff -1 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : ite(26, 27, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 22, 23) : BV:32
56 : eq(55, 25) : BOOL
57 : eq(55, 28) : BOOL
58 : eq(55, 31) : BOOL
59 : eq(55, 34) : BOOL
60 : eq(55, 37) : BOOL
61 : eq(55, 40) : BOOL
62 : eq(55, 43) : BOOL
63 : ite(62, 45, 46) : BV:8
64 : ite(61, 42, 63) : BV:8
65 : ite(60, 39, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 33, 66) : BV:8
68 : ite(57, 30, 67) : BV:8
69 : ite(56, 27, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 22, 23) : BV:32
72 : eq(71, 25) : BOOL
73 : eq(71, 28) : BOOL
74 : eq(71, 31) : BOOL
75 : eq(71, 34) : BOOL
76 : eq(71, 37) : BOOL
77 : eq(71, 40) : BOOL
78 : eq(71, 43) : BOOL
79 : ite(78, 45, 46) : BV:8
80 : ite(77, 42, 79) : BV:8
81 : ite(76, 39, 80) : BV:8
82 : ite(75, 36, 81) : BV:8
83 : ite(74, 33, 82) : BV:8
84 : ite(73, 30, 83) : BV:8
85 : ite(72, 27, 84) : BV:8
86 : bvadd(22, 23) : BV:32
87 : eq(86, 25) : BOOL
88 : eq(86, 28) : BOOL
89 : eq(86, 31) : BOOL
90 : eq(86, 34) : BOOL
91 : eq(86, 37) : BOOL
92 : eq(86, 40) : BOOL
93 : eq(86, 43) : BOOL
94 : ite(93, 45, 46) : BV:8
95 : ite(92, 42, 94) : BV:8
96 : ite(91, 39, 95) : BV:8
97 : ite(90, 36, 96) : BV:8
98 : ite(89, 33, 97) : BV:8
99 : ite(88, 30, 98) : BV:8
100 : ite(87, 27, 99) : BV:8
101 : bvconcat(53, 69, 85, 100) : BV:32
102 : ite(19, 4, 101) : BV:32
103 : lambda(18, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(17, 103) : MAP[BV:32 -> BV:32]
105 : sum(1, 2, 104) : SUM[UNIT,MAP[BV:32 -> BV:32]]
106 : sym_const(105) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1796147882 { 0x6b0f0aaa +1.11751294e87 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda15706 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15707 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 64 { 0x40 } : BV:8
30 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 177 { 0xb1 -79 } : BV:8
33 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 34 { 0x22 } : BV:8
36 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 235 { 0xeb -21 } : BV:8
42 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 135167 { 0x20fff +1.1611316e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1716516272 { 0x664ff5b0 +1.62468528e77 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 474120192 { 0x1c428000 +1.51953125e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 474120195 { 0x1c428003 +1.51953160e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 469761036 { 0x1bfffc0c +1.99987936e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 469761039 { 0x1bfffc0f +1.99987971e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1078329348 { 0x40460004 +1.54687547e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1078329351 { 0x40460007 +1.54687583e1 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 33573577 ] -> true, [ 33573578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda15617 : BV:32
2 : Lambda15618 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda15622 : BV:32
2 : Lambda15623 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 255 { 0xff +1.3039e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 256 { 0x100 +1.3051e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 257 { 0x101 +1.3063e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 119 { 0x77 } : BV:8
56 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 64 { 0x40 } : BV:8
59 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
60 : eq(53, 59) : BOOL
61 : 177 { 0xb1 -79 } : BV:8
62 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 34 { 0x22 } : BV:8
65 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 1 { 0x1 } : BV:8
68 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 235 { 0xeb -21 } : BV:8
71 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 255 { 0xff -1 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(54, 55, 80) : BV:8
82 : bvadd(68, 52) : BV:32
83 : eq(82, 51) : BOOL
84 : eq(82, 56) : BOOL
85 : eq(82, 59) : BOOL
86 : eq(82, 62) : BOOL
87 : eq(82, 65) : BOOL
88 : eq(82, 68) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 70, 90) : BV:8
92 : ite(87, 67, 91) : BV:8
93 : ite(86, 64, 92) : BV:8
94 : ite(85, 61, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 55, 95) : BV:8
97 : bvadd(71, 52) : BV:32
98 : eq(97, 51) : BOOL
99 : eq(97, 56) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : eq(97, 65) : BOOL
103 : eq(97, 68) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : ite(100, 61, 108) : BV:8
110 : ite(99, 58, 109) : BV:8
111 : ite(98, 55, 110) : BV:8
112 : bvadd(59, 52) : BV:32
113 : eq(112, 51) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 62) : BOOL
117 : eq(112, 65) : BOOL
118 : eq(112, 68) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 70, 120) : BV:8
122 : ite(117, 67, 121) : BV:8
123 : ite(116, 64, 122) : BV:8
124 : ite(115, 61, 123) : BV:8
125 : ite(114, 58, 124) : BV:8
126 : ite(113, 55, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(48, 50, 127) : BV:32
129 : eq(128, 51) : BOOL
130 : eq(128, 56) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 70, 136) : BV:8
138 : ite(133, 67, 137) : BV:8
139 : ite(132, 64, 138) : BV:8
140 : ite(131, 61, 139) : BV:8
141 : ite(130, 58, 140) : BV:8
142 : ite(129, 55, 141) : BV:8
143 : 2 { 0x2 +1.23e129 } : BV:32
144 : bvadd(143, 50, 127) : BV:32
145 : eq(144, 51) : BOOL
146 : eq(144, 56) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 62) : BOOL
149 : eq(144, 65) : BOOL
150 : eq(144, 68) : BOOL
151 : eq(144, 71) : BOOL
152 : ite(151, 73, 74) : BV:8
153 : ite(150, 70, 152) : BV:8
154 : ite(149, 67, 153) : BV:8
155 : ite(148, 64, 154) : BV:8
156 : ite(147, 61, 155) : BV:8
157 : ite(146, 58, 156) : BV:8
158 : ite(145, 55, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 50, 127) : BV:32
161 : eq(160, 51) : BOOL
162 : eq(160, 56) : BOOL
163 : eq(160, 59) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : eq(160, 71) : BOOL
168 : ite(167, 73, 74) : BV:8
169 : ite(166, 70, 168) : BV:8
170 : ite(165, 67, 169) : BV:8
171 : ite(164, 64, 170) : BV:8
172 : ite(163, 61, 171) : BV:8
173 : ite(162, 58, 172) : BV:8
174 : ite(161, 55, 173) : BV:8
175 : bvadd(50, 127) : BV:32
176 : eq(175, 51) : BOOL
177 : eq(175, 56) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 62) : BOOL
180 : eq(175, 65) : BOOL
181 : eq(175, 68) : BOOL
182 : eq(175, 71) : BOOL
183 : ite(182, 73, 74) : BV:8
184 : ite(181, 70, 183) : BV:8
185 : ite(180, 67, 184) : BV:8
186 : ite(179, 64, 185) : BV:8
187 : ite(178, 61, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 55, 188) : BV:8
190 : bvconcat(142, 158, 174, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : ite(47, 190, 191) : BV:32
193 : ite(6, 3, 192) : BV:32
194 : lambda(1, 2, 193) : FUNCTION[BV:32,BV:32 -> BV:32]
195 : sym_const(194) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33573577 ] -> true, [ 33573578; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda15628 : BV:32
2 : Lambda15629 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 33573577 { 0x2004ac9 +1.228226e133 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 33573579 { 0x2004acb +1.228250e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33573578 { 0x2004aca +1.228238e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 255 { 0xff +1.3039e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 256 { 0x100 +1.3051e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 257 { 0x101 +1.3063e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda15624 : BV:32
2 : Lambda15625 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 119 { 0x77 } : BV:8
15 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 177 { 0xb1 -79 } : BV:8
21 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 34 { 0x22 } : BV:8
24 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 235 { 0xeb -21 } : BV:8
30 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(18, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda15635 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda15639 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda15643 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 574619904 { 0x22400100 +1.50003051e197 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4210695 { 0x404007 +1.50195395e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 119 { 0x77 } : BV:8
12 : 4751362 { 0x488002 +1.56640648e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 4210692 { 0x404004 +1.50195360e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 177 { 0xb1 -79 } : BV:8
18 : 4751363 { 0x488003 +1.56640660e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 34 { 0x22 } : BV:8
21 : 4751361 { 0x488001 +1.56640636e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 4210694 { 0x404006 +1.50195384e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 4210693 { 0x404005 +1.50195372e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4278254536
=counter_example_end
=global nodece 57 num_edges_traversed 2
=global nodece 57 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 58
=global nodece 58 nodece z3.ce6307.num_edges_traversed1
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce6307 f4d47dfaa51914a9d4dd6ca1fde8669e
=input.spec-%var-x-1
1 : Lambda16145 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16148 : BV:32
18 : Lambda16146 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda16147 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 218103811 { 0xd000003 +1.35e155 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 167 { 0xa7 -89 } : BV:8
82 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
83 : eq(79, 82) : BOOL
84 : 64 { 0x40 } : BV:8
85 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
86 : eq(79, 85) : BOOL
87 : 192 { 0xc0 -64 } : BV:8
88 : 218103808 { 0xd000000 +1.0e155 } : BV:32
89 : eq(79, 88) : BOOL
90 : 220 { 0xdc -36 } : BV:8
91 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
92 : eq(79, 91) : BOOL
93 : 97 { 0x61 } : BV:8
94 : 218103810 { 0xd000002 +1.23e155 } : BV:32
95 : eq(79, 94) : BOOL
96 : 211 { 0xd3 -45 } : BV:8
97 : 218103809 { 0xd000001 +1.11e155 } : BV:32
98 : eq(79, 97) : BOOL
99 : 104 { 0x68 } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(80, 81, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 82) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 81, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 77) : BOOL
125 : eq(123, 82) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 81, 136) : BV:8
138 : bvadd(88, 78) : BV:32
139 : eq(138, 77) : BOOL
140 : eq(138, 82) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 81, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 81, 167) : BV:8
169 : bvadd(40, 76, 153) : BV:32
170 : eq(169, 77) : BOOL
171 : eq(169, 82) : BOOL
172 : eq(169, 85) : BOOL
173 : eq(169, 88) : BOOL
174 : eq(169, 91) : BOOL
175 : eq(169, 94) : BOOL
176 : eq(169, 97) : BOOL
177 : ite(176, 99, 100) : BV:8
178 : ite(175, 96, 177) : BV:8
179 : ite(174, 93, 178) : BV:8
180 : ite(173, 90, 179) : BV:8
181 : ite(172, 87, 180) : BV:8
182 : ite(171, 84, 181) : BV:8
183 : ite(170, 81, 182) : BV:8
184 : bvadd(36, 76, 153) : BV:32
185 : eq(184, 77) : BOOL
186 : eq(184, 82) : BOOL
187 : eq(184, 85) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : ite(191, 99, 100) : BV:8
193 : ite(190, 96, 192) : BV:8
194 : ite(189, 93, 193) : BV:8
195 : ite(188, 90, 194) : BV:8
196 : ite(187, 87, 195) : BV:8
197 : ite(186, 84, 196) : BV:8
198 : ite(185, 81, 197) : BV:8
199 : bvadd(76, 153) : BV:32
200 : eq(199, 77) : BOOL
201 : eq(199, 82) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : ite(206, 99, 100) : BV:8
208 : ite(205, 96, 207) : BV:8
209 : ite(204, 93, 208) : BV:8
210 : ite(203, 90, 209) : BV:8
211 : ite(202, 87, 210) : BV:8
212 : ite(201, 84, 211) : BV:8
213 : ite(200, 81, 212) : BV:8
214 : bvconcat(168, 183, 198, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : ite(73, 214, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 218103804 { 0xcfffffc +1.99999952e154 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16153 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16156 : BV:32
18 : Lambda16154 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda16155 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 218103811 { 0xd000003 +1.35e155 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 167 { 0xa7 -89 } : BV:8
63 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
64 : eq(60, 63) : BOOL
65 : 64 { 0x40 } : BV:8
66 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
67 : eq(60, 66) : BOOL
68 : 192 { 0xc0 -64 } : BV:8
69 : 218103808 { 0xd000000 +1.0e155 } : BV:32
70 : eq(60, 69) : BOOL
71 : 220 { 0xdc -36 } : BV:8
72 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
73 : eq(60, 72) : BOOL
74 : 97 { 0x61 } : BV:8
75 : 218103810 { 0xd000002 +1.23e155 } : BV:32
76 : eq(60, 75) : BOOL
77 : 211 { 0xd3 -45 } : BV:8
78 : 218103809 { 0xd000001 +1.11e155 } : BV:32
79 : eq(60, 78) : BOOL
80 : 104 { 0x68 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 63) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 62, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 58) : BOOL
106 : eq(104, 63) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 62, 117) : BV:8
119 : bvadd(69, 59) : BV:32
120 : eq(119, 58) : BOOL
121 : eq(119, 63) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 62, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 62, 148) : BV:8
150 : bvadd(40, 57, 134) : BV:32
151 : eq(150, 58) : BOOL
152 : eq(150, 63) : BOOL
153 : eq(150, 66) : BOOL
154 : eq(150, 69) : BOOL
155 : eq(150, 72) : BOOL
156 : eq(150, 75) : BOOL
157 : eq(150, 78) : BOOL
158 : ite(157, 80, 81) : BV:8
159 : ite(156, 77, 158) : BV:8
160 : ite(155, 74, 159) : BV:8
161 : ite(154, 71, 160) : BV:8
162 : ite(153, 68, 161) : BV:8
163 : ite(152, 65, 162) : BV:8
164 : ite(151, 62, 163) : BV:8
165 : bvadd(36, 57, 134) : BV:32
166 : eq(165, 58) : BOOL
167 : eq(165, 63) : BOOL
168 : eq(165, 66) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : ite(172, 80, 81) : BV:8
174 : ite(171, 77, 173) : BV:8
175 : ite(170, 74, 174) : BV:8
176 : ite(169, 71, 175) : BV:8
177 : ite(168, 68, 176) : BV:8
178 : ite(167, 65, 177) : BV:8
179 : ite(166, 62, 178) : BV:8
180 : bvadd(57, 134) : BV:32
181 : eq(180, 58) : BOOL
182 : eq(180, 63) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : ite(187, 80, 81) : BV:8
189 : ite(186, 77, 188) : BV:8
190 : ite(185, 74, 189) : BV:8
191 : ite(184, 71, 190) : BV:8
192 : ite(183, 68, 191) : BV:8
193 : ite(182, 65, 192) : BV:8
194 : ite(181, 62, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(54, 2, 195) : BV:32
197 : lambda(51, 196) : FUNCTION[BV:32 -> BV:32]
198 : map(50, 197) : MAP[BV:32 -> BV:32]
199 : lambda(17, 198) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
200 : map(16, 199) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
201 : sym_const(200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16158 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda16159 : BV:32
17 : eq(16, 2) : BOOL
18 : 64 { 0x40 +1.762e129 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 16) : BV:32
22 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 218103811 { 0xd000003 +1.35e155 } : BV:32
25 : eq(23, 24) : BOOL
26 : 167 { 0xa7 -89 } : BV:8
27 : eq(23, 22) : BOOL
28 : 64 { 0x40 } : BV:8
29 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
30 : eq(23, 29) : BOOL
31 : 192 { 0xc0 -64 } : BV:8
32 : 218103808 { 0xd000000 +1.0e155 } : BV:32
33 : eq(23, 32) : BOOL
34 : 220 { 0xdc -36 } : BV:8
35 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
36 : eq(23, 35) : BOOL
37 : 97 { 0x61 } : BV:8
38 : 218103810 { 0xd000002 +1.23e155 } : BV:32
39 : eq(23, 38) : BOOL
40 : 211 { 0xd3 -45 } : BV:8
41 : 218103809 { 0xd000001 +1.11e155 } : BV:32
42 : eq(23, 41) : BOOL
43 : 104 { 0x68 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 41) : BOOL
61 : ite(60, 43, 44) : BV:8
62 : ite(59, 40, 61) : BV:8
63 : ite(58, 37, 62) : BV:8
64 : ite(57, 34, 63) : BV:8
65 : ite(56, 31, 64) : BV:8
66 : ite(55, 28, 65) : BV:8
67 : ite(54, 26, 66) : BV:8
68 : bvadd(7, 21, 22) : BV:32
69 : eq(68, 24) : BOOL
70 : eq(68, 22) : BOOL
71 : eq(68, 29) : BOOL
72 : eq(68, 32) : BOOL
73 : eq(68, 35) : BOOL
74 : eq(68, 38) : BOOL
75 : eq(68, 41) : BOOL
76 : ite(75, 43, 44) : BV:8
77 : ite(74, 40, 76) : BV:8
78 : ite(73, 37, 77) : BV:8
79 : ite(72, 34, 78) : BV:8
80 : ite(71, 31, 79) : BV:8
81 : ite(70, 28, 80) : BV:8
82 : ite(69, 26, 81) : BV:8
83 : bvadd(21, 22) : BV:32
84 : eq(83, 24) : BOOL
85 : eq(83, 22) : BOOL
86 : eq(83, 29) : BOOL
87 : eq(83, 32) : BOOL
88 : eq(83, 35) : BOOL
89 : eq(83, 38) : BOOL
90 : eq(83, 41) : BOOL
91 : ite(90, 43, 44) : BV:8
92 : ite(89, 40, 91) : BV:8
93 : ite(88, 37, 92) : BV:8
94 : ite(87, 34, 93) : BV:8
95 : ite(86, 31, 94) : BV:8
96 : ite(85, 28, 95) : BV:8
97 : ite(84, 26, 96) : BV:8
98 : bvconcat(51, 67, 82, 97) : BV:32
99 : ite(17, 18, 98) : BV:32
100 : lambda(16, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(15, 100) : MAP[BV:32 -> BV:32]
102 : sym_const(101) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%x
1 : 218103808 { 0xd000000 +1.0e155 } : BV:32
=input.dst.llvm-%n
1 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 218103805 ] -> 0, [ 218103806; 218103806 ] -> 192, [ 218103807; 218103807 ] -> 97, [ 218103808; 218103808 ] -> 220, [ 218103809; 218103809 ] -> 104, [ 218103810; 218103810 ] -> 211, [ 218103811; 218103811 ] -> 167, [ 218103812; 1639972863 ] -> 0, [ 1639972864; 1639972864 ] -> 64, [ 1639972865; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 956224819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 956224820; 956224823 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 956224824; 1697045815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1697045816; 1697045819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1697045820; 2455459183 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2455459184; 2455459187 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2455459188; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1697045816 { 0x6526dd38 +1.30362606e75 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2455459184 { 0x925b5570 -1839508112 -1.71354484e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 956224820 { 0x38fed534 +1.99088144e242 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : Lambda16150 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 4) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda16151 : BV:32
19 : eq(18, 4) : BOOL
20 : 64 { 0x40 +1.762e129 } : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 18) : BV:32
24 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 218103811 { 0xd000003 +1.35e155 } : BV:32
27 : eq(25, 26) : BOOL
28 : 167 { 0xa7 -89 } : BV:8
29 : eq(25, 24) : BOOL
30 : 64 { 0x40 } : BV:8
31 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
32 : eq(25, 31) : BOOL
33 : 192 { 0xc0 -64 } : BV:8
34 : 218103808 { 0xd000000 +1.0e155 } : BV:32
35 : eq(25, 34) : BOOL
36 : 220 { 0xdc -36 } : BV:8
37 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
38 : eq(25, 37) : BOOL
39 : 97 { 0x61 } : BV:8
40 : 218103810 { 0xd000002 +1.23e155 } : BV:32
41 : eq(25, 40) : BOOL
42 : 211 { 0xd3 -45 } : BV:8
43 : 218103809 { 0xd000001 +1.11e155 } : BV:32
44 : eq(25, 43) : BOOL
45 : 104 { 0x68 } : BV:8
46 : 0 { 0x0 } : BV:8
47 : ite(44, 45, 46) : BV:8
48 : ite(41, 42, 47) : BV:8
49 : ite(38, 39, 48) : BV:8
50 : ite(35, 36, 49) : BV:8
51 : ite(32, 33, 50) : BV:8
52 : ite(29, 30, 51) : BV:8
53 : ite(27, 28, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 23, 24) : BV:32
56 : eq(55, 26) : BOOL
57 : eq(55, 24) : BOOL
58 : eq(55, 31) : BOOL
59 : eq(55, 34) : BOOL
60 : eq(55, 37) : BOOL
61 : eq(55, 40) : BOOL
62 : eq(55, 43) : BOOL
63 : ite(62, 45, 46) : BV:8
64 : ite(61, 42, 63) : BV:8
65 : ite(60, 39, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 33, 66) : BV:8
68 : ite(57, 30, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : bvadd(9, 23, 24) : BV:32
71 : eq(70, 26) : BOOL
72 : eq(70, 24) : BOOL
73 : eq(70, 31) : BOOL
74 : eq(70, 34) : BOOL
75 : eq(70, 37) : BOOL
76 : eq(70, 40) : BOOL
77 : eq(70, 43) : BOOL
78 : ite(77, 45, 46) : BV:8
79 : ite(76, 42, 78) : BV:8
80 : ite(75, 39, 79) : BV:8
81 : ite(74, 36, 80) : BV:8
82 : ite(73, 33, 81) : BV:8
83 : ite(72, 30, 82) : BV:8
84 : ite(71, 28, 83) : BV:8
85 : bvadd(23, 24) : BV:32
86 : eq(85, 26) : BOOL
87 : eq(85, 24) : BOOL
88 : eq(85, 31) : BOOL
89 : eq(85, 34) : BOOL
90 : eq(85, 37) : BOOL
91 : eq(85, 40) : BOOL
92 : eq(85, 43) : BOOL
93 : ite(92, 45, 46) : BV:8
94 : ite(91, 42, 93) : BV:8
95 : ite(90, 39, 94) : BV:8
96 : ite(89, 36, 95) : BV:8
97 : ite(88, 33, 96) : BV:8
98 : ite(87, 30, 97) : BV:8
99 : ite(86, 28, 98) : BV:8
100 : bvconcat(53, 69, 84, 99) : BV:32
101 : ite(19, 20, 100) : BV:32
102 : lambda(18, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(17, 102) : MAP[BV:32 -> BV:32]
104 : sum(1, 2, 103) : SUM[UNIT,MAP[BV:32 -> BV:32]]
105 : sym_const(104) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 64 { 0x40 +1.762e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 852864857 { 0x32d5af59 +1.66941368e230 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16161 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda16162 : BV:32
17 : eq(16, 2) : BOOL
18 : 64 { 0x40 +1.762e129 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 16) : BV:32
22 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 218103811 { 0xd000003 +1.35e155 } : BV:32
25 : eq(23, 24) : BOOL
26 : 167 { 0xa7 -89 } : BV:8
27 : eq(23, 22) : BOOL
28 : 64 { 0x40 } : BV:8
29 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
30 : eq(23, 29) : BOOL
31 : 192 { 0xc0 -64 } : BV:8
32 : 218103808 { 0xd000000 +1.0e155 } : BV:32
33 : eq(23, 32) : BOOL
34 : 220 { 0xdc -36 } : BV:8
35 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
36 : eq(23, 35) : BOOL
37 : 97 { 0x61 } : BV:8
38 : 218103810 { 0xd000002 +1.23e155 } : BV:32
39 : eq(23, 38) : BOOL
40 : 211 { 0xd3 -45 } : BV:8
41 : 218103809 { 0xd000001 +1.11e155 } : BV:32
42 : eq(23, 41) : BOOL
43 : 104 { 0x68 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(25, 26, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 35) : BOOL
59 : eq(53, 38) : BOOL
60 : eq(53, 41) : BOOL
61 : ite(60, 43, 44) : BV:8
62 : ite(59, 40, 61) : BV:8
63 : ite(58, 37, 62) : BV:8
64 : ite(57, 34, 63) : BV:8
65 : ite(56, 31, 64) : BV:8
66 : ite(55, 28, 65) : BV:8
67 : ite(54, 26, 66) : BV:8
68 : bvadd(7, 21, 22) : BV:32
69 : eq(68, 24) : BOOL
70 : eq(68, 22) : BOOL
71 : eq(68, 29) : BOOL
72 : eq(68, 32) : BOOL
73 : eq(68, 35) : BOOL
74 : eq(68, 38) : BOOL
75 : eq(68, 41) : BOOL
76 : ite(75, 43, 44) : BV:8
77 : ite(74, 40, 76) : BV:8
78 : ite(73, 37, 77) : BV:8
79 : ite(72, 34, 78) : BV:8
80 : ite(71, 31, 79) : BV:8
81 : ite(70, 28, 80) : BV:8
82 : ite(69, 26, 81) : BV:8
83 : bvadd(21, 22) : BV:32
84 : eq(83, 24) : BOOL
85 : eq(83, 22) : BOOL
86 : eq(83, 29) : BOOL
87 : eq(83, 32) : BOOL
88 : eq(83, 35) : BOOL
89 : eq(83, 38) : BOOL
90 : eq(83, 41) : BOOL
91 : ite(90, 43, 44) : BV:8
92 : ite(89, 40, 91) : BV:8
93 : ite(88, 37, 92) : BV:8
94 : ite(87, 34, 93) : BV:8
95 : ite(86, 31, 94) : BV:8
96 : ite(85, 28, 95) : BV:8
97 : ite(84, 26, 96) : BV:8
98 : bvconcat(51, 67, 82, 97) : BV:32
99 : ite(17, 18, 98) : BV:32
100 : lambda(16, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(15, 100) : MAP[BV:32 -> BV:32]
102 : sym_const(101) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1505561145 { 0x59bd0a39 +1.47687447e52 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 218103804 { 0xcfffffc +1.99999952e154 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2455459184 { 0x925b5570 -1839508112 -1.71354484e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2455459187 { 0x925b5573 -1839508109 -1.71354520e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 956224820 { 0x38fed534 +1.99088144e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 956224823 { 0x38fed537 +1.99088180e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1697045816 { 0x6526dd38 +1.30362606e75 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1697045819 { 0x6526dd3b +1.30362641e75 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2223142193 ] -> true, [ 2223142194; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16072 : BV:32
2 : Lambda16073 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16077 : BV:32
2 : Lambda16078 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 218103811 { 0xd000003 +1.35e155 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 167 { 0xa7 -89 } : BV:8
55 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
56 : eq(52, 55) : BOOL
57 : 64 { 0x40 } : BV:8
58 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
59 : eq(52, 58) : BOOL
60 : 192 { 0xc0 -64 } : BV:8
61 : 218103808 { 0xd000000 +1.0e155 } : BV:32
62 : eq(52, 61) : BOOL
63 : 220 { 0xdc -36 } : BV:8
64 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
65 : eq(52, 64) : BOOL
66 : 97 { 0x61 } : BV:8
67 : 218103810 { 0xd000002 +1.23e155 } : BV:32
68 : eq(52, 67) : BOOL
69 : 211 { 0xd3 -45 } : BV:8
70 : 218103809 { 0xd000001 +1.11e155 } : BV:32
71 : eq(52, 70) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(53, 54, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 55) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 54, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 50) : BOOL
98 : eq(96, 55) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 54, 109) : BV:8
111 : bvadd(61, 51) : BV:32
112 : eq(111, 50) : BOOL
113 : eq(111, 55) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 54, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 54, 140) : BV:8
142 : bvadd(36, 49, 126) : BV:32
143 : eq(142, 50) : BOOL
144 : eq(142, 55) : BOOL
145 : eq(142, 58) : BOOL
146 : eq(142, 61) : BOOL
147 : eq(142, 64) : BOOL
148 : eq(142, 67) : BOOL
149 : eq(142, 70) : BOOL
150 : ite(149, 72, 73) : BV:8
151 : ite(148, 69, 150) : BV:8
152 : ite(147, 66, 151) : BV:8
153 : ite(146, 63, 152) : BV:8
154 : ite(145, 60, 153) : BV:8
155 : ite(144, 57, 154) : BV:8
156 : ite(143, 54, 155) : BV:8
157 : bvadd(32, 49, 126) : BV:32
158 : eq(157, 50) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 58) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : ite(164, 72, 73) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 66, 166) : BV:8
168 : ite(161, 63, 167) : BV:8
169 : ite(160, 60, 168) : BV:8
170 : ite(159, 57, 169) : BV:8
171 : ite(158, 54, 170) : BV:8
172 : bvadd(49, 126) : BV:32
173 : eq(172, 50) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : ite(179, 72, 73) : BV:8
181 : ite(178, 69, 180) : BV:8
182 : ite(177, 66, 181) : BV:8
183 : ite(176, 63, 182) : BV:8
184 : ite(175, 60, 183) : BV:8
185 : ite(174, 57, 184) : BV:8
186 : ite(173, 54, 185) : BV:8
187 : bvconcat(141, 156, 171, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : ite(46, 187, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : lambda(1, 2, 190) : FUNCTION[BV:32,BV:32 -> BV:32]
192 : sym_const(191) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2223142193 ] -> true, [ 2223142194; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16083 : BV:32
2 : Lambda16084 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16079 : BV:32
2 : Lambda16080 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 218103811 { 0xd000003 +1.35e155 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 167 { 0xa7 -89 } : BV:8
15 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
19 : eq(12, 18) : BOOL
20 : 192 { 0xc0 -64 } : BV:8
21 : 218103808 { 0xd000000 +1.0e155 } : BV:32
22 : eq(12, 21) : BOOL
23 : 220 { 0xdc -36 } : BV:8
24 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
25 : eq(12, 24) : BOOL
26 : 97 { 0x61 } : BV:8
27 : 218103810 { 0xd000002 +1.23e155 } : BV:32
28 : eq(12, 27) : BOOL
29 : 211 { 0xd3 -45 } : BV:8
30 : 218103809 { 0xd000001 +1.11e155 } : BV:32
31 : eq(12, 30) : BOOL
32 : 104 { 0x68 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 218103811 { 0xd000003 +1.35e155 } : BV:32
11 : eq(9, 10) : BOOL
12 : 167 { 0xa7 -89 } : BV:8
13 : eq(9, 8) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
16 : eq(9, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 218103808 { 0xd000000 +1.0e155 } : BV:32
19 : eq(9, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
22 : eq(9, 21) : BOOL
23 : 97 { 0x61 } : BV:8
24 : 218103810 { 0xd000002 +1.23e155 } : BV:32
25 : eq(9, 24) : BOOL
26 : 211 { 0xd3 -45 } : BV:8
27 : 218103809 { 0xd000001 +1.11e155 } : BV:32
28 : eq(9, 27) : BOOL
29 : 104 { 0x68 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 8) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 7, 8) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 8) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 12, 68) : BV:8
70 : bvadd(7, 8) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 8) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 12, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 4, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16094 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 218103811 { 0xd000003 +1.35e155 } : BV:32
11 : eq(9, 10) : BOOL
12 : 167 { 0xa7 -89 } : BV:8
13 : eq(9, 8) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
16 : eq(9, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 218103808 { 0xd000000 +1.0e155 } : BV:32
19 : eq(9, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
22 : eq(9, 21) : BOOL
23 : 97 { 0x61 } : BV:8
24 : 218103810 { 0xd000002 +1.23e155 } : BV:32
25 : eq(9, 24) : BOOL
26 : 211 { 0xd3 -45 } : BV:8
27 : 218103809 { 0xd000001 +1.11e155 } : BV:32
28 : eq(9, 27) : BOOL
29 : 104 { 0x68 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 8) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 7, 8) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 8) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 12, 68) : BV:8
70 : bvadd(7, 8) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 8) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 12, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 4, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16098 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 218103811 { 0xd000003 +1.35e155 } : BV:32
11 : eq(9, 10) : BOOL
12 : 167 { 0xa7 -89 } : BV:8
13 : eq(9, 8) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
16 : eq(9, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 218103808 { 0xd000000 +1.0e155 } : BV:32
19 : eq(9, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
22 : eq(9, 21) : BOOL
23 : 97 { 0x61 } : BV:8
24 : 218103810 { 0xd000002 +1.23e155 } : BV:32
25 : eq(9, 24) : BOOL
26 : 211 { 0xd3 -45 } : BV:8
27 : 218103809 { 0xd000001 +1.11e155 } : BV:32
28 : eq(9, 27) : BOOL
29 : 104 { 0x68 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 8) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 7, 8) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 8) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 12, 68) : BV:8
70 : bvadd(7, 8) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 8) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 12, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 4, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1611203714
=counter_example_end
=global nodece 58 num_edges_traversed 1
=global nodece 58 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 59
=global nodece 59 nodece z3.ce6342.num_edges_traversed3
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce6342 f73c493a2c813f4416edafdb46abf0
=input.spec-%var-x-1
1 : Lambda16145 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16148 : BV:32
18 : Lambda16146 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda16147 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 218103811 { 0xd000003 +1.35e155 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 167 { 0xa7 -89 } : BV:8
82 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
83 : eq(79, 82) : BOOL
84 : 64 { 0x40 } : BV:8
85 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
86 : eq(79, 85) : BOOL
87 : 192 { 0xc0 -64 } : BV:8
88 : 218103808 { 0xd000000 +1.0e155 } : BV:32
89 : eq(79, 88) : BOOL
90 : 220 { 0xdc -36 } : BV:8
91 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
92 : eq(79, 91) : BOOL
93 : 97 { 0x61 } : BV:8
94 : 218103810 { 0xd000002 +1.23e155 } : BV:32
95 : eq(79, 94) : BOOL
96 : 211 { 0xd3 -45 } : BV:8
97 : 218103809 { 0xd000001 +1.11e155 } : BV:32
98 : eq(79, 97) : BOOL
99 : 104 { 0x68 } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(80, 81, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 82) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 81, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 77) : BOOL
125 : eq(123, 82) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 81, 136) : BV:8
138 : bvadd(88, 78) : BV:32
139 : eq(138, 77) : BOOL
140 : eq(138, 82) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 81, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 81, 167) : BV:8
169 : bvadd(40, 76, 153) : BV:32
170 : eq(169, 77) : BOOL
171 : eq(169, 82) : BOOL
172 : eq(169, 85) : BOOL
173 : eq(169, 88) : BOOL
174 : eq(169, 91) : BOOL
175 : eq(169, 94) : BOOL
176 : eq(169, 97) : BOOL
177 : ite(176, 99, 100) : BV:8
178 : ite(175, 96, 177) : BV:8
179 : ite(174, 93, 178) : BV:8
180 : ite(173, 90, 179) : BV:8
181 : ite(172, 87, 180) : BV:8
182 : ite(171, 84, 181) : BV:8
183 : ite(170, 81, 182) : BV:8
184 : bvadd(36, 76, 153) : BV:32
185 : eq(184, 77) : BOOL
186 : eq(184, 82) : BOOL
187 : eq(184, 85) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : ite(191, 99, 100) : BV:8
193 : ite(190, 96, 192) : BV:8
194 : ite(189, 93, 193) : BV:8
195 : ite(188, 90, 194) : BV:8
196 : ite(187, 87, 195) : BV:8
197 : ite(186, 84, 196) : BV:8
198 : ite(185, 81, 197) : BV:8
199 : bvadd(76, 153) : BV:32
200 : eq(199, 77) : BOOL
201 : eq(199, 82) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : ite(206, 99, 100) : BV:8
208 : ite(205, 96, 207) : BV:8
209 : ite(204, 93, 208) : BV:8
210 : ite(203, 90, 209) : BV:8
211 : ite(202, 87, 210) : BV:8
212 : ite(201, 84, 211) : BV:8
213 : ite(200, 81, 212) : BV:8
214 : bvconcat(168, 183, 198, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : ite(73, 214, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16153 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16156 : BV:32
18 : Lambda16154 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda16155 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 218103811 { 0xd000003 +1.35e155 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 167 { 0xa7 -89 } : BV:8
63 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
64 : eq(60, 63) : BOOL
65 : 64 { 0x40 } : BV:8
66 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
67 : eq(60, 66) : BOOL
68 : 192 { 0xc0 -64 } : BV:8
69 : 218103808 { 0xd000000 +1.0e155 } : BV:32
70 : eq(60, 69) : BOOL
71 : 220 { 0xdc -36 } : BV:8
72 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
73 : eq(60, 72) : BOOL
74 : 97 { 0x61 } : BV:8
75 : 218103810 { 0xd000002 +1.23e155 } : BV:32
76 : eq(60, 75) : BOOL
77 : 211 { 0xd3 -45 } : BV:8
78 : 218103809 { 0xd000001 +1.11e155 } : BV:32
79 : eq(60, 78) : BOOL
80 : 104 { 0x68 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 63) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 62, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 58) : BOOL
106 : eq(104, 63) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 62, 117) : BV:8
119 : bvadd(69, 59) : BV:32
120 : eq(119, 58) : BOOL
121 : eq(119, 63) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 62, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 62, 148) : BV:8
150 : bvadd(40, 57, 134) : BV:32
151 : eq(150, 58) : BOOL
152 : eq(150, 63) : BOOL
153 : eq(150, 66) : BOOL
154 : eq(150, 69) : BOOL
155 : eq(150, 72) : BOOL
156 : eq(150, 75) : BOOL
157 : eq(150, 78) : BOOL
158 : ite(157, 80, 81) : BV:8
159 : ite(156, 77, 158) : BV:8
160 : ite(155, 74, 159) : BV:8
161 : ite(154, 71, 160) : BV:8
162 : ite(153, 68, 161) : BV:8
163 : ite(152, 65, 162) : BV:8
164 : ite(151, 62, 163) : BV:8
165 : bvadd(36, 57, 134) : BV:32
166 : eq(165, 58) : BOOL
167 : eq(165, 63) : BOOL
168 : eq(165, 66) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : ite(172, 80, 81) : BV:8
174 : ite(171, 77, 173) : BV:8
175 : ite(170, 74, 174) : BV:8
176 : ite(169, 71, 175) : BV:8
177 : ite(168, 68, 176) : BV:8
178 : ite(167, 65, 177) : BV:8
179 : ite(166, 62, 178) : BV:8
180 : bvadd(57, 134) : BV:32
181 : eq(180, 58) : BOOL
182 : eq(180, 63) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : ite(187, 80, 81) : BV:8
189 : ite(186, 77, 188) : BV:8
190 : ite(185, 74, 189) : BV:8
191 : ite(184, 71, 190) : BV:8
192 : ite(183, 68, 191) : BV:8
193 : ite(182, 65, 192) : BV:8
194 : ite(181, 62, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(54, 2, 195) : BV:32
197 : lambda(51, 196) : FUNCTION[BV:32 -> BV:32]
198 : map(50, 197) : MAP[BV:32 -> BV:32]
199 : lambda(17, 198) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
200 : map(16, 199) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
201 : sym_const(200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16218 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda16219 : BV:32
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 24) : BV:32
28 : 2815650012 { 0xa7d368dc -1479317284 -1.65163755e208 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 218103811 { 0xd000003 +1.35e155 } : BV:32
31 : eq(29, 30) : BOOL
32 : 167 { 0xa7 -89 } : BV:8
33 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
34 : eq(29, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
37 : eq(29, 36) : BOOL
38 : 192 { 0xc0 -64 } : BV:8
39 : 218103808 { 0xd000000 +1.0e155 } : BV:32
40 : eq(29, 39) : BOOL
41 : 220 { 0xdc -36 } : BV:8
42 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
43 : eq(29, 42) : BOOL
44 : 97 { 0x61 } : BV:8
45 : 218103810 { 0xd000002 +1.23e155 } : BV:32
46 : eq(29, 45) : BOOL
47 : 211 { 0xd3 -45 } : BV:8
48 : 218103809 { 0xd000001 +1.11e155 } : BV:32
49 : eq(29, 48) : BOOL
50 : 104 { 0x68 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : bvadd(11, 27, 28) : BV:32
60 : eq(59, 30) : BOOL
61 : eq(59, 33) : BOOL
62 : eq(59, 36) : BOOL
63 : eq(59, 39) : BOOL
64 : eq(59, 42) : BOOL
65 : eq(59, 45) : BOOL
66 : eq(59, 48) : BOOL
67 : ite(66, 50, 51) : BV:8
68 : ite(65, 47, 67) : BV:8
69 : ite(64, 44, 68) : BV:8
70 : ite(63, 41, 69) : BV:8
71 : ite(62, 38, 70) : BV:8
72 : ite(61, 35, 71) : BV:8
73 : ite(60, 32, 72) : BV:8
74 : bvadd(7, 27, 28) : BV:32
75 : eq(74, 30) : BOOL
76 : eq(74, 33) : BOOL
77 : eq(74, 36) : BOOL
78 : eq(74, 39) : BOOL
79 : eq(74, 42) : BOOL
80 : eq(74, 45) : BOOL
81 : eq(74, 48) : BOOL
82 : ite(81, 50, 51) : BV:8
83 : ite(80, 47, 82) : BV:8
84 : ite(79, 44, 83) : BV:8
85 : ite(78, 41, 84) : BV:8
86 : ite(77, 38, 85) : BV:8
87 : ite(76, 35, 86) : BV:8
88 : ite(75, 32, 87) : BV:8
89 : bvadd(27, 28) : BV:32
90 : eq(89, 30) : BOOL
91 : eq(89, 33) : BOOL
92 : eq(89, 36) : BOOL
93 : eq(89, 39) : BOOL
94 : eq(89, 42) : BOOL
95 : eq(89, 45) : BOOL
96 : eq(89, 48) : BOOL
97 : ite(96, 50, 51) : BV:8
98 : ite(95, 47, 97) : BV:8
99 : ite(94, 44, 98) : BV:8
100 : ite(93, 41, 99) : BV:8
101 : ite(92, 38, 100) : BV:8
102 : ite(91, 35, 101) : BV:8
103 : ite(90, 32, 102) : BV:8
104 : bvconcat(58, 73, 88, 103) : BV:32
105 : lambda(24, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(23, 105) : MAP[BV:32 -> BV:32]
107 : sym_const(106) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%x
1 : 218103808 { 0xd000000 +1.0e155 } : BV:32
=input.dst.llvm-%n
1 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 218103805 ] -> 0, [ 218103806; 218103806 ] -> 192, [ 218103807; 218103807 ] -> 97, [ 218103808; 218103808 ] -> 220, [ 218103809; 218103809 ] -> 104, [ 218103810; 218103810 ] -> 211, [ 218103811; 218103811 ] -> 167, [ 218103812; 1639972863 ] -> 0, [ 1639972864; 1639972864 ] -> 64, [ 1639972865; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 956224819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 956224820; 956224823 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 956224824; 1697045815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1697045816; 1697045819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1697045820; 2455459183 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2455459184; 2455459187 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2455459188; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1697045816 { 0x6526dd38 +1.30362606e75 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2455459184 { 0x925b5570 -1839508112 -1.71354484e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 956224820 { 0x38fed534 +1.99088144e242 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1248611955 { 0x4a6c4e73 +1.84614408e21 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda16214 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda16215 : BV:32
26 : 3 { 0x3 +1.35e129 } : BV:32
27 : 4 { 0x4 +1.47e129 } : BV:32
28 : bvmul(27, 25) : BV:32
29 : 2815650012 { 0xa7d368dc -1479317284 -1.65163755e208 } : BV:32
30 : bvadd(26, 28, 29) : BV:32
31 : 218103811 { 0xd000003 +1.35e155 } : BV:32
32 : eq(30, 31) : BOOL
33 : 167 { 0xa7 -89 } : BV:8
34 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
35 : eq(30, 34) : BOOL
36 : 64 { 0x40 } : BV:8
37 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
38 : eq(30, 37) : BOOL
39 : 192 { 0xc0 -64 } : BV:8
40 : 218103808 { 0xd000000 +1.0e155 } : BV:32
41 : eq(30, 40) : BOOL
42 : 220 { 0xdc -36 } : BV:8
43 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
44 : eq(30, 43) : BOOL
45 : 97 { 0x61 } : BV:8
46 : 218103810 { 0xd000002 +1.23e155 } : BV:32
47 : eq(30, 46) : BOOL
48 : 211 { 0xd3 -45 } : BV:8
49 : 218103809 { 0xd000001 +1.11e155 } : BV:32
50 : eq(30, 49) : BOOL
51 : 104 { 0x68 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : bvadd(12, 28, 29) : BV:32
61 : eq(60, 31) : BOOL
62 : eq(60, 34) : BOOL
63 : eq(60, 37) : BOOL
64 : eq(60, 40) : BOOL
65 : eq(60, 43) : BOOL
66 : eq(60, 46) : BOOL
67 : eq(60, 49) : BOOL
68 : ite(67, 51, 52) : BV:8
69 : ite(66, 48, 68) : BV:8
70 : ite(65, 45, 69) : BV:8
71 : ite(64, 42, 70) : BV:8
72 : ite(63, 39, 71) : BV:8
73 : ite(62, 36, 72) : BV:8
74 : ite(61, 33, 73) : BV:8
75 : bvadd(1, 28, 29) : BV:32
76 : eq(75, 31) : BOOL
77 : eq(75, 34) : BOOL
78 : eq(75, 37) : BOOL
79 : eq(75, 40) : BOOL
80 : eq(75, 43) : BOOL
81 : eq(75, 46) : BOOL
82 : eq(75, 49) : BOOL
83 : ite(82, 51, 52) : BV:8
84 : ite(81, 48, 83) : BV:8
85 : ite(80, 45, 84) : BV:8
86 : ite(79, 42, 85) : BV:8
87 : ite(78, 39, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 33, 88) : BV:8
90 : bvadd(28, 29) : BV:32
91 : eq(90, 31) : BOOL
92 : eq(90, 34) : BOOL
93 : eq(90, 37) : BOOL
94 : eq(90, 40) : BOOL
95 : eq(90, 43) : BOOL
96 : eq(90, 46) : BOOL
97 : eq(90, 49) : BOOL
98 : ite(97, 51, 52) : BV:8
99 : ite(96, 48, 98) : BV:8
100 : ite(95, 45, 99) : BV:8
101 : ite(94, 42, 100) : BV:8
102 : ite(93, 39, 101) : BV:8
103 : ite(92, 36, 102) : BV:8
104 : ite(91, 33, 103) : BV:8
105 : bvconcat(59, 74, 89, 104) : BV:32
106 : lambda(25, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(24, 106) : MAP[BV:32 -> BV:32]
108 : sum(1, 2, 107) : SUM[UNIT,MAP[BV:32 -> BV:32]]
109 : sym_const(108) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16222 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda16223 : BV:32
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 24) : BV:32
28 : 2815650012 { 0xa7d368dc -1479317284 -1.65163755e208 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 218103811 { 0xd000003 +1.35e155 } : BV:32
31 : eq(29, 30) : BOOL
32 : 167 { 0xa7 -89 } : BV:8
33 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
34 : eq(29, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
37 : eq(29, 36) : BOOL
38 : 192 { 0xc0 -64 } : BV:8
39 : 218103808 { 0xd000000 +1.0e155 } : BV:32
40 : eq(29, 39) : BOOL
41 : 220 { 0xdc -36 } : BV:8
42 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
43 : eq(29, 42) : BOOL
44 : 97 { 0x61 } : BV:8
45 : 218103810 { 0xd000002 +1.23e155 } : BV:32
46 : eq(29, 45) : BOOL
47 : 211 { 0xd3 -45 } : BV:8
48 : 218103809 { 0xd000001 +1.11e155 } : BV:32
49 : eq(29, 48) : BOOL
50 : 104 { 0x68 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : bvadd(11, 27, 28) : BV:32
60 : eq(59, 30) : BOOL
61 : eq(59, 33) : BOOL
62 : eq(59, 36) : BOOL
63 : eq(59, 39) : BOOL
64 : eq(59, 42) : BOOL
65 : eq(59, 45) : BOOL
66 : eq(59, 48) : BOOL
67 : ite(66, 50, 51) : BV:8
68 : ite(65, 47, 67) : BV:8
69 : ite(64, 44, 68) : BV:8
70 : ite(63, 41, 69) : BV:8
71 : ite(62, 38, 70) : BV:8
72 : ite(61, 35, 71) : BV:8
73 : ite(60, 32, 72) : BV:8
74 : bvadd(7, 27, 28) : BV:32
75 : eq(74, 30) : BOOL
76 : eq(74, 33) : BOOL
77 : eq(74, 36) : BOOL
78 : eq(74, 39) : BOOL
79 : eq(74, 42) : BOOL
80 : eq(74, 45) : BOOL
81 : eq(74, 48) : BOOL
82 : ite(81, 50, 51) : BV:8
83 : ite(80, 47, 82) : BV:8
84 : ite(79, 44, 83) : BV:8
85 : ite(78, 41, 84) : BV:8
86 : ite(77, 38, 85) : BV:8
87 : ite(76, 35, 86) : BV:8
88 : ite(75, 32, 87) : BV:8
89 : bvadd(27, 28) : BV:32
90 : eq(89, 30) : BOOL
91 : eq(89, 33) : BOOL
92 : eq(89, 36) : BOOL
93 : eq(89, 39) : BOOL
94 : eq(89, 42) : BOOL
95 : eq(89, 45) : BOOL
96 : eq(89, 48) : BOOL
97 : ite(96, 50, 51) : BV:8
98 : ite(95, 47, 97) : BV:8
99 : ite(94, 44, 98) : BV:8
100 : ite(93, 41, 99) : BV:8
101 : ite(92, 38, 100) : BV:8
102 : ite(91, 35, 101) : BV:8
103 : ite(90, 32, 102) : BV:8
104 : bvconcat(58, 73, 88, 103) : BV:32
105 : lambda(24, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(23, 105) : MAP[BV:32 -> BV:32]
107 : sym_const(106) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 472523822 { 0x1c2a242e +1.32922911e185 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2455459184 { 0x925b5570 -1839508112 -1.71354484e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2455459187 { 0x925b5573 -1839508109 -1.71354520e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 956224820 { 0x38fed534 +1.99088144e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 956224823 { 0x38fed537 +1.99088180e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1697045816 { 0x6526dd38 +1.30362606e75 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1697045819 { 0x6526dd3b +1.30362641e75 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2223142193 ] -> true, [ 2223142194; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16072 : BV:32
2 : Lambda16073 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16077 : BV:32
2 : Lambda16078 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 218103811 { 0xd000003 +1.35e155 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 167 { 0xa7 -89 } : BV:8
55 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
56 : eq(52, 55) : BOOL
57 : 64 { 0x40 } : BV:8
58 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
59 : eq(52, 58) : BOOL
60 : 192 { 0xc0 -64 } : BV:8
61 : 218103808 { 0xd000000 +1.0e155 } : BV:32
62 : eq(52, 61) : BOOL
63 : 220 { 0xdc -36 } : BV:8
64 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
65 : eq(52, 64) : BOOL
66 : 97 { 0x61 } : BV:8
67 : 218103810 { 0xd000002 +1.23e155 } : BV:32
68 : eq(52, 67) : BOOL
69 : 211 { 0xd3 -45 } : BV:8
70 : 218103809 { 0xd000001 +1.11e155 } : BV:32
71 : eq(52, 70) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(53, 54, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 55) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 54, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 50) : BOOL
98 : eq(96, 55) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 54, 109) : BV:8
111 : bvadd(61, 51) : BV:32
112 : eq(111, 50) : BOOL
113 : eq(111, 55) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 54, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 54, 140) : BV:8
142 : bvadd(36, 49, 126) : BV:32
143 : eq(142, 50) : BOOL
144 : eq(142, 55) : BOOL
145 : eq(142, 58) : BOOL
146 : eq(142, 61) : BOOL
147 : eq(142, 64) : BOOL
148 : eq(142, 67) : BOOL
149 : eq(142, 70) : BOOL
150 : ite(149, 72, 73) : BV:8
151 : ite(148, 69, 150) : BV:8
152 : ite(147, 66, 151) : BV:8
153 : ite(146, 63, 152) : BV:8
154 : ite(145, 60, 153) : BV:8
155 : ite(144, 57, 154) : BV:8
156 : ite(143, 54, 155) : BV:8
157 : bvadd(32, 49, 126) : BV:32
158 : eq(157, 50) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 58) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : ite(164, 72, 73) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 66, 166) : BV:8
168 : ite(161, 63, 167) : BV:8
169 : ite(160, 60, 168) : BV:8
170 : ite(159, 57, 169) : BV:8
171 : ite(158, 54, 170) : BV:8
172 : bvadd(49, 126) : BV:32
173 : eq(172, 50) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : ite(179, 72, 73) : BV:8
181 : ite(178, 69, 180) : BV:8
182 : ite(177, 66, 181) : BV:8
183 : ite(176, 63, 182) : BV:8
184 : ite(175, 60, 183) : BV:8
185 : ite(174, 57, 184) : BV:8
186 : ite(173, 54, 185) : BV:8
187 : bvconcat(141, 156, 171, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : ite(46, 187, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : lambda(1, 2, 190) : FUNCTION[BV:32,BV:32 -> BV:32]
192 : sym_const(191) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2223142193 ] -> true, [ 2223142194; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16083 : BV:32
2 : Lambda16084 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2223142193 { 0x84827531 -2071825103 -1.1920139e138 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2223142195 { 0x84827533 -2071825101 -1.1920163e138 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2223142194 { 0x84827532 -2071825102 -1.1920151e138 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16079 : BV:32
2 : Lambda16080 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 218103811 { 0xd000003 +1.35e155 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 167 { 0xa7 -89 } : BV:8
15 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
16 : eq(12, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
19 : eq(12, 18) : BOOL
20 : 192 { 0xc0 -64 } : BV:8
21 : 218103808 { 0xd000000 +1.0e155 } : BV:32
22 : eq(12, 21) : BOOL
23 : 220 { 0xdc -36 } : BV:8
24 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
25 : eq(12, 24) : BOOL
26 : 97 { 0x61 } : BV:8
27 : 218103810 { 0xd000002 +1.23e155 } : BV:32
28 : eq(12, 27) : BOOL
29 : 211 { 0xd3 -45 } : BV:8
30 : 218103809 { 0xd000001 +1.11e155 } : BV:32
31 : eq(12, 30) : BOOL
32 : 104 { 0x68 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 218103811 { 0xd000003 +1.35e155 } : BV:32
11 : eq(9, 10) : BOOL
12 : 167 { 0xa7 -89 } : BV:8
13 : eq(9, 8) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
16 : eq(9, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 218103808 { 0xd000000 +1.0e155 } : BV:32
19 : eq(9, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
22 : eq(9, 21) : BOOL
23 : 97 { 0x61 } : BV:8
24 : 218103810 { 0xd000002 +1.23e155 } : BV:32
25 : eq(9, 24) : BOOL
26 : 211 { 0xd3 -45 } : BV:8
27 : 218103809 { 0xd000001 +1.11e155 } : BV:32
28 : eq(9, 27) : BOOL
29 : 104 { 0x68 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 8) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 7, 8) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 8) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 12, 68) : BV:8
70 : bvadd(7, 8) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 8) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 12, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 4, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16094 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 218103811 { 0xd000003 +1.35e155 } : BV:32
11 : eq(9, 10) : BOOL
12 : 167 { 0xa7 -89 } : BV:8
13 : eq(9, 8) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
16 : eq(9, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 218103808 { 0xd000000 +1.0e155 } : BV:32
19 : eq(9, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
22 : eq(9, 21) : BOOL
23 : 97 { 0x61 } : BV:8
24 : 218103810 { 0xd000002 +1.23e155 } : BV:32
25 : eq(9, 24) : BOOL
26 : 211 { 0xd3 -45 } : BV:8
27 : 218103809 { 0xd000001 +1.11e155 } : BV:32
28 : eq(9, 27) : BOOL
29 : 104 { 0x68 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 8) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 7, 8) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 8) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 12, 68) : BV:8
70 : bvadd(7, 8) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 8) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 12, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 4, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16098 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1639972864 { 0x61c00000 +1.50000000e68 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 218103811 { 0xd000003 +1.35e155 } : BV:32
11 : eq(9, 10) : BOOL
12 : 167 { 0xa7 -89 } : BV:8
13 : eq(9, 8) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 218103806 { 0xcfffffe +1.99999976e154 } : BV:32
16 : eq(9, 15) : BOOL
17 : 192 { 0xc0 -64 } : BV:8
18 : 218103808 { 0xd000000 +1.0e155 } : BV:32
19 : eq(9, 18) : BOOL
20 : 220 { 0xdc -36 } : BV:8
21 : 218103807 { 0xcffffff +1.99999988e154 } : BV:32
22 : eq(9, 21) : BOOL
23 : 97 { 0x61 } : BV:8
24 : 218103810 { 0xd000002 +1.23e155 } : BV:32
25 : eq(9, 24) : BOOL
26 : 211 { 0xd3 -45 } : BV:8
27 : 218103809 { 0xd000001 +1.11e155 } : BV:32
28 : eq(9, 27) : BOOL
29 : 104 { 0x68 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(11, 12, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 8) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 12, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 7, 8) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 8) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 12, 68) : BV:8
70 : bvadd(7, 8) : BV:32
71 : eq(70, 10) : BOOL
72 : eq(70, 8) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 12, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 4, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3072537994
=counter_example_end
=global nodece 59 num_edges_traversed 3
=global nodece 59 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 60
=global nodece 60 nodece z3v487.ce6308.num_edges_traversed1
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3v487.ce6308 32acf8fa117dd889382084ae44dfdb30
=input.spec-%var-x-1
1 : Lambda16178 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16181 : BV:32
18 : Lambda16179 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16180 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 536870915 { 0x20000003 +1.35e193 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 536870912 { 0x20000000 +1.0e193 } : BV:32
63 : eq(61, 62) : BOOL
64 : 2 { 0x2 } : BV:8
65 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
66 : eq(61, 65) : BOOL
67 : 102 { 0x66 } : BV:8
68 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
69 : eq(61, 68) : BOOL
70 : 12 { 0xc } : BV:8
71 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
72 : eq(61, 71) : BOOL
73 : 23 { 0x17 } : BV:8
74 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
75 : eq(61, 74) : BOOL
76 : 42 { 0x2a } : BV:8
77 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
78 : eq(61, 77) : BOOL
79 : 16 { 0x10 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(66, 67, 84) : BV:8
86 : ite(63, 64, 85) : BV:8
87 : 536870914 { 0x20000002 +1.23e193 } : BV:32
88 : bvadd(87, 60) : BV:32
89 : eq(88, 62) : BOOL
90 : eq(88, 65) : BOOL
91 : eq(88, 68) : BOOL
92 : eq(88, 71) : BOOL
93 : eq(88, 74) : BOOL
94 : eq(88, 77) : BOOL
95 : ite(94, 79, 80) : BV:8
96 : ite(93, 76, 95) : BV:8
97 : ite(92, 73, 96) : BV:8
98 : ite(91, 70, 97) : BV:8
99 : ite(90, 67, 98) : BV:8
100 : ite(89, 64, 99) : BV:8
101 : 536870913 { 0x20000001 +1.11e193 } : BV:32
102 : bvadd(101, 60) : BV:32
103 : eq(102, 62) : BOOL
104 : eq(102, 65) : BOOL
105 : eq(102, 68) : BOOL
106 : eq(102, 71) : BOOL
107 : eq(102, 74) : BOOL
108 : eq(102, 77) : BOOL
109 : ite(108, 79, 80) : BV:8
110 : ite(107, 76, 109) : BV:8
111 : ite(106, 73, 110) : BV:8
112 : ite(105, 70, 111) : BV:8
113 : ite(104, 67, 112) : BV:8
114 : ite(103, 64, 113) : BV:8
115 : bvadd(62, 60) : BV:32
116 : eq(115, 62) : BOOL
117 : eq(115, 65) : BOOL
118 : eq(115, 68) : BOOL
119 : eq(115, 71) : BOOL
120 : eq(115, 74) : BOOL
121 : eq(115, 77) : BOOL
122 : ite(121, 79, 80) : BV:8
123 : ite(120, 76, 122) : BV:8
124 : ite(119, 73, 123) : BV:8
125 : ite(118, 70, 124) : BV:8
126 : ite(117, 67, 125) : BV:8
127 : ite(116, 64, 126) : BV:8
128 : bvconcat(86, 100, 114, 127) : BV:32
129 : bvadd(56, 58, 128) : BV:32
130 : eq(129, 62) : BOOL
131 : eq(129, 65) : BOOL
132 : eq(129, 68) : BOOL
133 : eq(129, 71) : BOOL
134 : eq(129, 74) : BOOL
135 : eq(129, 77) : BOOL
136 : ite(135, 79, 80) : BV:8
137 : ite(134, 76, 136) : BV:8
138 : ite(133, 73, 137) : BV:8
139 : ite(132, 70, 138) : BV:8
140 : ite(131, 67, 139) : BV:8
141 : ite(130, 64, 140) : BV:8
142 : 2 { 0x2 +1.23e129 } : BV:32
143 : bvadd(142, 58, 128) : BV:32
144 : eq(143, 62) : BOOL
145 : eq(143, 65) : BOOL
146 : eq(143, 68) : BOOL
147 : eq(143, 71) : BOOL
148 : eq(143, 74) : BOOL
149 : eq(143, 77) : BOOL
150 : ite(149, 79, 80) : BV:8
151 : ite(148, 76, 150) : BV:8
152 : ite(147, 73, 151) : BV:8
153 : ite(146, 70, 152) : BV:8
154 : ite(145, 67, 153) : BV:8
155 : ite(144, 64, 154) : BV:8
156 : 1 { 0x1 +1.11e129 } : BV:32
157 : bvadd(156, 58, 128) : BV:32
158 : eq(157, 62) : BOOL
159 : eq(157, 65) : BOOL
160 : eq(157, 68) : BOOL
161 : eq(157, 71) : BOOL
162 : eq(157, 74) : BOOL
163 : eq(157, 77) : BOOL
164 : ite(163, 79, 80) : BV:8
165 : ite(162, 76, 164) : BV:8
166 : ite(161, 73, 165) : BV:8
167 : ite(160, 70, 166) : BV:8
168 : ite(159, 67, 167) : BV:8
169 : ite(158, 64, 168) : BV:8
170 : bvadd(58, 128) : BV:32
171 : eq(170, 62) : BOOL
172 : eq(170, 65) : BOOL
173 : eq(170, 68) : BOOL
174 : eq(170, 71) : BOOL
175 : eq(170, 74) : BOOL
176 : eq(170, 77) : BOOL
177 : ite(176, 79, 80) : BV:8
178 : ite(175, 76, 177) : BV:8
179 : ite(174, 73, 178) : BV:8
180 : ite(173, 70, 179) : BV:8
181 : ite(172, 67, 180) : BV:8
182 : ite(171, 64, 181) : BV:8
183 : bvconcat(141, 155, 169, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16189 : BV:32
18 : Lambda16187 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16188 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 536870915 { 0x20000003 +1.35e193 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 536870912 { 0x20000000 +1.0e193 } : BV:32
82 : eq(80, 81) : BOOL
83 : 2 { 0x2 } : BV:8
84 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
85 : eq(80, 84) : BOOL
86 : 102 { 0x66 } : BV:8
87 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
88 : eq(80, 87) : BOOL
89 : 12 { 0xc } : BV:8
90 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
91 : eq(80, 90) : BOOL
92 : 23 { 0x17 } : BV:8
93 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
94 : eq(80, 93) : BOOL
95 : 42 { 0x2a } : BV:8
96 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
97 : eq(80, 96) : BOOL
98 : 16 { 0x10 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(85, 86, 103) : BV:8
105 : ite(82, 83, 104) : BV:8
106 : 536870914 { 0x20000002 +1.23e193 } : BV:32
107 : bvadd(106, 79) : BV:32
108 : eq(107, 81) : BOOL
109 : eq(107, 84) : BOOL
110 : eq(107, 87) : BOOL
111 : eq(107, 90) : BOOL
112 : eq(107, 93) : BOOL
113 : eq(107, 96) : BOOL
114 : ite(113, 98, 99) : BV:8
115 : ite(112, 95, 114) : BV:8
116 : ite(111, 92, 115) : BV:8
117 : ite(110, 89, 116) : BV:8
118 : ite(109, 86, 117) : BV:8
119 : ite(108, 83, 118) : BV:8
120 : 536870913 { 0x20000001 +1.11e193 } : BV:32
121 : bvadd(120, 79) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : eq(121, 87) : BOOL
125 : eq(121, 90) : BOOL
126 : eq(121, 93) : BOOL
127 : eq(121, 96) : BOOL
128 : ite(127, 98, 99) : BV:8
129 : ite(126, 95, 128) : BV:8
130 : ite(125, 92, 129) : BV:8
131 : ite(124, 89, 130) : BV:8
132 : ite(123, 86, 131) : BV:8
133 : ite(122, 83, 132) : BV:8
134 : bvadd(81, 79) : BV:32
135 : eq(134, 81) : BOOL
136 : eq(134, 84) : BOOL
137 : eq(134, 87) : BOOL
138 : eq(134, 90) : BOOL
139 : eq(134, 93) : BOOL
140 : eq(134, 96) : BOOL
141 : ite(140, 98, 99) : BV:8
142 : ite(139, 95, 141) : BV:8
143 : ite(138, 92, 142) : BV:8
144 : ite(137, 89, 143) : BV:8
145 : ite(136, 86, 144) : BV:8
146 : ite(135, 83, 145) : BV:8
147 : bvconcat(105, 119, 133, 146) : BV:32
148 : bvadd(75, 77, 147) : BV:32
149 : eq(148, 81) : BOOL
150 : eq(148, 84) : BOOL
151 : eq(148, 87) : BOOL
152 : eq(148, 90) : BOOL
153 : eq(148, 93) : BOOL
154 : eq(148, 96) : BOOL
155 : ite(154, 98, 99) : BV:8
156 : ite(153, 95, 155) : BV:8
157 : ite(152, 92, 156) : BV:8
158 : ite(151, 89, 157) : BV:8
159 : ite(150, 86, 158) : BV:8
160 : ite(149, 83, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 77, 147) : BV:32
163 : eq(162, 81) : BOOL
164 : eq(162, 84) : BOOL
165 : eq(162, 87) : BOOL
166 : eq(162, 90) : BOOL
167 : eq(162, 93) : BOOL
168 : eq(162, 96) : BOOL
169 : ite(168, 98, 99) : BV:8
170 : ite(167, 95, 169) : BV:8
171 : ite(166, 92, 170) : BV:8
172 : ite(165, 89, 171) : BV:8
173 : ite(164, 86, 172) : BV:8
174 : ite(163, 83, 173) : BV:8
175 : 1 { 0x1 +1.11e129 } : BV:32
176 : bvadd(175, 77, 147) : BV:32
177 : eq(176, 81) : BOOL
178 : eq(176, 84) : BOOL
179 : eq(176, 87) : BOOL
180 : eq(176, 90) : BOOL
181 : eq(176, 93) : BOOL
182 : eq(176, 96) : BOOL
183 : ite(182, 98, 99) : BV:8
184 : ite(181, 95, 183) : BV:8
185 : ite(180, 92, 184) : BV:8
186 : ite(179, 89, 185) : BV:8
187 : ite(178, 86, 186) : BV:8
188 : ite(177, 83, 187) : BV:8
189 : bvadd(77, 147) : BV:32
190 : eq(189, 81) : BOOL
191 : eq(189, 84) : BOOL
192 : eq(189, 87) : BOOL
193 : eq(189, 90) : BOOL
194 : eq(189, 93) : BOOL
195 : eq(189, 96) : BOOL
196 : ite(195, 98, 99) : BV:8
197 : ite(194, 95, 196) : BV:8
198 : ite(193, 92, 197) : BV:8
199 : ite(192, 89, 198) : BV:8
200 : ite(191, 86, 199) : BV:8
201 : ite(190, 83, 200) : BV:8
202 : bvconcat(160, 174, 188, 201) : BV:32
203 : ite(55, 2, 202) : BV:32
204 : ite(74, 202, 203) : BV:32
205 : ite(55, 2, 204) : BV:32
206 : lambda(52, 205) : FUNCTION[BV:32 -> BV:32]
207 : map(51, 206) : MAP[BV:32 -> BV:32]
208 : lambda(17, 207) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
209 : map(16, 208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
210 : sym_const(209) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16191 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16192 : BV:32
18 : eq(17, 2) : BOOL
19 : 16 { 0x10 +1.190e129 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : eq(24, 25) : BOOL
27 : 2 { 0x2 } : BV:8
28 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
29 : eq(24, 28) : BOOL
30 : 102 { 0x66 } : BV:8
31 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
32 : eq(24, 31) : BOOL
33 : 12 { 0xc } : BV:8
34 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
35 : eq(24, 34) : BOOL
36 : 23 { 0x17 } : BV:8
37 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
38 : eq(24, 37) : BOOL
39 : 42 { 0x2a } : BV:8
40 : eq(24, 23) : BOOL
41 : 16 { 0x10 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(38, 39, 43) : BV:8
45 : ite(35, 36, 44) : BV:8
46 : ite(32, 33, 45) : BV:8
47 : ite(29, 30, 46) : BV:8
48 : ite(26, 27, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 22, 23) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 31) : BOOL
54 : eq(50, 34) : BOOL
55 : eq(50, 37) : BOOL
56 : eq(50, 23) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 39, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 33, 59) : BV:8
61 : ite(52, 30, 60) : BV:8
62 : ite(51, 27, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 22, 23) : BV:32
65 : eq(64, 25) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 31) : BOOL
68 : eq(64, 34) : BOOL
69 : eq(64, 37) : BOOL
70 : eq(64, 23) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 39, 71) : BV:8
73 : ite(68, 36, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : ite(66, 30, 74) : BV:8
76 : ite(65, 27, 75) : BV:8
77 : bvadd(22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 23) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 39, 84) : BV:8
86 : ite(81, 36, 85) : BV:8
87 : ite(80, 33, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(78, 27, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 19, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%x
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%n
1 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 536870911 ] -> 0, [ 536870912; 536870912 ] -> 2, [ 536870913; 1714034443 ] -> 0, [ 1714034444; 1714034444 ] -> 16, [ 1714034445; 2684354555 ] -> 0, [ 2684354556; 2684354556 ] -> 12, [ 2684354557; 2684354557 ] -> 23, [ 2684354558; 2684354558 ] -> 42, [ 2684354559; 2684354559 ] -> 102, [ 2684354560; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 31 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32; 35 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 36; 191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 192; 195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 196; 469647683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 469647684; 469647687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 469647688; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 192 { 0xc0 +1.2288e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 469647684 { 0x1bfe4144 +1.98636674e184 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda16183 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4095 { 0xfff +1.48816e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4096 { 0x1000 +1.48828e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16184 : BV:32
20 : eq(19, 4) : BOOL
21 : 16 { 0x10 +1.190e129 } : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 536870912 { 0x20000000 +1.0e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 2 { 0x2 } : BV:8
30 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
31 : eq(26, 30) : BOOL
32 : 102 { 0x66 } : BV:8
33 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
34 : eq(26, 33) : BOOL
35 : 12 { 0xc } : BV:8
36 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
37 : eq(26, 36) : BOOL
38 : 23 { 0x17 } : BV:8
39 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
40 : eq(26, 39) : BOOL
41 : 42 { 0x2a } : BV:8
42 : eq(26, 25) : BOOL
43 : 16 { 0x10 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 41, 45) : BV:8
47 : ite(37, 38, 46) : BV:8
48 : ite(34, 35, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 24, 25) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : eq(52, 33) : BOOL
56 : eq(52, 36) : BOOL
57 : eq(52, 39) : BOOL
58 : eq(52, 25) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 41, 59) : BV:8
61 : ite(56, 38, 60) : BV:8
62 : ite(55, 35, 61) : BV:8
63 : ite(54, 32, 62) : BV:8
64 : ite(53, 29, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 24, 25) : BV:32
67 : eq(66, 27) : BOOL
68 : eq(66, 30) : BOOL
69 : eq(66, 33) : BOOL
70 : eq(66, 36) : BOOL
71 : eq(66, 39) : BOOL
72 : eq(66, 25) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 41, 73) : BV:8
75 : ite(70, 38, 74) : BV:8
76 : ite(69, 35, 75) : BV:8
77 : ite(68, 32, 76) : BV:8
78 : ite(67, 29, 77) : BV:8
79 : bvadd(24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 25) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 41, 86) : BV:8
88 : ite(83, 38, 87) : BV:8
89 : ite(82, 35, 88) : BV:8
90 : ite(81, 32, 89) : BV:8
91 : ite(80, 29, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(20, 21, 92) : BV:32
94 : lambda(19, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(18, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 16 { 0x10 +1.190e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1232264425 { 0x4972dce9 +1.89736664e19 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16194 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16195 : BV:32
18 : eq(17, 2) : BOOL
19 : 16 { 0x10 +1.190e129 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : eq(24, 25) : BOOL
27 : 2 { 0x2 } : BV:8
28 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
29 : eq(24, 28) : BOOL
30 : 102 { 0x66 } : BV:8
31 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
32 : eq(24, 31) : BOOL
33 : 12 { 0xc } : BV:8
34 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
35 : eq(24, 34) : BOOL
36 : 23 { 0x17 } : BV:8
37 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
38 : eq(24, 37) : BOOL
39 : 42 { 0x2a } : BV:8
40 : eq(24, 23) : BOOL
41 : 16 { 0x10 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(38, 39, 43) : BV:8
45 : ite(35, 36, 44) : BV:8
46 : ite(32, 33, 45) : BV:8
47 : ite(29, 30, 46) : BV:8
48 : ite(26, 27, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 22, 23) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 31) : BOOL
54 : eq(50, 34) : BOOL
55 : eq(50, 37) : BOOL
56 : eq(50, 23) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 39, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 33, 59) : BV:8
61 : ite(52, 30, 60) : BV:8
62 : ite(51, 27, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 22, 23) : BV:32
65 : eq(64, 25) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 31) : BOOL
68 : eq(64, 34) : BOOL
69 : eq(64, 37) : BOOL
70 : eq(64, 23) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 39, 71) : BV:8
73 : ite(68, 36, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : ite(66, 30, 74) : BV:8
76 : ite(65, 27, 75) : BV:8
77 : bvadd(22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 23) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 39, 84) : BV:8
86 : ite(81, 36, 85) : BV:8
87 : ite(80, 33, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(78, 27, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 19, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1571077859 { 0x5da4bee3 +1.28707540e60 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 192 { 0xc0 +1.2288e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 195 { 0xc3 +1.2324e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 469647684 { 0x1bfe4144 +1.98636674e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 469647687 { 0x1bfe4147 +1.98636710e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 35 { 0x23 +1.417e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 548474879 ] -> true, [ 548474880; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16103 : BV:32
2 : Lambda16104 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16108 : BV:32
2 : Lambda16109 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 536870915 { 0x20000003 +1.35e193 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 536870912 { 0x20000000 +1.0e193 } : BV:32
14 : eq(12, 13) : BOOL
15 : 2 { 0x2 } : BV:8
16 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
17 : eq(12, 16) : BOOL
18 : 102 { 0x66 } : BV:8
19 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
20 : eq(12, 19) : BOOL
21 : 12 { 0xc } : BV:8
22 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
23 : eq(12, 22) : BOOL
24 : 23 { 0x17 } : BV:8
25 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
26 : eq(12, 25) : BOOL
27 : 42 { 0x2a } : BV:8
28 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
29 : eq(12, 28) : BOOL
30 : 16 { 0x10 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 536870914 { 0x20000002 +1.23e193 } : BV:32
39 : bvadd(38, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 536870913 { 0x20000001 +1.11e193 } : BV:32
53 : bvadd(52, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(13, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : bvadd(7, 9, 79) : BV:32
81 : eq(80, 13) : BOOL
82 : eq(80, 16) : BOOL
83 : eq(80, 19) : BOOL
84 : eq(80, 22) : BOOL
85 : eq(80, 25) : BOOL
86 : eq(80, 28) : BOOL
87 : ite(86, 30, 31) : BV:8
88 : ite(85, 27, 87) : BV:8
89 : ite(84, 24, 88) : BV:8
90 : ite(83, 21, 89) : BV:8
91 : ite(82, 18, 90) : BV:8
92 : ite(81, 15, 91) : BV:8
93 : 2 { 0x2 +1.23e129 } : BV:32
94 : bvadd(93, 9, 79) : BV:32
95 : eq(94, 13) : BOOL
96 : eq(94, 16) : BOOL
97 : eq(94, 19) : BOOL
98 : eq(94, 22) : BOOL
99 : eq(94, 25) : BOOL
100 : eq(94, 28) : BOOL
101 : ite(100, 30, 31) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 24, 102) : BV:8
104 : ite(97, 21, 103) : BV:8
105 : ite(96, 18, 104) : BV:8
106 : ite(95, 15, 105) : BV:8
107 : 1 { 0x1 +1.11e129 } : BV:32
108 : bvadd(107, 9, 79) : BV:32
109 : eq(108, 13) : BOOL
110 : eq(108, 16) : BOOL
111 : eq(108, 19) : BOOL
112 : eq(108, 22) : BOOL
113 : eq(108, 25) : BOOL
114 : eq(108, 28) : BOOL
115 : ite(114, 30, 31) : BV:8
116 : ite(113, 27, 115) : BV:8
117 : ite(112, 24, 116) : BV:8
118 : ite(111, 21, 117) : BV:8
119 : ite(110, 18, 118) : BV:8
120 : ite(109, 15, 119) : BV:8
121 : bvadd(9, 79) : BV:32
122 : eq(121, 13) : BOOL
123 : eq(121, 16) : BOOL
124 : eq(121, 19) : BOOL
125 : eq(121, 22) : BOOL
126 : eq(121, 25) : BOOL
127 : eq(121, 28) : BOOL
128 : ite(127, 30, 31) : BV:8
129 : ite(126, 27, 128) : BV:8
130 : ite(125, 24, 129) : BV:8
131 : ite(124, 21, 130) : BV:8
132 : ite(123, 18, 131) : BV:8
133 : ite(122, 15, 132) : BV:8
134 : bvconcat(92, 106, 120, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : lambda(1, 2, 135) : FUNCTION[BV:32,BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 548474879 ] -> true, [ 548474880; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16112 : BV:32
2 : Lambda16113 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16116 : BV:32
2 : Lambda16117 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4097 { 0x1001 +1.48840e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 536870915 { 0x20000003 +1.35e193 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 536870912 { 0x20000000 +1.0e193 } : BV:32
55 : eq(53, 54) : BOOL
56 : 2 { 0x2 } : BV:8
57 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
58 : eq(53, 57) : BOOL
59 : 102 { 0x66 } : BV:8
60 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
61 : eq(53, 60) : BOOL
62 : 12 { 0xc } : BV:8
63 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
64 : eq(53, 63) : BOOL
65 : 23 { 0x17 } : BV:8
66 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
67 : eq(53, 66) : BOOL
68 : 42 { 0x2a } : BV:8
69 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
70 : eq(53, 69) : BOOL
71 : 16 { 0x10 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(58, 59, 76) : BV:8
78 : ite(55, 56, 77) : BV:8
79 : 536870914 { 0x20000002 +1.23e193 } : BV:32
80 : bvadd(79, 52) : BV:32
81 : eq(80, 54) : BOOL
82 : eq(80, 57) : BOOL
83 : eq(80, 60) : BOOL
84 : eq(80, 63) : BOOL
85 : eq(80, 66) : BOOL
86 : eq(80, 69) : BOOL
87 : ite(86, 71, 72) : BV:8
88 : ite(85, 68, 87) : BV:8
89 : ite(84, 65, 88) : BV:8
90 : ite(83, 62, 89) : BV:8
91 : ite(82, 59, 90) : BV:8
92 : ite(81, 56, 91) : BV:8
93 : 536870913 { 0x20000001 +1.11e193 } : BV:32
94 : bvadd(93, 52) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : eq(94, 60) : BOOL
98 : eq(94, 63) : BOOL
99 : eq(94, 66) : BOOL
100 : eq(94, 69) : BOOL
101 : ite(100, 71, 72) : BV:8
102 : ite(99, 68, 101) : BV:8
103 : ite(98, 65, 102) : BV:8
104 : ite(97, 62, 103) : BV:8
105 : ite(96, 59, 104) : BV:8
106 : ite(95, 56, 105) : BV:8
107 : bvadd(54, 52) : BV:32
108 : eq(107, 54) : BOOL
109 : eq(107, 57) : BOOL
110 : eq(107, 60) : BOOL
111 : eq(107, 63) : BOOL
112 : eq(107, 66) : BOOL
113 : eq(107, 69) : BOOL
114 : ite(113, 71, 72) : BV:8
115 : ite(112, 68, 114) : BV:8
116 : ite(111, 65, 115) : BV:8
117 : ite(110, 62, 116) : BV:8
118 : ite(109, 59, 117) : BV:8
119 : ite(108, 56, 118) : BV:8
120 : bvconcat(78, 92, 106, 119) : BV:32
121 : bvadd(48, 50, 120) : BV:32
122 : eq(121, 54) : BOOL
123 : eq(121, 57) : BOOL
124 : eq(121, 60) : BOOL
125 : eq(121, 63) : BOOL
126 : eq(121, 66) : BOOL
127 : eq(121, 69) : BOOL
128 : ite(127, 71, 72) : BV:8
129 : ite(126, 68, 128) : BV:8
130 : ite(125, 65, 129) : BV:8
131 : ite(124, 62, 130) : BV:8
132 : ite(123, 59, 131) : BV:8
133 : ite(122, 56, 132) : BV:8
134 : 2 { 0x2 +1.23e129 } : BV:32
135 : bvadd(134, 50, 120) : BV:32
136 : eq(135, 54) : BOOL
137 : eq(135, 57) : BOOL
138 : eq(135, 60) : BOOL
139 : eq(135, 63) : BOOL
140 : eq(135, 66) : BOOL
141 : eq(135, 69) : BOOL
142 : ite(141, 71, 72) : BV:8
143 : ite(140, 68, 142) : BV:8
144 : ite(139, 65, 143) : BV:8
145 : ite(138, 62, 144) : BV:8
146 : ite(137, 59, 145) : BV:8
147 : ite(136, 56, 146) : BV:8
148 : 1 { 0x1 +1.11e129 } : BV:32
149 : bvadd(148, 50, 120) : BV:32
150 : eq(149, 54) : BOOL
151 : eq(149, 57) : BOOL
152 : eq(149, 60) : BOOL
153 : eq(149, 63) : BOOL
154 : eq(149, 66) : BOOL
155 : eq(149, 69) : BOOL
156 : ite(155, 71, 72) : BV:8
157 : ite(154, 68, 156) : BV:8
158 : ite(153, 65, 157) : BV:8
159 : ite(152, 62, 158) : BV:8
160 : ite(151, 59, 159) : BV:8
161 : ite(150, 56, 160) : BV:8
162 : bvadd(50, 120) : BV:32
163 : eq(162, 54) : BOOL
164 : eq(162, 57) : BOOL
165 : eq(162, 60) : BOOL
166 : eq(162, 63) : BOOL
167 : eq(162, 66) : BOOL
168 : eq(162, 69) : BOOL
169 : ite(168, 71, 72) : BV:8
170 : ite(167, 68, 169) : BV:8
171 : ite(166, 65, 170) : BV:8
172 : ite(165, 62, 171) : BV:8
173 : ite(164, 59, 172) : BV:8
174 : ite(163, 56, 173) : BV:8
175 : bvconcat(133, 147, 161, 174) : BV:32
176 : ite(6, 3, 175) : BV:32
177 : ite(47, 175, 176) : BV:32
178 : ite(6, 3, 177) : BV:32
179 : lambda(1, 2, 178) : FUNCTION[BV:32,BV:32 -> BV:32]
180 : sym_const(179) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16121 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
14 : eq(9, 13) : BOOL
15 : 102 { 0x66 } : BV:8
16 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
17 : eq(9, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
20 : eq(9, 19) : BOOL
21 : 23 { 0x17 } : BV:8
22 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
23 : eq(9, 22) : BOOL
24 : 42 { 0x2a } : BV:8
25 : eq(9, 8) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(23, 24, 28) : BV:8
30 : ite(20, 21, 29) : BV:8
31 : ite(17, 18, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : ite(11, 12, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 19) : BOOL
40 : eq(35, 22) : BOOL
41 : eq(35, 8) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 21, 43) : BV:8
45 : ite(38, 18, 44) : BV:8
46 : ite(37, 15, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 8) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 24, 56) : BV:8
58 : ite(53, 21, 57) : BV:8
59 : ite(52, 18, 58) : BV:8
60 : ite(51, 15, 59) : BV:8
61 : ite(50, 12, 60) : BV:8
62 : bvadd(7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 8) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 24, 69) : BV:8
71 : ite(66, 21, 70) : BV:8
72 : ite(65, 18, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 12, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16125 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
14 : eq(9, 13) : BOOL
15 : 102 { 0x66 } : BV:8
16 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
17 : eq(9, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
20 : eq(9, 19) : BOOL
21 : 23 { 0x17 } : BV:8
22 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
23 : eq(9, 22) : BOOL
24 : 42 { 0x2a } : BV:8
25 : eq(9, 8) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(23, 24, 28) : BV:8
30 : ite(20, 21, 29) : BV:8
31 : ite(17, 18, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : ite(11, 12, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 19) : BOOL
40 : eq(35, 22) : BOOL
41 : eq(35, 8) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 21, 43) : BV:8
45 : ite(38, 18, 44) : BV:8
46 : ite(37, 15, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 8) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 24, 56) : BV:8
58 : ite(53, 21, 57) : BV:8
59 : ite(52, 18, 58) : BV:8
60 : ite(51, 15, 59) : BV:8
61 : ite(50, 12, 60) : BV:8
62 : bvadd(7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 8) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 24, 69) : BV:8
71 : ite(66, 21, 70) : BV:8
72 : ite(65, 18, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 12, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16129 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
14 : eq(9, 13) : BOOL
15 : 102 { 0x66 } : BV:8
16 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
17 : eq(9, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
20 : eq(9, 19) : BOOL
21 : 23 { 0x17 } : BV:8
22 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
23 : eq(9, 22) : BOOL
24 : 42 { 0x2a } : BV:8
25 : eq(9, 8) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(23, 24, 28) : BV:8
30 : ite(20, 21, 29) : BV:8
31 : ite(17, 18, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : ite(11, 12, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 19) : BOOL
40 : eq(35, 22) : BOOL
41 : eq(35, 8) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 21, 43) : BV:8
45 : ite(38, 18, 44) : BV:8
46 : ite(37, 15, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 8) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 24, 56) : BV:8
58 : ite(53, 21, 57) : BV:8
59 : ite(52, 18, 58) : BV:8
60 : ite(51, 15, 59) : BV:8
61 : ite(50, 12, 60) : BV:8
62 : bvadd(7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 8) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 24, 69) : BV:8
71 : ite(66, 21, 70) : BV:8
72 : ite(65, 18, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 12, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1264756944
=counter_example_end
=global nodece 60 num_edges_traversed 1
=global nodece 60 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3v487.ce6416.num_edges_traversed2
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(epsilon)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3v487.ce6416 5ae5985fcbb5a10ea54749d0654017
=input.spec-%var-x-1
1 : Lambda16178 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16181 : BV:32
18 : Lambda16179 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16180 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 536870915 { 0x20000003 +1.35e193 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 536870912 { 0x20000000 +1.0e193 } : BV:32
63 : eq(61, 62) : BOOL
64 : 2 { 0x2 } : BV:8
65 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
66 : eq(61, 65) : BOOL
67 : 102 { 0x66 } : BV:8
68 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
69 : eq(61, 68) : BOOL
70 : 12 { 0xc } : BV:8
71 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
72 : eq(61, 71) : BOOL
73 : 23 { 0x17 } : BV:8
74 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
75 : eq(61, 74) : BOOL
76 : 42 { 0x2a } : BV:8
77 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
78 : eq(61, 77) : BOOL
79 : 16 { 0x10 } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(69, 70, 83) : BV:8
85 : ite(66, 67, 84) : BV:8
86 : ite(63, 64, 85) : BV:8
87 : 536870914 { 0x20000002 +1.23e193 } : BV:32
88 : bvadd(87, 60) : BV:32
89 : eq(88, 62) : BOOL
90 : eq(88, 65) : BOOL
91 : eq(88, 68) : BOOL
92 : eq(88, 71) : BOOL
93 : eq(88, 74) : BOOL
94 : eq(88, 77) : BOOL
95 : ite(94, 79, 80) : BV:8
96 : ite(93, 76, 95) : BV:8
97 : ite(92, 73, 96) : BV:8
98 : ite(91, 70, 97) : BV:8
99 : ite(90, 67, 98) : BV:8
100 : ite(89, 64, 99) : BV:8
101 : 536870913 { 0x20000001 +1.11e193 } : BV:32
102 : bvadd(101, 60) : BV:32
103 : eq(102, 62) : BOOL
104 : eq(102, 65) : BOOL
105 : eq(102, 68) : BOOL
106 : eq(102, 71) : BOOL
107 : eq(102, 74) : BOOL
108 : eq(102, 77) : BOOL
109 : ite(108, 79, 80) : BV:8
110 : ite(107, 76, 109) : BV:8
111 : ite(106, 73, 110) : BV:8
112 : ite(105, 70, 111) : BV:8
113 : ite(104, 67, 112) : BV:8
114 : ite(103, 64, 113) : BV:8
115 : bvadd(62, 60) : BV:32
116 : eq(115, 62) : BOOL
117 : eq(115, 65) : BOOL
118 : eq(115, 68) : BOOL
119 : eq(115, 71) : BOOL
120 : eq(115, 74) : BOOL
121 : eq(115, 77) : BOOL
122 : ite(121, 79, 80) : BV:8
123 : ite(120, 76, 122) : BV:8
124 : ite(119, 73, 123) : BV:8
125 : ite(118, 70, 124) : BV:8
126 : ite(117, 67, 125) : BV:8
127 : ite(116, 64, 126) : BV:8
128 : bvconcat(86, 100, 114, 127) : BV:32
129 : bvadd(56, 58, 128) : BV:32
130 : eq(129, 62) : BOOL
131 : eq(129, 65) : BOOL
132 : eq(129, 68) : BOOL
133 : eq(129, 71) : BOOL
134 : eq(129, 74) : BOOL
135 : eq(129, 77) : BOOL
136 : ite(135, 79, 80) : BV:8
137 : ite(134, 76, 136) : BV:8
138 : ite(133, 73, 137) : BV:8
139 : ite(132, 70, 138) : BV:8
140 : ite(131, 67, 139) : BV:8
141 : ite(130, 64, 140) : BV:8
142 : 2 { 0x2 +1.23e129 } : BV:32
143 : bvadd(142, 58, 128) : BV:32
144 : eq(143, 62) : BOOL
145 : eq(143, 65) : BOOL
146 : eq(143, 68) : BOOL
147 : eq(143, 71) : BOOL
148 : eq(143, 74) : BOOL
149 : eq(143, 77) : BOOL
150 : ite(149, 79, 80) : BV:8
151 : ite(148, 76, 150) : BV:8
152 : ite(147, 73, 151) : BV:8
153 : ite(146, 70, 152) : BV:8
154 : ite(145, 67, 153) : BV:8
155 : ite(144, 64, 154) : BV:8
156 : 1 { 0x1 +1.11e129 } : BV:32
157 : bvadd(156, 58, 128) : BV:32
158 : eq(157, 62) : BOOL
159 : eq(157, 65) : BOOL
160 : eq(157, 68) : BOOL
161 : eq(157, 71) : BOOL
162 : eq(157, 74) : BOOL
163 : eq(157, 77) : BOOL
164 : ite(163, 79, 80) : BV:8
165 : ite(162, 76, 164) : BV:8
166 : ite(161, 73, 165) : BV:8
167 : ite(160, 70, 166) : BV:8
168 : ite(159, 67, 167) : BV:8
169 : ite(158, 64, 168) : BV:8
170 : bvadd(58, 128) : BV:32
171 : eq(170, 62) : BOOL
172 : eq(170, 65) : BOOL
173 : eq(170, 68) : BOOL
174 : eq(170, 71) : BOOL
175 : eq(170, 74) : BOOL
176 : eq(170, 77) : BOOL
177 : ite(176, 79, 80) : BV:8
178 : ite(175, 76, 177) : BV:8
179 : ite(174, 73, 178) : BV:8
180 : ite(173, 70, 179) : BV:8
181 : ite(172, 67, 180) : BV:8
182 : ite(171, 64, 181) : BV:8
183 : bvconcat(141, 155, 169, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16189 : BV:32
18 : Lambda16187 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 4096 { 0x1000 +1.48828e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16188 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 536870915 { 0x20000003 +1.35e193 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 536870912 { 0x20000000 +1.0e193 } : BV:32
82 : eq(80, 81) : BOOL
83 : 2 { 0x2 } : BV:8
84 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
85 : eq(80, 84) : BOOL
86 : 102 { 0x66 } : BV:8
87 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
88 : eq(80, 87) : BOOL
89 : 12 { 0xc } : BV:8
90 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
91 : eq(80, 90) : BOOL
92 : 23 { 0x17 } : BV:8
93 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
94 : eq(80, 93) : BOOL
95 : 42 { 0x2a } : BV:8
96 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
97 : eq(80, 96) : BOOL
98 : 16 { 0x10 } : BV:8
99 : 0 { 0x0 } : BV:8
100 : ite(97, 98, 99) : BV:8
101 : ite(94, 95, 100) : BV:8
102 : ite(91, 92, 101) : BV:8
103 : ite(88, 89, 102) : BV:8
104 : ite(85, 86, 103) : BV:8
105 : ite(82, 83, 104) : BV:8
106 : 536870914 { 0x20000002 +1.23e193 } : BV:32
107 : bvadd(106, 79) : BV:32
108 : eq(107, 81) : BOOL
109 : eq(107, 84) : BOOL
110 : eq(107, 87) : BOOL
111 : eq(107, 90) : BOOL
112 : eq(107, 93) : BOOL
113 : eq(107, 96) : BOOL
114 : ite(113, 98, 99) : BV:8
115 : ite(112, 95, 114) : BV:8
116 : ite(111, 92, 115) : BV:8
117 : ite(110, 89, 116) : BV:8
118 : ite(109, 86, 117) : BV:8
119 : ite(108, 83, 118) : BV:8
120 : 536870913 { 0x20000001 +1.11e193 } : BV:32
121 : bvadd(120, 79) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : eq(121, 87) : BOOL
125 : eq(121, 90) : BOOL
126 : eq(121, 93) : BOOL
127 : eq(121, 96) : BOOL
128 : ite(127, 98, 99) : BV:8
129 : ite(126, 95, 128) : BV:8
130 : ite(125, 92, 129) : BV:8
131 : ite(124, 89, 130) : BV:8
132 : ite(123, 86, 131) : BV:8
133 : ite(122, 83, 132) : BV:8
134 : bvadd(81, 79) : BV:32
135 : eq(134, 81) : BOOL
136 : eq(134, 84) : BOOL
137 : eq(134, 87) : BOOL
138 : eq(134, 90) : BOOL
139 : eq(134, 93) : BOOL
140 : eq(134, 96) : BOOL
141 : ite(140, 98, 99) : BV:8
142 : ite(139, 95, 141) : BV:8
143 : ite(138, 92, 142) : BV:8
144 : ite(137, 89, 143) : BV:8
145 : ite(136, 86, 144) : BV:8
146 : ite(135, 83, 145) : BV:8
147 : bvconcat(105, 119, 133, 146) : BV:32
148 : bvadd(75, 77, 147) : BV:32
149 : eq(148, 81) : BOOL
150 : eq(148, 84) : BOOL
151 : eq(148, 87) : BOOL
152 : eq(148, 90) : BOOL
153 : eq(148, 93) : BOOL
154 : eq(148, 96) : BOOL
155 : ite(154, 98, 99) : BV:8
156 : ite(153, 95, 155) : BV:8
157 : ite(152, 92, 156) : BV:8
158 : ite(151, 89, 157) : BV:8
159 : ite(150, 86, 158) : BV:8
160 : ite(149, 83, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 77, 147) : BV:32
163 : eq(162, 81) : BOOL
164 : eq(162, 84) : BOOL
165 : eq(162, 87) : BOOL
166 : eq(162, 90) : BOOL
167 : eq(162, 93) : BOOL
168 : eq(162, 96) : BOOL
169 : ite(168, 98, 99) : BV:8
170 : ite(167, 95, 169) : BV:8
171 : ite(166, 92, 170) : BV:8
172 : ite(165, 89, 171) : BV:8
173 : ite(164, 86, 172) : BV:8
174 : ite(163, 83, 173) : BV:8
175 : 1 { 0x1 +1.11e129 } : BV:32
176 : bvadd(175, 77, 147) : BV:32
177 : eq(176, 81) : BOOL
178 : eq(176, 84) : BOOL
179 : eq(176, 87) : BOOL
180 : eq(176, 90) : BOOL
181 : eq(176, 93) : BOOL
182 : eq(176, 96) : BOOL
183 : ite(182, 98, 99) : BV:8
184 : ite(181, 95, 183) : BV:8
185 : ite(180, 92, 184) : BV:8
186 : ite(179, 89, 185) : BV:8
187 : ite(178, 86, 186) : BV:8
188 : ite(177, 83, 187) : BV:8
189 : bvadd(77, 147) : BV:32
190 : eq(189, 81) : BOOL
191 : eq(189, 84) : BOOL
192 : eq(189, 87) : BOOL
193 : eq(189, 90) : BOOL
194 : eq(189, 93) : BOOL
195 : eq(189, 96) : BOOL
196 : ite(195, 98, 99) : BV:8
197 : ite(194, 95, 196) : BV:8
198 : ite(193, 92, 197) : BV:8
199 : ite(192, 89, 198) : BV:8
200 : ite(191, 86, 199) : BV:8
201 : ite(190, 83, 200) : BV:8
202 : bvconcat(160, 174, 188, 201) : BV:32
203 : ite(55, 2, 202) : BV:32
204 : ite(74, 202, 203) : BV:32
205 : ite(55, 2, 204) : BV:32
206 : lambda(52, 205) : FUNCTION[BV:32 -> BV:32]
207 : map(51, 206) : MAP[BV:32 -> BV:32]
208 : lambda(17, 207) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
209 : map(16, 208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
210 : sym_const(209) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16191 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16192 : BV:32
18 : eq(17, 2) : BOOL
19 : 16 { 0x10 +1.190e129 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : eq(24, 25) : BOOL
27 : 2 { 0x2 } : BV:8
28 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
29 : eq(24, 28) : BOOL
30 : 102 { 0x66 } : BV:8
31 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
32 : eq(24, 31) : BOOL
33 : 12 { 0xc } : BV:8
34 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
35 : eq(24, 34) : BOOL
36 : 23 { 0x17 } : BV:8
37 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
38 : eq(24, 37) : BOOL
39 : 42 { 0x2a } : BV:8
40 : eq(24, 23) : BOOL
41 : 16 { 0x10 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(38, 39, 43) : BV:8
45 : ite(35, 36, 44) : BV:8
46 : ite(32, 33, 45) : BV:8
47 : ite(29, 30, 46) : BV:8
48 : ite(26, 27, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 22, 23) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 31) : BOOL
54 : eq(50, 34) : BOOL
55 : eq(50, 37) : BOOL
56 : eq(50, 23) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 39, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 33, 59) : BV:8
61 : ite(52, 30, 60) : BV:8
62 : ite(51, 27, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 22, 23) : BV:32
65 : eq(64, 25) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 31) : BOOL
68 : eq(64, 34) : BOOL
69 : eq(64, 37) : BOOL
70 : eq(64, 23) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 39, 71) : BV:8
73 : ite(68, 36, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : ite(66, 30, 74) : BV:8
76 : ite(65, 27, 75) : BV:8
77 : bvadd(22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 23) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 39, 84) : BV:8
86 : ite(81, 36, 85) : BV:8
87 : ite(80, 33, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(78, 27, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 19, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%x
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%n
1 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 536870911 ] -> 0, [ 536870912; 536870912 ] -> 2, [ 536870913; 1714034443 ] -> 0, [ 1714034444; 1714034444 ] -> 16, [ 1714034445; 2684354555 ] -> 0, [ 2684354556; 2684354556 ] -> 12, [ 2684354557; 2684354557 ] -> 23, [ 2684354558; 2684354558 ] -> 42, [ 2684354559; 2684354559 ] -> 102, [ 2684354560; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 31 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32; 35 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 36; 191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 192; 195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 196; 469647683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 469647684; 469647687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 469647688; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 192 { 0xc0 +1.2288e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 469647684 { 0x1bfe4144 +1.98636674e184 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda16183 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4095 { 0xfff +1.48816e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4096 { 0x1000 +1.48828e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16184 : BV:32
20 : eq(19, 4) : BOOL
21 : 16 { 0x10 +1.190e129 } : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 536870912 { 0x20000000 +1.0e193 } : BV:32
28 : eq(26, 27) : BOOL
29 : 2 { 0x2 } : BV:8
30 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
31 : eq(26, 30) : BOOL
32 : 102 { 0x66 } : BV:8
33 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
34 : eq(26, 33) : BOOL
35 : 12 { 0xc } : BV:8
36 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
37 : eq(26, 36) : BOOL
38 : 23 { 0x17 } : BV:8
39 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
40 : eq(26, 39) : BOOL
41 : 42 { 0x2a } : BV:8
42 : eq(26, 25) : BOOL
43 : 16 { 0x10 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 41, 45) : BV:8
47 : ite(37, 38, 46) : BV:8
48 : ite(34, 35, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(28, 29, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 24, 25) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : eq(52, 33) : BOOL
56 : eq(52, 36) : BOOL
57 : eq(52, 39) : BOOL
58 : eq(52, 25) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 41, 59) : BV:8
61 : ite(56, 38, 60) : BV:8
62 : ite(55, 35, 61) : BV:8
63 : ite(54, 32, 62) : BV:8
64 : ite(53, 29, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 24, 25) : BV:32
67 : eq(66, 27) : BOOL
68 : eq(66, 30) : BOOL
69 : eq(66, 33) : BOOL
70 : eq(66, 36) : BOOL
71 : eq(66, 39) : BOOL
72 : eq(66, 25) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 41, 73) : BV:8
75 : ite(70, 38, 74) : BV:8
76 : ite(69, 35, 75) : BV:8
77 : ite(68, 32, 76) : BV:8
78 : ite(67, 29, 77) : BV:8
79 : bvadd(24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 25) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 41, 86) : BV:8
88 : ite(83, 38, 87) : BV:8
89 : ite(82, 35, 88) : BV:8
90 : ite(81, 32, 89) : BV:8
91 : ite(80, 29, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(20, 21, 92) : BV:32
94 : lambda(19, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(18, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1232264426 { 0x4972dcea +1.89736676e19 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16194 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16195 : BV:32
18 : eq(17, 2) : BOOL
19 : 16 { 0x10 +1.190e129 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : eq(24, 25) : BOOL
27 : 2 { 0x2 } : BV:8
28 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
29 : eq(24, 28) : BOOL
30 : 102 { 0x66 } : BV:8
31 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
32 : eq(24, 31) : BOOL
33 : 12 { 0xc } : BV:8
34 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
35 : eq(24, 34) : BOOL
36 : 23 { 0x17 } : BV:8
37 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
38 : eq(24, 37) : BOOL
39 : 42 { 0x2a } : BV:8
40 : eq(24, 23) : BOOL
41 : 16 { 0x10 } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(38, 39, 43) : BV:8
45 : ite(35, 36, 44) : BV:8
46 : ite(32, 33, 45) : BV:8
47 : ite(29, 30, 46) : BV:8
48 : ite(26, 27, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 22, 23) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 31) : BOOL
54 : eq(50, 34) : BOOL
55 : eq(50, 37) : BOOL
56 : eq(50, 23) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 39, 57) : BV:8
59 : ite(54, 36, 58) : BV:8
60 : ite(53, 33, 59) : BV:8
61 : ite(52, 30, 60) : BV:8
62 : ite(51, 27, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 22, 23) : BV:32
65 : eq(64, 25) : BOOL
66 : eq(64, 28) : BOOL
67 : eq(64, 31) : BOOL
68 : eq(64, 34) : BOOL
69 : eq(64, 37) : BOOL
70 : eq(64, 23) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 39, 71) : BV:8
73 : ite(68, 36, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : ite(66, 30, 74) : BV:8
76 : ite(65, 27, 75) : BV:8
77 : bvadd(22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 23) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 39, 84) : BV:8
86 : ite(81, 36, 85) : BV:8
87 : ite(80, 33, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(78, 27, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 19, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1571077860 { 0x5da4bee4 +1.28707551e60 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 192 { 0xc0 +1.2288e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 195 { 0xc3 +1.2324e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 469647684 { 0x1bfe4144 +1.98636674e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 469647687 { 0x1bfe4147 +1.98636710e184 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 35 { 0x23 +1.417e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 548474879 ] -> true, [ 548474880; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16103 : BV:32
2 : Lambda16104 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16108 : BV:32
2 : Lambda16109 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 536870915 { 0x20000003 +1.35e193 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 536870912 { 0x20000000 +1.0e193 } : BV:32
14 : eq(12, 13) : BOOL
15 : 2 { 0x2 } : BV:8
16 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
17 : eq(12, 16) : BOOL
18 : 102 { 0x66 } : BV:8
19 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
20 : eq(12, 19) : BOOL
21 : 12 { 0xc } : BV:8
22 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
23 : eq(12, 22) : BOOL
24 : 23 { 0x17 } : BV:8
25 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
26 : eq(12, 25) : BOOL
27 : 42 { 0x2a } : BV:8
28 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
29 : eq(12, 28) : BOOL
30 : 16 { 0x10 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(26, 27, 32) : BV:8
34 : ite(23, 24, 33) : BV:8
35 : ite(20, 21, 34) : BV:8
36 : ite(17, 18, 35) : BV:8
37 : ite(14, 15, 36) : BV:8
38 : 536870914 { 0x20000002 +1.23e193 } : BV:32
39 : bvadd(38, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 22) : BOOL
44 : eq(39, 25) : BOOL
45 : eq(39, 28) : BOOL
46 : ite(45, 30, 31) : BV:8
47 : ite(44, 27, 46) : BV:8
48 : ite(43, 24, 47) : BV:8
49 : ite(42, 21, 48) : BV:8
50 : ite(41, 18, 49) : BV:8
51 : ite(40, 15, 50) : BV:8
52 : 536870913 { 0x20000001 +1.11e193 } : BV:32
53 : bvadd(52, 11) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : eq(53, 19) : BOOL
57 : eq(53, 22) : BOOL
58 : eq(53, 25) : BOOL
59 : eq(53, 28) : BOOL
60 : ite(59, 30, 31) : BV:8
61 : ite(58, 27, 60) : BV:8
62 : ite(57, 24, 61) : BV:8
63 : ite(56, 21, 62) : BV:8
64 : ite(55, 18, 63) : BV:8
65 : ite(54, 15, 64) : BV:8
66 : bvadd(13, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 19) : BOOL
70 : eq(66, 22) : BOOL
71 : eq(66, 25) : BOOL
72 : eq(66, 28) : BOOL
73 : ite(72, 30, 31) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 21, 75) : BV:8
77 : ite(68, 18, 76) : BV:8
78 : ite(67, 15, 77) : BV:8
79 : bvconcat(37, 51, 65, 78) : BV:32
80 : bvadd(7, 9, 79) : BV:32
81 : eq(80, 13) : BOOL
82 : eq(80, 16) : BOOL
83 : eq(80, 19) : BOOL
84 : eq(80, 22) : BOOL
85 : eq(80, 25) : BOOL
86 : eq(80, 28) : BOOL
87 : ite(86, 30, 31) : BV:8
88 : ite(85, 27, 87) : BV:8
89 : ite(84, 24, 88) : BV:8
90 : ite(83, 21, 89) : BV:8
91 : ite(82, 18, 90) : BV:8
92 : ite(81, 15, 91) : BV:8
93 : 2 { 0x2 +1.23e129 } : BV:32
94 : bvadd(93, 9, 79) : BV:32
95 : eq(94, 13) : BOOL
96 : eq(94, 16) : BOOL
97 : eq(94, 19) : BOOL
98 : eq(94, 22) : BOOL
99 : eq(94, 25) : BOOL
100 : eq(94, 28) : BOOL
101 : ite(100, 30, 31) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 24, 102) : BV:8
104 : ite(97, 21, 103) : BV:8
105 : ite(96, 18, 104) : BV:8
106 : ite(95, 15, 105) : BV:8
107 : 1 { 0x1 +1.11e129 } : BV:32
108 : bvadd(107, 9, 79) : BV:32
109 : eq(108, 13) : BOOL
110 : eq(108, 16) : BOOL
111 : eq(108, 19) : BOOL
112 : eq(108, 22) : BOOL
113 : eq(108, 25) : BOOL
114 : eq(108, 28) : BOOL
115 : ite(114, 30, 31) : BV:8
116 : ite(113, 27, 115) : BV:8
117 : ite(112, 24, 116) : BV:8
118 : ite(111, 21, 117) : BV:8
119 : ite(110, 18, 118) : BV:8
120 : ite(109, 15, 119) : BV:8
121 : bvadd(9, 79) : BV:32
122 : eq(121, 13) : BOOL
123 : eq(121, 16) : BOOL
124 : eq(121, 19) : BOOL
125 : eq(121, 22) : BOOL
126 : eq(121, 25) : BOOL
127 : eq(121, 28) : BOOL
128 : ite(127, 30, 31) : BV:8
129 : ite(126, 27, 128) : BV:8
130 : ite(125, 24, 129) : BV:8
131 : ite(124, 21, 130) : BV:8
132 : ite(123, 18, 131) : BV:8
133 : ite(122, 15, 132) : BV:8
134 : bvconcat(92, 106, 120, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : lambda(1, 2, 135) : FUNCTION[BV:32,BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 548474879 ] -> true, [ 548474880; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16112 : BV:32
2 : Lambda16113 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 4096 { 0x1000 +1.48828e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16116 : BV:32
2 : Lambda16117 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 548474879 { 0x20b10fff +1.38330066e194 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 548474880 { 0x20b11000 +1.38330078e194 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 548474881 { 0x20b11001 +1.38330090e194 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4097 { 0x1001 +1.48840e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 536870915 { 0x20000003 +1.35e193 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 536870912 { 0x20000000 +1.0e193 } : BV:32
55 : eq(53, 54) : BOOL
56 : 2 { 0x2 } : BV:8
57 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
58 : eq(53, 57) : BOOL
59 : 102 { 0x66 } : BV:8
60 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
61 : eq(53, 60) : BOOL
62 : 12 { 0xc } : BV:8
63 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
64 : eq(53, 63) : BOOL
65 : 23 { 0x17 } : BV:8
66 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
67 : eq(53, 66) : BOOL
68 : 42 { 0x2a } : BV:8
69 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
70 : eq(53, 69) : BOOL
71 : 16 { 0x10 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(58, 59, 76) : BV:8
78 : ite(55, 56, 77) : BV:8
79 : 536870914 { 0x20000002 +1.23e193 } : BV:32
80 : bvadd(79, 52) : BV:32
81 : eq(80, 54) : BOOL
82 : eq(80, 57) : BOOL
83 : eq(80, 60) : BOOL
84 : eq(80, 63) : BOOL
85 : eq(80, 66) : BOOL
86 : eq(80, 69) : BOOL
87 : ite(86, 71, 72) : BV:8
88 : ite(85, 68, 87) : BV:8
89 : ite(84, 65, 88) : BV:8
90 : ite(83, 62, 89) : BV:8
91 : ite(82, 59, 90) : BV:8
92 : ite(81, 56, 91) : BV:8
93 : 536870913 { 0x20000001 +1.11e193 } : BV:32
94 : bvadd(93, 52) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : eq(94, 60) : BOOL
98 : eq(94, 63) : BOOL
99 : eq(94, 66) : BOOL
100 : eq(94, 69) : BOOL
101 : ite(100, 71, 72) : BV:8
102 : ite(99, 68, 101) : BV:8
103 : ite(98, 65, 102) : BV:8
104 : ite(97, 62, 103) : BV:8
105 : ite(96, 59, 104) : BV:8
106 : ite(95, 56, 105) : BV:8
107 : bvadd(54, 52) : BV:32
108 : eq(107, 54) : BOOL
109 : eq(107, 57) : BOOL
110 : eq(107, 60) : BOOL
111 : eq(107, 63) : BOOL
112 : eq(107, 66) : BOOL
113 : eq(107, 69) : BOOL
114 : ite(113, 71, 72) : BV:8
115 : ite(112, 68, 114) : BV:8
116 : ite(111, 65, 115) : BV:8
117 : ite(110, 62, 116) : BV:8
118 : ite(109, 59, 117) : BV:8
119 : ite(108, 56, 118) : BV:8
120 : bvconcat(78, 92, 106, 119) : BV:32
121 : bvadd(48, 50, 120) : BV:32
122 : eq(121, 54) : BOOL
123 : eq(121, 57) : BOOL
124 : eq(121, 60) : BOOL
125 : eq(121, 63) : BOOL
126 : eq(121, 66) : BOOL
127 : eq(121, 69) : BOOL
128 : ite(127, 71, 72) : BV:8
129 : ite(126, 68, 128) : BV:8
130 : ite(125, 65, 129) : BV:8
131 : ite(124, 62, 130) : BV:8
132 : ite(123, 59, 131) : BV:8
133 : ite(122, 56, 132) : BV:8
134 : 2 { 0x2 +1.23e129 } : BV:32
135 : bvadd(134, 50, 120) : BV:32
136 : eq(135, 54) : BOOL
137 : eq(135, 57) : BOOL
138 : eq(135, 60) : BOOL
139 : eq(135, 63) : BOOL
140 : eq(135, 66) : BOOL
141 : eq(135, 69) : BOOL
142 : ite(141, 71, 72) : BV:8
143 : ite(140, 68, 142) : BV:8
144 : ite(139, 65, 143) : BV:8
145 : ite(138, 62, 144) : BV:8
146 : ite(137, 59, 145) : BV:8
147 : ite(136, 56, 146) : BV:8
148 : 1 { 0x1 +1.11e129 } : BV:32
149 : bvadd(148, 50, 120) : BV:32
150 : eq(149, 54) : BOOL
151 : eq(149, 57) : BOOL
152 : eq(149, 60) : BOOL
153 : eq(149, 63) : BOOL
154 : eq(149, 66) : BOOL
155 : eq(149, 69) : BOOL
156 : ite(155, 71, 72) : BV:8
157 : ite(154, 68, 156) : BV:8
158 : ite(153, 65, 157) : BV:8
159 : ite(152, 62, 158) : BV:8
160 : ite(151, 59, 159) : BV:8
161 : ite(150, 56, 160) : BV:8
162 : bvadd(50, 120) : BV:32
163 : eq(162, 54) : BOOL
164 : eq(162, 57) : BOOL
165 : eq(162, 60) : BOOL
166 : eq(162, 63) : BOOL
167 : eq(162, 66) : BOOL
168 : eq(162, 69) : BOOL
169 : ite(168, 71, 72) : BV:8
170 : ite(167, 68, 169) : BV:8
171 : ite(166, 65, 170) : BV:8
172 : ite(165, 62, 171) : BV:8
173 : ite(164, 59, 172) : BV:8
174 : ite(163, 56, 173) : BV:8
175 : bvconcat(133, 147, 161, 174) : BV:32
176 : ite(6, 3, 175) : BV:32
177 : ite(47, 175, 176) : BV:32
178 : ite(6, 3, 177) : BV:32
179 : lambda(1, 2, 178) : FUNCTION[BV:32,BV:32 -> BV:32]
180 : sym_const(179) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16121 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
14 : eq(9, 13) : BOOL
15 : 102 { 0x66 } : BV:8
16 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
17 : eq(9, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
20 : eq(9, 19) : BOOL
21 : 23 { 0x17 } : BV:8
22 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
23 : eq(9, 22) : BOOL
24 : 42 { 0x2a } : BV:8
25 : eq(9, 8) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(23, 24, 28) : BV:8
30 : ite(20, 21, 29) : BV:8
31 : ite(17, 18, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : ite(11, 12, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 19) : BOOL
40 : eq(35, 22) : BOOL
41 : eq(35, 8) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 21, 43) : BV:8
45 : ite(38, 18, 44) : BV:8
46 : ite(37, 15, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 8) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 24, 56) : BV:8
58 : ite(53, 21, 57) : BV:8
59 : ite(52, 18, 58) : BV:8
60 : ite(51, 15, 59) : BV:8
61 : ite(50, 12, 60) : BV:8
62 : bvadd(7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 8) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 24, 69) : BV:8
71 : ite(66, 21, 70) : BV:8
72 : ite(65, 18, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 12, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16125 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
14 : eq(9, 13) : BOOL
15 : 102 { 0x66 } : BV:8
16 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
17 : eq(9, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
20 : eq(9, 19) : BOOL
21 : 23 { 0x17 } : BV:8
22 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
23 : eq(9, 22) : BOOL
24 : 42 { 0x2a } : BV:8
25 : eq(9, 8) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(23, 24, 28) : BV:8
30 : ite(20, 21, 29) : BV:8
31 : ite(17, 18, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : ite(11, 12, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 19) : BOOL
40 : eq(35, 22) : BOOL
41 : eq(35, 8) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 21, 43) : BV:8
45 : ite(38, 18, 44) : BV:8
46 : ite(37, 15, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 8) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 24, 56) : BV:8
58 : ite(53, 21, 57) : BV:8
59 : ite(52, 18, 58) : BV:8
60 : ite(51, 15, 59) : BV:8
61 : ite(50, 12, 60) : BV:8
62 : bvadd(7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 8) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 24, 69) : BV:8
71 : ite(66, 21, 70) : BV:8
72 : ite(65, 18, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 12, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16129 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 16 { 0x10 +1.190e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 1714034444 { 0x662a170c +1.32882833e77 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 2684354559 { 0x9fffffff -1610612737 -1.99999988e192 } : BV:32
14 : eq(9, 13) : BOOL
15 : 102 { 0x66 } : BV:8
16 : 2684354556 { 0x9ffffffc -1610612740 -1.99999952e192 } : BV:32
17 : eq(9, 16) : BOOL
18 : 12 { 0xc } : BV:8
19 : 2684354557 { 0x9ffffffd -1610612739 -1.99999964e192 } : BV:32
20 : eq(9, 19) : BOOL
21 : 23 { 0x17 } : BV:8
22 : 2684354558 { 0x9ffffffe -1610612738 -1.99999976e192 } : BV:32
23 : eq(9, 22) : BOOL
24 : 42 { 0x2a } : BV:8
25 : eq(9, 8) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(23, 24, 28) : BV:8
30 : ite(20, 21, 29) : BV:8
31 : ite(17, 18, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : ite(11, 12, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 19) : BOOL
40 : eq(35, 22) : BOOL
41 : eq(35, 8) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 21, 43) : BV:8
45 : ite(38, 18, 44) : BV:8
46 : ite(37, 15, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 8) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 24, 56) : BV:8
58 : ite(53, 21, 57) : BV:8
59 : ite(52, 18, 58) : BV:8
60 : ite(51, 15, 59) : BV:8
61 : ite(50, 12, 60) : BV:8
62 : bvadd(7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 8) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 24, 69) : BV:8
71 : ite(66, 21, 70) : BV:8
72 : ite(65, 18, 71) : BV:8
73 : ite(64, 15, 72) : BV:8
74 : ite(63, 12, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1264756944
=counter_example_end
=global nodece 61 num_edges_traversed 2
=global nodece 61 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 62
=global nodece 62 nodece z3.ce6427.num_edges_traversed1
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce6427 c59576e3555b2766b7b2a8128af873d7
=input.spec-%var-x-1
1 : Lambda16350 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16353 : BV:32
18 : Lambda16351 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda16352 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 251658243 { 0xf000003 +1.35e159 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 175 { 0xaf -81 } : BV:8
82 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
83 : eq(79, 82) : BOOL
84 : 4 { 0x4 } : BV:8
85 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
86 : eq(79, 85) : BOOL
87 : 128 { 0x80 -128 } : BV:8
88 : 251658240 { 0xf000000 +1.0e159 } : BV:32
89 : eq(79, 88) : BOOL
90 : 252 { 0xfc -4 } : BV:8
91 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
92 : eq(79, 91) : BOOL
93 : 145 { 0x91 -111 } : BV:8
94 : 251658242 { 0xf000002 +1.23e159 } : BV:32
95 : eq(79, 94) : BOOL
96 : 255 { 0xff -1 } : BV:8
97 : 251658241 { 0xf000001 +1.11e159 } : BV:32
98 : eq(79, 97) : BOOL
99 : 168 { 0xa8 -88 } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(80, 81, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 82) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 81, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 77) : BOOL
125 : eq(123, 82) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 81, 136) : BV:8
138 : bvadd(88, 78) : BV:32
139 : eq(138, 77) : BOOL
140 : eq(138, 82) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 81, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 81, 167) : BV:8
169 : bvadd(40, 76, 153) : BV:32
170 : eq(169, 77) : BOOL
171 : eq(169, 82) : BOOL
172 : eq(169, 85) : BOOL
173 : eq(169, 88) : BOOL
174 : eq(169, 91) : BOOL
175 : eq(169, 94) : BOOL
176 : eq(169, 97) : BOOL
177 : ite(176, 99, 100) : BV:8
178 : ite(175, 96, 177) : BV:8
179 : ite(174, 93, 178) : BV:8
180 : ite(173, 90, 179) : BV:8
181 : ite(172, 87, 180) : BV:8
182 : ite(171, 84, 181) : BV:8
183 : ite(170, 81, 182) : BV:8
184 : bvadd(36, 76, 153) : BV:32
185 : eq(184, 77) : BOOL
186 : eq(184, 82) : BOOL
187 : eq(184, 85) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : ite(191, 99, 100) : BV:8
193 : ite(190, 96, 192) : BV:8
194 : ite(189, 93, 193) : BV:8
195 : ite(188, 90, 194) : BV:8
196 : ite(187, 87, 195) : BV:8
197 : ite(186, 84, 196) : BV:8
198 : ite(185, 81, 197) : BV:8
199 : bvadd(76, 153) : BV:32
200 : eq(199, 77) : BOOL
201 : eq(199, 82) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : ite(206, 99, 100) : BV:8
208 : ite(205, 96, 207) : BV:8
209 : ite(204, 93, 208) : BV:8
210 : ite(203, 90, 209) : BV:8
211 : ite(202, 87, 210) : BV:8
212 : ite(201, 84, 211) : BV:8
213 : ite(200, 81, 212) : BV:8
214 : bvconcat(168, 183, 198, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : ite(73, 214, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 251658236 { 0xefffffc +1.99999952e158 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16358 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16361 : BV:32
18 : Lambda16359 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda16360 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 251658243 { 0xf000003 +1.35e159 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 175 { 0xaf -81 } : BV:8
63 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
64 : eq(60, 63) : BOOL
65 : 4 { 0x4 } : BV:8
66 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
67 : eq(60, 66) : BOOL
68 : 128 { 0x80 -128 } : BV:8
69 : 251658240 { 0xf000000 +1.0e159 } : BV:32
70 : eq(60, 69) : BOOL
71 : 252 { 0xfc -4 } : BV:8
72 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
73 : eq(60, 72) : BOOL
74 : 145 { 0x91 -111 } : BV:8
75 : 251658242 { 0xf000002 +1.23e159 } : BV:32
76 : eq(60, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : 251658241 { 0xf000001 +1.11e159 } : BV:32
79 : eq(60, 78) : BOOL
80 : 168 { 0xa8 -88 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 63) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 62, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 58) : BOOL
106 : eq(104, 63) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 62, 117) : BV:8
119 : bvadd(69, 59) : BV:32
120 : eq(119, 58) : BOOL
121 : eq(119, 63) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 62, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 62, 148) : BV:8
150 : bvadd(40, 57, 134) : BV:32
151 : eq(150, 58) : BOOL
152 : eq(150, 63) : BOOL
153 : eq(150, 66) : BOOL
154 : eq(150, 69) : BOOL
155 : eq(150, 72) : BOOL
156 : eq(150, 75) : BOOL
157 : eq(150, 78) : BOOL
158 : ite(157, 80, 81) : BV:8
159 : ite(156, 77, 158) : BV:8
160 : ite(155, 74, 159) : BV:8
161 : ite(154, 71, 160) : BV:8
162 : ite(153, 68, 161) : BV:8
163 : ite(152, 65, 162) : BV:8
164 : ite(151, 62, 163) : BV:8
165 : bvadd(36, 57, 134) : BV:32
166 : eq(165, 58) : BOOL
167 : eq(165, 63) : BOOL
168 : eq(165, 66) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : ite(172, 80, 81) : BV:8
174 : ite(171, 77, 173) : BV:8
175 : ite(170, 74, 174) : BV:8
176 : ite(169, 71, 175) : BV:8
177 : ite(168, 68, 176) : BV:8
178 : ite(167, 65, 177) : BV:8
179 : ite(166, 62, 178) : BV:8
180 : bvadd(57, 134) : BV:32
181 : eq(180, 58) : BOOL
182 : eq(180, 63) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : ite(187, 80, 81) : BV:8
189 : ite(186, 77, 188) : BV:8
190 : ite(185, 74, 189) : BV:8
191 : ite(184, 71, 190) : BV:8
192 : ite(183, 68, 191) : BV:8
193 : ite(182, 65, 192) : BV:8
194 : ite(181, 62, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(54, 2, 195) : BV:32
197 : lambda(51, 196) : FUNCTION[BV:32 -> BV:32]
198 : map(50, 197) : MAP[BV:32 -> BV:32]
199 : lambda(17, 198) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
200 : map(16, 199) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
201 : sym_const(200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16363 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda16364 : BV:32
17 : eq(16, 2) : BOOL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : bvmul(18, 16) : BV:32
21 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
22 : bvadd(19, 20, 21) : BV:32
23 : 251658243 { 0xf000003 +1.35e159 } : BV:32
24 : eq(22, 23) : BOOL
25 : 175 { 0xaf -81 } : BV:8
26 : eq(22, 21) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
29 : eq(22, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 251658240 { 0xf000000 +1.0e159 } : BV:32
32 : eq(22, 31) : BOOL
33 : 252 { 0xfc -4 } : BV:8
34 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
35 : eq(22, 34) : BOOL
36 : 145 { 0x91 -111 } : BV:8
37 : 251658242 { 0xf000002 +1.23e159 } : BV:32
38 : eq(22, 37) : BOOL
39 : 255 { 0xff -1 } : BV:8
40 : 251658241 { 0xf000001 +1.11e159 } : BV:32
41 : eq(22, 40) : BOOL
42 : 168 { 0xa8 -88 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : ite(26, 27, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 20, 21) : BV:32
53 : eq(52, 23) : BOOL
54 : eq(52, 21) : BOOL
55 : eq(52, 28) : BOOL
56 : eq(52, 31) : BOOL
57 : eq(52, 34) : BOOL
58 : eq(52, 37) : BOOL
59 : eq(52, 40) : BOOL
60 : ite(59, 42, 43) : BV:8
61 : ite(58, 39, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 33, 62) : BV:8
64 : ite(55, 30, 63) : BV:8
65 : ite(54, 27, 64) : BV:8
66 : ite(53, 25, 65) : BV:8
67 : bvadd(7, 20, 21) : BV:32
68 : eq(67, 23) : BOOL
69 : eq(67, 21) : BOOL
70 : eq(67, 28) : BOOL
71 : eq(67, 31) : BOOL
72 : eq(67, 34) : BOOL
73 : eq(67, 37) : BOOL
74 : eq(67, 40) : BOOL
75 : ite(74, 42, 43) : BV:8
76 : ite(73, 39, 75) : BV:8
77 : ite(72, 36, 76) : BV:8
78 : ite(71, 33, 77) : BV:8
79 : ite(70, 30, 78) : BV:8
80 : ite(69, 27, 79) : BV:8
81 : ite(68, 25, 80) : BV:8
82 : bvadd(20, 21) : BV:32
83 : eq(82, 23) : BOOL
84 : eq(82, 21) : BOOL
85 : eq(82, 28) : BOOL
86 : eq(82, 31) : BOOL
87 : eq(82, 34) : BOOL
88 : eq(82, 37) : BOOL
89 : eq(82, 40) : BOOL
90 : ite(89, 42, 43) : BV:8
91 : ite(88, 39, 90) : BV:8
92 : ite(87, 36, 91) : BV:8
93 : ite(86, 33, 92) : BV:8
94 : ite(85, 30, 93) : BV:8
95 : ite(84, 27, 94) : BV:8
96 : ite(83, 25, 95) : BV:8
97 : bvconcat(50, 66, 81, 96) : BV:32
98 : ite(17, 18, 97) : BV:32
99 : lambda(16, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(15, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 251658240 { 0xf000000 +1.0e159 } : BV:32
=input.dst.llvm-%n
1 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 251658237 ] -> 0, [ 251658238; 251658238 ] -> 128, [ 251658239; 251658239 ] -> 145, [ 251658240; 251658240 ] -> 252, [ 251658241; 251658241 ] -> 168, [ 251658242; 251658242 ] -> 255, [ 251658243; 251658243 ] -> 175, [ 251658244; 2441084927 ] -> 0, [ 2441084928; 2441084928 ] -> 4, [ 2441084929; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 892168039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 892168040; 892168043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 892168044; 2583664551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2583664552; 2583664555 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2583664556; 4060393139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4060393140; 4060393143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4060393144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 892168040 { 0x352d6768 +1.35471820e235 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4060393140 { 0xf204aeb4 -234574156 -1.3658151e101 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2583664552 { 0x99ff97a8 -1711302744 -1.99681568e180 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1534917568 { 0x5b7cfbc0 +1.97643280e55 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
2 : unit : UNIT
3 : Lambda16355 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 4) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda16356 : BV:32
19 : eq(18, 4) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(20, 18) : BV:32
23 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 251658243 { 0xf000003 +1.35e159 } : BV:32
26 : eq(24, 25) : BOOL
27 : 175 { 0xaf -81 } : BV:8
28 : eq(24, 23) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
31 : eq(24, 30) : BOOL
32 : 128 { 0x80 -128 } : BV:8
33 : 251658240 { 0xf000000 +1.0e159 } : BV:32
34 : eq(24, 33) : BOOL
35 : 252 { 0xfc -4 } : BV:8
36 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
37 : eq(24, 36) : BOOL
38 : 145 { 0x91 -111 } : BV:8
39 : 251658242 { 0xf000002 +1.23e159 } : BV:32
40 : eq(24, 39) : BOOL
41 : 255 { 0xff -1 } : BV:8
42 : 251658241 { 0xf000001 +1.11e159 } : BV:32
43 : eq(24, 42) : BOOL
44 : 168 { 0xa8 -88 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(26, 27, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 22, 23) : BV:32
55 : eq(54, 25) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 27, 67) : BV:8
69 : bvadd(9, 22, 23) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 23) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : eq(69, 39) : BOOL
76 : eq(69, 42) : BOOL
77 : ite(76, 44, 45) : BV:8
78 : ite(75, 41, 77) : BV:8
79 : ite(74, 38, 78) : BV:8
80 : ite(73, 35, 79) : BV:8
81 : ite(72, 32, 80) : BV:8
82 : ite(71, 29, 81) : BV:8
83 : ite(70, 27, 82) : BV:8
84 : bvadd(22, 23) : BV:32
85 : eq(84, 25) : BOOL
86 : eq(84, 23) : BOOL
87 : eq(84, 30) : BOOL
88 : eq(84, 33) : BOOL
89 : eq(84, 36) : BOOL
90 : eq(84, 39) : BOOL
91 : eq(84, 42) : BOOL
92 : ite(91, 44, 45) : BV:8
93 : ite(90, 41, 92) : BV:8
94 : ite(89, 38, 93) : BV:8
95 : ite(88, 35, 94) : BV:8
96 : ite(87, 32, 95) : BV:8
97 : ite(86, 29, 96) : BV:8
98 : ite(85, 27, 97) : BV:8
99 : bvconcat(52, 68, 83, 98) : BV:32
100 : ite(19, 20, 99) : BV:32
101 : lambda(18, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(17, 101) : MAP[BV:32 -> BV:32]
103 : sum(1, 2, 102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
104 : sym_const(103) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1824600713 { 0x6cc13289 +1.50935471e90 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16366 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda16367 : BV:32
17 : eq(16, 2) : BOOL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : bvmul(18, 16) : BV:32
21 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
22 : bvadd(19, 20, 21) : BV:32
23 : 251658243 { 0xf000003 +1.35e159 } : BV:32
24 : eq(22, 23) : BOOL
25 : 175 { 0xaf -81 } : BV:8
26 : eq(22, 21) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
29 : eq(22, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 251658240 { 0xf000000 +1.0e159 } : BV:32
32 : eq(22, 31) : BOOL
33 : 252 { 0xfc -4 } : BV:8
34 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
35 : eq(22, 34) : BOOL
36 : 145 { 0x91 -111 } : BV:8
37 : 251658242 { 0xf000002 +1.23e159 } : BV:32
38 : eq(22, 37) : BOOL
39 : 255 { 0xff -1 } : BV:8
40 : 251658241 { 0xf000001 +1.11e159 } : BV:32
41 : eq(22, 40) : BOOL
42 : 168 { 0xa8 -88 } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : ite(26, 27, 48) : BV:8
50 : ite(24, 25, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 20, 21) : BV:32
53 : eq(52, 23) : BOOL
54 : eq(52, 21) : BOOL
55 : eq(52, 28) : BOOL
56 : eq(52, 31) : BOOL
57 : eq(52, 34) : BOOL
58 : eq(52, 37) : BOOL
59 : eq(52, 40) : BOOL
60 : ite(59, 42, 43) : BV:8
61 : ite(58, 39, 60) : BV:8
62 : ite(57, 36, 61) : BV:8
63 : ite(56, 33, 62) : BV:8
64 : ite(55, 30, 63) : BV:8
65 : ite(54, 27, 64) : BV:8
66 : ite(53, 25, 65) : BV:8
67 : bvadd(7, 20, 21) : BV:32
68 : eq(67, 23) : BOOL
69 : eq(67, 21) : BOOL
70 : eq(67, 28) : BOOL
71 : eq(67, 31) : BOOL
72 : eq(67, 34) : BOOL
73 : eq(67, 37) : BOOL
74 : eq(67, 40) : BOOL
75 : ite(74, 42, 43) : BV:8
76 : ite(73, 39, 75) : BV:8
77 : ite(72, 36, 76) : BV:8
78 : ite(71, 33, 77) : BV:8
79 : ite(70, 30, 78) : BV:8
80 : ite(69, 27, 79) : BV:8
81 : ite(68, 25, 80) : BV:8
82 : bvadd(20, 21) : BV:32
83 : eq(82, 23) : BOOL
84 : eq(82, 21) : BOOL
85 : eq(82, 28) : BOOL
86 : eq(82, 31) : BOOL
87 : eq(82, 34) : BOOL
88 : eq(82, 37) : BOOL
89 : eq(82, 40) : BOOL
90 : ite(89, 42, 43) : BV:8
91 : ite(88, 39, 90) : BV:8
92 : ite(87, 36, 91) : BV:8
93 : ite(86, 33, 92) : BV:8
94 : ite(85, 30, 93) : BV:8
95 : ite(84, 27, 94) : BV:8
96 : ite(83, 25, 95) : BV:8
97 : bvconcat(50, 66, 81, 96) : BV:32
98 : ite(17, 18, 97) : BV:32
99 : lambda(16, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(15, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 976578038 { 0x3a3565f6 +1.41717410e245 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 251658236 { 0xefffffc +1.99999952e158 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4060393140 { 0xf204aeb4 -234574156 -1.3658151e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4060393143 { 0xf204aeb7 -234574153 -1.3658187e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2583664552 { 0x99ff97a8 -1711302744 -1.99681568e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2583664555 { 0x99ff97ab -1711302741 -1.99681603e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 892168040 { 0x352d6768 +1.35471820e235 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 892168043 { 0x352d676b +1.35471856e235 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1663712313 ] -> true, [ 1663712314; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16277 : BV:32
2 : Lambda16278 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16282 : BV:32
2 : Lambda16283 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 251658243 { 0xf000003 +1.35e159 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 175 { 0xaf -81 } : BV:8
55 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
56 : eq(52, 55) : BOOL
57 : 4 { 0x4 } : BV:8
58 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
59 : eq(52, 58) : BOOL
60 : 128 { 0x80 -128 } : BV:8
61 : 251658240 { 0xf000000 +1.0e159 } : BV:32
62 : eq(52, 61) : BOOL
63 : 252 { 0xfc -4 } : BV:8
64 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
65 : eq(52, 64) : BOOL
66 : 145 { 0x91 -111 } : BV:8
67 : 251658242 { 0xf000002 +1.23e159 } : BV:32
68 : eq(52, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 251658241 { 0xf000001 +1.11e159 } : BV:32
71 : eq(52, 70) : BOOL
72 : 168 { 0xa8 -88 } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(53, 54, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 55) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 54, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 50) : BOOL
98 : eq(96, 55) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 54, 109) : BV:8
111 : bvadd(61, 51) : BV:32
112 : eq(111, 50) : BOOL
113 : eq(111, 55) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 54, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 54, 140) : BV:8
142 : bvadd(36, 49, 126) : BV:32
143 : eq(142, 50) : BOOL
144 : eq(142, 55) : BOOL
145 : eq(142, 58) : BOOL
146 : eq(142, 61) : BOOL
147 : eq(142, 64) : BOOL
148 : eq(142, 67) : BOOL
149 : eq(142, 70) : BOOL
150 : ite(149, 72, 73) : BV:8
151 : ite(148, 69, 150) : BV:8
152 : ite(147, 66, 151) : BV:8
153 : ite(146, 63, 152) : BV:8
154 : ite(145, 60, 153) : BV:8
155 : ite(144, 57, 154) : BV:8
156 : ite(143, 54, 155) : BV:8
157 : bvadd(32, 49, 126) : BV:32
158 : eq(157, 50) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 58) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : ite(164, 72, 73) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 66, 166) : BV:8
168 : ite(161, 63, 167) : BV:8
169 : ite(160, 60, 168) : BV:8
170 : ite(159, 57, 169) : BV:8
171 : ite(158, 54, 170) : BV:8
172 : bvadd(49, 126) : BV:32
173 : eq(172, 50) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : ite(179, 72, 73) : BV:8
181 : ite(178, 69, 180) : BV:8
182 : ite(177, 66, 181) : BV:8
183 : ite(176, 63, 182) : BV:8
184 : ite(175, 60, 183) : BV:8
185 : ite(174, 57, 184) : BV:8
186 : ite(173, 54, 185) : BV:8
187 : bvconcat(141, 156, 171, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : ite(46, 187, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : lambda(1, 2, 190) : FUNCTION[BV:32,BV:32 -> BV:32]
192 : sym_const(191) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1663712313 ] -> true, [ 1663712314; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16288 : BV:32
2 : Lambda16289 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16284 : BV:32
2 : Lambda16285 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 251658243 { 0xf000003 +1.35e159 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
16 : eq(12, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
19 : eq(12, 18) : BOOL
20 : 128 { 0x80 -128 } : BV:8
21 : 251658240 { 0xf000000 +1.0e159 } : BV:32
22 : eq(12, 21) : BOOL
23 : 252 { 0xfc -4 } : BV:8
24 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
25 : eq(12, 24) : BOOL
26 : 145 { 0x91 -111 } : BV:8
27 : 251658242 { 0xf000002 +1.23e159 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 251658241 { 0xf000001 +1.11e159 } : BV:32
31 : eq(12, 30) : BOOL
32 : 168 { 0xa8 -88 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16295 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 251658243 { 0xf000003 +1.35e159 } : BV:32
10 : eq(8, 9) : BOOL
11 : 175 { 0xaf -81 } : BV:8
12 : eq(8, 7) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
15 : eq(8, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : 251658240 { 0xf000000 +1.0e159 } : BV:32
18 : eq(8, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
21 : eq(8, 20) : BOOL
22 : 145 { 0x91 -111 } : BV:8
23 : 251658242 { 0xf000002 +1.23e159 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 251658241 { 0xf000001 +1.11e159 } : BV:32
27 : eq(8, 26) : BOOL
28 : 168 { 0xa8 -88 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 19, 48) : BV:8
50 : ite(41, 16, 49) : BV:8
51 : ite(40, 13, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 14) : BOOL
58 : eq(54, 17) : BOOL
59 : eq(54, 20) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 19, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : ite(56, 13, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 7) : BOOL
72 : eq(69, 14) : BOOL
73 : eq(69, 17) : BOOL
74 : eq(69, 20) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 19, 79) : BV:8
81 : ite(72, 16, 80) : BV:8
82 : ite(71, 13, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16299 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 251658243 { 0xf000003 +1.35e159 } : BV:32
10 : eq(8, 9) : BOOL
11 : 175 { 0xaf -81 } : BV:8
12 : eq(8, 7) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
15 : eq(8, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : 251658240 { 0xf000000 +1.0e159 } : BV:32
18 : eq(8, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
21 : eq(8, 20) : BOOL
22 : 145 { 0x91 -111 } : BV:8
23 : 251658242 { 0xf000002 +1.23e159 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 251658241 { 0xf000001 +1.11e159 } : BV:32
27 : eq(8, 26) : BOOL
28 : 168 { 0xa8 -88 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 19, 48) : BV:8
50 : ite(41, 16, 49) : BV:8
51 : ite(40, 13, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 14) : BOOL
58 : eq(54, 17) : BOOL
59 : eq(54, 20) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 19, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : ite(56, 13, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 7) : BOOL
72 : eq(69, 14) : BOOL
73 : eq(69, 17) : BOOL
74 : eq(69, 20) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 19, 79) : BV:8
81 : ite(72, 16, 80) : BV:8
82 : ite(71, 13, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16303 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 251658243 { 0xf000003 +1.35e159 } : BV:32
10 : eq(8, 9) : BOOL
11 : 175 { 0xaf -81 } : BV:8
12 : eq(8, 7) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
15 : eq(8, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : 251658240 { 0xf000000 +1.0e159 } : BV:32
18 : eq(8, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
21 : eq(8, 20) : BOOL
22 : 145 { 0x91 -111 } : BV:8
23 : 251658242 { 0xf000002 +1.23e159 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 251658241 { 0xf000001 +1.11e159 } : BV:32
27 : eq(8, 26) : BOOL
28 : 168 { 0xa8 -88 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 19, 48) : BV:8
50 : ite(41, 16, 49) : BV:8
51 : ite(40, 13, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 14) : BOOL
58 : eq(54, 17) : BOOL
59 : eq(54, 20) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 19, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : ite(56, 13, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 7) : BOOL
72 : eq(69, 14) : BOOL
73 : eq(69, 17) : BOOL
74 : eq(69, 20) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 19, 79) : BV:8
81 : ite(72, 16, 80) : BV:8
82 : ite(71, 13, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_5_0
1 : 0 { 0x0 } : BV:6
=counter_example.random_seed
2922804879
=counter_example_end
=global nodece 62 num_edges_traversed 1
=global nodece 62 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 63
=global nodece 63 nodece z3.ce6464.num_edges_traversed3
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce6464 4355993fe16d669e2a1fc57ee8a2654
=input.spec-%var-x-1
1 : Lambda16350 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16353 : BV:32
18 : Lambda16351 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda16352 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 251658243 { 0xf000003 +1.35e159 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 175 { 0xaf -81 } : BV:8
82 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
83 : eq(79, 82) : BOOL
84 : 4 { 0x4 } : BV:8
85 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
86 : eq(79, 85) : BOOL
87 : 128 { 0x80 -128 } : BV:8
88 : 251658240 { 0xf000000 +1.0e159 } : BV:32
89 : eq(79, 88) : BOOL
90 : 252 { 0xfc -4 } : BV:8
91 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
92 : eq(79, 91) : BOOL
93 : 145 { 0x91 -111 } : BV:8
94 : 251658242 { 0xf000002 +1.23e159 } : BV:32
95 : eq(79, 94) : BOOL
96 : 255 { 0xff -1 } : BV:8
97 : 251658241 { 0xf000001 +1.11e159 } : BV:32
98 : eq(79, 97) : BOOL
99 : 168 { 0xa8 -88 } : BV:8
100 : 0 { 0x0 } : BV:8
101 : ite(98, 99, 100) : BV:8
102 : ite(95, 96, 101) : BV:8
103 : ite(92, 93, 102) : BV:8
104 : ite(89, 90, 103) : BV:8
105 : ite(86, 87, 104) : BV:8
106 : ite(83, 84, 105) : BV:8
107 : ite(80, 81, 106) : BV:8
108 : bvadd(94, 78) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 82) : BOOL
111 : eq(108, 85) : BOOL
112 : eq(108, 88) : BOOL
113 : eq(108, 91) : BOOL
114 : eq(108, 94) : BOOL
115 : eq(108, 97) : BOOL
116 : ite(115, 99, 100) : BV:8
117 : ite(114, 96, 116) : BV:8
118 : ite(113, 93, 117) : BV:8
119 : ite(112, 90, 118) : BV:8
120 : ite(111, 87, 119) : BV:8
121 : ite(110, 84, 120) : BV:8
122 : ite(109, 81, 121) : BV:8
123 : bvadd(97, 78) : BV:32
124 : eq(123, 77) : BOOL
125 : eq(123, 82) : BOOL
126 : eq(123, 85) : BOOL
127 : eq(123, 88) : BOOL
128 : eq(123, 91) : BOOL
129 : eq(123, 94) : BOOL
130 : eq(123, 97) : BOOL
131 : ite(130, 99, 100) : BV:8
132 : ite(129, 96, 131) : BV:8
133 : ite(128, 93, 132) : BV:8
134 : ite(127, 90, 133) : BV:8
135 : ite(126, 87, 134) : BV:8
136 : ite(125, 84, 135) : BV:8
137 : ite(124, 81, 136) : BV:8
138 : bvadd(88, 78) : BV:32
139 : eq(138, 77) : BOOL
140 : eq(138, 82) : BOOL
141 : eq(138, 85) : BOOL
142 : eq(138, 88) : BOOL
143 : eq(138, 91) : BOOL
144 : eq(138, 94) : BOOL
145 : eq(138, 97) : BOOL
146 : ite(145, 99, 100) : BV:8
147 : ite(144, 96, 146) : BV:8
148 : ite(143, 93, 147) : BV:8
149 : ite(142, 90, 148) : BV:8
150 : ite(141, 87, 149) : BV:8
151 : ite(140, 84, 150) : BV:8
152 : ite(139, 81, 151) : BV:8
153 : bvconcat(107, 122, 137, 152) : BV:32
154 : bvadd(74, 76, 153) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : ite(161, 99, 100) : BV:8
163 : ite(160, 96, 162) : BV:8
164 : ite(159, 93, 163) : BV:8
165 : ite(158, 90, 164) : BV:8
166 : ite(157, 87, 165) : BV:8
167 : ite(156, 84, 166) : BV:8
168 : ite(155, 81, 167) : BV:8
169 : bvadd(40, 76, 153) : BV:32
170 : eq(169, 77) : BOOL
171 : eq(169, 82) : BOOL
172 : eq(169, 85) : BOOL
173 : eq(169, 88) : BOOL
174 : eq(169, 91) : BOOL
175 : eq(169, 94) : BOOL
176 : eq(169, 97) : BOOL
177 : ite(176, 99, 100) : BV:8
178 : ite(175, 96, 177) : BV:8
179 : ite(174, 93, 178) : BV:8
180 : ite(173, 90, 179) : BV:8
181 : ite(172, 87, 180) : BV:8
182 : ite(171, 84, 181) : BV:8
183 : ite(170, 81, 182) : BV:8
184 : bvadd(36, 76, 153) : BV:32
185 : eq(184, 77) : BOOL
186 : eq(184, 82) : BOOL
187 : eq(184, 85) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : ite(191, 99, 100) : BV:8
193 : ite(190, 96, 192) : BV:8
194 : ite(189, 93, 193) : BV:8
195 : ite(188, 90, 194) : BV:8
196 : ite(187, 87, 195) : BV:8
197 : ite(186, 84, 196) : BV:8
198 : ite(185, 81, 197) : BV:8
199 : bvadd(76, 153) : BV:32
200 : eq(199, 77) : BOOL
201 : eq(199, 82) : BOOL
202 : eq(199, 85) : BOOL
203 : eq(199, 88) : BOOL
204 : eq(199, 91) : BOOL
205 : eq(199, 94) : BOOL
206 : eq(199, 97) : BOOL
207 : ite(206, 99, 100) : BV:8
208 : ite(205, 96, 207) : BV:8
209 : ite(204, 93, 208) : BV:8
210 : ite(203, 90, 209) : BV:8
211 : ite(202, 87, 210) : BV:8
212 : ite(201, 84, 211) : BV:8
213 : ite(200, 81, 212) : BV:8
214 : bvconcat(168, 183, 198, 213) : BV:32
215 : ite(54, 2, 214) : BV:32
216 : ite(73, 214, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16358 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16361 : BV:32
18 : Lambda16359 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda16360 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 251658243 { 0xf000003 +1.35e159 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 175 { 0xaf -81 } : BV:8
63 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
64 : eq(60, 63) : BOOL
65 : 4 { 0x4 } : BV:8
66 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
67 : eq(60, 66) : BOOL
68 : 128 { 0x80 -128 } : BV:8
69 : 251658240 { 0xf000000 +1.0e159 } : BV:32
70 : eq(60, 69) : BOOL
71 : 252 { 0xfc -4 } : BV:8
72 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
73 : eq(60, 72) : BOOL
74 : 145 { 0x91 -111 } : BV:8
75 : 251658242 { 0xf000002 +1.23e159 } : BV:32
76 : eq(60, 75) : BOOL
77 : 255 { 0xff -1 } : BV:8
78 : 251658241 { 0xf000001 +1.11e159 } : BV:32
79 : eq(60, 78) : BOOL
80 : 168 { 0xa8 -88 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(61, 62, 87) : BV:8
89 : bvadd(75, 59) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 63) : BOOL
92 : eq(89, 66) : BOOL
93 : eq(89, 69) : BOOL
94 : eq(89, 72) : BOOL
95 : eq(89, 75) : BOOL
96 : eq(89, 78) : BOOL
97 : ite(96, 80, 81) : BV:8
98 : ite(95, 77, 97) : BV:8
99 : ite(94, 74, 98) : BV:8
100 : ite(93, 71, 99) : BV:8
101 : ite(92, 68, 100) : BV:8
102 : ite(91, 65, 101) : BV:8
103 : ite(90, 62, 102) : BV:8
104 : bvadd(78, 59) : BV:32
105 : eq(104, 58) : BOOL
106 : eq(104, 63) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 69) : BOOL
109 : eq(104, 72) : BOOL
110 : eq(104, 75) : BOOL
111 : eq(104, 78) : BOOL
112 : ite(111, 80, 81) : BV:8
113 : ite(110, 77, 112) : BV:8
114 : ite(109, 74, 113) : BV:8
115 : ite(108, 71, 114) : BV:8
116 : ite(107, 68, 115) : BV:8
117 : ite(106, 65, 116) : BV:8
118 : ite(105, 62, 117) : BV:8
119 : bvadd(69, 59) : BV:32
120 : eq(119, 58) : BOOL
121 : eq(119, 63) : BOOL
122 : eq(119, 66) : BOOL
123 : eq(119, 69) : BOOL
124 : eq(119, 72) : BOOL
125 : eq(119, 75) : BOOL
126 : eq(119, 78) : BOOL
127 : ite(126, 80, 81) : BV:8
128 : ite(125, 77, 127) : BV:8
129 : ite(124, 74, 128) : BV:8
130 : ite(123, 71, 129) : BV:8
131 : ite(122, 68, 130) : BV:8
132 : ite(121, 65, 131) : BV:8
133 : ite(120, 62, 132) : BV:8
134 : bvconcat(88, 103, 118, 133) : BV:32
135 : bvadd(55, 57, 134) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : ite(142, 80, 81) : BV:8
144 : ite(141, 77, 143) : BV:8
145 : ite(140, 74, 144) : BV:8
146 : ite(139, 71, 145) : BV:8
147 : ite(138, 68, 146) : BV:8
148 : ite(137, 65, 147) : BV:8
149 : ite(136, 62, 148) : BV:8
150 : bvadd(40, 57, 134) : BV:32
151 : eq(150, 58) : BOOL
152 : eq(150, 63) : BOOL
153 : eq(150, 66) : BOOL
154 : eq(150, 69) : BOOL
155 : eq(150, 72) : BOOL
156 : eq(150, 75) : BOOL
157 : eq(150, 78) : BOOL
158 : ite(157, 80, 81) : BV:8
159 : ite(156, 77, 158) : BV:8
160 : ite(155, 74, 159) : BV:8
161 : ite(154, 71, 160) : BV:8
162 : ite(153, 68, 161) : BV:8
163 : ite(152, 65, 162) : BV:8
164 : ite(151, 62, 163) : BV:8
165 : bvadd(36, 57, 134) : BV:32
166 : eq(165, 58) : BOOL
167 : eq(165, 63) : BOOL
168 : eq(165, 66) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : ite(172, 80, 81) : BV:8
174 : ite(171, 77, 173) : BV:8
175 : ite(170, 74, 174) : BV:8
176 : ite(169, 71, 175) : BV:8
177 : ite(168, 68, 176) : BV:8
178 : ite(167, 65, 177) : BV:8
179 : ite(166, 62, 178) : BV:8
180 : bvadd(57, 134) : BV:32
181 : eq(180, 58) : BOOL
182 : eq(180, 63) : BOOL
183 : eq(180, 66) : BOOL
184 : eq(180, 69) : BOOL
185 : eq(180, 72) : BOOL
186 : eq(180, 75) : BOOL
187 : eq(180, 78) : BOOL
188 : ite(187, 80, 81) : BV:8
189 : ite(186, 77, 188) : BV:8
190 : ite(185, 74, 189) : BV:8
191 : ite(184, 71, 190) : BV:8
192 : ite(183, 68, 191) : BV:8
193 : ite(182, 65, 192) : BV:8
194 : ite(181, 62, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(54, 2, 195) : BV:32
197 : lambda(51, 196) : FUNCTION[BV:32 -> BV:32]
198 : map(50, 197) : MAP[BV:32 -> BV:32]
199 : lambda(17, 198) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
200 : map(16, 199) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
201 : sym_const(200) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16423 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda16424 : BV:32
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 24) : BV:32
28 : 2952767740 { 0xafffa8fc -1342199556 -1.99734449e224 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 251658243 { 0xf000003 +1.35e159 } : BV:32
31 : eq(29, 30) : BOOL
32 : 175 { 0xaf -81 } : BV:8
33 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
34 : eq(29, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
37 : eq(29, 36) : BOOL
38 : 128 { 0x80 -128 } : BV:8
39 : 251658240 { 0xf000000 +1.0e159 } : BV:32
40 : eq(29, 39) : BOOL
41 : 252 { 0xfc -4 } : BV:8
42 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
43 : eq(29, 42) : BOOL
44 : 145 { 0x91 -111 } : BV:8
45 : 251658242 { 0xf000002 +1.23e159 } : BV:32
46 : eq(29, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 251658241 { 0xf000001 +1.11e159 } : BV:32
49 : eq(29, 48) : BOOL
50 : 168 { 0xa8 -88 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : bvadd(11, 27, 28) : BV:32
60 : eq(59, 30) : BOOL
61 : eq(59, 33) : BOOL
62 : eq(59, 36) : BOOL
63 : eq(59, 39) : BOOL
64 : eq(59, 42) : BOOL
65 : eq(59, 45) : BOOL
66 : eq(59, 48) : BOOL
67 : ite(66, 50, 51) : BV:8
68 : ite(65, 47, 67) : BV:8
69 : ite(64, 44, 68) : BV:8
70 : ite(63, 41, 69) : BV:8
71 : ite(62, 38, 70) : BV:8
72 : ite(61, 35, 71) : BV:8
73 : ite(60, 32, 72) : BV:8
74 : bvadd(7, 27, 28) : BV:32
75 : eq(74, 30) : BOOL
76 : eq(74, 33) : BOOL
77 : eq(74, 36) : BOOL
78 : eq(74, 39) : BOOL
79 : eq(74, 42) : BOOL
80 : eq(74, 45) : BOOL
81 : eq(74, 48) : BOOL
82 : ite(81, 50, 51) : BV:8
83 : ite(80, 47, 82) : BV:8
84 : ite(79, 44, 83) : BV:8
85 : ite(78, 41, 84) : BV:8
86 : ite(77, 38, 85) : BV:8
87 : ite(76, 35, 86) : BV:8
88 : ite(75, 32, 87) : BV:8
89 : bvadd(27, 28) : BV:32
90 : eq(89, 30) : BOOL
91 : eq(89, 33) : BOOL
92 : eq(89, 36) : BOOL
93 : eq(89, 39) : BOOL
94 : eq(89, 42) : BOOL
95 : eq(89, 45) : BOOL
96 : eq(89, 48) : BOOL
97 : ite(96, 50, 51) : BV:8
98 : ite(95, 47, 97) : BV:8
99 : ite(94, 44, 98) : BV:8
100 : ite(93, 41, 99) : BV:8
101 : ite(92, 38, 100) : BV:8
102 : ite(91, 35, 101) : BV:8
103 : ite(90, 32, 102) : BV:8
104 : bvconcat(58, 73, 88, 103) : BV:32
105 : lambda(24, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(23, 105) : MAP[BV:32 -> BV:32]
107 : sym_const(106) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 251658240 { 0xf000000 +1.0e159 } : BV:32
=input.dst.llvm-%n
1 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 251658237 ] -> 0, [ 251658238; 251658238 ] -> 128, [ 251658239; 251658239 ] -> 145, [ 251658240; 251658240 ] -> 252, [ 251658241; 251658241 ] -> 168, [ 251658242; 251658242 ] -> 255, [ 251658243; 251658243 ] -> 175, [ 251658244; 2441084927 ] -> 0, [ 2441084928; 2441084928 ] -> 4, [ 2441084929; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 892168039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 892168040; 892168043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 892168044; 2583664551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2583664552; 2583664555 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2583664556; 4060393139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4060393140; 4060393143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4060393144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 892168040 { 0x352d6768 +1.35471820e235 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4060393140 { 0xf204aeb4 -234574156 -1.3658151e101 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2583664552 { 0x99ff97a8 -1711302744 -1.99681568e180 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1219502996 { 0x48b02394 +1.37608575e18 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda16419 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda16420 : BV:32
26 : 3 { 0x3 +1.35e129 } : BV:32
27 : 4 { 0x4 +1.47e129 } : BV:32
28 : bvmul(27, 25) : BV:32
29 : 2952767740 { 0xafffa8fc -1342199556 -1.99734449e224 } : BV:32
30 : bvadd(26, 28, 29) : BV:32
31 : 251658243 { 0xf000003 +1.35e159 } : BV:32
32 : eq(30, 31) : BOOL
33 : 175 { 0xaf -81 } : BV:8
34 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
35 : eq(30, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
38 : eq(30, 37) : BOOL
39 : 128 { 0x80 -128 } : BV:8
40 : 251658240 { 0xf000000 +1.0e159 } : BV:32
41 : eq(30, 40) : BOOL
42 : 252 { 0xfc -4 } : BV:8
43 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
44 : eq(30, 43) : BOOL
45 : 145 { 0x91 -111 } : BV:8
46 : 251658242 { 0xf000002 +1.23e159 } : BV:32
47 : eq(30, 46) : BOOL
48 : 255 { 0xff -1 } : BV:8
49 : 251658241 { 0xf000001 +1.11e159 } : BV:32
50 : eq(30, 49) : BOOL
51 : 168 { 0xa8 -88 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : bvadd(12, 28, 29) : BV:32
61 : eq(60, 31) : BOOL
62 : eq(60, 34) : BOOL
63 : eq(60, 37) : BOOL
64 : eq(60, 40) : BOOL
65 : eq(60, 43) : BOOL
66 : eq(60, 46) : BOOL
67 : eq(60, 49) : BOOL
68 : ite(67, 51, 52) : BV:8
69 : ite(66, 48, 68) : BV:8
70 : ite(65, 45, 69) : BV:8
71 : ite(64, 42, 70) : BV:8
72 : ite(63, 39, 71) : BV:8
73 : ite(62, 36, 72) : BV:8
74 : ite(61, 33, 73) : BV:8
75 : bvadd(1, 28, 29) : BV:32
76 : eq(75, 31) : BOOL
77 : eq(75, 34) : BOOL
78 : eq(75, 37) : BOOL
79 : eq(75, 40) : BOOL
80 : eq(75, 43) : BOOL
81 : eq(75, 46) : BOOL
82 : eq(75, 49) : BOOL
83 : ite(82, 51, 52) : BV:8
84 : ite(81, 48, 83) : BV:8
85 : ite(80, 45, 84) : BV:8
86 : ite(79, 42, 85) : BV:8
87 : ite(78, 39, 86) : BV:8
88 : ite(77, 36, 87) : BV:8
89 : ite(76, 33, 88) : BV:8
90 : bvadd(28, 29) : BV:32
91 : eq(90, 31) : BOOL
92 : eq(90, 34) : BOOL
93 : eq(90, 37) : BOOL
94 : eq(90, 40) : BOOL
95 : eq(90, 43) : BOOL
96 : eq(90, 46) : BOOL
97 : eq(90, 49) : BOOL
98 : ite(97, 51, 52) : BV:8
99 : ite(96, 48, 98) : BV:8
100 : ite(95, 45, 99) : BV:8
101 : ite(94, 42, 100) : BV:8
102 : ite(93, 39, 101) : BV:8
103 : ite(92, 36, 102) : BV:8
104 : ite(91, 33, 103) : BV:8
105 : bvconcat(59, 74, 89, 104) : BV:32
106 : lambda(25, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(24, 106) : MAP[BV:32 -> BV:32]
108 : sum(1, 2, 107) : SUM[UNIT,MAP[BV:32 -> BV:32]]
109 : sym_const(108) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16427 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda16428 : BV:32
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 24) : BV:32
28 : 2952767740 { 0xafffa8fc -1342199556 -1.99734449e224 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 251658243 { 0xf000003 +1.35e159 } : BV:32
31 : eq(29, 30) : BOOL
32 : 175 { 0xaf -81 } : BV:8
33 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
34 : eq(29, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
37 : eq(29, 36) : BOOL
38 : 128 { 0x80 -128 } : BV:8
39 : 251658240 { 0xf000000 +1.0e159 } : BV:32
40 : eq(29, 39) : BOOL
41 : 252 { 0xfc -4 } : BV:8
42 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
43 : eq(29, 42) : BOOL
44 : 145 { 0x91 -111 } : BV:8
45 : 251658242 { 0xf000002 +1.23e159 } : BV:32
46 : eq(29, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 251658241 { 0xf000001 +1.11e159 } : BV:32
49 : eq(29, 48) : BOOL
50 : 168 { 0xa8 -88 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : bvadd(11, 27, 28) : BV:32
60 : eq(59, 30) : BOOL
61 : eq(59, 33) : BOOL
62 : eq(59, 36) : BOOL
63 : eq(59, 39) : BOOL
64 : eq(59, 42) : BOOL
65 : eq(59, 45) : BOOL
66 : eq(59, 48) : BOOL
67 : ite(66, 50, 51) : BV:8
68 : ite(65, 47, 67) : BV:8
69 : ite(64, 44, 68) : BV:8
70 : ite(63, 41, 69) : BV:8
71 : ite(62, 38, 70) : BV:8
72 : ite(61, 35, 71) : BV:8
73 : ite(60, 32, 72) : BV:8
74 : bvadd(7, 27, 28) : BV:32
75 : eq(74, 30) : BOOL
76 : eq(74, 33) : BOOL
77 : eq(74, 36) : BOOL
78 : eq(74, 39) : BOOL
79 : eq(74, 42) : BOOL
80 : eq(74, 45) : BOOL
81 : eq(74, 48) : BOOL
82 : ite(81, 50, 51) : BV:8
83 : ite(80, 47, 82) : BV:8
84 : ite(79, 44, 83) : BV:8
85 : ite(78, 41, 84) : BV:8
86 : ite(77, 38, 85) : BV:8
87 : ite(76, 35, 86) : BV:8
88 : ite(75, 32, 87) : BV:8
89 : bvadd(27, 28) : BV:32
90 : eq(89, 30) : BOOL
91 : eq(89, 33) : BOOL
92 : eq(89, 36) : BOOL
93 : eq(89, 39) : BOOL
94 : eq(89, 42) : BOOL
95 : eq(89, 45) : BOOL
96 : eq(89, 48) : BOOL
97 : ite(96, 50, 51) : BV:8
98 : ite(95, 47, 97) : BV:8
99 : ite(94, 44, 98) : BV:8
100 : ite(93, 41, 99) : BV:8
101 : ite(92, 38, 100) : BV:8
102 : ite(91, 35, 101) : BV:8
103 : ite(90, 32, 102) : BV:8
104 : bvconcat(58, 73, 88, 103) : BV:32
105 : lambda(24, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(23, 105) : MAP[BV:32 -> BV:32]
107 : sym_const(106) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1855982186 { 0x6ea00a6a +1.25031781e94 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4060393140 { 0xf204aeb4 -234574156 -1.3658151e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4060393143 { 0xf204aeb7 -234574153 -1.3658187e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2583664552 { 0x99ff97a8 -1711302744 -1.99681568e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2583664555 { 0x99ff97ab -1711302741 -1.99681603e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 892168040 { 0x352d6768 +1.35471820e235 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 892168043 { 0x352d676b +1.35471856e235 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1663712313 ] -> true, [ 1663712314; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16277 : BV:32
2 : Lambda16278 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16282 : BV:32
2 : Lambda16283 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 251658243 { 0xf000003 +1.35e159 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 175 { 0xaf -81 } : BV:8
55 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
56 : eq(52, 55) : BOOL
57 : 4 { 0x4 } : BV:8
58 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
59 : eq(52, 58) : BOOL
60 : 128 { 0x80 -128 } : BV:8
61 : 251658240 { 0xf000000 +1.0e159 } : BV:32
62 : eq(52, 61) : BOOL
63 : 252 { 0xfc -4 } : BV:8
64 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
65 : eq(52, 64) : BOOL
66 : 145 { 0x91 -111 } : BV:8
67 : 251658242 { 0xf000002 +1.23e159 } : BV:32
68 : eq(52, 67) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 251658241 { 0xf000001 +1.11e159 } : BV:32
71 : eq(52, 70) : BOOL
72 : 168 { 0xa8 -88 } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(65, 66, 75) : BV:8
77 : ite(62, 63, 76) : BV:8
78 : ite(59, 60, 77) : BV:8
79 : ite(56, 57, 78) : BV:8
80 : ite(53, 54, 79) : BV:8
81 : bvadd(67, 51) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 55) : BOOL
84 : eq(81, 58) : BOOL
85 : eq(81, 61) : BOOL
86 : eq(81, 64) : BOOL
87 : eq(81, 67) : BOOL
88 : eq(81, 70) : BOOL
89 : ite(88, 72, 73) : BV:8
90 : ite(87, 69, 89) : BV:8
91 : ite(86, 66, 90) : BV:8
92 : ite(85, 63, 91) : BV:8
93 : ite(84, 60, 92) : BV:8
94 : ite(83, 57, 93) : BV:8
95 : ite(82, 54, 94) : BV:8
96 : bvadd(70, 51) : BV:32
97 : eq(96, 50) : BOOL
98 : eq(96, 55) : BOOL
99 : eq(96, 58) : BOOL
100 : eq(96, 61) : BOOL
101 : eq(96, 64) : BOOL
102 : eq(96, 67) : BOOL
103 : eq(96, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 66, 105) : BV:8
107 : ite(100, 63, 106) : BV:8
108 : ite(99, 60, 107) : BV:8
109 : ite(98, 57, 108) : BV:8
110 : ite(97, 54, 109) : BV:8
111 : bvadd(61, 51) : BV:32
112 : eq(111, 50) : BOOL
113 : eq(111, 55) : BOOL
114 : eq(111, 58) : BOOL
115 : eq(111, 61) : BOOL
116 : eq(111, 64) : BOOL
117 : eq(111, 67) : BOOL
118 : eq(111, 70) : BOOL
119 : ite(118, 72, 73) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 60, 122) : BV:8
124 : ite(113, 57, 123) : BV:8
125 : ite(112, 54, 124) : BV:8
126 : bvconcat(80, 95, 110, 125) : BV:32
127 : bvadd(47, 49, 126) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : ite(134, 72, 73) : BV:8
136 : ite(133, 69, 135) : BV:8
137 : ite(132, 66, 136) : BV:8
138 : ite(131, 63, 137) : BV:8
139 : ite(130, 60, 138) : BV:8
140 : ite(129, 57, 139) : BV:8
141 : ite(128, 54, 140) : BV:8
142 : bvadd(36, 49, 126) : BV:32
143 : eq(142, 50) : BOOL
144 : eq(142, 55) : BOOL
145 : eq(142, 58) : BOOL
146 : eq(142, 61) : BOOL
147 : eq(142, 64) : BOOL
148 : eq(142, 67) : BOOL
149 : eq(142, 70) : BOOL
150 : ite(149, 72, 73) : BV:8
151 : ite(148, 69, 150) : BV:8
152 : ite(147, 66, 151) : BV:8
153 : ite(146, 63, 152) : BV:8
154 : ite(145, 60, 153) : BV:8
155 : ite(144, 57, 154) : BV:8
156 : ite(143, 54, 155) : BV:8
157 : bvadd(32, 49, 126) : BV:32
158 : eq(157, 50) : BOOL
159 : eq(157, 55) : BOOL
160 : eq(157, 58) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : ite(164, 72, 73) : BV:8
166 : ite(163, 69, 165) : BV:8
167 : ite(162, 66, 166) : BV:8
168 : ite(161, 63, 167) : BV:8
169 : ite(160, 60, 168) : BV:8
170 : ite(159, 57, 169) : BV:8
171 : ite(158, 54, 170) : BV:8
172 : bvadd(49, 126) : BV:32
173 : eq(172, 50) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 58) : BOOL
176 : eq(172, 61) : BOOL
177 : eq(172, 64) : BOOL
178 : eq(172, 67) : BOOL
179 : eq(172, 70) : BOOL
180 : ite(179, 72, 73) : BV:8
181 : ite(178, 69, 180) : BV:8
182 : ite(177, 66, 181) : BV:8
183 : ite(176, 63, 182) : BV:8
184 : ite(175, 60, 183) : BV:8
185 : ite(174, 57, 184) : BV:8
186 : ite(173, 54, 185) : BV:8
187 : bvconcat(141, 156, 171, 186) : BV:32
188 : ite(6, 3, 187) : BV:32
189 : ite(46, 187, 188) : BV:32
190 : ite(6, 3, 189) : BV:32
191 : lambda(1, 2, 190) : FUNCTION[BV:32,BV:32 -> BV:32]
192 : sym_const(191) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1663712313 ] -> true, [ 1663712314; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16288 : BV:32
2 : Lambda16289 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1663712313 { 0x632a3c39 +1.32996284e71 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1663712315 { 0x632a3c3b +1.32996308e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1663712314 { 0x632a3c3a +1.32996296e71 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16284 : BV:32
2 : Lambda16285 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 251658243 { 0xf000003 +1.35e159 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 175 { 0xaf -81 } : BV:8
15 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
16 : eq(12, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
19 : eq(12, 18) : BOOL
20 : 128 { 0x80 -128 } : BV:8
21 : 251658240 { 0xf000000 +1.0e159 } : BV:32
22 : eq(12, 21) : BOOL
23 : 252 { 0xfc -4 } : BV:8
24 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
25 : eq(12, 24) : BOOL
26 : 145 { 0x91 -111 } : BV:8
27 : 251658242 { 0xf000002 +1.23e159 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 251658241 { 0xf000001 +1.11e159 } : BV:32
31 : eq(12, 30) : BOOL
32 : 168 { 0xa8 -88 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 10) : BOOL
43 : eq(41, 15) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 14, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 15) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 14, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 14, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 14, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 10) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 14, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 10) : BOOL
121 : eq(119, 15) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 14, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 10) : BOOL
136 : eq(134, 15) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 14, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16295 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 251658243 { 0xf000003 +1.35e159 } : BV:32
10 : eq(8, 9) : BOOL
11 : 175 { 0xaf -81 } : BV:8
12 : eq(8, 7) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
15 : eq(8, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : 251658240 { 0xf000000 +1.0e159 } : BV:32
18 : eq(8, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
21 : eq(8, 20) : BOOL
22 : 145 { 0x91 -111 } : BV:8
23 : 251658242 { 0xf000002 +1.23e159 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 251658241 { 0xf000001 +1.11e159 } : BV:32
27 : eq(8, 26) : BOOL
28 : 168 { 0xa8 -88 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 19, 48) : BV:8
50 : ite(41, 16, 49) : BV:8
51 : ite(40, 13, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 14) : BOOL
58 : eq(54, 17) : BOOL
59 : eq(54, 20) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 19, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : ite(56, 13, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 7) : BOOL
72 : eq(69, 14) : BOOL
73 : eq(69, 17) : BOOL
74 : eq(69, 20) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 19, 79) : BV:8
81 : ite(72, 16, 80) : BV:8
82 : ite(71, 13, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16299 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 251658243 { 0xf000003 +1.35e159 } : BV:32
10 : eq(8, 9) : BOOL
11 : 175 { 0xaf -81 } : BV:8
12 : eq(8, 7) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
15 : eq(8, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : 251658240 { 0xf000000 +1.0e159 } : BV:32
18 : eq(8, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
21 : eq(8, 20) : BOOL
22 : 145 { 0x91 -111 } : BV:8
23 : 251658242 { 0xf000002 +1.23e159 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 251658241 { 0xf000001 +1.11e159 } : BV:32
27 : eq(8, 26) : BOOL
28 : 168 { 0xa8 -88 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 19, 48) : BV:8
50 : ite(41, 16, 49) : BV:8
51 : ite(40, 13, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 14) : BOOL
58 : eq(54, 17) : BOOL
59 : eq(54, 20) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 19, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : ite(56, 13, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 7) : BOOL
72 : eq(69, 14) : BOOL
73 : eq(69, 17) : BOOL
74 : eq(69, 20) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 19, 79) : BV:8
81 : ite(72, 16, 80) : BV:8
82 : ite(71, 13, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16303 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2441084928 { 0x91800000 -1853882368 -1.0e164 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 251658243 { 0xf000003 +1.35e159 } : BV:32
10 : eq(8, 9) : BOOL
11 : 175 { 0xaf -81 } : BV:8
12 : eq(8, 7) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 251658238 { 0xefffffe +1.99999976e158 } : BV:32
15 : eq(8, 14) : BOOL
16 : 128 { 0x80 -128 } : BV:8
17 : 251658240 { 0xf000000 +1.0e159 } : BV:32
18 : eq(8, 17) : BOOL
19 : 252 { 0xfc -4 } : BV:8
20 : 251658239 { 0xeffffff +1.99999988e158 } : BV:32
21 : eq(8, 20) : BOOL
22 : 145 { 0x91 -111 } : BV:8
23 : 251658242 { 0xf000002 +1.23e159 } : BV:32
24 : eq(8, 23) : BOOL
25 : 255 { 0xff -1 } : BV:8
26 : 251658241 { 0xf000001 +1.11e159 } : BV:32
27 : eq(8, 26) : BOOL
28 : 168 { 0xa8 -88 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(24, 25, 30) : BV:8
32 : ite(21, 22, 31) : BV:8
33 : ite(18, 19, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(10, 11, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 20) : BOOL
44 : eq(38, 23) : BOOL
45 : eq(38, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : ite(44, 25, 46) : BV:8
48 : ite(43, 22, 47) : BV:8
49 : ite(42, 19, 48) : BV:8
50 : ite(41, 16, 49) : BV:8
51 : ite(40, 13, 50) : BV:8
52 : ite(39, 11, 51) : BV:8
53 : 1 { 0x1 +1.11e129 } : BV:32
54 : bvadd(53, 6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 14) : BOOL
58 : eq(54, 17) : BOOL
59 : eq(54, 20) : BOOL
60 : eq(54, 23) : BOOL
61 : eq(54, 26) : BOOL
62 : ite(61, 28, 29) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 22, 63) : BV:8
65 : ite(58, 19, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : ite(56, 13, 66) : BV:8
68 : ite(55, 11, 67) : BV:8
69 : bvadd(6, 7) : BV:32
70 : eq(69, 9) : BOOL
71 : eq(69, 7) : BOOL
72 : eq(69, 14) : BOOL
73 : eq(69, 17) : BOOL
74 : eq(69, 20) : BOOL
75 : eq(69, 23) : BOOL
76 : eq(69, 26) : BOOL
77 : ite(76, 28, 29) : BV:8
78 : ite(75, 25, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 19, 79) : BV:8
81 : ite(72, 16, 80) : BV:8
82 : ite(71, 13, 81) : BV:8
83 : ite(70, 11, 82) : BV:8
84 : bvconcat(36, 52, 68, 83) : BV:32
85 : ite(3, 4, 84) : BV:32
86 : lambda(1, 85) : FUNCTION[BV:32 -> BV:32]
87 : sym_const(86) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_5_0
1 : 0 { 0x0 } : BV:6
=counter_example.random_seed
232440183
=counter_example_end
=global nodece 63 num_edges_traversed 3
=global nodece 63 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce6525.num_edges_traversed1
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce6525 4b9dea51ff4378493b8c6e1e695165b
=input.spec-%var-x-1
1 : Lambda16547 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16550 : BV:32
18 : Lambda16548 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16549 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 215 { 0xd7 -41 } : BV:8
82 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
83 : eq(79, 82) : BOOL
84 : 172 { 0xac -84 } : BV:8
85 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
89 : eq(79, 88) : BOOL
90 : 83 { 0x53 } : BV:8
91 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
92 : eq(79, 91) : BOOL
93 : 212 { 0xd4 -44 } : BV:8
94 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
95 : eq(79, 94) : BOOL
96 : 153 { 0x99 -103 } : BV:8
97 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
98 : eq(79, 97) : BOOL
99 : 125 { 0x7d } : BV:8
100 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
101 : eq(79, 100) : BOOL
102 : 85 { 0x55 } : BV:8
103 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
104 : eq(79, 103) : BOOL
105 : 180 { 0xb4 -76 } : BV:8
106 : 0 { 0x0 } : BV:8
107 : ite(104, 105, 106) : BV:8
108 : ite(101, 102, 107) : BV:8
109 : ite(98, 99, 108) : BV:8
110 : ite(95, 96, 109) : BV:8
111 : ite(92, 93, 110) : BV:8
112 : ite(89, 90, 111) : BV:8
113 : ite(86, 87, 112) : BV:8
114 : ite(83, 84, 113) : BV:8
115 : ite(80, 81, 114) : BV:8
116 : bvadd(100, 78) : BV:32
117 : eq(116, 77) : BOOL
118 : eq(116, 82) : BOOL
119 : eq(116, 85) : BOOL
120 : eq(116, 88) : BOOL
121 : eq(116, 91) : BOOL
122 : eq(116, 94) : BOOL
123 : eq(116, 97) : BOOL
124 : eq(116, 100) : BOOL
125 : eq(116, 103) : BOOL
126 : ite(125, 105, 106) : BV:8
127 : ite(124, 102, 126) : BV:8
128 : ite(123, 99, 127) : BV:8
129 : ite(122, 96, 128) : BV:8
130 : ite(121, 93, 129) : BV:8
131 : ite(120, 90, 130) : BV:8
132 : ite(119, 87, 131) : BV:8
133 : ite(118, 84, 132) : BV:8
134 : ite(117, 81, 133) : BV:8
135 : bvadd(103, 78) : BV:32
136 : eq(135, 77) : BOOL
137 : eq(135, 82) : BOOL
138 : eq(135, 85) : BOOL
139 : eq(135, 88) : BOOL
140 : eq(135, 91) : BOOL
141 : eq(135, 94) : BOOL
142 : eq(135, 97) : BOOL
143 : eq(135, 100) : BOOL
144 : eq(135, 103) : BOOL
145 : ite(144, 105, 106) : BV:8
146 : ite(143, 102, 145) : BV:8
147 : ite(142, 99, 146) : BV:8
148 : ite(141, 96, 147) : BV:8
149 : ite(140, 93, 148) : BV:8
150 : ite(139, 90, 149) : BV:8
151 : ite(138, 87, 150) : BV:8
152 : ite(137, 84, 151) : BV:8
153 : ite(136, 81, 152) : BV:8
154 : bvadd(91, 78) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : eq(154, 100) : BOOL
163 : eq(154, 103) : BOOL
164 : ite(163, 105, 106) : BV:8
165 : ite(162, 102, 164) : BV:8
166 : ite(161, 99, 165) : BV:8
167 : ite(160, 96, 166) : BV:8
168 : ite(159, 93, 167) : BV:8
169 : ite(158, 90, 168) : BV:8
170 : ite(157, 87, 169) : BV:8
171 : ite(156, 84, 170) : BV:8
172 : ite(155, 81, 171) : BV:8
173 : bvconcat(115, 134, 153, 172) : BV:32
174 : bvadd(37, 76, 173) : BV:32
175 : eq(174, 77) : BOOL
176 : eq(174, 82) : BOOL
177 : eq(174, 85) : BOOL
178 : eq(174, 88) : BOOL
179 : eq(174, 91) : BOOL
180 : eq(174, 94) : BOOL
181 : eq(174, 97) : BOOL
182 : eq(174, 100) : BOOL
183 : eq(174, 103) : BOOL
184 : ite(183, 105, 106) : BV:8
185 : ite(182, 102, 184) : BV:8
186 : ite(181, 99, 185) : BV:8
187 : ite(180, 96, 186) : BV:8
188 : ite(179, 93, 187) : BV:8
189 : ite(178, 90, 188) : BV:8
190 : ite(177, 87, 189) : BV:8
191 : ite(176, 84, 190) : BV:8
192 : ite(175, 81, 191) : BV:8
193 : bvadd(41, 76, 173) : BV:32
194 : eq(193, 77) : BOOL
195 : eq(193, 82) : BOOL
196 : eq(193, 85) : BOOL
197 : eq(193, 88) : BOOL
198 : eq(193, 91) : BOOL
199 : eq(193, 94) : BOOL
200 : eq(193, 97) : BOOL
201 : eq(193, 100) : BOOL
202 : eq(193, 103) : BOOL
203 : ite(202, 105, 106) : BV:8
204 : ite(201, 102, 203) : BV:8
205 : ite(200, 99, 204) : BV:8
206 : ite(199, 96, 205) : BV:8
207 : ite(198, 93, 206) : BV:8
208 : ite(197, 90, 207) : BV:8
209 : ite(196, 87, 208) : BV:8
210 : ite(195, 84, 209) : BV:8
211 : ite(194, 81, 210) : BV:8
212 : bvadd(34, 76, 173) : BV:32
213 : eq(212, 77) : BOOL
214 : eq(212, 82) : BOOL
215 : eq(212, 85) : BOOL
216 : eq(212, 88) : BOOL
217 : eq(212, 91) : BOOL
218 : eq(212, 94) : BOOL
219 : eq(212, 97) : BOOL
220 : eq(212, 100) : BOOL
221 : eq(212, 103) : BOOL
222 : ite(221, 105, 106) : BV:8
223 : ite(220, 102, 222) : BV:8
224 : ite(219, 99, 223) : BV:8
225 : ite(218, 96, 224) : BV:8
226 : ite(217, 93, 225) : BV:8
227 : ite(216, 90, 226) : BV:8
228 : ite(215, 87, 227) : BV:8
229 : ite(214, 84, 228) : BV:8
230 : ite(213, 81, 229) : BV:8
231 : bvadd(76, 173) : BV:32
232 : eq(231, 77) : BOOL
233 : eq(231, 82) : BOOL
234 : eq(231, 85) : BOOL
235 : eq(231, 88) : BOOL
236 : eq(231, 91) : BOOL
237 : eq(231, 94) : BOOL
238 : eq(231, 97) : BOOL
239 : eq(231, 100) : BOOL
240 : eq(231, 103) : BOOL
241 : ite(240, 105, 106) : BV:8
242 : ite(239, 102, 241) : BV:8
243 : ite(238, 99, 242) : BV:8
244 : ite(237, 96, 243) : BV:8
245 : ite(236, 93, 244) : BV:8
246 : ite(235, 90, 245) : BV:8
247 : ite(234, 87, 246) : BV:8
248 : ite(233, 84, 247) : BV:8
249 : ite(232, 81, 248) : BV:8
250 : bvconcat(192, 211, 230, 249) : BV:32
251 : ite(55, 2, 250) : BV:32
252 : ite(74, 250, 251) : BV:32
253 : ite(55, 2, 252) : BV:32
254 : lambda(52, 253) : FUNCTION[BV:32 -> BV:32]
255 : map(51, 254) : MAP[BV:32 -> BV:32]
256 : lambda(17, 255) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
257 : map(16, 256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
258 : sym_const(257) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16555 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16558 : BV:32
18 : Lambda16556 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16557 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 215 { 0xd7 -41 } : BV:8
63 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
64 : eq(60, 63) : BOOL
65 : 172 { 0xac -84 } : BV:8
66 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
70 : eq(60, 69) : BOOL
71 : 83 { 0x53 } : BV:8
72 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
73 : eq(60, 72) : BOOL
74 : 212 { 0xd4 -44 } : BV:8
75 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
76 : eq(60, 75) : BOOL
77 : 153 { 0x99 -103 } : BV:8
78 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
79 : eq(60, 78) : BOOL
80 : 125 { 0x7d } : BV:8
81 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
82 : eq(60, 81) : BOOL
83 : 85 { 0x55 } : BV:8
84 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
85 : eq(60, 84) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(76, 77, 90) : BV:8
92 : ite(73, 74, 91) : BV:8
93 : ite(70, 71, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : ite(64, 65, 94) : BV:8
96 : ite(61, 62, 95) : BV:8
97 : bvadd(81, 59) : BV:32
98 : eq(97, 58) : BOOL
99 : eq(97, 63) : BOOL
100 : eq(97, 66) : BOOL
101 : eq(97, 69) : BOOL
102 : eq(97, 72) : BOOL
103 : eq(97, 75) : BOOL
104 : eq(97, 78) : BOOL
105 : eq(97, 81) : BOOL
106 : eq(97, 84) : BOOL
107 : ite(106, 86, 87) : BV:8
108 : ite(105, 83, 107) : BV:8
109 : ite(104, 80, 108) : BV:8
110 : ite(103, 77, 109) : BV:8
111 : ite(102, 74, 110) : BV:8
112 : ite(101, 71, 111) : BV:8
113 : ite(100, 68, 112) : BV:8
114 : ite(99, 65, 113) : BV:8
115 : ite(98, 62, 114) : BV:8
116 : bvadd(84, 59) : BV:32
117 : eq(116, 58) : BOOL
118 : eq(116, 63) : BOOL
119 : eq(116, 66) : BOOL
120 : eq(116, 69) : BOOL
121 : eq(116, 72) : BOOL
122 : eq(116, 75) : BOOL
123 : eq(116, 78) : BOOL
124 : eq(116, 81) : BOOL
125 : eq(116, 84) : BOOL
126 : ite(125, 86, 87) : BV:8
127 : ite(124, 83, 126) : BV:8
128 : ite(123, 80, 127) : BV:8
129 : ite(122, 77, 128) : BV:8
130 : ite(121, 74, 129) : BV:8
131 : ite(120, 71, 130) : BV:8
132 : ite(119, 68, 131) : BV:8
133 : ite(118, 65, 132) : BV:8
134 : ite(117, 62, 133) : BV:8
135 : bvadd(72, 59) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : eq(135, 81) : BOOL
144 : eq(135, 84) : BOOL
145 : ite(144, 86, 87) : BV:8
146 : ite(143, 83, 145) : BV:8
147 : ite(142, 80, 146) : BV:8
148 : ite(141, 77, 147) : BV:8
149 : ite(140, 74, 148) : BV:8
150 : ite(139, 71, 149) : BV:8
151 : ite(138, 68, 150) : BV:8
152 : ite(137, 65, 151) : BV:8
153 : ite(136, 62, 152) : BV:8
154 : bvconcat(96, 115, 134, 153) : BV:32
155 : bvadd(37, 57, 154) : BV:32
156 : eq(155, 58) : BOOL
157 : eq(155, 63) : BOOL
158 : eq(155, 66) : BOOL
159 : eq(155, 69) : BOOL
160 : eq(155, 72) : BOOL
161 : eq(155, 75) : BOOL
162 : eq(155, 78) : BOOL
163 : eq(155, 81) : BOOL
164 : eq(155, 84) : BOOL
165 : ite(164, 86, 87) : BV:8
166 : ite(163, 83, 165) : BV:8
167 : ite(162, 80, 166) : BV:8
168 : ite(161, 77, 167) : BV:8
169 : ite(160, 74, 168) : BV:8
170 : ite(159, 71, 169) : BV:8
171 : ite(158, 68, 170) : BV:8
172 : ite(157, 65, 171) : BV:8
173 : ite(156, 62, 172) : BV:8
174 : bvadd(41, 57, 154) : BV:32
175 : eq(174, 58) : BOOL
176 : eq(174, 63) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 69) : BOOL
179 : eq(174, 72) : BOOL
180 : eq(174, 75) : BOOL
181 : eq(174, 78) : BOOL
182 : eq(174, 81) : BOOL
183 : eq(174, 84) : BOOL
184 : ite(183, 86, 87) : BV:8
185 : ite(182, 83, 184) : BV:8
186 : ite(181, 80, 185) : BV:8
187 : ite(180, 77, 186) : BV:8
188 : ite(179, 74, 187) : BV:8
189 : ite(178, 71, 188) : BV:8
190 : ite(177, 68, 189) : BV:8
191 : ite(176, 65, 190) : BV:8
192 : ite(175, 62, 191) : BV:8
193 : bvadd(34, 57, 154) : BV:32
194 : eq(193, 58) : BOOL
195 : eq(193, 63) : BOOL
196 : eq(193, 66) : BOOL
197 : eq(193, 69) : BOOL
198 : eq(193, 72) : BOOL
199 : eq(193, 75) : BOOL
200 : eq(193, 78) : BOOL
201 : eq(193, 81) : BOOL
202 : eq(193, 84) : BOOL
203 : ite(202, 86, 87) : BV:8
204 : ite(201, 83, 203) : BV:8
205 : ite(200, 80, 204) : BV:8
206 : ite(199, 77, 205) : BV:8
207 : ite(198, 74, 206) : BV:8
208 : ite(197, 71, 207) : BV:8
209 : ite(196, 68, 208) : BV:8
210 : ite(195, 65, 209) : BV:8
211 : ite(194, 62, 210) : BV:8
212 : bvadd(57, 154) : BV:32
213 : eq(212, 58) : BOOL
214 : eq(212, 63) : BOOL
215 : eq(212, 66) : BOOL
216 : eq(212, 69) : BOOL
217 : eq(212, 72) : BOOL
218 : eq(212, 75) : BOOL
219 : eq(212, 78) : BOOL
220 : eq(212, 81) : BOOL
221 : eq(212, 84) : BOOL
222 : ite(221, 86, 87) : BV:8
223 : ite(220, 83, 222) : BV:8
224 : ite(219, 80, 223) : BV:8
225 : ite(218, 77, 224) : BV:8
226 : ite(217, 74, 225) : BV:8
227 : ite(216, 71, 226) : BV:8
228 : ite(215, 68, 227) : BV:8
229 : ite(214, 65, 228) : BV:8
230 : ite(213, 62, 229) : BV:8
231 : bvconcat(173, 192, 211, 230) : BV:32
232 : ite(55, 2, 231) : BV:32
233 : lambda(52, 232) : FUNCTION[BV:32 -> BV:32]
234 : map(51, 233) : MAP[BV:32 -> BV:32]
235 : lambda(17, 234) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
236 : map(16, 235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
237 : sym_const(236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16560 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16561 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
25 : eq(23, 24) : BOOL
26 : 215 { 0xd7 -41 } : BV:8
27 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
28 : eq(23, 27) : BOOL
29 : 172 { 0xac -84 } : BV:8
30 : eq(23, 22) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
33 : eq(23, 32) : BOOL
34 : 83 { 0x53 } : BV:8
35 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
36 : eq(23, 35) : BOOL
37 : 212 { 0xd4 -44 } : BV:8
38 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
39 : eq(23, 38) : BOOL
40 : 153 { 0x99 -103 } : BV:8
41 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
42 : eq(23, 41) : BOOL
43 : 125 { 0x7d } : BV:8
44 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
45 : eq(23, 44) : BOOL
46 : 85 { 0x55 } : BV:8
47 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
48 : eq(23, 47) : BOOL
49 : 180 { 0xb4 -76 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : ite(25, 26, 58) : BV:8
60 : bvadd(8, 21, 22) : BV:32
61 : eq(60, 24) : BOOL
62 : eq(60, 27) : BOOL
63 : eq(60, 22) : BOOL
64 : eq(60, 32) : BOOL
65 : eq(60, 35) : BOOL
66 : eq(60, 38) : BOOL
67 : eq(60, 41) : BOOL
68 : eq(60, 44) : BOOL
69 : eq(60, 47) : BOOL
70 : ite(69, 49, 50) : BV:8
71 : ite(68, 46, 70) : BV:8
72 : ite(67, 43, 71) : BV:8
73 : ite(66, 40, 72) : BV:8
74 : ite(65, 37, 73) : BV:8
75 : ite(64, 34, 74) : BV:8
76 : ite(63, 31, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : ite(61, 26, 77) : BV:8
79 : bvadd(4, 21, 22) : BV:32
80 : eq(79, 24) : BOOL
81 : eq(79, 27) : BOOL
82 : eq(79, 22) : BOOL
83 : eq(79, 32) : BOOL
84 : eq(79, 35) : BOOL
85 : eq(79, 38) : BOOL
86 : eq(79, 41) : BOOL
87 : eq(79, 44) : BOOL
88 : eq(79, 47) : BOOL
89 : ite(88, 49, 50) : BV:8
90 : ite(87, 46, 89) : BV:8
91 : ite(86, 43, 90) : BV:8
92 : ite(85, 40, 91) : BV:8
93 : ite(84, 37, 92) : BV:8
94 : ite(83, 34, 93) : BV:8
95 : ite(82, 31, 94) : BV:8
96 : ite(81, 29, 95) : BV:8
97 : ite(80, 26, 96) : BV:8
98 : bvadd(21, 22) : BV:32
99 : eq(98, 24) : BOOL
100 : eq(98, 27) : BOOL
101 : eq(98, 22) : BOOL
102 : eq(98, 32) : BOOL
103 : eq(98, 35) : BOOL
104 : eq(98, 38) : BOOL
105 : eq(98, 41) : BOOL
106 : eq(98, 44) : BOOL
107 : eq(98, 47) : BOOL
108 : ite(107, 49, 50) : BV:8
109 : ite(106, 46, 108) : BV:8
110 : ite(105, 43, 109) : BV:8
111 : ite(104, 40, 110) : BV:8
112 : ite(103, 37, 111) : BV:8
113 : ite(102, 34, 112) : BV:8
114 : ite(101, 31, 113) : BV:8
115 : ite(100, 29, 114) : BV:8
116 : ite(99, 26, 115) : BV:8
117 : bvconcat(59, 78, 97, 116) : BV:32
118 : ite(18, 4, 117) : BV:32
119 : lambda(17, 118) : FUNCTION[BV:32 -> BV:32]
120 : map(16, 119) : MAP[BV:32 -> BV:32]
121 : sym_const(120) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
=input.dst.llvm-%n
1 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1208156159 ] -> 0, [ 1208156160; 1208156160 ] -> 172, [ 1208156161; 1208156161 ] -> 125, [ 1208156162; 1208156162 ] -> 83, [ 1208156163; 1208156163 ] -> 153, [ 1208156164; 1208156164 ] -> 212, [ 1208156165; 1208156165 ] -> 180, [ 1208156166; 1208156166 ] -> 85, [ 1208156167; 1208156167 ] -> 215, [ 1208156168; 2572385707 ] -> 0, [ 2572385708; 2572385708 ] -> 1, [ 2572385709; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2153743379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2153743380; 2153743383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2153743384; 2820112807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820112808; 2820112811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2820112812; 3224530903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3224530904; 3224530907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3224530908; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2820112808 { 0xa81781a8 -1474854488 -1.18364429e209 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3224530904 { 0xc0326fd8 -1070436392 -1.39403820e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2153743380 { 0x805f8414 -2141223916 -1.74621820e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1536972716 { 0x5b9c57ac +1.22142553e56 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2 { 0x2 +1.23e129 } : BV:32
2 : unit : UNIT
3 : Lambda16552 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : bvule(1, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(8, 9, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda16553 : BV:32
19 : eq(18, 4) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 18) : BV:32
23 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
26 : eq(24, 25) : BOOL
27 : 215 { 0xd7 -41 } : BV:8
28 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
29 : eq(24, 28) : BOOL
30 : 172 { 0xac -84 } : BV:8
31 : eq(24, 23) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
34 : eq(24, 33) : BOOL
35 : 83 { 0x53 } : BV:8
36 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
37 : eq(24, 36) : BOOL
38 : 212 { 0xd4 -44 } : BV:8
39 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
40 : eq(24, 39) : BOOL
41 : 153 { 0x99 -103 } : BV:8
42 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
43 : eq(24, 42) : BOOL
44 : 125 { 0x7d } : BV:8
45 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
46 : eq(24, 45) : BOOL
47 : 85 { 0x55 } : BV:8
48 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
49 : eq(24, 48) : BOOL
50 : 180 { 0xb4 -76 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(29, 30, 58) : BV:8
60 : ite(26, 27, 59) : BV:8
61 : bvadd(1, 22, 23) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 23) : BOOL
65 : eq(61, 33) : BOOL
66 : eq(61, 36) : BOOL
67 : eq(61, 39) : BOOL
68 : eq(61, 42) : BOOL
69 : eq(61, 45) : BOOL
70 : eq(61, 48) : BOOL
71 : ite(70, 50, 51) : BV:8
72 : ite(69, 47, 71) : BV:8
73 : ite(68, 44, 72) : BV:8
74 : ite(67, 41, 73) : BV:8
75 : ite(66, 38, 74) : BV:8
76 : ite(65, 35, 75) : BV:8
77 : ite(64, 32, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : ite(62, 27, 78) : BV:8
80 : bvadd(6, 22, 23) : BV:32
81 : eq(80, 25) : BOOL
82 : eq(80, 28) : BOOL
83 : eq(80, 23) : BOOL
84 : eq(80, 33) : BOOL
85 : eq(80, 36) : BOOL
86 : eq(80, 39) : BOOL
87 : eq(80, 42) : BOOL
88 : eq(80, 45) : BOOL
89 : eq(80, 48) : BOOL
90 : ite(89, 50, 51) : BV:8
91 : ite(88, 47, 90) : BV:8
92 : ite(87, 44, 91) : BV:8
93 : ite(86, 41, 92) : BV:8
94 : ite(85, 38, 93) : BV:8
95 : ite(84, 35, 94) : BV:8
96 : ite(83, 32, 95) : BV:8
97 : ite(82, 30, 96) : BV:8
98 : ite(81, 27, 97) : BV:8
99 : bvadd(22, 23) : BV:32
100 : eq(99, 25) : BOOL
101 : eq(99, 28) : BOOL
102 : eq(99, 23) : BOOL
103 : eq(99, 33) : BOOL
104 : eq(99, 36) : BOOL
105 : eq(99, 39) : BOOL
106 : eq(99, 42) : BOOL
107 : eq(99, 45) : BOOL
108 : eq(99, 48) : BOOL
109 : ite(108, 50, 51) : BV:8
110 : ite(107, 47, 109) : BV:8
111 : ite(106, 44, 110) : BV:8
112 : ite(105, 41, 111) : BV:8
113 : ite(104, 38, 112) : BV:8
114 : ite(103, 35, 113) : BV:8
115 : ite(102, 32, 114) : BV:8
116 : ite(101, 30, 115) : BV:8
117 : ite(100, 27, 116) : BV:8
118 : bvconcat(60, 79, 98, 117) : BV:32
119 : ite(19, 6, 118) : BV:32
120 : lambda(18, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(17, 120) : MAP[BV:32 -> BV:32]
122 : sum(1, 2, 121) : SUM[UNIT,MAP[BV:32 -> BV:32]]
123 : sym_const(122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 299068977 { 0x11d36e31 +1.65180027e164 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16563 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16564 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
25 : eq(23, 24) : BOOL
26 : 215 { 0xd7 -41 } : BV:8
27 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
28 : eq(23, 27) : BOOL
29 : 172 { 0xac -84 } : BV:8
30 : eq(23, 22) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
33 : eq(23, 32) : BOOL
34 : 83 { 0x53 } : BV:8
35 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
36 : eq(23, 35) : BOOL
37 : 212 { 0xd4 -44 } : BV:8
38 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
39 : eq(23, 38) : BOOL
40 : 153 { 0x99 -103 } : BV:8
41 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
42 : eq(23, 41) : BOOL
43 : 125 { 0x7d } : BV:8
44 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
45 : eq(23, 44) : BOOL
46 : 85 { 0x55 } : BV:8
47 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
48 : eq(23, 47) : BOOL
49 : 180 { 0xb4 -76 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : ite(25, 26, 58) : BV:8
60 : bvadd(8, 21, 22) : BV:32
61 : eq(60, 24) : BOOL
62 : eq(60, 27) : BOOL
63 : eq(60, 22) : BOOL
64 : eq(60, 32) : BOOL
65 : eq(60, 35) : BOOL
66 : eq(60, 38) : BOOL
67 : eq(60, 41) : BOOL
68 : eq(60, 44) : BOOL
69 : eq(60, 47) : BOOL
70 : ite(69, 49, 50) : BV:8
71 : ite(68, 46, 70) : BV:8
72 : ite(67, 43, 71) : BV:8
73 : ite(66, 40, 72) : BV:8
74 : ite(65, 37, 73) : BV:8
75 : ite(64, 34, 74) : BV:8
76 : ite(63, 31, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : ite(61, 26, 77) : BV:8
79 : bvadd(4, 21, 22) : BV:32
80 : eq(79, 24) : BOOL
81 : eq(79, 27) : BOOL
82 : eq(79, 22) : BOOL
83 : eq(79, 32) : BOOL
84 : eq(79, 35) : BOOL
85 : eq(79, 38) : BOOL
86 : eq(79, 41) : BOOL
87 : eq(79, 44) : BOOL
88 : eq(79, 47) : BOOL
89 : ite(88, 49, 50) : BV:8
90 : ite(87, 46, 89) : BV:8
91 : ite(86, 43, 90) : BV:8
92 : ite(85, 40, 91) : BV:8
93 : ite(84, 37, 92) : BV:8
94 : ite(83, 34, 93) : BV:8
95 : ite(82, 31, 94) : BV:8
96 : ite(81, 29, 95) : BV:8
97 : ite(80, 26, 96) : BV:8
98 : bvadd(21, 22) : BV:32
99 : eq(98, 24) : BOOL
100 : eq(98, 27) : BOOL
101 : eq(98, 22) : BOOL
102 : eq(98, 32) : BOOL
103 : eq(98, 35) : BOOL
104 : eq(98, 38) : BOOL
105 : eq(98, 41) : BOOL
106 : eq(98, 44) : BOOL
107 : eq(98, 47) : BOOL
108 : ite(107, 49, 50) : BV:8
109 : ite(106, 46, 108) : BV:8
110 : ite(105, 43, 109) : BV:8
111 : ite(104, 40, 110) : BV:8
112 : ite(103, 37, 111) : BV:8
113 : ite(102, 34, 112) : BV:8
114 : ite(101, 31, 113) : BV:8
115 : ite(100, 29, 114) : BV:8
116 : ite(99, 26, 115) : BV:8
117 : bvconcat(59, 78, 97, 116) : BV:32
118 : ite(18, 4, 117) : BV:32
119 : lambda(17, 118) : FUNCTION[BV:32 -> BV:32]
120 : map(16, 119) : MAP[BV:32 -> BV:32]
121 : sym_const(120) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 675186870 { 0x283e88b6 +1.48854708e209 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3224530904 { 0xc0326fd8 -1070436392 -1.39403820e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3224530907 { 0xc0326fdb -1070436389 -1.39403855e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2153743380 { 0x805f8414 -2141223916 -1.74621820e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2153743383 { 0x805f8417 -2141223913 -1.74621856e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2820112808 { 0xa81781a8 -1474854488 -1.18364429e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2820112811 { 0xa81781ab -1474854485 -1.18364465e209 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1560268477 ] -> true, [ 1560268478; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16474 : BV:32
2 : Lambda16475 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16479 : BV:32
2 : Lambda16480 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 215 { 0xd7 -41 } : BV:8
55 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
56 : eq(52, 55) : BOOL
57 : 172 { 0xac -84 } : BV:8
58 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
62 : eq(52, 61) : BOOL
63 : 83 { 0x53 } : BV:8
64 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
65 : eq(52, 64) : BOOL
66 : 212 { 0xd4 -44 } : BV:8
67 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
68 : eq(52, 67) : BOOL
69 : 153 { 0x99 -103 } : BV:8
70 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
71 : eq(52, 70) : BOOL
72 : 125 { 0x7d } : BV:8
73 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
74 : eq(52, 73) : BOOL
75 : 85 { 0x55 } : BV:8
76 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
77 : eq(52, 76) : BOOL
78 : 180 { 0xb4 -76 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : ite(59, 60, 85) : BV:8
87 : ite(56, 57, 86) : BV:8
88 : ite(53, 54, 87) : BV:8
89 : bvadd(73, 51) : BV:32
90 : eq(89, 50) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 58) : BOOL
93 : eq(89, 61) : BOOL
94 : eq(89, 64) : BOOL
95 : eq(89, 67) : BOOL
96 : eq(89, 70) : BOOL
97 : eq(89, 73) : BOOL
98 : eq(89, 76) : BOOL
99 : ite(98, 78, 79) : BV:8
100 : ite(97, 75, 99) : BV:8
101 : ite(96, 72, 100) : BV:8
102 : ite(95, 69, 101) : BV:8
103 : ite(94, 66, 102) : BV:8
104 : ite(93, 63, 103) : BV:8
105 : ite(92, 60, 104) : BV:8
106 : ite(91, 57, 105) : BV:8
107 : ite(90, 54, 106) : BV:8
108 : bvadd(76, 51) : BV:32
109 : eq(108, 50) : BOOL
110 : eq(108, 55) : BOOL
111 : eq(108, 58) : BOOL
112 : eq(108, 61) : BOOL
113 : eq(108, 64) : BOOL
114 : eq(108, 67) : BOOL
115 : eq(108, 70) : BOOL
116 : eq(108, 73) : BOOL
117 : eq(108, 76) : BOOL
118 : ite(117, 78, 79) : BV:8
119 : ite(116, 75, 118) : BV:8
120 : ite(115, 72, 119) : BV:8
121 : ite(114, 69, 120) : BV:8
122 : ite(113, 66, 121) : BV:8
123 : ite(112, 63, 122) : BV:8
124 : ite(111, 60, 123) : BV:8
125 : ite(110, 57, 124) : BV:8
126 : ite(109, 54, 125) : BV:8
127 : bvadd(64, 51) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : eq(127, 73) : BOOL
136 : eq(127, 76) : BOOL
137 : ite(136, 78, 79) : BV:8
138 : ite(135, 75, 137) : BV:8
139 : ite(134, 72, 138) : BV:8
140 : ite(133, 69, 139) : BV:8
141 : ite(132, 66, 140) : BV:8
142 : ite(131, 63, 141) : BV:8
143 : ite(130, 60, 142) : BV:8
144 : ite(129, 57, 143) : BV:8
145 : ite(128, 54, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(33, 49, 146) : BV:32
148 : eq(147, 50) : BOOL
149 : eq(147, 55) : BOOL
150 : eq(147, 58) : BOOL
151 : eq(147, 61) : BOOL
152 : eq(147, 64) : BOOL
153 : eq(147, 67) : BOOL
154 : eq(147, 70) : BOOL
155 : eq(147, 73) : BOOL
156 : eq(147, 76) : BOOL
157 : ite(156, 78, 79) : BV:8
158 : ite(155, 75, 157) : BV:8
159 : ite(154, 72, 158) : BV:8
160 : ite(153, 69, 159) : BV:8
161 : ite(152, 66, 160) : BV:8
162 : ite(151, 63, 161) : BV:8
163 : ite(150, 60, 162) : BV:8
164 : ite(149, 57, 163) : BV:8
165 : ite(148, 54, 164) : BV:8
166 : bvadd(37, 49, 146) : BV:32
167 : eq(166, 50) : BOOL
168 : eq(166, 55) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 61) : BOOL
171 : eq(166, 64) : BOOL
172 : eq(166, 67) : BOOL
173 : eq(166, 70) : BOOL
174 : eq(166, 73) : BOOL
175 : eq(166, 76) : BOOL
176 : ite(175, 78, 79) : BV:8
177 : ite(174, 75, 176) : BV:8
178 : ite(173, 72, 177) : BV:8
179 : ite(172, 69, 178) : BV:8
180 : ite(171, 66, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 60, 181) : BV:8
183 : ite(168, 57, 182) : BV:8
184 : ite(167, 54, 183) : BV:8
185 : bvadd(30, 49, 146) : BV:32
186 : eq(185, 50) : BOOL
187 : eq(185, 55) : BOOL
188 : eq(185, 58) : BOOL
189 : eq(185, 61) : BOOL
190 : eq(185, 64) : BOOL
191 : eq(185, 67) : BOOL
192 : eq(185, 70) : BOOL
193 : eq(185, 73) : BOOL
194 : eq(185, 76) : BOOL
195 : ite(194, 78, 79) : BV:8
196 : ite(193, 75, 195) : BV:8
197 : ite(192, 72, 196) : BV:8
198 : ite(191, 69, 197) : BV:8
199 : ite(190, 66, 198) : BV:8
200 : ite(189, 63, 199) : BV:8
201 : ite(188, 60, 200) : BV:8
202 : ite(187, 57, 201) : BV:8
203 : ite(186, 54, 202) : BV:8
204 : bvadd(49, 146) : BV:32
205 : eq(204, 50) : BOOL
206 : eq(204, 55) : BOOL
207 : eq(204, 58) : BOOL
208 : eq(204, 61) : BOOL
209 : eq(204, 64) : BOOL
210 : eq(204, 67) : BOOL
211 : eq(204, 70) : BOOL
212 : eq(204, 73) : BOOL
213 : eq(204, 76) : BOOL
214 : ite(213, 78, 79) : BV:8
215 : ite(212, 75, 214) : BV:8
216 : ite(211, 72, 215) : BV:8
217 : ite(210, 69, 216) : BV:8
218 : ite(209, 66, 217) : BV:8
219 : ite(208, 63, 218) : BV:8
220 : ite(207, 60, 219) : BV:8
221 : ite(206, 57, 220) : BV:8
222 : ite(205, 54, 221) : BV:8
223 : bvconcat(165, 184, 203, 222) : BV:32
224 : ite(6, 3, 223) : BV:32
225 : ite(47, 223, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1560268477 ] -> true, [ 1560268478; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16485 : BV:32
2 : Lambda16486 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16481 : BV:32
2 : Lambda16482 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 215 { 0xd7 -41 } : BV:8
15 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
16 : eq(12, 15) : BOOL
17 : 172 { 0xac -84 } : BV:8
18 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
22 : eq(12, 21) : BOOL
23 : 83 { 0x53 } : BV:8
24 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
25 : eq(12, 24) : BOOL
26 : 212 { 0xd4 -44 } : BV:8
27 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
28 : eq(12, 27) : BOOL
29 : 153 { 0x99 -103 } : BV:8
30 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
31 : eq(12, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
34 : eq(12, 33) : BOOL
35 : 85 { 0x55 } : BV:8
36 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
37 : eq(12, 36) : BOOL
38 : 180 { 0xb4 -76 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : ite(22, 23, 44) : BV:8
46 : ite(19, 20, 45) : BV:8
47 : ite(16, 17, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(33, 11) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 36) : BOOL
59 : ite(58, 38, 39) : BV:8
60 : ite(57, 35, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : bvadd(36, 11) : BV:32
69 : eq(68, 10) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 18) : BOOL
72 : eq(68, 21) : BOOL
73 : eq(68, 24) : BOOL
74 : eq(68, 27) : BOOL
75 : eq(68, 30) : BOOL
76 : eq(68, 33) : BOOL
77 : eq(68, 36) : BOOL
78 : ite(77, 38, 39) : BV:8
79 : ite(76, 35, 78) : BV:8
80 : ite(75, 32, 79) : BV:8
81 : ite(74, 29, 80) : BV:8
82 : ite(73, 26, 81) : BV:8
83 : ite(72, 23, 82) : BV:8
84 : ite(71, 20, 83) : BV:8
85 : ite(70, 17, 84) : BV:8
86 : ite(69, 14, 85) : BV:8
87 : bvadd(24, 11) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : eq(87, 33) : BOOL
96 : eq(87, 36) : BOOL
97 : ite(96, 38, 39) : BV:8
98 : ite(95, 35, 97) : BV:8
99 : ite(94, 32, 98) : BV:8
100 : ite(93, 29, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 23, 101) : BV:8
103 : ite(90, 20, 102) : BV:8
104 : ite(89, 17, 103) : BV:8
105 : ite(88, 14, 104) : BV:8
106 : bvconcat(48, 67, 86, 105) : BV:32
107 : bvadd(7, 9, 106) : BV:32
108 : eq(107, 10) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 18) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : eq(107, 30) : BOOL
115 : eq(107, 33) : BOOL
116 : eq(107, 36) : BOOL
117 : ite(116, 38, 39) : BV:8
118 : ite(115, 35, 117) : BV:8
119 : ite(114, 32, 118) : BV:8
120 : ite(113, 29, 119) : BV:8
121 : ite(112, 26, 120) : BV:8
122 : ite(111, 23, 121) : BV:8
123 : ite(110, 20, 122) : BV:8
124 : ite(109, 17, 123) : BV:8
125 : ite(108, 14, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 9, 106) : BV:32
128 : eq(127, 10) : BOOL
129 : eq(127, 15) : BOOL
130 : eq(127, 18) : BOOL
131 : eq(127, 21) : BOOL
132 : eq(127, 24) : BOOL
133 : eq(127, 27) : BOOL
134 : eq(127, 30) : BOOL
135 : eq(127, 33) : BOOL
136 : eq(127, 36) : BOOL
137 : ite(136, 38, 39) : BV:8
138 : ite(135, 35, 137) : BV:8
139 : ite(134, 32, 138) : BV:8
140 : ite(133, 29, 139) : BV:8
141 : ite(132, 26, 140) : BV:8
142 : ite(131, 23, 141) : BV:8
143 : ite(130, 20, 142) : BV:8
144 : ite(129, 17, 143) : BV:8
145 : ite(128, 14, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 9, 106) : BV:32
148 : eq(147, 10) : BOOL
149 : eq(147, 15) : BOOL
150 : eq(147, 18) : BOOL
151 : eq(147, 21) : BOOL
152 : eq(147, 24) : BOOL
153 : eq(147, 27) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : eq(147, 36) : BOOL
157 : ite(156, 38, 39) : BV:8
158 : ite(155, 35, 157) : BV:8
159 : ite(154, 32, 158) : BV:8
160 : ite(153, 29, 159) : BV:8
161 : ite(152, 26, 160) : BV:8
162 : ite(151, 23, 161) : BV:8
163 : ite(150, 20, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : ite(148, 14, 164) : BV:8
166 : bvadd(9, 106) : BV:32
167 : eq(166, 10) : BOOL
168 : eq(166, 15) : BOOL
169 : eq(166, 18) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 24) : BOOL
172 : eq(166, 27) : BOOL
173 : eq(166, 30) : BOOL
174 : eq(166, 33) : BOOL
175 : eq(166, 36) : BOOL
176 : ite(175, 38, 39) : BV:8
177 : ite(174, 35, 176) : BV:8
178 : ite(173, 32, 177) : BV:8
179 : ite(172, 29, 178) : BV:8
180 : ite(171, 26, 179) : BV:8
181 : ite(170, 23, 180) : BV:8
182 : ite(169, 20, 181) : BV:8
183 : ite(168, 17, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : bvconcat(125, 145, 165, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : lambda(1, 2, 186) : FUNCTION[BV:32,BV:32 -> BV:32]
188 : sym_const(187) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16492 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16496 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16500 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3746274679
=counter_example_end
=global nodece 64 num_edges_traversed 1
=global nodece 64 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 65
=global nodece 65 nodece z3.ce6566.num_edges_traversed2
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(epsilon)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3.ce6566 b97c93f9dbf4bf1dc4626821b5065ef
=input.spec-%var-x-1
1 : Lambda16547 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16550 : BV:32
18 : Lambda16548 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16549 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 215 { 0xd7 -41 } : BV:8
82 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
83 : eq(79, 82) : BOOL
84 : 172 { 0xac -84 } : BV:8
85 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
89 : eq(79, 88) : BOOL
90 : 83 { 0x53 } : BV:8
91 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
92 : eq(79, 91) : BOOL
93 : 212 { 0xd4 -44 } : BV:8
94 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
95 : eq(79, 94) : BOOL
96 : 153 { 0x99 -103 } : BV:8
97 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
98 : eq(79, 97) : BOOL
99 : 125 { 0x7d } : BV:8
100 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
101 : eq(79, 100) : BOOL
102 : 85 { 0x55 } : BV:8
103 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
104 : eq(79, 103) : BOOL
105 : 180 { 0xb4 -76 } : BV:8
106 : 0 { 0x0 } : BV:8
107 : ite(104, 105, 106) : BV:8
108 : ite(101, 102, 107) : BV:8
109 : ite(98, 99, 108) : BV:8
110 : ite(95, 96, 109) : BV:8
111 : ite(92, 93, 110) : BV:8
112 : ite(89, 90, 111) : BV:8
113 : ite(86, 87, 112) : BV:8
114 : ite(83, 84, 113) : BV:8
115 : ite(80, 81, 114) : BV:8
116 : bvadd(100, 78) : BV:32
117 : eq(116, 77) : BOOL
118 : eq(116, 82) : BOOL
119 : eq(116, 85) : BOOL
120 : eq(116, 88) : BOOL
121 : eq(116, 91) : BOOL
122 : eq(116, 94) : BOOL
123 : eq(116, 97) : BOOL
124 : eq(116, 100) : BOOL
125 : eq(116, 103) : BOOL
126 : ite(125, 105, 106) : BV:8
127 : ite(124, 102, 126) : BV:8
128 : ite(123, 99, 127) : BV:8
129 : ite(122, 96, 128) : BV:8
130 : ite(121, 93, 129) : BV:8
131 : ite(120, 90, 130) : BV:8
132 : ite(119, 87, 131) : BV:8
133 : ite(118, 84, 132) : BV:8
134 : ite(117, 81, 133) : BV:8
135 : bvadd(103, 78) : BV:32
136 : eq(135, 77) : BOOL
137 : eq(135, 82) : BOOL
138 : eq(135, 85) : BOOL
139 : eq(135, 88) : BOOL
140 : eq(135, 91) : BOOL
141 : eq(135, 94) : BOOL
142 : eq(135, 97) : BOOL
143 : eq(135, 100) : BOOL
144 : eq(135, 103) : BOOL
145 : ite(144, 105, 106) : BV:8
146 : ite(143, 102, 145) : BV:8
147 : ite(142, 99, 146) : BV:8
148 : ite(141, 96, 147) : BV:8
149 : ite(140, 93, 148) : BV:8
150 : ite(139, 90, 149) : BV:8
151 : ite(138, 87, 150) : BV:8
152 : ite(137, 84, 151) : BV:8
153 : ite(136, 81, 152) : BV:8
154 : bvadd(91, 78) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : eq(154, 100) : BOOL
163 : eq(154, 103) : BOOL
164 : ite(163, 105, 106) : BV:8
165 : ite(162, 102, 164) : BV:8
166 : ite(161, 99, 165) : BV:8
167 : ite(160, 96, 166) : BV:8
168 : ite(159, 93, 167) : BV:8
169 : ite(158, 90, 168) : BV:8
170 : ite(157, 87, 169) : BV:8
171 : ite(156, 84, 170) : BV:8
172 : ite(155, 81, 171) : BV:8
173 : bvconcat(115, 134, 153, 172) : BV:32
174 : bvadd(37, 76, 173) : BV:32
175 : eq(174, 77) : BOOL
176 : eq(174, 82) : BOOL
177 : eq(174, 85) : BOOL
178 : eq(174, 88) : BOOL
179 : eq(174, 91) : BOOL
180 : eq(174, 94) : BOOL
181 : eq(174, 97) : BOOL
182 : eq(174, 100) : BOOL
183 : eq(174, 103) : BOOL
184 : ite(183, 105, 106) : BV:8
185 : ite(182, 102, 184) : BV:8
186 : ite(181, 99, 185) : BV:8
187 : ite(180, 96, 186) : BV:8
188 : ite(179, 93, 187) : BV:8
189 : ite(178, 90, 188) : BV:8
190 : ite(177, 87, 189) : BV:8
191 : ite(176, 84, 190) : BV:8
192 : ite(175, 81, 191) : BV:8
193 : bvadd(41, 76, 173) : BV:32
194 : eq(193, 77) : BOOL
195 : eq(193, 82) : BOOL
196 : eq(193, 85) : BOOL
197 : eq(193, 88) : BOOL
198 : eq(193, 91) : BOOL
199 : eq(193, 94) : BOOL
200 : eq(193, 97) : BOOL
201 : eq(193, 100) : BOOL
202 : eq(193, 103) : BOOL
203 : ite(202, 105, 106) : BV:8
204 : ite(201, 102, 203) : BV:8
205 : ite(200, 99, 204) : BV:8
206 : ite(199, 96, 205) : BV:8
207 : ite(198, 93, 206) : BV:8
208 : ite(197, 90, 207) : BV:8
209 : ite(196, 87, 208) : BV:8
210 : ite(195, 84, 209) : BV:8
211 : ite(194, 81, 210) : BV:8
212 : bvadd(34, 76, 173) : BV:32
213 : eq(212, 77) : BOOL
214 : eq(212, 82) : BOOL
215 : eq(212, 85) : BOOL
216 : eq(212, 88) : BOOL
217 : eq(212, 91) : BOOL
218 : eq(212, 94) : BOOL
219 : eq(212, 97) : BOOL
220 : eq(212, 100) : BOOL
221 : eq(212, 103) : BOOL
222 : ite(221, 105, 106) : BV:8
223 : ite(220, 102, 222) : BV:8
224 : ite(219, 99, 223) : BV:8
225 : ite(218, 96, 224) : BV:8
226 : ite(217, 93, 225) : BV:8
227 : ite(216, 90, 226) : BV:8
228 : ite(215, 87, 227) : BV:8
229 : ite(214, 84, 228) : BV:8
230 : ite(213, 81, 229) : BV:8
231 : bvadd(76, 173) : BV:32
232 : eq(231, 77) : BOOL
233 : eq(231, 82) : BOOL
234 : eq(231, 85) : BOOL
235 : eq(231, 88) : BOOL
236 : eq(231, 91) : BOOL
237 : eq(231, 94) : BOOL
238 : eq(231, 97) : BOOL
239 : eq(231, 100) : BOOL
240 : eq(231, 103) : BOOL
241 : ite(240, 105, 106) : BV:8
242 : ite(239, 102, 241) : BV:8
243 : ite(238, 99, 242) : BV:8
244 : ite(237, 96, 243) : BV:8
245 : ite(236, 93, 244) : BV:8
246 : ite(235, 90, 245) : BV:8
247 : ite(234, 87, 246) : BV:8
248 : ite(233, 84, 247) : BV:8
249 : ite(232, 81, 248) : BV:8
250 : bvconcat(192, 211, 230, 249) : BV:32
251 : ite(55, 2, 250) : BV:32
252 : ite(74, 250, 251) : BV:32
253 : ite(55, 2, 252) : BV:32
254 : lambda(52, 253) : FUNCTION[BV:32 -> BV:32]
255 : map(51, 254) : MAP[BV:32 -> BV:32]
256 : lambda(17, 255) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
257 : map(16, 256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
258 : sym_const(257) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16555 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16558 : BV:32
18 : Lambda16556 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16557 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 215 { 0xd7 -41 } : BV:8
63 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
64 : eq(60, 63) : BOOL
65 : 172 { 0xac -84 } : BV:8
66 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
70 : eq(60, 69) : BOOL
71 : 83 { 0x53 } : BV:8
72 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
73 : eq(60, 72) : BOOL
74 : 212 { 0xd4 -44 } : BV:8
75 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
76 : eq(60, 75) : BOOL
77 : 153 { 0x99 -103 } : BV:8
78 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
79 : eq(60, 78) : BOOL
80 : 125 { 0x7d } : BV:8
81 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
82 : eq(60, 81) : BOOL
83 : 85 { 0x55 } : BV:8
84 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
85 : eq(60, 84) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(76, 77, 90) : BV:8
92 : ite(73, 74, 91) : BV:8
93 : ite(70, 71, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : ite(64, 65, 94) : BV:8
96 : ite(61, 62, 95) : BV:8
97 : bvadd(81, 59) : BV:32
98 : eq(97, 58) : BOOL
99 : eq(97, 63) : BOOL
100 : eq(97, 66) : BOOL
101 : eq(97, 69) : BOOL
102 : eq(97, 72) : BOOL
103 : eq(97, 75) : BOOL
104 : eq(97, 78) : BOOL
105 : eq(97, 81) : BOOL
106 : eq(97, 84) : BOOL
107 : ite(106, 86, 87) : BV:8
108 : ite(105, 83, 107) : BV:8
109 : ite(104, 80, 108) : BV:8
110 : ite(103, 77, 109) : BV:8
111 : ite(102, 74, 110) : BV:8
112 : ite(101, 71, 111) : BV:8
113 : ite(100, 68, 112) : BV:8
114 : ite(99, 65, 113) : BV:8
115 : ite(98, 62, 114) : BV:8
116 : bvadd(84, 59) : BV:32
117 : eq(116, 58) : BOOL
118 : eq(116, 63) : BOOL
119 : eq(116, 66) : BOOL
120 : eq(116, 69) : BOOL
121 : eq(116, 72) : BOOL
122 : eq(116, 75) : BOOL
123 : eq(116, 78) : BOOL
124 : eq(116, 81) : BOOL
125 : eq(116, 84) : BOOL
126 : ite(125, 86, 87) : BV:8
127 : ite(124, 83, 126) : BV:8
128 : ite(123, 80, 127) : BV:8
129 : ite(122, 77, 128) : BV:8
130 : ite(121, 74, 129) : BV:8
131 : ite(120, 71, 130) : BV:8
132 : ite(119, 68, 131) : BV:8
133 : ite(118, 65, 132) : BV:8
134 : ite(117, 62, 133) : BV:8
135 : bvadd(72, 59) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : eq(135, 81) : BOOL
144 : eq(135, 84) : BOOL
145 : ite(144, 86, 87) : BV:8
146 : ite(143, 83, 145) : BV:8
147 : ite(142, 80, 146) : BV:8
148 : ite(141, 77, 147) : BV:8
149 : ite(140, 74, 148) : BV:8
150 : ite(139, 71, 149) : BV:8
151 : ite(138, 68, 150) : BV:8
152 : ite(137, 65, 151) : BV:8
153 : ite(136, 62, 152) : BV:8
154 : bvconcat(96, 115, 134, 153) : BV:32
155 : bvadd(37, 57, 154) : BV:32
156 : eq(155, 58) : BOOL
157 : eq(155, 63) : BOOL
158 : eq(155, 66) : BOOL
159 : eq(155, 69) : BOOL
160 : eq(155, 72) : BOOL
161 : eq(155, 75) : BOOL
162 : eq(155, 78) : BOOL
163 : eq(155, 81) : BOOL
164 : eq(155, 84) : BOOL
165 : ite(164, 86, 87) : BV:8
166 : ite(163, 83, 165) : BV:8
167 : ite(162, 80, 166) : BV:8
168 : ite(161, 77, 167) : BV:8
169 : ite(160, 74, 168) : BV:8
170 : ite(159, 71, 169) : BV:8
171 : ite(158, 68, 170) : BV:8
172 : ite(157, 65, 171) : BV:8
173 : ite(156, 62, 172) : BV:8
174 : bvadd(41, 57, 154) : BV:32
175 : eq(174, 58) : BOOL
176 : eq(174, 63) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 69) : BOOL
179 : eq(174, 72) : BOOL
180 : eq(174, 75) : BOOL
181 : eq(174, 78) : BOOL
182 : eq(174, 81) : BOOL
183 : eq(174, 84) : BOOL
184 : ite(183, 86, 87) : BV:8
185 : ite(182, 83, 184) : BV:8
186 : ite(181, 80, 185) : BV:8
187 : ite(180, 77, 186) : BV:8
188 : ite(179, 74, 187) : BV:8
189 : ite(178, 71, 188) : BV:8
190 : ite(177, 68, 189) : BV:8
191 : ite(176, 65, 190) : BV:8
192 : ite(175, 62, 191) : BV:8
193 : bvadd(34, 57, 154) : BV:32
194 : eq(193, 58) : BOOL
195 : eq(193, 63) : BOOL
196 : eq(193, 66) : BOOL
197 : eq(193, 69) : BOOL
198 : eq(193, 72) : BOOL
199 : eq(193, 75) : BOOL
200 : eq(193, 78) : BOOL
201 : eq(193, 81) : BOOL
202 : eq(193, 84) : BOOL
203 : ite(202, 86, 87) : BV:8
204 : ite(201, 83, 203) : BV:8
205 : ite(200, 80, 204) : BV:8
206 : ite(199, 77, 205) : BV:8
207 : ite(198, 74, 206) : BV:8
208 : ite(197, 71, 207) : BV:8
209 : ite(196, 68, 208) : BV:8
210 : ite(195, 65, 209) : BV:8
211 : ite(194, 62, 210) : BV:8
212 : bvadd(57, 154) : BV:32
213 : eq(212, 58) : BOOL
214 : eq(212, 63) : BOOL
215 : eq(212, 66) : BOOL
216 : eq(212, 69) : BOOL
217 : eq(212, 72) : BOOL
218 : eq(212, 75) : BOOL
219 : eq(212, 78) : BOOL
220 : eq(212, 81) : BOOL
221 : eq(212, 84) : BOOL
222 : ite(221, 86, 87) : BV:8
223 : ite(220, 83, 222) : BV:8
224 : ite(219, 80, 223) : BV:8
225 : ite(218, 77, 224) : BV:8
226 : ite(217, 74, 225) : BV:8
227 : ite(216, 71, 226) : BV:8
228 : ite(215, 68, 227) : BV:8
229 : ite(214, 65, 228) : BV:8
230 : ite(213, 62, 229) : BV:8
231 : bvconcat(173, 192, 211, 230) : BV:32
232 : ite(55, 2, 231) : BV:32
233 : lambda(52, 232) : FUNCTION[BV:32 -> BV:32]
234 : map(51, 233) : MAP[BV:32 -> BV:32]
235 : lambda(17, 234) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
236 : map(16, 235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
237 : sym_const(236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16560 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16561 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
25 : eq(23, 24) : BOOL
26 : 215 { 0xd7 -41 } : BV:8
27 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
28 : eq(23, 27) : BOOL
29 : 172 { 0xac -84 } : BV:8
30 : eq(23, 22) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
33 : eq(23, 32) : BOOL
34 : 83 { 0x53 } : BV:8
35 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
36 : eq(23, 35) : BOOL
37 : 212 { 0xd4 -44 } : BV:8
38 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
39 : eq(23, 38) : BOOL
40 : 153 { 0x99 -103 } : BV:8
41 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
42 : eq(23, 41) : BOOL
43 : 125 { 0x7d } : BV:8
44 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
45 : eq(23, 44) : BOOL
46 : 85 { 0x55 } : BV:8
47 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
48 : eq(23, 47) : BOOL
49 : 180 { 0xb4 -76 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : ite(25, 26, 58) : BV:8
60 : bvadd(8, 21, 22) : BV:32
61 : eq(60, 24) : BOOL
62 : eq(60, 27) : BOOL
63 : eq(60, 22) : BOOL
64 : eq(60, 32) : BOOL
65 : eq(60, 35) : BOOL
66 : eq(60, 38) : BOOL
67 : eq(60, 41) : BOOL
68 : eq(60, 44) : BOOL
69 : eq(60, 47) : BOOL
70 : ite(69, 49, 50) : BV:8
71 : ite(68, 46, 70) : BV:8
72 : ite(67, 43, 71) : BV:8
73 : ite(66, 40, 72) : BV:8
74 : ite(65, 37, 73) : BV:8
75 : ite(64, 34, 74) : BV:8
76 : ite(63, 31, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : ite(61, 26, 77) : BV:8
79 : bvadd(4, 21, 22) : BV:32
80 : eq(79, 24) : BOOL
81 : eq(79, 27) : BOOL
82 : eq(79, 22) : BOOL
83 : eq(79, 32) : BOOL
84 : eq(79, 35) : BOOL
85 : eq(79, 38) : BOOL
86 : eq(79, 41) : BOOL
87 : eq(79, 44) : BOOL
88 : eq(79, 47) : BOOL
89 : ite(88, 49, 50) : BV:8
90 : ite(87, 46, 89) : BV:8
91 : ite(86, 43, 90) : BV:8
92 : ite(85, 40, 91) : BV:8
93 : ite(84, 37, 92) : BV:8
94 : ite(83, 34, 93) : BV:8
95 : ite(82, 31, 94) : BV:8
96 : ite(81, 29, 95) : BV:8
97 : ite(80, 26, 96) : BV:8
98 : bvadd(21, 22) : BV:32
99 : eq(98, 24) : BOOL
100 : eq(98, 27) : BOOL
101 : eq(98, 22) : BOOL
102 : eq(98, 32) : BOOL
103 : eq(98, 35) : BOOL
104 : eq(98, 38) : BOOL
105 : eq(98, 41) : BOOL
106 : eq(98, 44) : BOOL
107 : eq(98, 47) : BOOL
108 : ite(107, 49, 50) : BV:8
109 : ite(106, 46, 108) : BV:8
110 : ite(105, 43, 109) : BV:8
111 : ite(104, 40, 110) : BV:8
112 : ite(103, 37, 111) : BV:8
113 : ite(102, 34, 112) : BV:8
114 : ite(101, 31, 113) : BV:8
115 : ite(100, 29, 114) : BV:8
116 : ite(99, 26, 115) : BV:8
117 : bvconcat(59, 78, 97, 116) : BV:32
118 : ite(18, 4, 117) : BV:32
119 : lambda(17, 118) : FUNCTION[BV:32 -> BV:32]
120 : map(16, 119) : MAP[BV:32 -> BV:32]
121 : sym_const(120) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
=input.dst.llvm-%n
1 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1208156159 ] -> 0, [ 1208156160; 1208156160 ] -> 172, [ 1208156161; 1208156161 ] -> 125, [ 1208156162; 1208156162 ] -> 83, [ 1208156163; 1208156163 ] -> 153, [ 1208156164; 1208156164 ] -> 212, [ 1208156165; 1208156165 ] -> 180, [ 1208156166; 1208156166 ] -> 85, [ 1208156167; 1208156167 ] -> 215, [ 1208156168; 2572385707 ] -> 0, [ 2572385708; 2572385708 ] -> 1, [ 2572385709; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2153743379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2153743380; 2153743383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2153743384; 2820112807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820112808; 2820112811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2820112812; 3224530903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3224530904; 3224530907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3224530908; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2820112808 { 0xa81781a8 -1474854488 -1.18364429e209 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3224530904 { 0xc0326fd8 -1070436392 -1.39403820e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2153743380 { 0x805f8414 -2141223916 -1.74621820e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1536972716 { 0x5b9c57ac +1.22142553e56 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 2 { 0x2 +1.23e129 } : BV:32
2 : unit : UNIT
3 : Lambda16552 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : bvule(1, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(8, 9, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda16553 : BV:32
19 : eq(18, 4) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 18) : BV:32
23 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
26 : eq(24, 25) : BOOL
27 : 215 { 0xd7 -41 } : BV:8
28 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
29 : eq(24, 28) : BOOL
30 : 172 { 0xac -84 } : BV:8
31 : eq(24, 23) : BOOL
32 : 1 { 0x1 } : BV:8
33 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
34 : eq(24, 33) : BOOL
35 : 83 { 0x53 } : BV:8
36 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
37 : eq(24, 36) : BOOL
38 : 212 { 0xd4 -44 } : BV:8
39 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
40 : eq(24, 39) : BOOL
41 : 153 { 0x99 -103 } : BV:8
42 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
43 : eq(24, 42) : BOOL
44 : 125 { 0x7d } : BV:8
45 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
46 : eq(24, 45) : BOOL
47 : 85 { 0x55 } : BV:8
48 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
49 : eq(24, 48) : BOOL
50 : 180 { 0xb4 -76 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(29, 30, 58) : BV:8
60 : ite(26, 27, 59) : BV:8
61 : bvadd(1, 22, 23) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 23) : BOOL
65 : eq(61, 33) : BOOL
66 : eq(61, 36) : BOOL
67 : eq(61, 39) : BOOL
68 : eq(61, 42) : BOOL
69 : eq(61, 45) : BOOL
70 : eq(61, 48) : BOOL
71 : ite(70, 50, 51) : BV:8
72 : ite(69, 47, 71) : BV:8
73 : ite(68, 44, 72) : BV:8
74 : ite(67, 41, 73) : BV:8
75 : ite(66, 38, 74) : BV:8
76 : ite(65, 35, 75) : BV:8
77 : ite(64, 32, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : ite(62, 27, 78) : BV:8
80 : bvadd(6, 22, 23) : BV:32
81 : eq(80, 25) : BOOL
82 : eq(80, 28) : BOOL
83 : eq(80, 23) : BOOL
84 : eq(80, 33) : BOOL
85 : eq(80, 36) : BOOL
86 : eq(80, 39) : BOOL
87 : eq(80, 42) : BOOL
88 : eq(80, 45) : BOOL
89 : eq(80, 48) : BOOL
90 : ite(89, 50, 51) : BV:8
91 : ite(88, 47, 90) : BV:8
92 : ite(87, 44, 91) : BV:8
93 : ite(86, 41, 92) : BV:8
94 : ite(85, 38, 93) : BV:8
95 : ite(84, 35, 94) : BV:8
96 : ite(83, 32, 95) : BV:8
97 : ite(82, 30, 96) : BV:8
98 : ite(81, 27, 97) : BV:8
99 : bvadd(22, 23) : BV:32
100 : eq(99, 25) : BOOL
101 : eq(99, 28) : BOOL
102 : eq(99, 23) : BOOL
103 : eq(99, 33) : BOOL
104 : eq(99, 36) : BOOL
105 : eq(99, 39) : BOOL
106 : eq(99, 42) : BOOL
107 : eq(99, 45) : BOOL
108 : eq(99, 48) : BOOL
109 : ite(108, 50, 51) : BV:8
110 : ite(107, 47, 109) : BV:8
111 : ite(106, 44, 110) : BV:8
112 : ite(105, 41, 111) : BV:8
113 : ite(104, 38, 112) : BV:8
114 : ite(103, 35, 113) : BV:8
115 : ite(102, 32, 114) : BV:8
116 : ite(101, 30, 115) : BV:8
117 : ite(100, 27, 116) : BV:8
118 : bvconcat(60, 79, 98, 117) : BV:32
119 : ite(19, 6, 118) : BV:32
120 : lambda(18, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(17, 120) : MAP[BV:32 -> BV:32]
122 : sum(1, 2, 121) : SUM[UNIT,MAP[BV:32 -> BV:32]]
123 : sym_const(122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 299068978 { 0x11d36e32 +1.65180039e164 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16563 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16564 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
25 : eq(23, 24) : BOOL
26 : 215 { 0xd7 -41 } : BV:8
27 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
28 : eq(23, 27) : BOOL
29 : 172 { 0xac -84 } : BV:8
30 : eq(23, 22) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
33 : eq(23, 32) : BOOL
34 : 83 { 0x53 } : BV:8
35 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
36 : eq(23, 35) : BOOL
37 : 212 { 0xd4 -44 } : BV:8
38 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
39 : eq(23, 38) : BOOL
40 : 153 { 0x99 -103 } : BV:8
41 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
42 : eq(23, 41) : BOOL
43 : 125 { 0x7d } : BV:8
44 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
45 : eq(23, 44) : BOOL
46 : 85 { 0x55 } : BV:8
47 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
48 : eq(23, 47) : BOOL
49 : 180 { 0xb4 -76 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : ite(25, 26, 58) : BV:8
60 : bvadd(8, 21, 22) : BV:32
61 : eq(60, 24) : BOOL
62 : eq(60, 27) : BOOL
63 : eq(60, 22) : BOOL
64 : eq(60, 32) : BOOL
65 : eq(60, 35) : BOOL
66 : eq(60, 38) : BOOL
67 : eq(60, 41) : BOOL
68 : eq(60, 44) : BOOL
69 : eq(60, 47) : BOOL
70 : ite(69, 49, 50) : BV:8
71 : ite(68, 46, 70) : BV:8
72 : ite(67, 43, 71) : BV:8
73 : ite(66, 40, 72) : BV:8
74 : ite(65, 37, 73) : BV:8
75 : ite(64, 34, 74) : BV:8
76 : ite(63, 31, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : ite(61, 26, 77) : BV:8
79 : bvadd(4, 21, 22) : BV:32
80 : eq(79, 24) : BOOL
81 : eq(79, 27) : BOOL
82 : eq(79, 22) : BOOL
83 : eq(79, 32) : BOOL
84 : eq(79, 35) : BOOL
85 : eq(79, 38) : BOOL
86 : eq(79, 41) : BOOL
87 : eq(79, 44) : BOOL
88 : eq(79, 47) : BOOL
89 : ite(88, 49, 50) : BV:8
90 : ite(87, 46, 89) : BV:8
91 : ite(86, 43, 90) : BV:8
92 : ite(85, 40, 91) : BV:8
93 : ite(84, 37, 92) : BV:8
94 : ite(83, 34, 93) : BV:8
95 : ite(82, 31, 94) : BV:8
96 : ite(81, 29, 95) : BV:8
97 : ite(80, 26, 96) : BV:8
98 : bvadd(21, 22) : BV:32
99 : eq(98, 24) : BOOL
100 : eq(98, 27) : BOOL
101 : eq(98, 22) : BOOL
102 : eq(98, 32) : BOOL
103 : eq(98, 35) : BOOL
104 : eq(98, 38) : BOOL
105 : eq(98, 41) : BOOL
106 : eq(98, 44) : BOOL
107 : eq(98, 47) : BOOL
108 : ite(107, 49, 50) : BV:8
109 : ite(106, 46, 108) : BV:8
110 : ite(105, 43, 109) : BV:8
111 : ite(104, 40, 110) : BV:8
112 : ite(103, 37, 111) : BV:8
113 : ite(102, 34, 112) : BV:8
114 : ite(101, 31, 113) : BV:8
115 : ite(100, 29, 114) : BV:8
116 : ite(99, 26, 115) : BV:8
117 : bvconcat(59, 78, 97, 116) : BV:32
118 : ite(18, 4, 117) : BV:32
119 : lambda(17, 118) : FUNCTION[BV:32 -> BV:32]
120 : map(16, 119) : MAP[BV:32 -> BV:32]
121 : sym_const(120) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 675186871 { 0x283e88b7 +1.48854720e209 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3224530904 { 0xc0326fd8 -1070436392 -1.39403820e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3224530907 { 0xc0326fdb -1070436389 -1.39403855e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2153743380 { 0x805f8414 -2141223916 -1.74621820e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2153743383 { 0x805f8417 -2141223913 -1.74621856e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2820112808 { 0xa81781a8 -1474854488 -1.18364429e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2820112811 { 0xa81781ab -1474854485 -1.18364465e209 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1560268477 ] -> true, [ 1560268478; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16474 : BV:32
2 : Lambda16475 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16479 : BV:32
2 : Lambda16480 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 215 { 0xd7 -41 } : BV:8
55 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
56 : eq(52, 55) : BOOL
57 : 172 { 0xac -84 } : BV:8
58 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
62 : eq(52, 61) : BOOL
63 : 83 { 0x53 } : BV:8
64 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
65 : eq(52, 64) : BOOL
66 : 212 { 0xd4 -44 } : BV:8
67 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
68 : eq(52, 67) : BOOL
69 : 153 { 0x99 -103 } : BV:8
70 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
71 : eq(52, 70) : BOOL
72 : 125 { 0x7d } : BV:8
73 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
74 : eq(52, 73) : BOOL
75 : 85 { 0x55 } : BV:8
76 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
77 : eq(52, 76) : BOOL
78 : 180 { 0xb4 -76 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : ite(59, 60, 85) : BV:8
87 : ite(56, 57, 86) : BV:8
88 : ite(53, 54, 87) : BV:8
89 : bvadd(73, 51) : BV:32
90 : eq(89, 50) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 58) : BOOL
93 : eq(89, 61) : BOOL
94 : eq(89, 64) : BOOL
95 : eq(89, 67) : BOOL
96 : eq(89, 70) : BOOL
97 : eq(89, 73) : BOOL
98 : eq(89, 76) : BOOL
99 : ite(98, 78, 79) : BV:8
100 : ite(97, 75, 99) : BV:8
101 : ite(96, 72, 100) : BV:8
102 : ite(95, 69, 101) : BV:8
103 : ite(94, 66, 102) : BV:8
104 : ite(93, 63, 103) : BV:8
105 : ite(92, 60, 104) : BV:8
106 : ite(91, 57, 105) : BV:8
107 : ite(90, 54, 106) : BV:8
108 : bvadd(76, 51) : BV:32
109 : eq(108, 50) : BOOL
110 : eq(108, 55) : BOOL
111 : eq(108, 58) : BOOL
112 : eq(108, 61) : BOOL
113 : eq(108, 64) : BOOL
114 : eq(108, 67) : BOOL
115 : eq(108, 70) : BOOL
116 : eq(108, 73) : BOOL
117 : eq(108, 76) : BOOL
118 : ite(117, 78, 79) : BV:8
119 : ite(116, 75, 118) : BV:8
120 : ite(115, 72, 119) : BV:8
121 : ite(114, 69, 120) : BV:8
122 : ite(113, 66, 121) : BV:8
123 : ite(112, 63, 122) : BV:8
124 : ite(111, 60, 123) : BV:8
125 : ite(110, 57, 124) : BV:8
126 : ite(109, 54, 125) : BV:8
127 : bvadd(64, 51) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : eq(127, 73) : BOOL
136 : eq(127, 76) : BOOL
137 : ite(136, 78, 79) : BV:8
138 : ite(135, 75, 137) : BV:8
139 : ite(134, 72, 138) : BV:8
140 : ite(133, 69, 139) : BV:8
141 : ite(132, 66, 140) : BV:8
142 : ite(131, 63, 141) : BV:8
143 : ite(130, 60, 142) : BV:8
144 : ite(129, 57, 143) : BV:8
145 : ite(128, 54, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(33, 49, 146) : BV:32
148 : eq(147, 50) : BOOL
149 : eq(147, 55) : BOOL
150 : eq(147, 58) : BOOL
151 : eq(147, 61) : BOOL
152 : eq(147, 64) : BOOL
153 : eq(147, 67) : BOOL
154 : eq(147, 70) : BOOL
155 : eq(147, 73) : BOOL
156 : eq(147, 76) : BOOL
157 : ite(156, 78, 79) : BV:8
158 : ite(155, 75, 157) : BV:8
159 : ite(154, 72, 158) : BV:8
160 : ite(153, 69, 159) : BV:8
161 : ite(152, 66, 160) : BV:8
162 : ite(151, 63, 161) : BV:8
163 : ite(150, 60, 162) : BV:8
164 : ite(149, 57, 163) : BV:8
165 : ite(148, 54, 164) : BV:8
166 : bvadd(37, 49, 146) : BV:32
167 : eq(166, 50) : BOOL
168 : eq(166, 55) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 61) : BOOL
171 : eq(166, 64) : BOOL
172 : eq(166, 67) : BOOL
173 : eq(166, 70) : BOOL
174 : eq(166, 73) : BOOL
175 : eq(166, 76) : BOOL
176 : ite(175, 78, 79) : BV:8
177 : ite(174, 75, 176) : BV:8
178 : ite(173, 72, 177) : BV:8
179 : ite(172, 69, 178) : BV:8
180 : ite(171, 66, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 60, 181) : BV:8
183 : ite(168, 57, 182) : BV:8
184 : ite(167, 54, 183) : BV:8
185 : bvadd(30, 49, 146) : BV:32
186 : eq(185, 50) : BOOL
187 : eq(185, 55) : BOOL
188 : eq(185, 58) : BOOL
189 : eq(185, 61) : BOOL
190 : eq(185, 64) : BOOL
191 : eq(185, 67) : BOOL
192 : eq(185, 70) : BOOL
193 : eq(185, 73) : BOOL
194 : eq(185, 76) : BOOL
195 : ite(194, 78, 79) : BV:8
196 : ite(193, 75, 195) : BV:8
197 : ite(192, 72, 196) : BV:8
198 : ite(191, 69, 197) : BV:8
199 : ite(190, 66, 198) : BV:8
200 : ite(189, 63, 199) : BV:8
201 : ite(188, 60, 200) : BV:8
202 : ite(187, 57, 201) : BV:8
203 : ite(186, 54, 202) : BV:8
204 : bvadd(49, 146) : BV:32
205 : eq(204, 50) : BOOL
206 : eq(204, 55) : BOOL
207 : eq(204, 58) : BOOL
208 : eq(204, 61) : BOOL
209 : eq(204, 64) : BOOL
210 : eq(204, 67) : BOOL
211 : eq(204, 70) : BOOL
212 : eq(204, 73) : BOOL
213 : eq(204, 76) : BOOL
214 : ite(213, 78, 79) : BV:8
215 : ite(212, 75, 214) : BV:8
216 : ite(211, 72, 215) : BV:8
217 : ite(210, 69, 216) : BV:8
218 : ite(209, 66, 217) : BV:8
219 : ite(208, 63, 218) : BV:8
220 : ite(207, 60, 219) : BV:8
221 : ite(206, 57, 220) : BV:8
222 : ite(205, 54, 221) : BV:8
223 : bvconcat(165, 184, 203, 222) : BV:32
224 : ite(6, 3, 223) : BV:32
225 : ite(47, 223, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1560268477 ] -> true, [ 1560268478; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16485 : BV:32
2 : Lambda16486 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16481 : BV:32
2 : Lambda16482 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 215 { 0xd7 -41 } : BV:8
15 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
16 : eq(12, 15) : BOOL
17 : 172 { 0xac -84 } : BV:8
18 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
22 : eq(12, 21) : BOOL
23 : 83 { 0x53 } : BV:8
24 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
25 : eq(12, 24) : BOOL
26 : 212 { 0xd4 -44 } : BV:8
27 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
28 : eq(12, 27) : BOOL
29 : 153 { 0x99 -103 } : BV:8
30 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
31 : eq(12, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
34 : eq(12, 33) : BOOL
35 : 85 { 0x55 } : BV:8
36 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
37 : eq(12, 36) : BOOL
38 : 180 { 0xb4 -76 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : ite(22, 23, 44) : BV:8
46 : ite(19, 20, 45) : BV:8
47 : ite(16, 17, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(33, 11) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 36) : BOOL
59 : ite(58, 38, 39) : BV:8
60 : ite(57, 35, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : bvadd(36, 11) : BV:32
69 : eq(68, 10) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 18) : BOOL
72 : eq(68, 21) : BOOL
73 : eq(68, 24) : BOOL
74 : eq(68, 27) : BOOL
75 : eq(68, 30) : BOOL
76 : eq(68, 33) : BOOL
77 : eq(68, 36) : BOOL
78 : ite(77, 38, 39) : BV:8
79 : ite(76, 35, 78) : BV:8
80 : ite(75, 32, 79) : BV:8
81 : ite(74, 29, 80) : BV:8
82 : ite(73, 26, 81) : BV:8
83 : ite(72, 23, 82) : BV:8
84 : ite(71, 20, 83) : BV:8
85 : ite(70, 17, 84) : BV:8
86 : ite(69, 14, 85) : BV:8
87 : bvadd(24, 11) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : eq(87, 33) : BOOL
96 : eq(87, 36) : BOOL
97 : ite(96, 38, 39) : BV:8
98 : ite(95, 35, 97) : BV:8
99 : ite(94, 32, 98) : BV:8
100 : ite(93, 29, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 23, 101) : BV:8
103 : ite(90, 20, 102) : BV:8
104 : ite(89, 17, 103) : BV:8
105 : ite(88, 14, 104) : BV:8
106 : bvconcat(48, 67, 86, 105) : BV:32
107 : bvadd(7, 9, 106) : BV:32
108 : eq(107, 10) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 18) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : eq(107, 30) : BOOL
115 : eq(107, 33) : BOOL
116 : eq(107, 36) : BOOL
117 : ite(116, 38, 39) : BV:8
118 : ite(115, 35, 117) : BV:8
119 : ite(114, 32, 118) : BV:8
120 : ite(113, 29, 119) : BV:8
121 : ite(112, 26, 120) : BV:8
122 : ite(111, 23, 121) : BV:8
123 : ite(110, 20, 122) : BV:8
124 : ite(109, 17, 123) : BV:8
125 : ite(108, 14, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 9, 106) : BV:32
128 : eq(127, 10) : BOOL
129 : eq(127, 15) : BOOL
130 : eq(127, 18) : BOOL
131 : eq(127, 21) : BOOL
132 : eq(127, 24) : BOOL
133 : eq(127, 27) : BOOL
134 : eq(127, 30) : BOOL
135 : eq(127, 33) : BOOL
136 : eq(127, 36) : BOOL
137 : ite(136, 38, 39) : BV:8
138 : ite(135, 35, 137) : BV:8
139 : ite(134, 32, 138) : BV:8
140 : ite(133, 29, 139) : BV:8
141 : ite(132, 26, 140) : BV:8
142 : ite(131, 23, 141) : BV:8
143 : ite(130, 20, 142) : BV:8
144 : ite(129, 17, 143) : BV:8
145 : ite(128, 14, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 9, 106) : BV:32
148 : eq(147, 10) : BOOL
149 : eq(147, 15) : BOOL
150 : eq(147, 18) : BOOL
151 : eq(147, 21) : BOOL
152 : eq(147, 24) : BOOL
153 : eq(147, 27) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : eq(147, 36) : BOOL
157 : ite(156, 38, 39) : BV:8
158 : ite(155, 35, 157) : BV:8
159 : ite(154, 32, 158) : BV:8
160 : ite(153, 29, 159) : BV:8
161 : ite(152, 26, 160) : BV:8
162 : ite(151, 23, 161) : BV:8
163 : ite(150, 20, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : ite(148, 14, 164) : BV:8
166 : bvadd(9, 106) : BV:32
167 : eq(166, 10) : BOOL
168 : eq(166, 15) : BOOL
169 : eq(166, 18) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 24) : BOOL
172 : eq(166, 27) : BOOL
173 : eq(166, 30) : BOOL
174 : eq(166, 33) : BOOL
175 : eq(166, 36) : BOOL
176 : ite(175, 38, 39) : BV:8
177 : ite(174, 35, 176) : BV:8
178 : ite(173, 32, 177) : BV:8
179 : ite(172, 29, 178) : BV:8
180 : ite(171, 26, 179) : BV:8
181 : ite(170, 23, 180) : BV:8
182 : ite(169, 20, 181) : BV:8
183 : ite(168, 17, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : bvconcat(125, 145, 165, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : lambda(1, 2, 186) : FUNCTION[BV:32,BV:32 -> BV:32]
188 : sym_const(187) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16492 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16496 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16500 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3746274679
=counter_example_end
=global nodece 65 num_edges_traversed 2
=global nodece 65 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 66
=global nodece 66 nodece z3.ce6582.num_edges_traversed3
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3.ce6582 80a8663fcd66e27bcedd8d19a4fda2e
=input.spec-%var-x-1
1 : Lambda16547 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16550 : BV:32
18 : Lambda16548 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16549 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 215 { 0xd7 -41 } : BV:8
82 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
83 : eq(79, 82) : BOOL
84 : 172 { 0xac -84 } : BV:8
85 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
89 : eq(79, 88) : BOOL
90 : 83 { 0x53 } : BV:8
91 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
92 : eq(79, 91) : BOOL
93 : 212 { 0xd4 -44 } : BV:8
94 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
95 : eq(79, 94) : BOOL
96 : 153 { 0x99 -103 } : BV:8
97 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
98 : eq(79, 97) : BOOL
99 : 125 { 0x7d } : BV:8
100 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
101 : eq(79, 100) : BOOL
102 : 85 { 0x55 } : BV:8
103 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
104 : eq(79, 103) : BOOL
105 : 180 { 0xb4 -76 } : BV:8
106 : 0 { 0x0 } : BV:8
107 : ite(104, 105, 106) : BV:8
108 : ite(101, 102, 107) : BV:8
109 : ite(98, 99, 108) : BV:8
110 : ite(95, 96, 109) : BV:8
111 : ite(92, 93, 110) : BV:8
112 : ite(89, 90, 111) : BV:8
113 : ite(86, 87, 112) : BV:8
114 : ite(83, 84, 113) : BV:8
115 : ite(80, 81, 114) : BV:8
116 : bvadd(100, 78) : BV:32
117 : eq(116, 77) : BOOL
118 : eq(116, 82) : BOOL
119 : eq(116, 85) : BOOL
120 : eq(116, 88) : BOOL
121 : eq(116, 91) : BOOL
122 : eq(116, 94) : BOOL
123 : eq(116, 97) : BOOL
124 : eq(116, 100) : BOOL
125 : eq(116, 103) : BOOL
126 : ite(125, 105, 106) : BV:8
127 : ite(124, 102, 126) : BV:8
128 : ite(123, 99, 127) : BV:8
129 : ite(122, 96, 128) : BV:8
130 : ite(121, 93, 129) : BV:8
131 : ite(120, 90, 130) : BV:8
132 : ite(119, 87, 131) : BV:8
133 : ite(118, 84, 132) : BV:8
134 : ite(117, 81, 133) : BV:8
135 : bvadd(103, 78) : BV:32
136 : eq(135, 77) : BOOL
137 : eq(135, 82) : BOOL
138 : eq(135, 85) : BOOL
139 : eq(135, 88) : BOOL
140 : eq(135, 91) : BOOL
141 : eq(135, 94) : BOOL
142 : eq(135, 97) : BOOL
143 : eq(135, 100) : BOOL
144 : eq(135, 103) : BOOL
145 : ite(144, 105, 106) : BV:8
146 : ite(143, 102, 145) : BV:8
147 : ite(142, 99, 146) : BV:8
148 : ite(141, 96, 147) : BV:8
149 : ite(140, 93, 148) : BV:8
150 : ite(139, 90, 149) : BV:8
151 : ite(138, 87, 150) : BV:8
152 : ite(137, 84, 151) : BV:8
153 : ite(136, 81, 152) : BV:8
154 : bvadd(91, 78) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : eq(154, 100) : BOOL
163 : eq(154, 103) : BOOL
164 : ite(163, 105, 106) : BV:8
165 : ite(162, 102, 164) : BV:8
166 : ite(161, 99, 165) : BV:8
167 : ite(160, 96, 166) : BV:8
168 : ite(159, 93, 167) : BV:8
169 : ite(158, 90, 168) : BV:8
170 : ite(157, 87, 169) : BV:8
171 : ite(156, 84, 170) : BV:8
172 : ite(155, 81, 171) : BV:8
173 : bvconcat(115, 134, 153, 172) : BV:32
174 : bvadd(37, 76, 173) : BV:32
175 : eq(174, 77) : BOOL
176 : eq(174, 82) : BOOL
177 : eq(174, 85) : BOOL
178 : eq(174, 88) : BOOL
179 : eq(174, 91) : BOOL
180 : eq(174, 94) : BOOL
181 : eq(174, 97) : BOOL
182 : eq(174, 100) : BOOL
183 : eq(174, 103) : BOOL
184 : ite(183, 105, 106) : BV:8
185 : ite(182, 102, 184) : BV:8
186 : ite(181, 99, 185) : BV:8
187 : ite(180, 96, 186) : BV:8
188 : ite(179, 93, 187) : BV:8
189 : ite(178, 90, 188) : BV:8
190 : ite(177, 87, 189) : BV:8
191 : ite(176, 84, 190) : BV:8
192 : ite(175, 81, 191) : BV:8
193 : bvadd(41, 76, 173) : BV:32
194 : eq(193, 77) : BOOL
195 : eq(193, 82) : BOOL
196 : eq(193, 85) : BOOL
197 : eq(193, 88) : BOOL
198 : eq(193, 91) : BOOL
199 : eq(193, 94) : BOOL
200 : eq(193, 97) : BOOL
201 : eq(193, 100) : BOOL
202 : eq(193, 103) : BOOL
203 : ite(202, 105, 106) : BV:8
204 : ite(201, 102, 203) : BV:8
205 : ite(200, 99, 204) : BV:8
206 : ite(199, 96, 205) : BV:8
207 : ite(198, 93, 206) : BV:8
208 : ite(197, 90, 207) : BV:8
209 : ite(196, 87, 208) : BV:8
210 : ite(195, 84, 209) : BV:8
211 : ite(194, 81, 210) : BV:8
212 : bvadd(34, 76, 173) : BV:32
213 : eq(212, 77) : BOOL
214 : eq(212, 82) : BOOL
215 : eq(212, 85) : BOOL
216 : eq(212, 88) : BOOL
217 : eq(212, 91) : BOOL
218 : eq(212, 94) : BOOL
219 : eq(212, 97) : BOOL
220 : eq(212, 100) : BOOL
221 : eq(212, 103) : BOOL
222 : ite(221, 105, 106) : BV:8
223 : ite(220, 102, 222) : BV:8
224 : ite(219, 99, 223) : BV:8
225 : ite(218, 96, 224) : BV:8
226 : ite(217, 93, 225) : BV:8
227 : ite(216, 90, 226) : BV:8
228 : ite(215, 87, 227) : BV:8
229 : ite(214, 84, 228) : BV:8
230 : ite(213, 81, 229) : BV:8
231 : bvadd(76, 173) : BV:32
232 : eq(231, 77) : BOOL
233 : eq(231, 82) : BOOL
234 : eq(231, 85) : BOOL
235 : eq(231, 88) : BOOL
236 : eq(231, 91) : BOOL
237 : eq(231, 94) : BOOL
238 : eq(231, 97) : BOOL
239 : eq(231, 100) : BOOL
240 : eq(231, 103) : BOOL
241 : ite(240, 105, 106) : BV:8
242 : ite(239, 102, 241) : BV:8
243 : ite(238, 99, 242) : BV:8
244 : ite(237, 96, 243) : BV:8
245 : ite(236, 93, 244) : BV:8
246 : ite(235, 90, 245) : BV:8
247 : ite(234, 87, 246) : BV:8
248 : ite(233, 84, 247) : BV:8
249 : ite(232, 81, 248) : BV:8
250 : bvconcat(192, 211, 230, 249) : BV:32
251 : ite(55, 2, 250) : BV:32
252 : ite(74, 250, 251) : BV:32
253 : ite(55, 2, 252) : BV:32
254 : lambda(52, 253) : FUNCTION[BV:32 -> BV:32]
255 : map(51, 254) : MAP[BV:32 -> BV:32]
256 : lambda(17, 255) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
257 : map(16, 256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
258 : sym_const(257) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16555 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16558 : BV:32
18 : Lambda16556 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16557 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 215 { 0xd7 -41 } : BV:8
63 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
64 : eq(60, 63) : BOOL
65 : 172 { 0xac -84 } : BV:8
66 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
70 : eq(60, 69) : BOOL
71 : 83 { 0x53 } : BV:8
72 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
73 : eq(60, 72) : BOOL
74 : 212 { 0xd4 -44 } : BV:8
75 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
76 : eq(60, 75) : BOOL
77 : 153 { 0x99 -103 } : BV:8
78 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
79 : eq(60, 78) : BOOL
80 : 125 { 0x7d } : BV:8
81 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
82 : eq(60, 81) : BOOL
83 : 85 { 0x55 } : BV:8
84 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
85 : eq(60, 84) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(76, 77, 90) : BV:8
92 : ite(73, 74, 91) : BV:8
93 : ite(70, 71, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : ite(64, 65, 94) : BV:8
96 : ite(61, 62, 95) : BV:8
97 : bvadd(81, 59) : BV:32
98 : eq(97, 58) : BOOL
99 : eq(97, 63) : BOOL
100 : eq(97, 66) : BOOL
101 : eq(97, 69) : BOOL
102 : eq(97, 72) : BOOL
103 : eq(97, 75) : BOOL
104 : eq(97, 78) : BOOL
105 : eq(97, 81) : BOOL
106 : eq(97, 84) : BOOL
107 : ite(106, 86, 87) : BV:8
108 : ite(105, 83, 107) : BV:8
109 : ite(104, 80, 108) : BV:8
110 : ite(103, 77, 109) : BV:8
111 : ite(102, 74, 110) : BV:8
112 : ite(101, 71, 111) : BV:8
113 : ite(100, 68, 112) : BV:8
114 : ite(99, 65, 113) : BV:8
115 : ite(98, 62, 114) : BV:8
116 : bvadd(84, 59) : BV:32
117 : eq(116, 58) : BOOL
118 : eq(116, 63) : BOOL
119 : eq(116, 66) : BOOL
120 : eq(116, 69) : BOOL
121 : eq(116, 72) : BOOL
122 : eq(116, 75) : BOOL
123 : eq(116, 78) : BOOL
124 : eq(116, 81) : BOOL
125 : eq(116, 84) : BOOL
126 : ite(125, 86, 87) : BV:8
127 : ite(124, 83, 126) : BV:8
128 : ite(123, 80, 127) : BV:8
129 : ite(122, 77, 128) : BV:8
130 : ite(121, 74, 129) : BV:8
131 : ite(120, 71, 130) : BV:8
132 : ite(119, 68, 131) : BV:8
133 : ite(118, 65, 132) : BV:8
134 : ite(117, 62, 133) : BV:8
135 : bvadd(72, 59) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : eq(135, 81) : BOOL
144 : eq(135, 84) : BOOL
145 : ite(144, 86, 87) : BV:8
146 : ite(143, 83, 145) : BV:8
147 : ite(142, 80, 146) : BV:8
148 : ite(141, 77, 147) : BV:8
149 : ite(140, 74, 148) : BV:8
150 : ite(139, 71, 149) : BV:8
151 : ite(138, 68, 150) : BV:8
152 : ite(137, 65, 151) : BV:8
153 : ite(136, 62, 152) : BV:8
154 : bvconcat(96, 115, 134, 153) : BV:32
155 : bvadd(37, 57, 154) : BV:32
156 : eq(155, 58) : BOOL
157 : eq(155, 63) : BOOL
158 : eq(155, 66) : BOOL
159 : eq(155, 69) : BOOL
160 : eq(155, 72) : BOOL
161 : eq(155, 75) : BOOL
162 : eq(155, 78) : BOOL
163 : eq(155, 81) : BOOL
164 : eq(155, 84) : BOOL
165 : ite(164, 86, 87) : BV:8
166 : ite(163, 83, 165) : BV:8
167 : ite(162, 80, 166) : BV:8
168 : ite(161, 77, 167) : BV:8
169 : ite(160, 74, 168) : BV:8
170 : ite(159, 71, 169) : BV:8
171 : ite(158, 68, 170) : BV:8
172 : ite(157, 65, 171) : BV:8
173 : ite(156, 62, 172) : BV:8
174 : bvadd(41, 57, 154) : BV:32
175 : eq(174, 58) : BOOL
176 : eq(174, 63) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 69) : BOOL
179 : eq(174, 72) : BOOL
180 : eq(174, 75) : BOOL
181 : eq(174, 78) : BOOL
182 : eq(174, 81) : BOOL
183 : eq(174, 84) : BOOL
184 : ite(183, 86, 87) : BV:8
185 : ite(182, 83, 184) : BV:8
186 : ite(181, 80, 185) : BV:8
187 : ite(180, 77, 186) : BV:8
188 : ite(179, 74, 187) : BV:8
189 : ite(178, 71, 188) : BV:8
190 : ite(177, 68, 189) : BV:8
191 : ite(176, 65, 190) : BV:8
192 : ite(175, 62, 191) : BV:8
193 : bvadd(34, 57, 154) : BV:32
194 : eq(193, 58) : BOOL
195 : eq(193, 63) : BOOL
196 : eq(193, 66) : BOOL
197 : eq(193, 69) : BOOL
198 : eq(193, 72) : BOOL
199 : eq(193, 75) : BOOL
200 : eq(193, 78) : BOOL
201 : eq(193, 81) : BOOL
202 : eq(193, 84) : BOOL
203 : ite(202, 86, 87) : BV:8
204 : ite(201, 83, 203) : BV:8
205 : ite(200, 80, 204) : BV:8
206 : ite(199, 77, 205) : BV:8
207 : ite(198, 74, 206) : BV:8
208 : ite(197, 71, 207) : BV:8
209 : ite(196, 68, 208) : BV:8
210 : ite(195, 65, 209) : BV:8
211 : ite(194, 62, 210) : BV:8
212 : bvadd(57, 154) : BV:32
213 : eq(212, 58) : BOOL
214 : eq(212, 63) : BOOL
215 : eq(212, 66) : BOOL
216 : eq(212, 69) : BOOL
217 : eq(212, 72) : BOOL
218 : eq(212, 75) : BOOL
219 : eq(212, 78) : BOOL
220 : eq(212, 81) : BOOL
221 : eq(212, 84) : BOOL
222 : ite(221, 86, 87) : BV:8
223 : ite(220, 83, 222) : BV:8
224 : ite(219, 80, 223) : BV:8
225 : ite(218, 77, 224) : BV:8
226 : ite(217, 74, 225) : BV:8
227 : ite(216, 71, 226) : BV:8
228 : ite(215, 68, 227) : BV:8
229 : ite(214, 65, 228) : BV:8
230 : ite(213, 62, 229) : BV:8
231 : bvconcat(173, 192, 211, 230) : BV:32
232 : ite(55, 2, 231) : BV:32
233 : lambda(52, 232) : FUNCTION[BV:32 -> BV:32]
234 : map(51, 233) : MAP[BV:32 -> BV:32]
235 : lambda(17, 234) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
236 : map(16, 235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
237 : sym_const(236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
=input.dst.llvm-%n
1 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1208156159 ] -> 0, [ 1208156160; 1208156160 ] -> 172, [ 1208156161; 1208156161 ] -> 125, [ 1208156162; 1208156162 ] -> 83, [ 1208156163; 1208156163 ] -> 153, [ 1208156164; 1208156164 ] -> 212, [ 1208156165; 1208156165 ] -> 180, [ 1208156166; 1208156166 ] -> 85, [ 1208156167; 1208156167 ] -> 215, [ 1208156168; 2572385707 ] -> 0, [ 2572385708; 2572385708 ] -> 1, [ 2572385709; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2153743379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2153743380; 2153743383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2153743384; 2820112807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820112808; 2820112811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2820112812; 3224530903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3224530904; 3224530907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3224530908; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2820112808 { 0xa81781a8 -1474854488 -1.18364429e209 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3224530904 { 0xc0326fd8 -1070436392 -1.39403820e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2153743380 { 0x805f8414 -2141223916 -1.74621820e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1645401127 { 0x6212d427 +1.14709937e69 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1667735097 { 0x63679e39 +1.80951607e71 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3224530904 { 0xc0326fd8 -1070436392 -1.39403820e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3224530907 { 0xc0326fdb -1070436389 -1.39403855e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2153743380 { 0x805f8414 -2141223916 -1.74621820e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2153743383 { 0x805f8417 -2141223913 -1.74621856e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2820112808 { 0xa81781a8 -1474854488 -1.18364429e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2820112811 { 0xa81781ab -1474854485 -1.18364465e209 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1560268477 ] -> true, [ 1560268478; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16474 : BV:32
2 : Lambda16475 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16479 : BV:32
2 : Lambda16480 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 215 { 0xd7 -41 } : BV:8
55 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
56 : eq(52, 55) : BOOL
57 : 172 { 0xac -84 } : BV:8
58 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
62 : eq(52, 61) : BOOL
63 : 83 { 0x53 } : BV:8
64 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
65 : eq(52, 64) : BOOL
66 : 212 { 0xd4 -44 } : BV:8
67 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
68 : eq(52, 67) : BOOL
69 : 153 { 0x99 -103 } : BV:8
70 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
71 : eq(52, 70) : BOOL
72 : 125 { 0x7d } : BV:8
73 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
74 : eq(52, 73) : BOOL
75 : 85 { 0x55 } : BV:8
76 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
77 : eq(52, 76) : BOOL
78 : 180 { 0xb4 -76 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : ite(59, 60, 85) : BV:8
87 : ite(56, 57, 86) : BV:8
88 : ite(53, 54, 87) : BV:8
89 : bvadd(73, 51) : BV:32
90 : eq(89, 50) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 58) : BOOL
93 : eq(89, 61) : BOOL
94 : eq(89, 64) : BOOL
95 : eq(89, 67) : BOOL
96 : eq(89, 70) : BOOL
97 : eq(89, 73) : BOOL
98 : eq(89, 76) : BOOL
99 : ite(98, 78, 79) : BV:8
100 : ite(97, 75, 99) : BV:8
101 : ite(96, 72, 100) : BV:8
102 : ite(95, 69, 101) : BV:8
103 : ite(94, 66, 102) : BV:8
104 : ite(93, 63, 103) : BV:8
105 : ite(92, 60, 104) : BV:8
106 : ite(91, 57, 105) : BV:8
107 : ite(90, 54, 106) : BV:8
108 : bvadd(76, 51) : BV:32
109 : eq(108, 50) : BOOL
110 : eq(108, 55) : BOOL
111 : eq(108, 58) : BOOL
112 : eq(108, 61) : BOOL
113 : eq(108, 64) : BOOL
114 : eq(108, 67) : BOOL
115 : eq(108, 70) : BOOL
116 : eq(108, 73) : BOOL
117 : eq(108, 76) : BOOL
118 : ite(117, 78, 79) : BV:8
119 : ite(116, 75, 118) : BV:8
120 : ite(115, 72, 119) : BV:8
121 : ite(114, 69, 120) : BV:8
122 : ite(113, 66, 121) : BV:8
123 : ite(112, 63, 122) : BV:8
124 : ite(111, 60, 123) : BV:8
125 : ite(110, 57, 124) : BV:8
126 : ite(109, 54, 125) : BV:8
127 : bvadd(64, 51) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : eq(127, 73) : BOOL
136 : eq(127, 76) : BOOL
137 : ite(136, 78, 79) : BV:8
138 : ite(135, 75, 137) : BV:8
139 : ite(134, 72, 138) : BV:8
140 : ite(133, 69, 139) : BV:8
141 : ite(132, 66, 140) : BV:8
142 : ite(131, 63, 141) : BV:8
143 : ite(130, 60, 142) : BV:8
144 : ite(129, 57, 143) : BV:8
145 : ite(128, 54, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(33, 49, 146) : BV:32
148 : eq(147, 50) : BOOL
149 : eq(147, 55) : BOOL
150 : eq(147, 58) : BOOL
151 : eq(147, 61) : BOOL
152 : eq(147, 64) : BOOL
153 : eq(147, 67) : BOOL
154 : eq(147, 70) : BOOL
155 : eq(147, 73) : BOOL
156 : eq(147, 76) : BOOL
157 : ite(156, 78, 79) : BV:8
158 : ite(155, 75, 157) : BV:8
159 : ite(154, 72, 158) : BV:8
160 : ite(153, 69, 159) : BV:8
161 : ite(152, 66, 160) : BV:8
162 : ite(151, 63, 161) : BV:8
163 : ite(150, 60, 162) : BV:8
164 : ite(149, 57, 163) : BV:8
165 : ite(148, 54, 164) : BV:8
166 : bvadd(37, 49, 146) : BV:32
167 : eq(166, 50) : BOOL
168 : eq(166, 55) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 61) : BOOL
171 : eq(166, 64) : BOOL
172 : eq(166, 67) : BOOL
173 : eq(166, 70) : BOOL
174 : eq(166, 73) : BOOL
175 : eq(166, 76) : BOOL
176 : ite(175, 78, 79) : BV:8
177 : ite(174, 75, 176) : BV:8
178 : ite(173, 72, 177) : BV:8
179 : ite(172, 69, 178) : BV:8
180 : ite(171, 66, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 60, 181) : BV:8
183 : ite(168, 57, 182) : BV:8
184 : ite(167, 54, 183) : BV:8
185 : bvadd(30, 49, 146) : BV:32
186 : eq(185, 50) : BOOL
187 : eq(185, 55) : BOOL
188 : eq(185, 58) : BOOL
189 : eq(185, 61) : BOOL
190 : eq(185, 64) : BOOL
191 : eq(185, 67) : BOOL
192 : eq(185, 70) : BOOL
193 : eq(185, 73) : BOOL
194 : eq(185, 76) : BOOL
195 : ite(194, 78, 79) : BV:8
196 : ite(193, 75, 195) : BV:8
197 : ite(192, 72, 196) : BV:8
198 : ite(191, 69, 197) : BV:8
199 : ite(190, 66, 198) : BV:8
200 : ite(189, 63, 199) : BV:8
201 : ite(188, 60, 200) : BV:8
202 : ite(187, 57, 201) : BV:8
203 : ite(186, 54, 202) : BV:8
204 : bvadd(49, 146) : BV:32
205 : eq(204, 50) : BOOL
206 : eq(204, 55) : BOOL
207 : eq(204, 58) : BOOL
208 : eq(204, 61) : BOOL
209 : eq(204, 64) : BOOL
210 : eq(204, 67) : BOOL
211 : eq(204, 70) : BOOL
212 : eq(204, 73) : BOOL
213 : eq(204, 76) : BOOL
214 : ite(213, 78, 79) : BV:8
215 : ite(212, 75, 214) : BV:8
216 : ite(211, 72, 215) : BV:8
217 : ite(210, 69, 216) : BV:8
218 : ite(209, 66, 217) : BV:8
219 : ite(208, 63, 218) : BV:8
220 : ite(207, 60, 219) : BV:8
221 : ite(206, 57, 220) : BV:8
222 : ite(205, 54, 221) : BV:8
223 : bvconcat(165, 184, 203, 222) : BV:32
224 : ite(6, 3, 223) : BV:32
225 : ite(47, 223, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1560268477 ] -> true, [ 1560268478; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16485 : BV:32
2 : Lambda16486 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16481 : BV:32
2 : Lambda16482 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 215 { 0xd7 -41 } : BV:8
15 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
16 : eq(12, 15) : BOOL
17 : 172 { 0xac -84 } : BV:8
18 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
22 : eq(12, 21) : BOOL
23 : 83 { 0x53 } : BV:8
24 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
25 : eq(12, 24) : BOOL
26 : 212 { 0xd4 -44 } : BV:8
27 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
28 : eq(12, 27) : BOOL
29 : 153 { 0x99 -103 } : BV:8
30 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
31 : eq(12, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
34 : eq(12, 33) : BOOL
35 : 85 { 0x55 } : BV:8
36 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
37 : eq(12, 36) : BOOL
38 : 180 { 0xb4 -76 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : ite(22, 23, 44) : BV:8
46 : ite(19, 20, 45) : BV:8
47 : ite(16, 17, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(33, 11) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 36) : BOOL
59 : ite(58, 38, 39) : BV:8
60 : ite(57, 35, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : bvadd(36, 11) : BV:32
69 : eq(68, 10) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 18) : BOOL
72 : eq(68, 21) : BOOL
73 : eq(68, 24) : BOOL
74 : eq(68, 27) : BOOL
75 : eq(68, 30) : BOOL
76 : eq(68, 33) : BOOL
77 : eq(68, 36) : BOOL
78 : ite(77, 38, 39) : BV:8
79 : ite(76, 35, 78) : BV:8
80 : ite(75, 32, 79) : BV:8
81 : ite(74, 29, 80) : BV:8
82 : ite(73, 26, 81) : BV:8
83 : ite(72, 23, 82) : BV:8
84 : ite(71, 20, 83) : BV:8
85 : ite(70, 17, 84) : BV:8
86 : ite(69, 14, 85) : BV:8
87 : bvadd(24, 11) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : eq(87, 33) : BOOL
96 : eq(87, 36) : BOOL
97 : ite(96, 38, 39) : BV:8
98 : ite(95, 35, 97) : BV:8
99 : ite(94, 32, 98) : BV:8
100 : ite(93, 29, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 23, 101) : BV:8
103 : ite(90, 20, 102) : BV:8
104 : ite(89, 17, 103) : BV:8
105 : ite(88, 14, 104) : BV:8
106 : bvconcat(48, 67, 86, 105) : BV:32
107 : bvadd(7, 9, 106) : BV:32
108 : eq(107, 10) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 18) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : eq(107, 30) : BOOL
115 : eq(107, 33) : BOOL
116 : eq(107, 36) : BOOL
117 : ite(116, 38, 39) : BV:8
118 : ite(115, 35, 117) : BV:8
119 : ite(114, 32, 118) : BV:8
120 : ite(113, 29, 119) : BV:8
121 : ite(112, 26, 120) : BV:8
122 : ite(111, 23, 121) : BV:8
123 : ite(110, 20, 122) : BV:8
124 : ite(109, 17, 123) : BV:8
125 : ite(108, 14, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 9, 106) : BV:32
128 : eq(127, 10) : BOOL
129 : eq(127, 15) : BOOL
130 : eq(127, 18) : BOOL
131 : eq(127, 21) : BOOL
132 : eq(127, 24) : BOOL
133 : eq(127, 27) : BOOL
134 : eq(127, 30) : BOOL
135 : eq(127, 33) : BOOL
136 : eq(127, 36) : BOOL
137 : ite(136, 38, 39) : BV:8
138 : ite(135, 35, 137) : BV:8
139 : ite(134, 32, 138) : BV:8
140 : ite(133, 29, 139) : BV:8
141 : ite(132, 26, 140) : BV:8
142 : ite(131, 23, 141) : BV:8
143 : ite(130, 20, 142) : BV:8
144 : ite(129, 17, 143) : BV:8
145 : ite(128, 14, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 9, 106) : BV:32
148 : eq(147, 10) : BOOL
149 : eq(147, 15) : BOOL
150 : eq(147, 18) : BOOL
151 : eq(147, 21) : BOOL
152 : eq(147, 24) : BOOL
153 : eq(147, 27) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : eq(147, 36) : BOOL
157 : ite(156, 38, 39) : BV:8
158 : ite(155, 35, 157) : BV:8
159 : ite(154, 32, 158) : BV:8
160 : ite(153, 29, 159) : BV:8
161 : ite(152, 26, 160) : BV:8
162 : ite(151, 23, 161) : BV:8
163 : ite(150, 20, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : ite(148, 14, 164) : BV:8
166 : bvadd(9, 106) : BV:32
167 : eq(166, 10) : BOOL
168 : eq(166, 15) : BOOL
169 : eq(166, 18) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 24) : BOOL
172 : eq(166, 27) : BOOL
173 : eq(166, 30) : BOOL
174 : eq(166, 33) : BOOL
175 : eq(166, 36) : BOOL
176 : ite(175, 38, 39) : BV:8
177 : ite(174, 35, 176) : BV:8
178 : ite(173, 32, 177) : BV:8
179 : ite(172, 29, 178) : BV:8
180 : ite(171, 26, 179) : BV:8
181 : ite(170, 23, 180) : BV:8
182 : ite(169, 20, 181) : BV:8
183 : ite(168, 17, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : bvconcat(125, 145, 165, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : lambda(1, 2, 186) : FUNCTION[BV:32,BV:32 -> BV:32]
188 : sym_const(187) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16492 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16496 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16500 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1301522271
=counter_example_end
=global nodece 66 num_edges_traversed 3
=global nodece 66 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 67
=global nodece 67 nodece z3.ce6602.num_edges_traversed4
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3.ce6602 5971adb495399b27ccff2a6938ee256a
=input.spec-%var-x-1
1 : Lambda16547 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16550 : BV:32
18 : Lambda16548 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16549 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 215 { 0xd7 -41 } : BV:8
82 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
83 : eq(79, 82) : BOOL
84 : 172 { 0xac -84 } : BV:8
85 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
86 : eq(79, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
89 : eq(79, 88) : BOOL
90 : 83 { 0x53 } : BV:8
91 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
92 : eq(79, 91) : BOOL
93 : 212 { 0xd4 -44 } : BV:8
94 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
95 : eq(79, 94) : BOOL
96 : 153 { 0x99 -103 } : BV:8
97 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
98 : eq(79, 97) : BOOL
99 : 125 { 0x7d } : BV:8
100 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
101 : eq(79, 100) : BOOL
102 : 85 { 0x55 } : BV:8
103 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
104 : eq(79, 103) : BOOL
105 : 180 { 0xb4 -76 } : BV:8
106 : 0 { 0x0 } : BV:8
107 : ite(104, 105, 106) : BV:8
108 : ite(101, 102, 107) : BV:8
109 : ite(98, 99, 108) : BV:8
110 : ite(95, 96, 109) : BV:8
111 : ite(92, 93, 110) : BV:8
112 : ite(89, 90, 111) : BV:8
113 : ite(86, 87, 112) : BV:8
114 : ite(83, 84, 113) : BV:8
115 : ite(80, 81, 114) : BV:8
116 : bvadd(100, 78) : BV:32
117 : eq(116, 77) : BOOL
118 : eq(116, 82) : BOOL
119 : eq(116, 85) : BOOL
120 : eq(116, 88) : BOOL
121 : eq(116, 91) : BOOL
122 : eq(116, 94) : BOOL
123 : eq(116, 97) : BOOL
124 : eq(116, 100) : BOOL
125 : eq(116, 103) : BOOL
126 : ite(125, 105, 106) : BV:8
127 : ite(124, 102, 126) : BV:8
128 : ite(123, 99, 127) : BV:8
129 : ite(122, 96, 128) : BV:8
130 : ite(121, 93, 129) : BV:8
131 : ite(120, 90, 130) : BV:8
132 : ite(119, 87, 131) : BV:8
133 : ite(118, 84, 132) : BV:8
134 : ite(117, 81, 133) : BV:8
135 : bvadd(103, 78) : BV:32
136 : eq(135, 77) : BOOL
137 : eq(135, 82) : BOOL
138 : eq(135, 85) : BOOL
139 : eq(135, 88) : BOOL
140 : eq(135, 91) : BOOL
141 : eq(135, 94) : BOOL
142 : eq(135, 97) : BOOL
143 : eq(135, 100) : BOOL
144 : eq(135, 103) : BOOL
145 : ite(144, 105, 106) : BV:8
146 : ite(143, 102, 145) : BV:8
147 : ite(142, 99, 146) : BV:8
148 : ite(141, 96, 147) : BV:8
149 : ite(140, 93, 148) : BV:8
150 : ite(139, 90, 149) : BV:8
151 : ite(138, 87, 150) : BV:8
152 : ite(137, 84, 151) : BV:8
153 : ite(136, 81, 152) : BV:8
154 : bvadd(91, 78) : BV:32
155 : eq(154, 77) : BOOL
156 : eq(154, 82) : BOOL
157 : eq(154, 85) : BOOL
158 : eq(154, 88) : BOOL
159 : eq(154, 91) : BOOL
160 : eq(154, 94) : BOOL
161 : eq(154, 97) : BOOL
162 : eq(154, 100) : BOOL
163 : eq(154, 103) : BOOL
164 : ite(163, 105, 106) : BV:8
165 : ite(162, 102, 164) : BV:8
166 : ite(161, 99, 165) : BV:8
167 : ite(160, 96, 166) : BV:8
168 : ite(159, 93, 167) : BV:8
169 : ite(158, 90, 168) : BV:8
170 : ite(157, 87, 169) : BV:8
171 : ite(156, 84, 170) : BV:8
172 : ite(155, 81, 171) : BV:8
173 : bvconcat(115, 134, 153, 172) : BV:32
174 : bvadd(37, 76, 173) : BV:32
175 : eq(174, 77) : BOOL
176 : eq(174, 82) : BOOL
177 : eq(174, 85) : BOOL
178 : eq(174, 88) : BOOL
179 : eq(174, 91) : BOOL
180 : eq(174, 94) : BOOL
181 : eq(174, 97) : BOOL
182 : eq(174, 100) : BOOL
183 : eq(174, 103) : BOOL
184 : ite(183, 105, 106) : BV:8
185 : ite(182, 102, 184) : BV:8
186 : ite(181, 99, 185) : BV:8
187 : ite(180, 96, 186) : BV:8
188 : ite(179, 93, 187) : BV:8
189 : ite(178, 90, 188) : BV:8
190 : ite(177, 87, 189) : BV:8
191 : ite(176, 84, 190) : BV:8
192 : ite(175, 81, 191) : BV:8
193 : bvadd(41, 76, 173) : BV:32
194 : eq(193, 77) : BOOL
195 : eq(193, 82) : BOOL
196 : eq(193, 85) : BOOL
197 : eq(193, 88) : BOOL
198 : eq(193, 91) : BOOL
199 : eq(193, 94) : BOOL
200 : eq(193, 97) : BOOL
201 : eq(193, 100) : BOOL
202 : eq(193, 103) : BOOL
203 : ite(202, 105, 106) : BV:8
204 : ite(201, 102, 203) : BV:8
205 : ite(200, 99, 204) : BV:8
206 : ite(199, 96, 205) : BV:8
207 : ite(198, 93, 206) : BV:8
208 : ite(197, 90, 207) : BV:8
209 : ite(196, 87, 208) : BV:8
210 : ite(195, 84, 209) : BV:8
211 : ite(194, 81, 210) : BV:8
212 : bvadd(34, 76, 173) : BV:32
213 : eq(212, 77) : BOOL
214 : eq(212, 82) : BOOL
215 : eq(212, 85) : BOOL
216 : eq(212, 88) : BOOL
217 : eq(212, 91) : BOOL
218 : eq(212, 94) : BOOL
219 : eq(212, 97) : BOOL
220 : eq(212, 100) : BOOL
221 : eq(212, 103) : BOOL
222 : ite(221, 105, 106) : BV:8
223 : ite(220, 102, 222) : BV:8
224 : ite(219, 99, 223) : BV:8
225 : ite(218, 96, 224) : BV:8
226 : ite(217, 93, 225) : BV:8
227 : ite(216, 90, 226) : BV:8
228 : ite(215, 87, 227) : BV:8
229 : ite(214, 84, 228) : BV:8
230 : ite(213, 81, 229) : BV:8
231 : bvadd(76, 173) : BV:32
232 : eq(231, 77) : BOOL
233 : eq(231, 82) : BOOL
234 : eq(231, 85) : BOOL
235 : eq(231, 88) : BOOL
236 : eq(231, 91) : BOOL
237 : eq(231, 94) : BOOL
238 : eq(231, 97) : BOOL
239 : eq(231, 100) : BOOL
240 : eq(231, 103) : BOOL
241 : ite(240, 105, 106) : BV:8
242 : ite(239, 102, 241) : BV:8
243 : ite(238, 99, 242) : BV:8
244 : ite(237, 96, 243) : BV:8
245 : ite(236, 93, 244) : BV:8
246 : ite(235, 90, 245) : BV:8
247 : ite(234, 87, 246) : BV:8
248 : ite(233, 84, 247) : BV:8
249 : ite(232, 81, 248) : BV:8
250 : bvconcat(192, 211, 230, 249) : BV:32
251 : ite(55, 2, 250) : BV:32
252 : ite(74, 250, 251) : BV:32
253 : ite(55, 2, 252) : BV:32
254 : lambda(52, 253) : FUNCTION[BV:32 -> BV:32]
255 : map(51, 254) : MAP[BV:32 -> BV:32]
256 : lambda(17, 255) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
257 : map(16, 256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
258 : sym_const(257) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16555 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16558 : BV:32
18 : Lambda16556 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16557 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 215 { 0xd7 -41 } : BV:8
63 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
64 : eq(60, 63) : BOOL
65 : 172 { 0xac -84 } : BV:8
66 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
67 : eq(60, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
70 : eq(60, 69) : BOOL
71 : 83 { 0x53 } : BV:8
72 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
73 : eq(60, 72) : BOOL
74 : 212 { 0xd4 -44 } : BV:8
75 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
76 : eq(60, 75) : BOOL
77 : 153 { 0x99 -103 } : BV:8
78 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
79 : eq(60, 78) : BOOL
80 : 125 { 0x7d } : BV:8
81 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
82 : eq(60, 81) : BOOL
83 : 85 { 0x55 } : BV:8
84 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
85 : eq(60, 84) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : ite(79, 80, 89) : BV:8
91 : ite(76, 77, 90) : BV:8
92 : ite(73, 74, 91) : BV:8
93 : ite(70, 71, 92) : BV:8
94 : ite(67, 68, 93) : BV:8
95 : ite(64, 65, 94) : BV:8
96 : ite(61, 62, 95) : BV:8
97 : bvadd(81, 59) : BV:32
98 : eq(97, 58) : BOOL
99 : eq(97, 63) : BOOL
100 : eq(97, 66) : BOOL
101 : eq(97, 69) : BOOL
102 : eq(97, 72) : BOOL
103 : eq(97, 75) : BOOL
104 : eq(97, 78) : BOOL
105 : eq(97, 81) : BOOL
106 : eq(97, 84) : BOOL
107 : ite(106, 86, 87) : BV:8
108 : ite(105, 83, 107) : BV:8
109 : ite(104, 80, 108) : BV:8
110 : ite(103, 77, 109) : BV:8
111 : ite(102, 74, 110) : BV:8
112 : ite(101, 71, 111) : BV:8
113 : ite(100, 68, 112) : BV:8
114 : ite(99, 65, 113) : BV:8
115 : ite(98, 62, 114) : BV:8
116 : bvadd(84, 59) : BV:32
117 : eq(116, 58) : BOOL
118 : eq(116, 63) : BOOL
119 : eq(116, 66) : BOOL
120 : eq(116, 69) : BOOL
121 : eq(116, 72) : BOOL
122 : eq(116, 75) : BOOL
123 : eq(116, 78) : BOOL
124 : eq(116, 81) : BOOL
125 : eq(116, 84) : BOOL
126 : ite(125, 86, 87) : BV:8
127 : ite(124, 83, 126) : BV:8
128 : ite(123, 80, 127) : BV:8
129 : ite(122, 77, 128) : BV:8
130 : ite(121, 74, 129) : BV:8
131 : ite(120, 71, 130) : BV:8
132 : ite(119, 68, 131) : BV:8
133 : ite(118, 65, 132) : BV:8
134 : ite(117, 62, 133) : BV:8
135 : bvadd(72, 59) : BV:32
136 : eq(135, 58) : BOOL
137 : eq(135, 63) : BOOL
138 : eq(135, 66) : BOOL
139 : eq(135, 69) : BOOL
140 : eq(135, 72) : BOOL
141 : eq(135, 75) : BOOL
142 : eq(135, 78) : BOOL
143 : eq(135, 81) : BOOL
144 : eq(135, 84) : BOOL
145 : ite(144, 86, 87) : BV:8
146 : ite(143, 83, 145) : BV:8
147 : ite(142, 80, 146) : BV:8
148 : ite(141, 77, 147) : BV:8
149 : ite(140, 74, 148) : BV:8
150 : ite(139, 71, 149) : BV:8
151 : ite(138, 68, 150) : BV:8
152 : ite(137, 65, 151) : BV:8
153 : ite(136, 62, 152) : BV:8
154 : bvconcat(96, 115, 134, 153) : BV:32
155 : bvadd(37, 57, 154) : BV:32
156 : eq(155, 58) : BOOL
157 : eq(155, 63) : BOOL
158 : eq(155, 66) : BOOL
159 : eq(155, 69) : BOOL
160 : eq(155, 72) : BOOL
161 : eq(155, 75) : BOOL
162 : eq(155, 78) : BOOL
163 : eq(155, 81) : BOOL
164 : eq(155, 84) : BOOL
165 : ite(164, 86, 87) : BV:8
166 : ite(163, 83, 165) : BV:8
167 : ite(162, 80, 166) : BV:8
168 : ite(161, 77, 167) : BV:8
169 : ite(160, 74, 168) : BV:8
170 : ite(159, 71, 169) : BV:8
171 : ite(158, 68, 170) : BV:8
172 : ite(157, 65, 171) : BV:8
173 : ite(156, 62, 172) : BV:8
174 : bvadd(41, 57, 154) : BV:32
175 : eq(174, 58) : BOOL
176 : eq(174, 63) : BOOL
177 : eq(174, 66) : BOOL
178 : eq(174, 69) : BOOL
179 : eq(174, 72) : BOOL
180 : eq(174, 75) : BOOL
181 : eq(174, 78) : BOOL
182 : eq(174, 81) : BOOL
183 : eq(174, 84) : BOOL
184 : ite(183, 86, 87) : BV:8
185 : ite(182, 83, 184) : BV:8
186 : ite(181, 80, 185) : BV:8
187 : ite(180, 77, 186) : BV:8
188 : ite(179, 74, 187) : BV:8
189 : ite(178, 71, 188) : BV:8
190 : ite(177, 68, 189) : BV:8
191 : ite(176, 65, 190) : BV:8
192 : ite(175, 62, 191) : BV:8
193 : bvadd(34, 57, 154) : BV:32
194 : eq(193, 58) : BOOL
195 : eq(193, 63) : BOOL
196 : eq(193, 66) : BOOL
197 : eq(193, 69) : BOOL
198 : eq(193, 72) : BOOL
199 : eq(193, 75) : BOOL
200 : eq(193, 78) : BOOL
201 : eq(193, 81) : BOOL
202 : eq(193, 84) : BOOL
203 : ite(202, 86, 87) : BV:8
204 : ite(201, 83, 203) : BV:8
205 : ite(200, 80, 204) : BV:8
206 : ite(199, 77, 205) : BV:8
207 : ite(198, 74, 206) : BV:8
208 : ite(197, 71, 207) : BV:8
209 : ite(196, 68, 208) : BV:8
210 : ite(195, 65, 209) : BV:8
211 : ite(194, 62, 210) : BV:8
212 : bvadd(57, 154) : BV:32
213 : eq(212, 58) : BOOL
214 : eq(212, 63) : BOOL
215 : eq(212, 66) : BOOL
216 : eq(212, 69) : BOOL
217 : eq(212, 72) : BOOL
218 : eq(212, 75) : BOOL
219 : eq(212, 78) : BOOL
220 : eq(212, 81) : BOOL
221 : eq(212, 84) : BOOL
222 : ite(221, 86, 87) : BV:8
223 : ite(220, 83, 222) : BV:8
224 : ite(219, 80, 223) : BV:8
225 : ite(218, 77, 224) : BV:8
226 : ite(217, 74, 225) : BV:8
227 : ite(216, 71, 226) : BV:8
228 : ite(215, 68, 227) : BV:8
229 : ite(214, 65, 228) : BV:8
230 : ite(213, 62, 229) : BV:8
231 : bvconcat(173, 192, 211, 230) : BV:32
232 : ite(55, 2, 231) : BV:32
233 : lambda(52, 232) : FUNCTION[BV:32 -> BV:32]
234 : map(51, 233) : MAP[BV:32 -> BV:32]
235 : lambda(17, 234) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
236 : map(16, 235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
237 : sym_const(236) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16628 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda16629 : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 25) : BV:32
28 : 3612718292 { 0xd755b4d4 -682249004 -1.66958093e47 } : BV:32
29 : bvadd(8, 27, 28) : BV:32
30 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
31 : eq(29, 30) : BOOL
32 : 215 { 0xd7 -41 } : BV:8
33 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
34 : eq(29, 33) : BOOL
35 : 172 { 0xac -84 } : BV:8
36 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
37 : eq(29, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
40 : eq(29, 39) : BOOL
41 : 83 { 0x53 } : BV:8
42 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
43 : eq(29, 42) : BOOL
44 : 212 { 0xd4 -44 } : BV:8
45 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
46 : eq(29, 45) : BOOL
47 : 153 { 0x99 -103 } : BV:8
48 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
49 : eq(29, 48) : BOOL
50 : 125 { 0x7d } : BV:8
51 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
52 : eq(29, 51) : BOOL
53 : 85 { 0x55 } : BV:8
54 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
55 : eq(29, 54) : BOOL
56 : 180 { 0xb4 -76 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(46, 47, 60) : BV:8
62 : ite(43, 44, 61) : BV:8
63 : ite(40, 41, 62) : BV:8
64 : ite(37, 38, 63) : BV:8
65 : ite(34, 35, 64) : BV:8
66 : ite(31, 32, 65) : BV:8
67 : bvadd(13, 27, 28) : BV:32
68 : eq(67, 30) : BOOL
69 : eq(67, 33) : BOOL
70 : eq(67, 36) : BOOL
71 : eq(67, 39) : BOOL
72 : eq(67, 42) : BOOL
73 : eq(67, 45) : BOOL
74 : eq(67, 48) : BOOL
75 : eq(67, 51) : BOOL
76 : eq(67, 54) : BOOL
77 : ite(76, 56, 57) : BV:8
78 : ite(75, 53, 77) : BV:8
79 : ite(74, 50, 78) : BV:8
80 : ite(73, 47, 79) : BV:8
81 : ite(72, 44, 80) : BV:8
82 : ite(71, 41, 81) : BV:8
83 : ite(70, 38, 82) : BV:8
84 : ite(69, 35, 83) : BV:8
85 : ite(68, 32, 84) : BV:8
86 : bvadd(5, 27, 28) : BV:32
87 : eq(86, 30) : BOOL
88 : eq(86, 33) : BOOL
89 : eq(86, 36) : BOOL
90 : eq(86, 39) : BOOL
91 : eq(86, 42) : BOOL
92 : eq(86, 45) : BOOL
93 : eq(86, 48) : BOOL
94 : eq(86, 51) : BOOL
95 : eq(86, 54) : BOOL
96 : ite(95, 56, 57) : BV:8
97 : ite(94, 53, 96) : BV:8
98 : ite(93, 50, 97) : BV:8
99 : ite(92, 47, 98) : BV:8
100 : ite(91, 44, 99) : BV:8
101 : ite(90, 41, 100) : BV:8
102 : ite(89, 38, 101) : BV:8
103 : ite(88, 35, 102) : BV:8
104 : ite(87, 32, 103) : BV:8
105 : bvadd(27, 28) : BV:32
106 : eq(105, 30) : BOOL
107 : eq(105, 33) : BOOL
108 : eq(105, 36) : BOOL
109 : eq(105, 39) : BOOL
110 : eq(105, 42) : BOOL
111 : eq(105, 45) : BOOL
112 : eq(105, 48) : BOOL
113 : eq(105, 51) : BOOL
114 : eq(105, 54) : BOOL
115 : ite(114, 56, 57) : BV:8
116 : ite(113, 53, 115) : BV:8
117 : ite(112, 50, 116) : BV:8
118 : ite(111, 47, 117) : BV:8
119 : ite(110, 44, 118) : BV:8
120 : ite(109, 41, 119) : BV:8
121 : ite(108, 38, 120) : BV:8
122 : ite(107, 35, 121) : BV:8
123 : ite(106, 32, 122) : BV:8
124 : bvconcat(66, 85, 104, 123) : BV:32
125 : lambda(25, 124) : FUNCTION[BV:32 -> BV:32]
126 : map(24, 125) : MAP[BV:32 -> BV:32]
127 : sym_const(126) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
=input.dst.llvm-%n
1 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1208156159 ] -> 0, [ 1208156160; 1208156160 ] -> 172, [ 1208156161; 1208156161 ] -> 125, [ 1208156162; 1208156162 ] -> 83, [ 1208156163; 1208156163 ] -> 153, [ 1208156164; 1208156164 ] -> 212, [ 1208156165; 1208156165 ] -> 180, [ 1208156166; 1208156166 ] -> 85, [ 1208156167; 1208156167 ] -> 215, [ 1208156168; 2572385707 ] -> 0, [ 2572385708; 2572385708 ] -> 1, [ 2572385709; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2153743379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2153743380; 2153743383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2153743384; 2820112807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2820112808; 2820112811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2820112812; 3224530903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3224530904; 3224530907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3224530908; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2820112808 { 0xa81781a8 -1474854488 -1.18364429e209 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3224530904 { 0xc0326fd8 -1070436392 -1.39403820e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2153743380 { 0x805f8414 -2141223916 -1.74621820e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1645401127 { 0x6212d427 +1.14709937e69 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda16624 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 1) : BOOL
8 : and(6, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : bvule(3, 14) : BOOL
17 : and(15, 16) : BOOL
18 : ite(17, 14, 14) : BV:32
19 : ite(13, 9, 18) : BV:32
20 : ite(8, 5, 19) : BV:32
21 : eq(20, 5) : BOOL
22 : and(4, 21) : BOOL
23 : 0 { 0x0 } : BOOL
24 : ite(22, 4, 23) : BOOL
25 : lambda(3, 24) : FUNCTION[BV:32 -> BOOL]
26 : Lambda16625 : BV:32
27 : 4 { 0x4 +1.47e129 } : BV:32
28 : bvmul(27, 26) : BV:32
29 : 3612718292 { 0xd755b4d4 -682249004 -1.66958093e47 } : BV:32
30 : bvadd(9, 28, 29) : BV:32
31 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
32 : eq(30, 31) : BOOL
33 : 215 { 0xd7 -41 } : BV:8
34 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
35 : eq(30, 34) : BOOL
36 : 172 { 0xac -84 } : BV:8
37 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
38 : eq(30, 37) : BOOL
39 : 1 { 0x1 } : BV:8
40 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
41 : eq(30, 40) : BOOL
42 : 83 { 0x53 } : BV:8
43 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
44 : eq(30, 43) : BOOL
45 : 212 { 0xd4 -44 } : BV:8
46 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
47 : eq(30, 46) : BOOL
48 : 153 { 0x99 -103 } : BV:8
49 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
50 : eq(30, 49) : BOOL
51 : 125 { 0x7d } : BV:8
52 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
53 : eq(30, 52) : BOOL
54 : 85 { 0x55 } : BV:8
55 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
56 : eq(30, 55) : BOOL
57 : 180 { 0xb4 -76 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(53, 54, 59) : BV:8
61 : ite(50, 51, 60) : BV:8
62 : ite(47, 48, 61) : BV:8
63 : ite(44, 45, 62) : BV:8
64 : ite(41, 42, 63) : BV:8
65 : ite(38, 39, 64) : BV:8
66 : ite(35, 36, 65) : BV:8
67 : ite(32, 33, 66) : BV:8
68 : bvadd(14, 28, 29) : BV:32
69 : eq(68, 31) : BOOL
70 : eq(68, 34) : BOOL
71 : eq(68, 37) : BOOL
72 : eq(68, 40) : BOOL
73 : eq(68, 43) : BOOL
74 : eq(68, 46) : BOOL
75 : eq(68, 49) : BOOL
76 : eq(68, 52) : BOOL
77 : eq(68, 55) : BOOL
78 : ite(77, 57, 58) : BV:8
79 : ite(76, 54, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : ite(74, 48, 80) : BV:8
82 : ite(73, 45, 81) : BV:8
83 : ite(72, 42, 82) : BV:8
84 : ite(71, 39, 83) : BV:8
85 : ite(70, 36, 84) : BV:8
86 : ite(69, 33, 85) : BV:8
87 : bvadd(1, 28, 29) : BV:32
88 : eq(87, 31) : BOOL
89 : eq(87, 34) : BOOL
90 : eq(87, 37) : BOOL
91 : eq(87, 40) : BOOL
92 : eq(87, 43) : BOOL
93 : eq(87, 46) : BOOL
94 : eq(87, 49) : BOOL
95 : eq(87, 52) : BOOL
96 : eq(87, 55) : BOOL
97 : ite(96, 57, 58) : BV:8
98 : ite(95, 54, 97) : BV:8
99 : ite(94, 51, 98) : BV:8
100 : ite(93, 48, 99) : BV:8
101 : ite(92, 45, 100) : BV:8
102 : ite(91, 42, 101) : BV:8
103 : ite(90, 39, 102) : BV:8
104 : ite(89, 36, 103) : BV:8
105 : ite(88, 33, 104) : BV:8
106 : bvadd(28, 29) : BV:32
107 : eq(106, 31) : BOOL
108 : eq(106, 34) : BOOL
109 : eq(106, 37) : BOOL
110 : eq(106, 40) : BOOL
111 : eq(106, 43) : BOOL
112 : eq(106, 46) : BOOL
113 : eq(106, 49) : BOOL
114 : eq(106, 52) : BOOL
115 : eq(106, 55) : BOOL
116 : ite(115, 57, 58) : BV:8
117 : ite(114, 54, 116) : BV:8
118 : ite(113, 51, 117) : BV:8
119 : ite(112, 48, 118) : BV:8
120 : ite(111, 45, 119) : BV:8
121 : ite(110, 42, 120) : BV:8
122 : ite(109, 39, 121) : BV:8
123 : ite(108, 36, 122) : BV:8
124 : ite(107, 33, 123) : BV:8
125 : bvconcat(67, 86, 105, 124) : BV:32
126 : lambda(26, 125) : FUNCTION[BV:32 -> BV:32]
127 : map(25, 126) : MAP[BV:32 -> BV:32]
128 : sum(1, 2, 127) : SUM[UNIT,MAP[BV:32 -> BV:32]]
129 : sym_const(128) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16632 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda16633 : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 25) : BV:32
28 : 3612718292 { 0xd755b4d4 -682249004 -1.66958093e47 } : BV:32
29 : bvadd(8, 27, 28) : BV:32
30 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
31 : eq(29, 30) : BOOL
32 : 215 { 0xd7 -41 } : BV:8
33 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
34 : eq(29, 33) : BOOL
35 : 172 { 0xac -84 } : BV:8
36 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
37 : eq(29, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
40 : eq(29, 39) : BOOL
41 : 83 { 0x53 } : BV:8
42 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
43 : eq(29, 42) : BOOL
44 : 212 { 0xd4 -44 } : BV:8
45 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
46 : eq(29, 45) : BOOL
47 : 153 { 0x99 -103 } : BV:8
48 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
49 : eq(29, 48) : BOOL
50 : 125 { 0x7d } : BV:8
51 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
52 : eq(29, 51) : BOOL
53 : 85 { 0x55 } : BV:8
54 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
55 : eq(29, 54) : BOOL
56 : 180 { 0xb4 -76 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(46, 47, 60) : BV:8
62 : ite(43, 44, 61) : BV:8
63 : ite(40, 41, 62) : BV:8
64 : ite(37, 38, 63) : BV:8
65 : ite(34, 35, 64) : BV:8
66 : ite(31, 32, 65) : BV:8
67 : bvadd(13, 27, 28) : BV:32
68 : eq(67, 30) : BOOL
69 : eq(67, 33) : BOOL
70 : eq(67, 36) : BOOL
71 : eq(67, 39) : BOOL
72 : eq(67, 42) : BOOL
73 : eq(67, 45) : BOOL
74 : eq(67, 48) : BOOL
75 : eq(67, 51) : BOOL
76 : eq(67, 54) : BOOL
77 : ite(76, 56, 57) : BV:8
78 : ite(75, 53, 77) : BV:8
79 : ite(74, 50, 78) : BV:8
80 : ite(73, 47, 79) : BV:8
81 : ite(72, 44, 80) : BV:8
82 : ite(71, 41, 81) : BV:8
83 : ite(70, 38, 82) : BV:8
84 : ite(69, 35, 83) : BV:8
85 : ite(68, 32, 84) : BV:8
86 : bvadd(5, 27, 28) : BV:32
87 : eq(86, 30) : BOOL
88 : eq(86, 33) : BOOL
89 : eq(86, 36) : BOOL
90 : eq(86, 39) : BOOL
91 : eq(86, 42) : BOOL
92 : eq(86, 45) : BOOL
93 : eq(86, 48) : BOOL
94 : eq(86, 51) : BOOL
95 : eq(86, 54) : BOOL
96 : ite(95, 56, 57) : BV:8
97 : ite(94, 53, 96) : BV:8
98 : ite(93, 50, 97) : BV:8
99 : ite(92, 47, 98) : BV:8
100 : ite(91, 44, 99) : BV:8
101 : ite(90, 41, 100) : BV:8
102 : ite(89, 38, 101) : BV:8
103 : ite(88, 35, 102) : BV:8
104 : ite(87, 32, 103) : BV:8
105 : bvadd(27, 28) : BV:32
106 : eq(105, 30) : BOOL
107 : eq(105, 33) : BOOL
108 : eq(105, 36) : BOOL
109 : eq(105, 39) : BOOL
110 : eq(105, 42) : BOOL
111 : eq(105, 45) : BOOL
112 : eq(105, 48) : BOOL
113 : eq(105, 51) : BOOL
114 : eq(105, 54) : BOOL
115 : ite(114, 56, 57) : BV:8
116 : ite(113, 53, 115) : BV:8
117 : ite(112, 50, 116) : BV:8
118 : ite(111, 47, 117) : BV:8
119 : ite(110, 44, 118) : BV:8
120 : ite(109, 41, 119) : BV:8
121 : ite(108, 38, 120) : BV:8
122 : ite(107, 35, 121) : BV:8
123 : ite(106, 32, 122) : BV:8
124 : bvconcat(66, 85, 104, 123) : BV:32
125 : lambda(25, 124) : FUNCTION[BV:32 -> BV:32]
126 : map(24, 125) : MAP[BV:32 -> BV:32]
127 : sym_const(126) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1667735097 { 0x63679e39 +1.80951607e71 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3224530904 { 0xc0326fd8 -1070436392 -1.39403820e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3224530907 { 0xc0326fdb -1070436389 -1.39403855e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2153743380 { 0x805f8414 -2141223916 -1.74621820e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2153743383 { 0x805f8417 -2141223913 -1.74621856e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2820112808 { 0xa81781a8 -1474854488 -1.18364429e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2820112811 { 0xa81781ab -1474854485 -1.18364465e209 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 1560268477 ] -> true, [ 1560268478; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16474 : BV:32
2 : Lambda16475 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16479 : BV:32
2 : Lambda16480 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 215 { 0xd7 -41 } : BV:8
55 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
56 : eq(52, 55) : BOOL
57 : 172 { 0xac -84 } : BV:8
58 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
59 : eq(52, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
62 : eq(52, 61) : BOOL
63 : 83 { 0x53 } : BV:8
64 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
65 : eq(52, 64) : BOOL
66 : 212 { 0xd4 -44 } : BV:8
67 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
68 : eq(52, 67) : BOOL
69 : 153 { 0x99 -103 } : BV:8
70 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
71 : eq(52, 70) : BOOL
72 : 125 { 0x7d } : BV:8
73 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
74 : eq(52, 73) : BOOL
75 : 85 { 0x55 } : BV:8
76 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
77 : eq(52, 76) : BOOL
78 : 180 { 0xb4 -76 } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(65, 66, 83) : BV:8
85 : ite(62, 63, 84) : BV:8
86 : ite(59, 60, 85) : BV:8
87 : ite(56, 57, 86) : BV:8
88 : ite(53, 54, 87) : BV:8
89 : bvadd(73, 51) : BV:32
90 : eq(89, 50) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 58) : BOOL
93 : eq(89, 61) : BOOL
94 : eq(89, 64) : BOOL
95 : eq(89, 67) : BOOL
96 : eq(89, 70) : BOOL
97 : eq(89, 73) : BOOL
98 : eq(89, 76) : BOOL
99 : ite(98, 78, 79) : BV:8
100 : ite(97, 75, 99) : BV:8
101 : ite(96, 72, 100) : BV:8
102 : ite(95, 69, 101) : BV:8
103 : ite(94, 66, 102) : BV:8
104 : ite(93, 63, 103) : BV:8
105 : ite(92, 60, 104) : BV:8
106 : ite(91, 57, 105) : BV:8
107 : ite(90, 54, 106) : BV:8
108 : bvadd(76, 51) : BV:32
109 : eq(108, 50) : BOOL
110 : eq(108, 55) : BOOL
111 : eq(108, 58) : BOOL
112 : eq(108, 61) : BOOL
113 : eq(108, 64) : BOOL
114 : eq(108, 67) : BOOL
115 : eq(108, 70) : BOOL
116 : eq(108, 73) : BOOL
117 : eq(108, 76) : BOOL
118 : ite(117, 78, 79) : BV:8
119 : ite(116, 75, 118) : BV:8
120 : ite(115, 72, 119) : BV:8
121 : ite(114, 69, 120) : BV:8
122 : ite(113, 66, 121) : BV:8
123 : ite(112, 63, 122) : BV:8
124 : ite(111, 60, 123) : BV:8
125 : ite(110, 57, 124) : BV:8
126 : ite(109, 54, 125) : BV:8
127 : bvadd(64, 51) : BV:32
128 : eq(127, 50) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 58) : BOOL
131 : eq(127, 61) : BOOL
132 : eq(127, 64) : BOOL
133 : eq(127, 67) : BOOL
134 : eq(127, 70) : BOOL
135 : eq(127, 73) : BOOL
136 : eq(127, 76) : BOOL
137 : ite(136, 78, 79) : BV:8
138 : ite(135, 75, 137) : BV:8
139 : ite(134, 72, 138) : BV:8
140 : ite(133, 69, 139) : BV:8
141 : ite(132, 66, 140) : BV:8
142 : ite(131, 63, 141) : BV:8
143 : ite(130, 60, 142) : BV:8
144 : ite(129, 57, 143) : BV:8
145 : ite(128, 54, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(33, 49, 146) : BV:32
148 : eq(147, 50) : BOOL
149 : eq(147, 55) : BOOL
150 : eq(147, 58) : BOOL
151 : eq(147, 61) : BOOL
152 : eq(147, 64) : BOOL
153 : eq(147, 67) : BOOL
154 : eq(147, 70) : BOOL
155 : eq(147, 73) : BOOL
156 : eq(147, 76) : BOOL
157 : ite(156, 78, 79) : BV:8
158 : ite(155, 75, 157) : BV:8
159 : ite(154, 72, 158) : BV:8
160 : ite(153, 69, 159) : BV:8
161 : ite(152, 66, 160) : BV:8
162 : ite(151, 63, 161) : BV:8
163 : ite(150, 60, 162) : BV:8
164 : ite(149, 57, 163) : BV:8
165 : ite(148, 54, 164) : BV:8
166 : bvadd(37, 49, 146) : BV:32
167 : eq(166, 50) : BOOL
168 : eq(166, 55) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 61) : BOOL
171 : eq(166, 64) : BOOL
172 : eq(166, 67) : BOOL
173 : eq(166, 70) : BOOL
174 : eq(166, 73) : BOOL
175 : eq(166, 76) : BOOL
176 : ite(175, 78, 79) : BV:8
177 : ite(174, 75, 176) : BV:8
178 : ite(173, 72, 177) : BV:8
179 : ite(172, 69, 178) : BV:8
180 : ite(171, 66, 179) : BV:8
181 : ite(170, 63, 180) : BV:8
182 : ite(169, 60, 181) : BV:8
183 : ite(168, 57, 182) : BV:8
184 : ite(167, 54, 183) : BV:8
185 : bvadd(30, 49, 146) : BV:32
186 : eq(185, 50) : BOOL
187 : eq(185, 55) : BOOL
188 : eq(185, 58) : BOOL
189 : eq(185, 61) : BOOL
190 : eq(185, 64) : BOOL
191 : eq(185, 67) : BOOL
192 : eq(185, 70) : BOOL
193 : eq(185, 73) : BOOL
194 : eq(185, 76) : BOOL
195 : ite(194, 78, 79) : BV:8
196 : ite(193, 75, 195) : BV:8
197 : ite(192, 72, 196) : BV:8
198 : ite(191, 69, 197) : BV:8
199 : ite(190, 66, 198) : BV:8
200 : ite(189, 63, 199) : BV:8
201 : ite(188, 60, 200) : BV:8
202 : ite(187, 57, 201) : BV:8
203 : ite(186, 54, 202) : BV:8
204 : bvadd(49, 146) : BV:32
205 : eq(204, 50) : BOOL
206 : eq(204, 55) : BOOL
207 : eq(204, 58) : BOOL
208 : eq(204, 61) : BOOL
209 : eq(204, 64) : BOOL
210 : eq(204, 67) : BOOL
211 : eq(204, 70) : BOOL
212 : eq(204, 73) : BOOL
213 : eq(204, 76) : BOOL
214 : ite(213, 78, 79) : BV:8
215 : ite(212, 75, 214) : BV:8
216 : ite(211, 72, 215) : BV:8
217 : ite(210, 69, 216) : BV:8
218 : ite(209, 66, 217) : BV:8
219 : ite(208, 63, 218) : BV:8
220 : ite(207, 60, 219) : BV:8
221 : ite(206, 57, 220) : BV:8
222 : ite(205, 54, 221) : BV:8
223 : bvconcat(165, 184, 203, 222) : BV:32
224 : ite(6, 3, 223) : BV:32
225 : ite(47, 223, 224) : BV:32
226 : ite(6, 3, 225) : BV:32
227 : lambda(1, 2, 226) : FUNCTION[BV:32,BV:32 -> BV:32]
228 : sym_const(227) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1560268477 ] -> true, [ 1560268478; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16485 : BV:32
2 : Lambda16486 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1560268477 { 0x5cffcebd +1.99849665e58 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1560268479 { 0x5cffcebf +1.99849689e58 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1560268478 { 0x5cffcebe +1.99849677e58 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16481 : BV:32
2 : Lambda16482 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 215 { 0xd7 -41 } : BV:8
15 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
16 : eq(12, 15) : BOOL
17 : 172 { 0xac -84 } : BV:8
18 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
19 : eq(12, 18) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
22 : eq(12, 21) : BOOL
23 : 83 { 0x53 } : BV:8
24 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
25 : eq(12, 24) : BOOL
26 : 212 { 0xd4 -44 } : BV:8
27 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
28 : eq(12, 27) : BOOL
29 : 153 { 0x99 -103 } : BV:8
30 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
31 : eq(12, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
34 : eq(12, 33) : BOOL
35 : 85 { 0x55 } : BV:8
36 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
37 : eq(12, 36) : BOOL
38 : 180 { 0xb4 -76 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : ite(22, 23, 44) : BV:8
46 : ite(19, 20, 45) : BV:8
47 : ite(16, 17, 46) : BV:8
48 : ite(13, 14, 47) : BV:8
49 : bvadd(33, 11) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 15) : BOOL
52 : eq(49, 18) : BOOL
53 : eq(49, 21) : BOOL
54 : eq(49, 24) : BOOL
55 : eq(49, 27) : BOOL
56 : eq(49, 30) : BOOL
57 : eq(49, 33) : BOOL
58 : eq(49, 36) : BOOL
59 : ite(58, 38, 39) : BV:8
60 : ite(57, 35, 59) : BV:8
61 : ite(56, 32, 60) : BV:8
62 : ite(55, 29, 61) : BV:8
63 : ite(54, 26, 62) : BV:8
64 : ite(53, 23, 63) : BV:8
65 : ite(52, 20, 64) : BV:8
66 : ite(51, 17, 65) : BV:8
67 : ite(50, 14, 66) : BV:8
68 : bvadd(36, 11) : BV:32
69 : eq(68, 10) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 18) : BOOL
72 : eq(68, 21) : BOOL
73 : eq(68, 24) : BOOL
74 : eq(68, 27) : BOOL
75 : eq(68, 30) : BOOL
76 : eq(68, 33) : BOOL
77 : eq(68, 36) : BOOL
78 : ite(77, 38, 39) : BV:8
79 : ite(76, 35, 78) : BV:8
80 : ite(75, 32, 79) : BV:8
81 : ite(74, 29, 80) : BV:8
82 : ite(73, 26, 81) : BV:8
83 : ite(72, 23, 82) : BV:8
84 : ite(71, 20, 83) : BV:8
85 : ite(70, 17, 84) : BV:8
86 : ite(69, 14, 85) : BV:8
87 : bvadd(24, 11) : BV:32
88 : eq(87, 10) : BOOL
89 : eq(87, 15) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : eq(87, 33) : BOOL
96 : eq(87, 36) : BOOL
97 : ite(96, 38, 39) : BV:8
98 : ite(95, 35, 97) : BV:8
99 : ite(94, 32, 98) : BV:8
100 : ite(93, 29, 99) : BV:8
101 : ite(92, 26, 100) : BV:8
102 : ite(91, 23, 101) : BV:8
103 : ite(90, 20, 102) : BV:8
104 : ite(89, 17, 103) : BV:8
105 : ite(88, 14, 104) : BV:8
106 : bvconcat(48, 67, 86, 105) : BV:32
107 : bvadd(7, 9, 106) : BV:32
108 : eq(107, 10) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 18) : BOOL
111 : eq(107, 21) : BOOL
112 : eq(107, 24) : BOOL
113 : eq(107, 27) : BOOL
114 : eq(107, 30) : BOOL
115 : eq(107, 33) : BOOL
116 : eq(107, 36) : BOOL
117 : ite(116, 38, 39) : BV:8
118 : ite(115, 35, 117) : BV:8
119 : ite(114, 32, 118) : BV:8
120 : ite(113, 29, 119) : BV:8
121 : ite(112, 26, 120) : BV:8
122 : ite(111, 23, 121) : BV:8
123 : ite(110, 20, 122) : BV:8
124 : ite(109, 17, 123) : BV:8
125 : ite(108, 14, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 9, 106) : BV:32
128 : eq(127, 10) : BOOL
129 : eq(127, 15) : BOOL
130 : eq(127, 18) : BOOL
131 : eq(127, 21) : BOOL
132 : eq(127, 24) : BOOL
133 : eq(127, 27) : BOOL
134 : eq(127, 30) : BOOL
135 : eq(127, 33) : BOOL
136 : eq(127, 36) : BOOL
137 : ite(136, 38, 39) : BV:8
138 : ite(135, 35, 137) : BV:8
139 : ite(134, 32, 138) : BV:8
140 : ite(133, 29, 139) : BV:8
141 : ite(132, 26, 140) : BV:8
142 : ite(131, 23, 141) : BV:8
143 : ite(130, 20, 142) : BV:8
144 : ite(129, 17, 143) : BV:8
145 : ite(128, 14, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 9, 106) : BV:32
148 : eq(147, 10) : BOOL
149 : eq(147, 15) : BOOL
150 : eq(147, 18) : BOOL
151 : eq(147, 21) : BOOL
152 : eq(147, 24) : BOOL
153 : eq(147, 27) : BOOL
154 : eq(147, 30) : BOOL
155 : eq(147, 33) : BOOL
156 : eq(147, 36) : BOOL
157 : ite(156, 38, 39) : BV:8
158 : ite(155, 35, 157) : BV:8
159 : ite(154, 32, 158) : BV:8
160 : ite(153, 29, 159) : BV:8
161 : ite(152, 26, 160) : BV:8
162 : ite(151, 23, 161) : BV:8
163 : ite(150, 20, 162) : BV:8
164 : ite(149, 17, 163) : BV:8
165 : ite(148, 14, 164) : BV:8
166 : bvadd(9, 106) : BV:32
167 : eq(166, 10) : BOOL
168 : eq(166, 15) : BOOL
169 : eq(166, 18) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 24) : BOOL
172 : eq(166, 27) : BOOL
173 : eq(166, 30) : BOOL
174 : eq(166, 33) : BOOL
175 : eq(166, 36) : BOOL
176 : ite(175, 38, 39) : BV:8
177 : ite(174, 35, 176) : BV:8
178 : ite(173, 32, 177) : BV:8
179 : ite(172, 29, 178) : BV:8
180 : ite(171, 26, 179) : BV:8
181 : ite(170, 23, 180) : BV:8
182 : ite(169, 20, 181) : BV:8
183 : ite(168, 17, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : bvconcat(125, 145, 165, 184) : BV:32
186 : ite(6, 3, 185) : BV:32
187 : lambda(1, 2, 186) : FUNCTION[BV:32,BV:32 -> BV:32]
188 : sym_const(187) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-ret-1.L3%7%bbentry_1_0
1 : 0 { 0x0 } : BV:2
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16492 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16496 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16500 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2572385708 { 0x99537dac -1722581588 -1.65227270e179 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1208156167 { 0x48030007 +1.2343833e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 215 { 0xd7 -41 } : BV:8
13 : 1208156160 { 0x48030000 +1.2343750e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 172 { 0xac -84 } : BV:8
16 : eq(9, 8) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1208156162 { 0x48030002 +1.2343773e17 } : BV:32
19 : eq(9, 18) : BOOL
20 : 83 { 0x53 } : BV:8
21 : 1208156164 { 0x48030004 +1.2343797e17 } : BV:32
22 : eq(9, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 1208156163 { 0x48030003 +1.2343785e17 } : BV:32
25 : eq(9, 24) : BOOL
26 : 153 { 0x99 -103 } : BV:8
27 : 1208156161 { 0x48030001 +1.2343761e17 } : BV:32
28 : eq(9, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 1208156166 { 0x48030006 +1.2343821e17 } : BV:32
31 : eq(9, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 1208156165 { 0x48030005 +1.2343809e17 } : BV:32
34 : eq(9, 33) : BOOL
35 : 180 { 0xb4 -76 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : ite(11, 12, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 7, 8) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 13) : BOOL
50 : eq(47, 8) : BOOL
51 : eq(47, 18) : BOOL
52 : eq(47, 21) : BOOL
53 : eq(47, 24) : BOOL
54 : eq(47, 27) : BOOL
55 : eq(47, 30) : BOOL
56 : eq(47, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : ite(52, 23, 60) : BV:8
62 : ite(51, 20, 61) : BV:8
63 : ite(50, 17, 62) : BV:8
64 : ite(49, 15, 63) : BV:8
65 : ite(48, 12, 64) : BV:8
66 : bvadd(4, 7, 8) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 13) : BOOL
69 : eq(66, 8) : BOOL
70 : eq(66, 18) : BOOL
71 : eq(66, 21) : BOOL
72 : eq(66, 24) : BOOL
73 : eq(66, 27) : BOOL
74 : eq(66, 30) : BOOL
75 : eq(66, 33) : BOOL
76 : ite(75, 35, 36) : BV:8
77 : ite(74, 32, 76) : BV:8
78 : ite(73, 29, 77) : BV:8
79 : ite(72, 26, 78) : BV:8
80 : ite(71, 23, 79) : BV:8
81 : ite(70, 20, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(68, 15, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(7, 8) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 13) : BOOL
88 : eq(85, 8) : BOOL
89 : eq(85, 18) : BOOL
90 : eq(85, 21) : BOOL
91 : eq(85, 24) : BOOL
92 : eq(85, 27) : BOOL
93 : eq(85, 30) : BOOL
94 : eq(85, 33) : BOOL
95 : ite(94, 35, 36) : BV:8
96 : ite(93, 32, 95) : BV:8
97 : ite(92, 29, 96) : BV:8
98 : ite(91, 26, 97) : BV:8
99 : ite(90, 23, 98) : BV:8
100 : ite(89, 20, 99) : BV:8
101 : ite(88, 17, 100) : BV:8
102 : ite(87, 15, 101) : BV:8
103 : ite(86, 12, 102) : BV:8
104 : bvconcat(45, 65, 84, 103) : BV:32
105 : ite(3, 4, 104) : BV:32
106 : lambda(1, 105) : FUNCTION[BV:32 -> BV:32]
107 : sym_const(106) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1301522271
=counter_example_end
=global nodece 67 num_edges_traversed 4
=global nodece 67 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 68
=global nodece 68 nodece z3.ce6646.num_edges_traversed1
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3.ce6646 5d26fc4db31cac443187f988c2d03f3a
=input.spec-%var-x-1
1 : Lambda16773 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16776 : BV:32
18 : Lambda16774 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16775 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
82 : eq(80, 81) : BOOL
83 : 248 { 0xf8 -8 } : BV:8
84 : eq(80, 78) : BOOL
85 : 190 { 0xbe -66 } : BV:8
86 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
87 : eq(80, 86) : BOOL
88 : 39 { 0x27 } : BV:8
89 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
90 : eq(80, 89) : BOOL
91 : 249 { 0xf9 -7 } : BV:8
92 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
93 : eq(80, 92) : BOOL
94 : 242 { 0xf2 -14 } : BV:8
95 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
96 : eq(80, 95) : BOOL
97 : 79 { 0x4f } : BV:8
98 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
99 : eq(80, 98) : BOOL
100 : 121 { 0x79 } : BV:8
101 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
102 : eq(80, 101) : BOOL
103 : 239 { 0xef -17 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16781 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16784 : BV:32
18 : Lambda16782 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16783 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
63 : eq(61, 62) : BOOL
64 : 248 { 0xf8 -8 } : BV:8
65 : eq(61, 59) : BOOL
66 : 190 { 0xbe -66 } : BV:8
67 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
68 : eq(61, 67) : BOOL
69 : 39 { 0x27 } : BV:8
70 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
71 : eq(61, 70) : BOOL
72 : 249 { 0xf9 -7 } : BV:8
73 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
74 : eq(61, 73) : BOOL
75 : 242 { 0xf2 -14 } : BV:8
76 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
77 : eq(61, 76) : BOOL
78 : 79 { 0x4f } : BV:8
79 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
80 : eq(61, 79) : BOOL
81 : 121 { 0x79 } : BV:8
82 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
83 : eq(61, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16786 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16787 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
23 : bvadd(18, 21, 22) : BV:32
24 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
25 : eq(23, 24) : BOOL
26 : 248 { 0xf8 -8 } : BV:8
27 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
28 : eq(23, 27) : BOOL
29 : 190 { 0xbe -66 } : BV:8
30 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
31 : eq(23, 30) : BOOL
32 : 39 { 0x27 } : BV:8
33 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
34 : eq(23, 33) : BOOL
35 : 249 { 0xf9 -7 } : BV:8
36 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
37 : eq(23, 36) : BOOL
38 : 242 { 0xf2 -14 } : BV:8
39 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
40 : eq(23, 39) : BOOL
41 : 79 { 0x4f } : BV:8
42 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
43 : eq(23, 42) : BOOL
44 : 121 { 0x79 } : BV:8
45 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
46 : eq(23, 45) : BOOL
47 : 239 { 0xef -17 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
=input.dst.llvm-%n
1 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
=input.dst.llvm-%m
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1207998719 ] -> 0, [ 1207998720; 1207998720 ] -> 248, [ 1207998721; 1207998721 ] -> 79, [ 1207998722; 1207998722 ] -> 39, [ 1207998723; 1207998723 ] -> 242, [ 1207998724; 1207998724 ] -> 249, [ 1207998725; 1207998725 ] -> 239, [ 1207998726; 1207998726 ] -> 121, [ 1207998727; 1207998727 ] -> 190, [ 1207998728; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1731141631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1731141632; 1731141635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1731141636; 2745178107 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2745178108; 2745178111 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2745178112; 3803190023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3803190024; 3803190027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3803190028; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2745178108 { 0xa3a017fc -1549789188 -1.25073194e200 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3803190024 { 0xe2b01308 -491777272 -1.37558078e70 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1731141632 { 0x672f2000 +1.36816406e79 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
2 : unit : UNIT
3 : Lambda16778 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 5 { 0x5 +1.59e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 6 { 0x6 +1.71e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16779 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
26 : bvadd(20, 24, 25) : BV:32
27 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
28 : eq(26, 27) : BOOL
29 : 248 { 0xf8 -8 } : BV:8
30 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
31 : eq(26, 30) : BOOL
32 : 190 { 0xbe -66 } : BV:8
33 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
34 : eq(26, 33) : BOOL
35 : 39 { 0x27 } : BV:8
36 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
37 : eq(26, 36) : BOOL
38 : 249 { 0xf9 -7 } : BV:8
39 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
40 : eq(26, 39) : BOOL
41 : 242 { 0xf2 -14 } : BV:8
42 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
43 : eq(26, 42) : BOOL
44 : 79 { 0x4f } : BV:8
45 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
46 : eq(26, 45) : BOOL
47 : 121 { 0x79 } : BV:8
48 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
49 : eq(26, 48) : BOOL
50 : 239 { 0xef -17 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(22, 4, 113) : BV:32
115 : ite(21, 4, 114) : BV:32
116 : lambda(19, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(18, 116) : MAP[BV:32 -> BV:32]
118 : sum(1, 2, 117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
119 : sym_const(118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1498826934 { 0x595648b6 +1.67409396e51 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16789 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16790 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
24 : bvadd(18, 22, 23) : BV:32
25 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
26 : eq(24, 25) : BOOL
27 : 248 { 0xf8 -8 } : BV:8
28 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
29 : eq(24, 28) : BOOL
30 : 190 { 0xbe -66 } : BV:8
31 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
32 : eq(24, 31) : BOOL
33 : 39 { 0x27 } : BV:8
34 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
35 : eq(24, 34) : BOOL
36 : 249 { 0xf9 -7 } : BV:8
37 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
38 : eq(24, 37) : BOOL
39 : 242 { 0xf2 -14 } : BV:8
40 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
41 : eq(24, 40) : BOOL
42 : 79 { 0x4f } : BV:8
43 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
44 : eq(24, 43) : BOOL
45 : 121 { 0x79 } : BV:8
46 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
47 : eq(24, 46) : BOOL
48 : 239 { 0xef -17 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1765248446 { 0x69378dbe +1.43401312e83 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 4062662660 { 0xf2275004 -232304636 -1.30712938e101 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 4062662660 { 0xf2275004 -232304636 -1.30712938e101 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3803190024 { 0xe2b01308 -491777272 -1.37558078e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3803190027 { 0xe2b0130b -491777269 -1.37558114e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1731141632 { 0x672f2000 +1.36816406e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1731141635 { 0x672f2003 +1.36816442e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2745178108 { 0xa3a017fc -1549789188 -1.25073194e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2745178111 { 0xa3a017ff -1549789185 -1.25073230e200 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2516582399 ] -> true, [ 2516582400; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16700 : BV:32
2 : Lambda16701 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16705 : BV:32
2 : Lambda16706 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 5 { 0x5 +1.59e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 7 { 0x7 +1.83e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
55 : eq(53, 54) : BOOL
56 : 248 { 0xf8 -8 } : BV:8
57 : eq(53, 51) : BOOL
58 : 190 { 0xbe -66 } : BV:8
59 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
60 : eq(53, 59) : BOOL
61 : 39 { 0x27 } : BV:8
62 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
63 : eq(53, 62) : BOOL
64 : 249 { 0xf9 -7 } : BV:8
65 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
66 : eq(53, 65) : BOOL
67 : 242 { 0xf2 -14 } : BV:8
68 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
69 : eq(53, 68) : BOOL
70 : 79 { 0x4f } : BV:8
71 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
72 : eq(53, 71) : BOOL
73 : 121 { 0x79 } : BV:8
74 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
75 : eq(53, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2516582399 ] -> true, [ 2516582400; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16711 : BV:32
2 : Lambda16712 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16707 : BV:32
2 : Lambda16708 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
14 : eq(12, 13) : BOOL
15 : 248 { 0xf8 -8 } : BV:8
16 : eq(12, 10) : BOOL
17 : 190 { 0xbe -66 } : BV:8
18 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
19 : eq(12, 18) : BOOL
20 : 39 { 0x27 } : BV:8
21 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
22 : eq(12, 21) : BOOL
23 : 249 { 0xf9 -7 } : BV:8
24 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
25 : eq(12, 24) : BOOL
26 : 242 { 0xf2 -14 } : BV:8
27 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
28 : eq(12, 27) : BOOL
29 : 79 { 0x4f } : BV:8
30 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
31 : eq(12, 30) : BOOL
32 : 121 { 0x79 } : BV:8
33 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
34 : eq(12, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16718 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 248 { 0xf8 -8 } : BV:8
13 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
17 : eq(9, 16) : BOOL
18 : 39 { 0x27 } : BV:8
19 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
20 : eq(9, 19) : BOOL
21 : 249 { 0xf9 -7 } : BV:8
22 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
23 : eq(9, 22) : BOOL
24 : 242 { 0xf2 -14 } : BV:8
25 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
26 : eq(9, 25) : BOOL
27 : 79 { 0x4f } : BV:8
28 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
29 : eq(9, 28) : BOOL
30 : 121 { 0x79 } : BV:8
31 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
32 : eq(9, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16722 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 248 { 0xf8 -8 } : BV:8
13 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
17 : eq(9, 16) : BOOL
18 : 39 { 0x27 } : BV:8
19 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
20 : eq(9, 19) : BOOL
21 : 249 { 0xf9 -7 } : BV:8
22 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
23 : eq(9, 22) : BOOL
24 : 242 { 0xf2 -14 } : BV:8
25 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
26 : eq(9, 25) : BOOL
27 : 79 { 0x4f } : BV:8
28 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
29 : eq(9, 28) : BOOL
30 : 121 { 0x79 } : BV:8
31 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
32 : eq(9, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16726 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
10 : eq(8, 9) : BOOL
11 : 248 { 0xf8 -8 } : BV:8
12 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
16 : eq(8, 15) : BOOL
17 : 39 { 0x27 } : BV:8
18 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
19 : eq(8, 18) : BOOL
20 : 249 { 0xf9 -7 } : BV:8
21 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
22 : eq(8, 21) : BOOL
23 : 242 { 0xf2 -14 } : BV:8
24 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
25 : eq(8, 24) : BOOL
26 : 79 { 0x4f } : BV:8
27 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
28 : eq(8, 27) : BOOL
29 : 121 { 0x79 } : BV:8
30 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
31 : eq(8, 30) : BOOL
32 : 239 { 0xef -17 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
584784246
=counter_example_end
=global nodece 68 num_edges_traversed 1
=global nodece 68 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 69
=global nodece 69 nodece z3.ce6685.num_edges_traversed2
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(epsilon)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3.ce6685 d4817938388c99f33f3d57fe58c55df
=input.spec-%var-x-1
1 : Lambda16773 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16776 : BV:32
18 : Lambda16774 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16775 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
82 : eq(80, 81) : BOOL
83 : 248 { 0xf8 -8 } : BV:8
84 : eq(80, 78) : BOOL
85 : 190 { 0xbe -66 } : BV:8
86 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
87 : eq(80, 86) : BOOL
88 : 39 { 0x27 } : BV:8
89 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
90 : eq(80, 89) : BOOL
91 : 249 { 0xf9 -7 } : BV:8
92 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
93 : eq(80, 92) : BOOL
94 : 242 { 0xf2 -14 } : BV:8
95 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
96 : eq(80, 95) : BOOL
97 : 79 { 0x4f } : BV:8
98 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
99 : eq(80, 98) : BOOL
100 : 121 { 0x79 } : BV:8
101 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
102 : eq(80, 101) : BOOL
103 : 239 { 0xef -17 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16781 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16784 : BV:32
18 : Lambda16782 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16783 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
63 : eq(61, 62) : BOOL
64 : 248 { 0xf8 -8 } : BV:8
65 : eq(61, 59) : BOOL
66 : 190 { 0xbe -66 } : BV:8
67 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
68 : eq(61, 67) : BOOL
69 : 39 { 0x27 } : BV:8
70 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
71 : eq(61, 70) : BOOL
72 : 249 { 0xf9 -7 } : BV:8
73 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
74 : eq(61, 73) : BOOL
75 : 242 { 0xf2 -14 } : BV:8
76 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
77 : eq(61, 76) : BOOL
78 : 79 { 0x4f } : BV:8
79 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
80 : eq(61, 79) : BOOL
81 : 121 { 0x79 } : BV:8
82 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
83 : eq(61, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16786 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16787 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
23 : bvadd(18, 21, 22) : BV:32
24 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
25 : eq(23, 24) : BOOL
26 : 248 { 0xf8 -8 } : BV:8
27 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
28 : eq(23, 27) : BOOL
29 : 190 { 0xbe -66 } : BV:8
30 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
31 : eq(23, 30) : BOOL
32 : 39 { 0x27 } : BV:8
33 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
34 : eq(23, 33) : BOOL
35 : 249 { 0xf9 -7 } : BV:8
36 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
37 : eq(23, 36) : BOOL
38 : 242 { 0xf2 -14 } : BV:8
39 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
40 : eq(23, 39) : BOOL
41 : 79 { 0x4f } : BV:8
42 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
43 : eq(23, 42) : BOOL
44 : 121 { 0x79 } : BV:8
45 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
46 : eq(23, 45) : BOOL
47 : 239 { 0xef -17 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
=input.dst.llvm-%n
1 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
=input.dst.llvm-%m
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1207998719 ] -> 0, [ 1207998720; 1207998720 ] -> 248, [ 1207998721; 1207998721 ] -> 79, [ 1207998722; 1207998722 ] -> 39, [ 1207998723; 1207998723 ] -> 242, [ 1207998724; 1207998724 ] -> 249, [ 1207998725; 1207998725 ] -> 239, [ 1207998726; 1207998726 ] -> 121, [ 1207998727; 1207998727 ] -> 190, [ 1207998728; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1731141631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1731141632; 1731141635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1731141636; 2745178107 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2745178108; 2745178111 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2745178112; 3803190023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3803190024; 3803190027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3803190028; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2745178108 { 0xa3a017fc -1549789188 -1.25073194e200 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3803190024 { 0xe2b01308 -491777272 -1.37558078e70 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1731141632 { 0x672f2000 +1.36816406e79 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
2 : unit : UNIT
3 : Lambda16778 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 5 { 0x5 +1.59e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 6 { 0x6 +1.71e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16779 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : eq(19, 4) : BOOL
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
26 : bvadd(20, 24, 25) : BV:32
27 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
28 : eq(26, 27) : BOOL
29 : 248 { 0xf8 -8 } : BV:8
30 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
31 : eq(26, 30) : BOOL
32 : 190 { 0xbe -66 } : BV:8
33 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
34 : eq(26, 33) : BOOL
35 : 39 { 0x27 } : BV:8
36 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
37 : eq(26, 36) : BOOL
38 : 249 { 0xf9 -7 } : BV:8
39 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
40 : eq(26, 39) : BOOL
41 : 242 { 0xf2 -14 } : BV:8
42 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
43 : eq(26, 42) : BOOL
44 : 79 { 0x4f } : BV:8
45 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
46 : eq(26, 45) : BOOL
47 : 121 { 0x79 } : BV:8
48 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
49 : eq(26, 48) : BOOL
50 : 239 { 0xef -17 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(22, 4, 113) : BV:32
115 : ite(21, 4, 114) : BV:32
116 : lambda(19, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(18, 116) : MAP[BV:32 -> BV:32]
118 : sum(1, 2, 117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
119 : sym_const(118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1498826935 { 0x595648b7 +1.67409408e51 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16789 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16790 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
24 : bvadd(18, 22, 23) : BV:32
25 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
26 : eq(24, 25) : BOOL
27 : 248 { 0xf8 -8 } : BV:8
28 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
29 : eq(24, 28) : BOOL
30 : 190 { 0xbe -66 } : BV:8
31 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
32 : eq(24, 31) : BOOL
33 : 39 { 0x27 } : BV:8
34 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
35 : eq(24, 34) : BOOL
36 : 249 { 0xf9 -7 } : BV:8
37 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
38 : eq(24, 37) : BOOL
39 : 242 { 0xf2 -14 } : BV:8
40 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
41 : eq(24, 40) : BOOL
42 : 79 { 0x4f } : BV:8
43 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
44 : eq(24, 43) : BOOL
45 : 121 { 0x79 } : BV:8
46 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
47 : eq(24, 46) : BOOL
48 : 239 { 0xef -17 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1765248447 { 0x69378dbf +1.43401324e83 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3803190024 { 0xe2b01308 -491777272 -1.37558078e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3803190027 { 0xe2b0130b -491777269 -1.37558114e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1731141632 { 0x672f2000 +1.36816406e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1731141635 { 0x672f2003 +1.36816442e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2745178108 { 0xa3a017fc -1549789188 -1.25073194e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2745178111 { 0xa3a017ff -1549789185 -1.25073230e200 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 2516582399 ] -> true, [ 2516582400; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16700 : BV:32
2 : Lambda16701 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16705 : BV:32
2 : Lambda16706 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 5 { 0x5 +1.59e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 7 { 0x7 +1.83e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
55 : eq(53, 54) : BOOL
56 : 248 { 0xf8 -8 } : BV:8
57 : eq(53, 51) : BOOL
58 : 190 { 0xbe -66 } : BV:8
59 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
60 : eq(53, 59) : BOOL
61 : 39 { 0x27 } : BV:8
62 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
63 : eq(53, 62) : BOOL
64 : 249 { 0xf9 -7 } : BV:8
65 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
66 : eq(53, 65) : BOOL
67 : 242 { 0xf2 -14 } : BV:8
68 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
69 : eq(53, 68) : BOOL
70 : 79 { 0x4f } : BV:8
71 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
72 : eq(53, 71) : BOOL
73 : 121 { 0x79 } : BV:8
74 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
75 : eq(53, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2516582399 ] -> true, [ 2516582400; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16711 : BV:32
2 : Lambda16712 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2516582399 { 0x95ffffff -1778384897 -1.99999988e172 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2516582400 { 0x96000000 -1778384896 -1.0e173 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2516582401 { 0x96000001 -1778384895 -1.11e173 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16707 : BV:32
2 : Lambda16708 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
14 : eq(12, 13) : BOOL
15 : 248 { 0xf8 -8 } : BV:8
16 : eq(12, 10) : BOOL
17 : 190 { 0xbe -66 } : BV:8
18 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
19 : eq(12, 18) : BOOL
20 : 39 { 0x27 } : BV:8
21 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
22 : eq(12, 21) : BOOL
23 : 249 { 0xf9 -7 } : BV:8
24 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
25 : eq(12, 24) : BOOL
26 : 242 { 0xf2 -14 } : BV:8
27 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
28 : eq(12, 27) : BOOL
29 : 79 { 0x4f } : BV:8
30 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
31 : eq(12, 30) : BOOL
32 : 121 { 0x79 } : BV:8
33 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
34 : eq(12, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16718 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 248 { 0xf8 -8 } : BV:8
13 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
17 : eq(9, 16) : BOOL
18 : 39 { 0x27 } : BV:8
19 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
20 : eq(9, 19) : BOOL
21 : 249 { 0xf9 -7 } : BV:8
22 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
23 : eq(9, 22) : BOOL
24 : 242 { 0xf2 -14 } : BV:8
25 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
26 : eq(9, 25) : BOOL
27 : 79 { 0x4f } : BV:8
28 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
29 : eq(9, 28) : BOOL
30 : 121 { 0x79 } : BV:8
31 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
32 : eq(9, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16722 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
9 : bvadd(2, 7, 8) : BV:32
10 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
11 : eq(9, 10) : BOOL
12 : 248 { 0xf8 -8 } : BV:8
13 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
14 : eq(9, 13) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
17 : eq(9, 16) : BOOL
18 : 39 { 0x27 } : BV:8
19 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
20 : eq(9, 19) : BOOL
21 : 249 { 0xf9 -7 } : BV:8
22 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
23 : eq(9, 22) : BOOL
24 : 242 { 0xf2 -14 } : BV:8
25 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
26 : eq(9, 25) : BOOL
27 : 79 { 0x4f } : BV:8
28 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
29 : eq(9, 28) : BOOL
30 : 121 { 0x79 } : BV:8
31 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
32 : eq(9, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16726 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4062662648 { 0xf2274ff8 -232304648 -1.30712795e101 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 1207998720 { 0x48009900 +1.466918e17 } : BV:32
10 : eq(8, 9) : BOOL
11 : 248 { 0xf8 -8 } : BV:8
12 : 1207998727 { 0x48009907 +1.467002e17 } : BV:32
13 : eq(8, 12) : BOOL
14 : 190 { 0xbe -66 } : BV:8
15 : 1207998722 { 0x48009902 +1.466942e17 } : BV:32
16 : eq(8, 15) : BOOL
17 : 39 { 0x27 } : BV:8
18 : 1207998724 { 0x48009904 +1.466966e17 } : BV:32
19 : eq(8, 18) : BOOL
20 : 249 { 0xf9 -7 } : BV:8
21 : 1207998723 { 0x48009903 +1.466954e17 } : BV:32
22 : eq(8, 21) : BOOL
23 : 242 { 0xf2 -14 } : BV:8
24 : 1207998721 { 0x48009901 +1.466930e17 } : BV:32
25 : eq(8, 24) : BOOL
26 : 79 { 0x4f } : BV:8
27 : 1207998726 { 0x48009906 +1.466990e17 } : BV:32
28 : eq(8, 27) : BOOL
29 : 121 { 0x79 } : BV:8
30 : 1207998725 { 0x48009905 +1.466978e17 } : BV:32
31 : eq(8, 30) : BOOL
32 : 239 { 0xef -17 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
584784246
=counter_example_end
=global nodece 69 num_edges_traversed 2
=global nodece 69 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 70
=global nodece 70 nodece z3.ce6720.num_edges_traversed1
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3.ce6720 f78479585a35ba9f2fc89f45a2f48b6d
=input.spec-%var-x-1
1 : Lambda16950 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65 { 0x41 +1.774e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16953 : BV:32
18 : Lambda16951 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 66 { 0x42 +1.786e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16952 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : bvmul(34, 52) : BV:32
77 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
78 : bvmul(34, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
81 : eq(79, 80) : BOOL
82 : 244 { 0xf4 -12 } : BV:8
83 : eq(79, 77) : BOOL
84 : 134 { 0x86 -122 } : BV:8
85 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
86 : eq(79, 85) : BOOL
87 : 255 { 0xff -1 } : BV:8
88 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
89 : eq(79, 88) : BOOL
90 : 240 { 0xf0 -16 } : BV:8
91 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
92 : eq(79, 91) : BOOL
93 : 127 { 0x7f } : BV:8
94 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
95 : eq(79, 94) : BOOL
96 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
97 : eq(79, 96) : BOOL
98 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
99 : eq(79, 98) : BOOL
100 : 247 { 0xf7 -9 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(97, 87, 102) : BV:8
104 : ite(95, 87, 103) : BV:8
105 : ite(92, 93, 104) : BV:8
106 : ite(89, 90, 105) : BV:8
107 : ite(86, 87, 106) : BV:8
108 : ite(83, 84, 107) : BV:8
109 : ite(81, 82, 108) : BV:8
110 : bvadd(96, 78) : BV:32
111 : eq(110, 80) : BOOL
112 : eq(110, 77) : BOOL
113 : eq(110, 85) : BOOL
114 : eq(110, 88) : BOOL
115 : eq(110, 91) : BOOL
116 : eq(110, 94) : BOOL
117 : eq(110, 96) : BOOL
118 : eq(110, 98) : BOOL
119 : ite(118, 100, 101) : BV:8
120 : ite(117, 87, 119) : BV:8
121 : ite(116, 87, 120) : BV:8
122 : ite(115, 93, 121) : BV:8
123 : ite(114, 90, 122) : BV:8
124 : ite(113, 87, 123) : BV:8
125 : ite(112, 84, 124) : BV:8
126 : ite(111, 82, 125) : BV:8
127 : bvadd(98, 78) : BV:32
128 : eq(127, 80) : BOOL
129 : eq(127, 77) : BOOL
130 : eq(127, 85) : BOOL
131 : eq(127, 88) : BOOL
132 : eq(127, 91) : BOOL
133 : eq(127, 94) : BOOL
134 : eq(127, 96) : BOOL
135 : eq(127, 98) : BOOL
136 : ite(135, 100, 101) : BV:8
137 : ite(134, 87, 136) : BV:8
138 : ite(133, 87, 137) : BV:8
139 : ite(132, 93, 138) : BV:8
140 : ite(131, 90, 139) : BV:8
141 : ite(130, 87, 140) : BV:8
142 : ite(129, 84, 141) : BV:8
143 : ite(128, 82, 142) : BV:8
144 : bvadd(88, 78) : BV:32
145 : eq(144, 80) : BOOL
146 : eq(144, 77) : BOOL
147 : eq(144, 85) : BOOL
148 : eq(144, 88) : BOOL
149 : eq(144, 91) : BOOL
150 : eq(144, 94) : BOOL
151 : eq(144, 96) : BOOL
152 : eq(144, 98) : BOOL
153 : ite(152, 100, 101) : BV:8
154 : ite(151, 87, 153) : BV:8
155 : ite(150, 87, 154) : BV:8
156 : ite(149, 93, 155) : BV:8
157 : ite(148, 90, 156) : BV:8
158 : ite(147, 87, 157) : BV:8
159 : ite(146, 84, 158) : BV:8
160 : ite(145, 82, 159) : BV:8
161 : bvconcat(109, 126, 143, 160) : BV:32
162 : bvadd(75, 76, 161) : BV:32
163 : eq(162, 80) : BOOL
164 : eq(162, 77) : BOOL
165 : eq(162, 85) : BOOL
166 : eq(162, 88) : BOOL
167 : eq(162, 91) : BOOL
168 : eq(162, 94) : BOOL
169 : eq(162, 96) : BOOL
170 : eq(162, 98) : BOOL
171 : ite(170, 100, 101) : BV:8
172 : ite(169, 87, 171) : BV:8
173 : ite(168, 87, 172) : BV:8
174 : ite(167, 93, 173) : BV:8
175 : ite(166, 90, 174) : BV:8
176 : ite(165, 87, 175) : BV:8
177 : ite(164, 84, 176) : BV:8
178 : ite(163, 82, 177) : BV:8
179 : 2 { 0x2 +1.23e129 } : BV:32
180 : bvadd(179, 76, 161) : BV:32
181 : eq(180, 80) : BOOL
182 : eq(180, 77) : BOOL
183 : eq(180, 85) : BOOL
184 : eq(180, 88) : BOOL
185 : eq(180, 91) : BOOL
186 : eq(180, 94) : BOOL
187 : eq(180, 96) : BOOL
188 : eq(180, 98) : BOOL
189 : ite(188, 100, 101) : BV:8
190 : ite(187, 87, 189) : BV:8
191 : ite(186, 87, 190) : BV:8
192 : ite(185, 93, 191) : BV:8
193 : ite(184, 90, 192) : BV:8
194 : ite(183, 87, 193) : BV:8
195 : ite(182, 84, 194) : BV:8
196 : ite(181, 82, 195) : BV:8
197 : 1 { 0x1 +1.11e129 } : BV:32
198 : bvadd(197, 76, 161) : BV:32
199 : eq(198, 80) : BOOL
200 : eq(198, 77) : BOOL
201 : eq(198, 85) : BOOL
202 : eq(198, 88) : BOOL
203 : eq(198, 91) : BOOL
204 : eq(198, 94) : BOOL
205 : eq(198, 96) : BOOL
206 : eq(198, 98) : BOOL
207 : ite(206, 100, 101) : BV:8
208 : ite(205, 87, 207) : BV:8
209 : ite(204, 87, 208) : BV:8
210 : ite(203, 93, 209) : BV:8
211 : ite(202, 90, 210) : BV:8
212 : ite(201, 87, 211) : BV:8
213 : ite(200, 84, 212) : BV:8
214 : ite(199, 82, 213) : BV:8
215 : bvadd(76, 161) : BV:32
216 : eq(215, 80) : BOOL
217 : eq(215, 77) : BOOL
218 : eq(215, 85) : BOOL
219 : eq(215, 88) : BOOL
220 : eq(215, 91) : BOOL
221 : eq(215, 94) : BOOL
222 : eq(215, 96) : BOOL
223 : eq(215, 98) : BOOL
224 : ite(223, 100, 101) : BV:8
225 : ite(222, 87, 224) : BV:8
226 : ite(221, 87, 225) : BV:8
227 : ite(220, 93, 226) : BV:8
228 : ite(219, 90, 227) : BV:8
229 : ite(218, 87, 228) : BV:8
230 : ite(217, 84, 229) : BV:8
231 : ite(216, 82, 230) : BV:8
232 : bvconcat(178, 196, 214, 231) : BV:32
233 : ite(55, 2, 232) : BV:32
234 : ite(74, 232, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : lambda(52, 235) : FUNCTION[BV:32 -> BV:32]
237 : map(51, 236) : MAP[BV:32 -> BV:32]
238 : lambda(17, 237) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
239 : map(16, 238) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
240 : sym_const(239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16958 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65 { 0x41 +1.774e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16961 : BV:32
18 : Lambda16959 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 66 { 0x42 +1.786e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16960 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : bvmul(34, 52) : BV:32
58 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
59 : bvmul(34, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
62 : eq(60, 61) : BOOL
63 : 244 { 0xf4 -12 } : BV:8
64 : eq(60, 58) : BOOL
65 : 134 { 0x86 -122 } : BV:8
66 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
67 : eq(60, 66) : BOOL
68 : 255 { 0xff -1 } : BV:8
69 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
70 : eq(60, 69) : BOOL
71 : 240 { 0xf0 -16 } : BV:8
72 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
73 : eq(60, 72) : BOOL
74 : 127 { 0x7f } : BV:8
75 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
76 : eq(60, 75) : BOOL
77 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
78 : eq(60, 77) : BOOL
79 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
80 : eq(60, 79) : BOOL
81 : 247 { 0xf7 -9 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(78, 68, 83) : BV:8
85 : ite(76, 68, 84) : BV:8
86 : ite(73, 74, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : ite(62, 63, 89) : BV:8
91 : bvadd(77, 59) : BV:32
92 : eq(91, 61) : BOOL
93 : eq(91, 58) : BOOL
94 : eq(91, 66) : BOOL
95 : eq(91, 69) : BOOL
96 : eq(91, 72) : BOOL
97 : eq(91, 75) : BOOL
98 : eq(91, 77) : BOOL
99 : eq(91, 79) : BOOL
100 : ite(99, 81, 82) : BV:8
101 : ite(98, 68, 100) : BV:8
102 : ite(97, 68, 101) : BV:8
103 : ite(96, 74, 102) : BV:8
104 : ite(95, 71, 103) : BV:8
105 : ite(94, 68, 104) : BV:8
106 : ite(93, 65, 105) : BV:8
107 : ite(92, 63, 106) : BV:8
108 : bvadd(79, 59) : BV:32
109 : eq(108, 61) : BOOL
110 : eq(108, 58) : BOOL
111 : eq(108, 66) : BOOL
112 : eq(108, 69) : BOOL
113 : eq(108, 72) : BOOL
114 : eq(108, 75) : BOOL
115 : eq(108, 77) : BOOL
116 : eq(108, 79) : BOOL
117 : ite(116, 81, 82) : BV:8
118 : ite(115, 68, 117) : BV:8
119 : ite(114, 68, 118) : BV:8
120 : ite(113, 74, 119) : BV:8
121 : ite(112, 71, 120) : BV:8
122 : ite(111, 68, 121) : BV:8
123 : ite(110, 65, 122) : BV:8
124 : ite(109, 63, 123) : BV:8
125 : bvadd(69, 59) : BV:32
126 : eq(125, 61) : BOOL
127 : eq(125, 58) : BOOL
128 : eq(125, 66) : BOOL
129 : eq(125, 69) : BOOL
130 : eq(125, 72) : BOOL
131 : eq(125, 75) : BOOL
132 : eq(125, 77) : BOOL
133 : eq(125, 79) : BOOL
134 : ite(133, 81, 82) : BV:8
135 : ite(132, 68, 134) : BV:8
136 : ite(131, 68, 135) : BV:8
137 : ite(130, 74, 136) : BV:8
138 : ite(129, 71, 137) : BV:8
139 : ite(128, 68, 138) : BV:8
140 : ite(127, 65, 139) : BV:8
141 : ite(126, 63, 140) : BV:8
142 : bvconcat(90, 107, 124, 141) : BV:32
143 : bvadd(56, 57, 142) : BV:32
144 : eq(143, 61) : BOOL
145 : eq(143, 58) : BOOL
146 : eq(143, 66) : BOOL
147 : eq(143, 69) : BOOL
148 : eq(143, 72) : BOOL
149 : eq(143, 75) : BOOL
150 : eq(143, 77) : BOOL
151 : eq(143, 79) : BOOL
152 : ite(151, 81, 82) : BV:8
153 : ite(150, 68, 152) : BV:8
154 : ite(149, 68, 153) : BV:8
155 : ite(148, 74, 154) : BV:8
156 : ite(147, 71, 155) : BV:8
157 : ite(146, 68, 156) : BV:8
158 : ite(145, 65, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : 2 { 0x2 +1.23e129 } : BV:32
161 : bvadd(160, 57, 142) : BV:32
162 : eq(161, 61) : BOOL
163 : eq(161, 58) : BOOL
164 : eq(161, 66) : BOOL
165 : eq(161, 69) : BOOL
166 : eq(161, 72) : BOOL
167 : eq(161, 75) : BOOL
168 : eq(161, 77) : BOOL
169 : eq(161, 79) : BOOL
170 : ite(169, 81, 82) : BV:8
171 : ite(168, 68, 170) : BV:8
172 : ite(167, 68, 171) : BV:8
173 : ite(166, 74, 172) : BV:8
174 : ite(165, 71, 173) : BV:8
175 : ite(164, 68, 174) : BV:8
176 : ite(163, 65, 175) : BV:8
177 : ite(162, 63, 176) : BV:8
178 : 1 { 0x1 +1.11e129 } : BV:32
179 : bvadd(178, 57, 142) : BV:32
180 : eq(179, 61) : BOOL
181 : eq(179, 58) : BOOL
182 : eq(179, 66) : BOOL
183 : eq(179, 69) : BOOL
184 : eq(179, 72) : BOOL
185 : eq(179, 75) : BOOL
186 : eq(179, 77) : BOOL
187 : eq(179, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 68, 188) : BV:8
190 : ite(185, 68, 189) : BV:8
191 : ite(184, 74, 190) : BV:8
192 : ite(183, 71, 191) : BV:8
193 : ite(182, 68, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : ite(180, 63, 194) : BV:8
196 : bvadd(57, 142) : BV:32
197 : eq(196, 61) : BOOL
198 : eq(196, 58) : BOOL
199 : eq(196, 66) : BOOL
200 : eq(196, 69) : BOOL
201 : eq(196, 72) : BOOL
202 : eq(196, 75) : BOOL
203 : eq(196, 77) : BOOL
204 : eq(196, 79) : BOOL
205 : ite(204, 81, 82) : BV:8
206 : ite(203, 68, 205) : BV:8
207 : ite(202, 68, 206) : BV:8
208 : ite(201, 74, 207) : BV:8
209 : ite(200, 71, 208) : BV:8
210 : ite(199, 68, 209) : BV:8
211 : ite(198, 65, 210) : BV:8
212 : ite(197, 63, 211) : BV:8
213 : bvconcat(159, 177, 195, 212) : BV:32
214 : ite(55, 2, 213) : BV:32
215 : lambda(52, 214) : FUNCTION[BV:32 -> BV:32]
216 : map(51, 215) : MAP[BV:32 -> BV:32]
217 : lambda(17, 216) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
218 : map(16, 217) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
219 : sym_const(218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16963 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16964 : BV:32
18 : eq(17, 4) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : bvmul(4, 17) : BV:32
21 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
22 : bvadd(19, 20, 21) : BV:32
23 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
24 : eq(22, 23) : BOOL
25 : 244 { 0xf4 -12 } : BV:8
26 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
27 : eq(22, 26) : BOOL
28 : 134 { 0x86 -122 } : BV:8
29 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
30 : eq(22, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
33 : eq(22, 32) : BOOL
34 : 240 { 0xf0 -16 } : BV:8
35 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
36 : eq(22, 35) : BOOL
37 : 127 { 0x7f } : BV:8
38 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
41 : eq(22, 40) : BOOL
42 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
43 : eq(22, 42) : BOOL
44 : 247 { 0xf7 -9 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(41, 31, 46) : BV:8
48 : ite(39, 31, 47) : BV:8
49 : ite(36, 37, 48) : BV:8
50 : ite(33, 34, 49) : BV:8
51 : ite(30, 31, 50) : BV:8
52 : ite(27, 28, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 35) : BOOL
61 : eq(55, 38) : BOOL
62 : eq(55, 40) : BOOL
63 : eq(55, 42) : BOOL
64 : ite(63, 44, 45) : BV:8
65 : ite(62, 31, 64) : BV:8
66 : ite(61, 31, 65) : BV:8
67 : ite(60, 37, 66) : BV:8
68 : ite(59, 34, 67) : BV:8
69 : ite(58, 31, 68) : BV:8
70 : ite(57, 28, 69) : BV:8
71 : ite(56, 25, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 20, 21) : BV:32
74 : eq(73, 23) : BOOL
75 : eq(73, 26) : BOOL
76 : eq(73, 29) : BOOL
77 : eq(73, 32) : BOOL
78 : eq(73, 35) : BOOL
79 : eq(73, 38) : BOOL
80 : eq(73, 40) : BOOL
81 : eq(73, 42) : BOOL
82 : ite(81, 44, 45) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 31, 83) : BV:8
85 : ite(78, 37, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 31, 86) : BV:8
88 : ite(75, 28, 87) : BV:8
89 : ite(74, 25, 88) : BV:8
90 : bvadd(20, 21) : BV:32
91 : eq(90, 23) : BOOL
92 : eq(90, 26) : BOOL
93 : eq(90, 29) : BOOL
94 : eq(90, 32) : BOOL
95 : eq(90, 35) : BOOL
96 : eq(90, 38) : BOOL
97 : eq(90, 40) : BOOL
98 : eq(90, 42) : BOOL
99 : ite(98, 44, 45) : BV:8
100 : ite(97, 31, 99) : BV:8
101 : ite(96, 31, 100) : BV:8
102 : ite(95, 37, 101) : BV:8
103 : ite(94, 34, 102) : BV:8
104 : ite(93, 31, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 25, 105) : BV:8
107 : bvconcat(53, 71, 89, 106) : BV:32
108 : ite(18, 2, 107) : BV:32
109 : lambda(17, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(16, 109) : MAP[BV:32 -> BV:32]
111 : sym_const(110) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
=input.dst.llvm-%n
1 : 65 { 0x41 +1.774e129 } : BV:32
=input.dst.llvm-%m
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741567 ] -> 0, [ 1073741568; 1073741568 ] -> 240, [ 1073741569; 1073741569 ] -> 247, [ 1073741570; 1073741570 ] -> 255, [ 1073741571; 1073741571 ] -> 134, [ 1073741572; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 244, [ 1073741825; 1073741826 ] -> 255, [ 1073741827; 1073741827 ] -> 127, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 845988947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 845988948; 845988951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 845988952; 1066385715 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1066385716; 1066385719 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1066385720; 1666767831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1666767832; 1666767835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1666767836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 845988948 { 0x326cc454 +1.84974145e229 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1666767832 { 0x6358dbd8 +1.69420909e71 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1066385716 { 0x3f8fc134 +1.12308359e0 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 65 { 0x41 +1.774e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
2 : unit : UNIT
3 : Lambda16955 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 5 { 0x5 +1.59e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda16956 : BV:32
20 : eq(19, 6) : BOOL
21 : eq(19, 4) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvmul(6, 19) : BV:32
24 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
25 : bvadd(22, 23, 24) : BV:32
26 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
27 : eq(25, 26) : BOOL
28 : 244 { 0xf4 -12 } : BV:8
29 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
30 : eq(25, 29) : BOOL
31 : 134 { 0x86 -122 } : BV:8
32 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
33 : eq(25, 32) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
36 : eq(25, 35) : BOOL
37 : 240 { 0xf0 -16 } : BV:8
38 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
39 : eq(25, 38) : BOOL
40 : 127 { 0x7f } : BV:8
41 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
42 : eq(25, 41) : BOOL
43 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
44 : eq(25, 43) : BOOL
45 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
46 : eq(25, 45) : BOOL
47 : 247 { 0xf7 -9 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(44, 34, 49) : BV:8
51 : ite(42, 34, 50) : BV:8
52 : ite(39, 40, 51) : BV:8
53 : ite(36, 37, 52) : BV:8
54 : ite(33, 34, 53) : BV:8
55 : ite(30, 31, 54) : BV:8
56 : ite(27, 28, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 23, 24) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : eq(58, 32) : BOOL
62 : eq(58, 35) : BOOL
63 : eq(58, 38) : BOOL
64 : eq(58, 41) : BOOL
65 : eq(58, 43) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 34, 67) : BV:8
69 : ite(64, 34, 68) : BV:8
70 : ite(63, 40, 69) : BV:8
71 : ite(62, 37, 70) : BV:8
72 : ite(61, 34, 71) : BV:8
73 : ite(60, 31, 72) : BV:8
74 : ite(59, 28, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 23, 24) : BV:32
77 : eq(76, 26) : BOOL
78 : eq(76, 29) : BOOL
79 : eq(76, 32) : BOOL
80 : eq(76, 35) : BOOL
81 : eq(76, 38) : BOOL
82 : eq(76, 41) : BOOL
83 : eq(76, 43) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 34, 85) : BV:8
87 : ite(82, 34, 86) : BV:8
88 : ite(81, 40, 87) : BV:8
89 : ite(80, 37, 88) : BV:8
90 : ite(79, 34, 89) : BV:8
91 : ite(78, 31, 90) : BV:8
92 : ite(77, 28, 91) : BV:8
93 : bvadd(23, 24) : BV:32
94 : eq(93, 26) : BOOL
95 : eq(93, 29) : BOOL
96 : eq(93, 32) : BOOL
97 : eq(93, 35) : BOOL
98 : eq(93, 38) : BOOL
99 : eq(93, 41) : BOOL
100 : eq(93, 43) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 34, 102) : BV:8
104 : ite(99, 34, 103) : BV:8
105 : ite(98, 40, 104) : BV:8
106 : ite(97, 37, 105) : BV:8
107 : ite(96, 34, 106) : BV:8
108 : ite(95, 31, 107) : BV:8
109 : ite(94, 28, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(21, 4, 110) : BV:32
112 : ite(20, 4, 111) : BV:32
113 : lambda(19, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(18, 113) : MAP[BV:32 -> BV:32]
115 : sum(1, 2, 114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
116 : sym_const(115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1750284402 { 0x68533872 +1.65016007e81 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16966 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16967 : BV:32
18 : eq(17, 4) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : bvmul(4, 17) : BV:32
21 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
22 : bvadd(19, 20, 21) : BV:32
23 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
24 : eq(22, 23) : BOOL
25 : 244 { 0xf4 -12 } : BV:8
26 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
27 : eq(22, 26) : BOOL
28 : 134 { 0x86 -122 } : BV:8
29 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
30 : eq(22, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
33 : eq(22, 32) : BOOL
34 : 240 { 0xf0 -16 } : BV:8
35 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
36 : eq(22, 35) : BOOL
37 : 127 { 0x7f } : BV:8
38 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
39 : eq(22, 38) : BOOL
40 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
41 : eq(22, 40) : BOOL
42 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
43 : eq(22, 42) : BOOL
44 : 247 { 0xf7 -9 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(41, 31, 46) : BV:8
48 : ite(39, 31, 47) : BV:8
49 : ite(36, 37, 48) : BV:8
50 : ite(33, 34, 49) : BV:8
51 : ite(30, 31, 50) : BV:8
52 : ite(27, 28, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 35) : BOOL
61 : eq(55, 38) : BOOL
62 : eq(55, 40) : BOOL
63 : eq(55, 42) : BOOL
64 : ite(63, 44, 45) : BV:8
65 : ite(62, 31, 64) : BV:8
66 : ite(61, 31, 65) : BV:8
67 : ite(60, 37, 66) : BV:8
68 : ite(59, 34, 67) : BV:8
69 : ite(58, 31, 68) : BV:8
70 : ite(57, 28, 69) : BV:8
71 : ite(56, 25, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 20, 21) : BV:32
74 : eq(73, 23) : BOOL
75 : eq(73, 26) : BOOL
76 : eq(73, 29) : BOOL
77 : eq(73, 32) : BOOL
78 : eq(73, 35) : BOOL
79 : eq(73, 38) : BOOL
80 : eq(73, 40) : BOOL
81 : eq(73, 42) : BOOL
82 : ite(81, 44, 45) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 31, 83) : BV:8
85 : ite(78, 37, 84) : BV:8
86 : ite(77, 34, 85) : BV:8
87 : ite(76, 31, 86) : BV:8
88 : ite(75, 28, 87) : BV:8
89 : ite(74, 25, 88) : BV:8
90 : bvadd(20, 21) : BV:32
91 : eq(90, 23) : BOOL
92 : eq(90, 26) : BOOL
93 : eq(90, 29) : BOOL
94 : eq(90, 32) : BOOL
95 : eq(90, 35) : BOOL
96 : eq(90, 38) : BOOL
97 : eq(90, 40) : BOOL
98 : eq(90, 42) : BOOL
99 : ite(98, 44, 45) : BV:8
100 : ite(97, 31, 99) : BV:8
101 : ite(96, 31, 100) : BV:8
102 : ite(95, 37, 101) : BV:8
103 : ite(94, 34, 102) : BV:8
104 : ite(93, 31, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 25, 105) : BV:8
107 : bvconcat(53, 71, 89, 106) : BV:32
108 : ite(18, 2, 107) : BV:32
109 : lambda(17, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(16, 109) : MAP[BV:32 -> BV:32]
111 : sym_const(110) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 747246623 { 0x2c8a141f +1.7873904e218 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1666767832 { 0x6358dbd8 +1.69420909e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1666767835 { 0x6358dbdb +1.69420945e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1066385716 { 0x3f8fc134 +1.12308359e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1066385719 { 0x3f8fc137 +1.12308394e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 845988948 { 0x326cc454 +1.84974145e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 845988951 { 0x326cc457 +1.84974181e229 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 64 ] -> true, [ 65; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16877 : BV:32
2 : Lambda16878 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 64 { 0x40 +1.762e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65 { 0x41 +1.774e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 66 { 0x42 +1.786e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16882 : BV:32
2 : Lambda16883 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 65 { 0x41 +1.774e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 66 { 0x42 +1.786e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4 { 0x4 +1.47e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 5 { 0x5 +1.59e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : bvmul(30, 2) : BV:32
50 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
51 : bvmul(30, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
54 : eq(52, 53) : BOOL
55 : 244 { 0xf4 -12 } : BV:8
56 : eq(52, 50) : BOOL
57 : 134 { 0x86 -122 } : BV:8
58 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
59 : eq(52, 58) : BOOL
60 : 255 { 0xff -1 } : BV:8
61 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
62 : eq(52, 61) : BOOL
63 : 240 { 0xf0 -16 } : BV:8
64 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
65 : eq(52, 64) : BOOL
66 : 127 { 0x7f } : BV:8
67 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
68 : eq(52, 67) : BOOL
69 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
70 : eq(52, 69) : BOOL
71 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
72 : eq(52, 71) : BOOL
73 : 247 { 0xf7 -9 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(70, 60, 75) : BV:8
77 : ite(68, 60, 76) : BV:8
78 : ite(65, 66, 77) : BV:8
79 : ite(62, 63, 78) : BV:8
80 : ite(59, 60, 79) : BV:8
81 : ite(56, 57, 80) : BV:8
82 : ite(54, 55, 81) : BV:8
83 : bvadd(69, 51) : BV:32
84 : eq(83, 53) : BOOL
85 : eq(83, 50) : BOOL
86 : eq(83, 58) : BOOL
87 : eq(83, 61) : BOOL
88 : eq(83, 64) : BOOL
89 : eq(83, 67) : BOOL
90 : eq(83, 69) : BOOL
91 : eq(83, 71) : BOOL
92 : ite(91, 73, 74) : BV:8
93 : ite(90, 60, 92) : BV:8
94 : ite(89, 60, 93) : BV:8
95 : ite(88, 66, 94) : BV:8
96 : ite(87, 63, 95) : BV:8
97 : ite(86, 60, 96) : BV:8
98 : ite(85, 57, 97) : BV:8
99 : ite(84, 55, 98) : BV:8
100 : bvadd(71, 51) : BV:32
101 : eq(100, 53) : BOOL
102 : eq(100, 50) : BOOL
103 : eq(100, 58) : BOOL
104 : eq(100, 61) : BOOL
105 : eq(100, 64) : BOOL
106 : eq(100, 67) : BOOL
107 : eq(100, 69) : BOOL
108 : eq(100, 71) : BOOL
109 : ite(108, 73, 74) : BV:8
110 : ite(107, 60, 109) : BV:8
111 : ite(106, 60, 110) : BV:8
112 : ite(105, 66, 111) : BV:8
113 : ite(104, 63, 112) : BV:8
114 : ite(103, 60, 113) : BV:8
115 : ite(102, 57, 114) : BV:8
116 : ite(101, 55, 115) : BV:8
117 : bvadd(61, 51) : BV:32
118 : eq(117, 53) : BOOL
119 : eq(117, 50) : BOOL
120 : eq(117, 58) : BOOL
121 : eq(117, 61) : BOOL
122 : eq(117, 64) : BOOL
123 : eq(117, 67) : BOOL
124 : eq(117, 69) : BOOL
125 : eq(117, 71) : BOOL
126 : ite(125, 73, 74) : BV:8
127 : ite(124, 60, 126) : BV:8
128 : ite(123, 60, 127) : BV:8
129 : ite(122, 66, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 60, 130) : BV:8
132 : ite(119, 57, 131) : BV:8
133 : ite(118, 55, 132) : BV:8
134 : bvconcat(82, 99, 116, 133) : BV:32
135 : bvadd(48, 49, 134) : BV:32
136 : eq(135, 53) : BOOL
137 : eq(135, 50) : BOOL
138 : eq(135, 58) : BOOL
139 : eq(135, 61) : BOOL
140 : eq(135, 64) : BOOL
141 : eq(135, 67) : BOOL
142 : eq(135, 69) : BOOL
143 : eq(135, 71) : BOOL
144 : ite(143, 73, 74) : BV:8
145 : ite(142, 60, 144) : BV:8
146 : ite(141, 60, 145) : BV:8
147 : ite(140, 66, 146) : BV:8
148 : ite(139, 63, 147) : BV:8
149 : ite(138, 60, 148) : BV:8
150 : ite(137, 57, 149) : BV:8
151 : ite(136, 55, 150) : BV:8
152 : 2 { 0x2 +1.23e129 } : BV:32
153 : bvadd(152, 49, 134) : BV:32
154 : eq(153, 53) : BOOL
155 : eq(153, 50) : BOOL
156 : eq(153, 58) : BOOL
157 : eq(153, 61) : BOOL
158 : eq(153, 64) : BOOL
159 : eq(153, 67) : BOOL
160 : eq(153, 69) : BOOL
161 : eq(153, 71) : BOOL
162 : ite(161, 73, 74) : BV:8
163 : ite(160, 60, 162) : BV:8
164 : ite(159, 60, 163) : BV:8
165 : ite(158, 66, 164) : BV:8
166 : ite(157, 63, 165) : BV:8
167 : ite(156, 60, 166) : BV:8
168 : ite(155, 57, 167) : BV:8
169 : ite(154, 55, 168) : BV:8
170 : 1 { 0x1 +1.11e129 } : BV:32
171 : bvadd(170, 49, 134) : BV:32
172 : eq(171, 53) : BOOL
173 : eq(171, 50) : BOOL
174 : eq(171, 58) : BOOL
175 : eq(171, 61) : BOOL
176 : eq(171, 64) : BOOL
177 : eq(171, 67) : BOOL
178 : eq(171, 69) : BOOL
179 : eq(171, 71) : BOOL
180 : ite(179, 73, 74) : BV:8
181 : ite(178, 60, 180) : BV:8
182 : ite(177, 60, 181) : BV:8
183 : ite(176, 66, 182) : BV:8
184 : ite(175, 63, 183) : BV:8
185 : ite(174, 60, 184) : BV:8
186 : ite(173, 57, 185) : BV:8
187 : ite(172, 55, 186) : BV:8
188 : bvadd(49, 134) : BV:32
189 : eq(188, 53) : BOOL
190 : eq(188, 50) : BOOL
191 : eq(188, 58) : BOOL
192 : eq(188, 61) : BOOL
193 : eq(188, 64) : BOOL
194 : eq(188, 67) : BOOL
195 : eq(188, 69) : BOOL
196 : eq(188, 71) : BOOL
197 : ite(196, 73, 74) : BV:8
198 : ite(195, 60, 197) : BV:8
199 : ite(194, 60, 198) : BV:8
200 : ite(193, 66, 199) : BV:8
201 : ite(192, 63, 200) : BV:8
202 : ite(191, 60, 201) : BV:8
203 : ite(190, 57, 202) : BV:8
204 : ite(189, 55, 203) : BV:8
205 : bvconcat(151, 169, 187, 204) : BV:32
206 : ite(6, 3, 205) : BV:32
207 : ite(47, 205, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 64 ] -> true, [ 65; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16888 : BV:32
2 : Lambda16889 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 64 { 0x40 +1.762e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65 { 0x41 +1.774e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 66 { 0x42 +1.786e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16884 : BV:32
2 : Lambda16885 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 244 { 0xf4 -12 } : BV:8
16 : eq(12, 10) : BOOL
17 : 134 { 0x86 -122 } : BV:8
18 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
19 : eq(12, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
22 : eq(12, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
25 : eq(12, 24) : BOOL
26 : 127 { 0x7f } : BV:8
27 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
28 : eq(12, 27) : BOOL
29 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
30 : eq(12, 29) : BOOL
31 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
32 : eq(12, 31) : BOOL
33 : 247 { 0xf7 -9 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 20, 35) : BV:8
37 : ite(28, 20, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(19, 20, 39) : BV:8
41 : ite(16, 17, 40) : BV:8
42 : ite(14, 15, 41) : BV:8
43 : bvadd(29, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 10) : BOOL
46 : eq(43, 18) : BOOL
47 : eq(43, 21) : BOOL
48 : eq(43, 24) : BOOL
49 : eq(43, 27) : BOOL
50 : eq(43, 29) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 20, 52) : BV:8
54 : ite(49, 20, 53) : BV:8
55 : ite(48, 26, 54) : BV:8
56 : ite(47, 23, 55) : BV:8
57 : ite(46, 20, 56) : BV:8
58 : ite(45, 17, 57) : BV:8
59 : ite(44, 15, 58) : BV:8
60 : bvadd(31, 11) : BV:32
61 : eq(60, 13) : BOOL
62 : eq(60, 10) : BOOL
63 : eq(60, 18) : BOOL
64 : eq(60, 21) : BOOL
65 : eq(60, 24) : BOOL
66 : eq(60, 27) : BOOL
67 : eq(60, 29) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 20, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 26, 71) : BV:8
73 : ite(64, 23, 72) : BV:8
74 : ite(63, 20, 73) : BV:8
75 : ite(62, 17, 74) : BV:8
76 : ite(61, 15, 75) : BV:8
77 : bvadd(21, 11) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 10) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : eq(77, 29) : BOOL
85 : eq(77, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 20, 86) : BV:8
88 : ite(83, 20, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 23, 89) : BV:8
91 : ite(80, 20, 90) : BV:8
92 : ite(79, 17, 91) : BV:8
93 : ite(78, 15, 92) : BV:8
94 : bvconcat(42, 59, 76, 93) : BV:32
95 : bvadd(7, 9, 94) : BV:32
96 : eq(95, 13) : BOOL
97 : eq(95, 10) : BOOL
98 : eq(95, 18) : BOOL
99 : eq(95, 21) : BOOL
100 : eq(95, 24) : BOOL
101 : eq(95, 27) : BOOL
102 : eq(95, 29) : BOOL
103 : eq(95, 31) : BOOL
104 : ite(103, 33, 34) : BV:8
105 : ite(102, 20, 104) : BV:8
106 : ite(101, 20, 105) : BV:8
107 : ite(100, 26, 106) : BV:8
108 : ite(99, 23, 107) : BV:8
109 : ite(98, 20, 108) : BV:8
110 : ite(97, 17, 109) : BV:8
111 : ite(96, 15, 110) : BV:8
112 : 2 { 0x2 +1.23e129 } : BV:32
113 : bvadd(112, 9, 94) : BV:32
114 : eq(113, 13) : BOOL
115 : eq(113, 10) : BOOL
116 : eq(113, 18) : BOOL
117 : eq(113, 21) : BOOL
118 : eq(113, 24) : BOOL
119 : eq(113, 27) : BOOL
120 : eq(113, 29) : BOOL
121 : eq(113, 31) : BOOL
122 : ite(121, 33, 34) : BV:8
123 : ite(120, 20, 122) : BV:8
124 : ite(119, 20, 123) : BV:8
125 : ite(118, 26, 124) : BV:8
126 : ite(117, 23, 125) : BV:8
127 : ite(116, 20, 126) : BV:8
128 : ite(115, 17, 127) : BV:8
129 : ite(114, 15, 128) : BV:8
130 : 1 { 0x1 +1.11e129 } : BV:32
131 : bvadd(130, 9, 94) : BV:32
132 : eq(131, 13) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 18) : BOOL
135 : eq(131, 21) : BOOL
136 : eq(131, 24) : BOOL
137 : eq(131, 27) : BOOL
138 : eq(131, 29) : BOOL
139 : eq(131, 31) : BOOL
140 : ite(139, 33, 34) : BV:8
141 : ite(138, 20, 140) : BV:8
142 : ite(137, 20, 141) : BV:8
143 : ite(136, 26, 142) : BV:8
144 : ite(135, 23, 143) : BV:8
145 : ite(134, 20, 144) : BV:8
146 : ite(133, 17, 145) : BV:8
147 : ite(132, 15, 146) : BV:8
148 : bvadd(9, 94) : BV:32
149 : eq(148, 13) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 18) : BOOL
152 : eq(148, 21) : BOOL
153 : eq(148, 24) : BOOL
154 : eq(148, 27) : BOOL
155 : eq(148, 29) : BOOL
156 : eq(148, 31) : BOOL
157 : ite(156, 33, 34) : BV:8
158 : ite(155, 20, 157) : BV:8
159 : ite(154, 20, 158) : BV:8
160 : ite(153, 26, 159) : BV:8
161 : ite(152, 23, 160) : BV:8
162 : ite(151, 20, 161) : BV:8
163 : ite(150, 17, 162) : BV:8
164 : ite(149, 15, 163) : BV:8
165 : bvconcat(111, 129, 147, 164) : BV:32
166 : ite(6, 3, 165) : BV:32
167 : lambda(1, 2, 166) : FUNCTION[BV:32,BV:32 -> BV:32]
168 : sym_const(167) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16895 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
10 : eq(8, 9) : BOOL
11 : 244 { 0xf4 -12 } : BV:8
12 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
13 : eq(8, 12) : BOOL
14 : 134 { 0x86 -122 } : BV:8
15 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 240 { 0xf0 -16 } : BV:8
21 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
27 : eq(8, 26) : BOOL
28 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
29 : eq(8, 28) : BOOL
30 : 247 { 0xf7 -9 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 17, 32) : BV:8
34 : ite(25, 17, 33) : BV:8
35 : ite(22, 23, 34) : BV:8
36 : ite(19, 20, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 21) : BOOL
47 : eq(41, 24) : BOOL
48 : eq(41, 26) : BOOL
49 : eq(41, 28) : BOOL
50 : ite(49, 30, 31) : BV:8
51 : ite(48, 17, 50) : BV:8
52 : ite(47, 17, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : ite(42, 11, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 6, 7) : BV:32
60 : eq(59, 9) : BOOL
61 : eq(59, 12) : BOOL
62 : eq(59, 15) : BOOL
63 : eq(59, 18) : BOOL
64 : eq(59, 21) : BOOL
65 : eq(59, 24) : BOOL
66 : eq(59, 26) : BOOL
67 : eq(59, 28) : BOOL
68 : ite(67, 30, 31) : BV:8
69 : ite(66, 17, 68) : BV:8
70 : ite(65, 17, 69) : BV:8
71 : ite(64, 23, 70) : BV:8
72 : ite(63, 20, 71) : BV:8
73 : ite(62, 17, 72) : BV:8
74 : ite(61, 14, 73) : BV:8
75 : ite(60, 11, 74) : BV:8
76 : bvadd(6, 7) : BV:32
77 : eq(76, 9) : BOOL
78 : eq(76, 12) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 18) : BOOL
81 : eq(76, 21) : BOOL
82 : eq(76, 24) : BOOL
83 : eq(76, 26) : BOOL
84 : eq(76, 28) : BOOL
85 : ite(84, 30, 31) : BV:8
86 : ite(83, 17, 85) : BV:8
87 : ite(82, 17, 86) : BV:8
88 : ite(81, 23, 87) : BV:8
89 : ite(80, 20, 88) : BV:8
90 : ite(79, 17, 89) : BV:8
91 : ite(78, 14, 90) : BV:8
92 : ite(77, 11, 91) : BV:8
93 : bvconcat(39, 57, 75, 92) : BV:32
94 : ite(3, 4, 93) : BV:32
95 : lambda(1, 94) : FUNCTION[BV:32 -> BV:32]
96 : sym_const(95) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16899 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : eq(9, 10) : BOOL
12 : 244 { 0xf4 -12 } : BV:8
13 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
14 : eq(9, 13) : BOOL
15 : 134 { 0x86 -122 } : BV:8
16 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
20 : eq(9, 19) : BOOL
21 : 240 { 0xf0 -16 } : BV:8
22 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
23 : eq(9, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : eq(9, 25) : BOOL
27 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
28 : eq(9, 27) : BOOL
29 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
30 : eq(9, 29) : BOOL
31 : 247 { 0xf7 -9 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 18, 33) : BV:8
35 : ite(26, 18, 34) : BV:8
36 : ite(23, 24, 35) : BV:8
37 : ite(20, 21, 36) : BV:8
38 : ite(17, 18, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 22) : BOOL
48 : eq(42, 25) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : ite(43, 12, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 7, 8) : BV:32
61 : eq(60, 10) : BOOL
62 : eq(60, 13) : BOOL
63 : eq(60, 16) : BOOL
64 : eq(60, 19) : BOOL
65 : eq(60, 22) : BOOL
66 : eq(60, 25) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 18, 69) : BV:8
71 : ite(66, 18, 70) : BV:8
72 : ite(65, 24, 71) : BV:8
73 : ite(64, 21, 72) : BV:8
74 : ite(63, 18, 73) : BV:8
75 : ite(62, 15, 74) : BV:8
76 : ite(61, 12, 75) : BV:8
77 : bvadd(7, 8) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 13) : BOOL
80 : eq(77, 16) : BOOL
81 : eq(77, 19) : BOOL
82 : eq(77, 22) : BOOL
83 : eq(77, 25) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 18, 87) : BV:8
89 : ite(82, 24, 88) : BV:8
90 : ite(81, 21, 89) : BV:8
91 : ite(80, 18, 90) : BV:8
92 : ite(79, 15, 91) : BV:8
93 : ite(78, 12, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(5, 4, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16903 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
10 : eq(8, 9) : BOOL
11 : 244 { 0xf4 -12 } : BV:8
12 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
13 : eq(8, 12) : BOOL
14 : 134 { 0x86 -122 } : BV:8
15 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 240 { 0xf0 -16 } : BV:8
21 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
27 : eq(8, 26) : BOOL
28 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
29 : eq(8, 28) : BOOL
30 : 247 { 0xf7 -9 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 17, 32) : BV:8
34 : ite(25, 17, 33) : BV:8
35 : ite(22, 23, 34) : BV:8
36 : ite(19, 20, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 21) : BOOL
47 : eq(41, 24) : BOOL
48 : eq(41, 26) : BOOL
49 : eq(41, 28) : BOOL
50 : ite(49, 30, 31) : BV:8
51 : ite(48, 17, 50) : BV:8
52 : ite(47, 17, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : ite(42, 11, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 6, 7) : BV:32
60 : eq(59, 9) : BOOL
61 : eq(59, 12) : BOOL
62 : eq(59, 15) : BOOL
63 : eq(59, 18) : BOOL
64 : eq(59, 21) : BOOL
65 : eq(59, 24) : BOOL
66 : eq(59, 26) : BOOL
67 : eq(59, 28) : BOOL
68 : ite(67, 30, 31) : BV:8
69 : ite(66, 17, 68) : BV:8
70 : ite(65, 17, 69) : BV:8
71 : ite(64, 23, 70) : BV:8
72 : ite(63, 20, 71) : BV:8
73 : ite(62, 17, 72) : BV:8
74 : ite(61, 14, 73) : BV:8
75 : ite(60, 11, 74) : BV:8
76 : bvadd(6, 7) : BV:32
77 : eq(76, 9) : BOOL
78 : eq(76, 12) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 18) : BOOL
81 : eq(76, 21) : BOOL
82 : eq(76, 24) : BOOL
83 : eq(76, 26) : BOOL
84 : eq(76, 28) : BOOL
85 : ite(84, 30, 31) : BV:8
86 : ite(83, 17, 85) : BV:8
87 : ite(82, 17, 86) : BV:8
88 : ite(81, 23, 87) : BV:8
89 : ite(80, 20, 88) : BV:8
90 : ite(79, 17, 89) : BV:8
91 : ite(78, 14, 90) : BV:8
92 : ite(77, 11, 91) : BV:8
93 : bvconcat(39, 57, 75, 92) : BV:32
94 : ite(3, 4, 93) : BV:32
95 : lambda(1, 94) : FUNCTION[BV:32 -> BV:32]
96 : sym_const(95) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3758823080
=counter_example_end
=global nodece 70 num_edges_traversed 1
=global nodece 70 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 71
=global nodece 71 nodece z3.ce6755.num_edges_traversed2
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3.ce6755 c5188a23bb20823426e92d0389d3b18
=input.spec-%var-x-1
1 : Lambda16950 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65 { 0x41 +1.774e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16953 : BV:32
18 : Lambda16951 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 66 { 0x42 +1.786e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16952 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : bvmul(34, 52) : BV:32
77 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
78 : bvmul(34, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
81 : eq(79, 80) : BOOL
82 : 244 { 0xf4 -12 } : BV:8
83 : eq(79, 77) : BOOL
84 : 134 { 0x86 -122 } : BV:8
85 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
86 : eq(79, 85) : BOOL
87 : 255 { 0xff -1 } : BV:8
88 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
89 : eq(79, 88) : BOOL
90 : 240 { 0xf0 -16 } : BV:8
91 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
92 : eq(79, 91) : BOOL
93 : 127 { 0x7f } : BV:8
94 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
95 : eq(79, 94) : BOOL
96 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
97 : eq(79, 96) : BOOL
98 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
99 : eq(79, 98) : BOOL
100 : 247 { 0xf7 -9 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(97, 87, 102) : BV:8
104 : ite(95, 87, 103) : BV:8
105 : ite(92, 93, 104) : BV:8
106 : ite(89, 90, 105) : BV:8
107 : ite(86, 87, 106) : BV:8
108 : ite(83, 84, 107) : BV:8
109 : ite(81, 82, 108) : BV:8
110 : bvadd(96, 78) : BV:32
111 : eq(110, 80) : BOOL
112 : eq(110, 77) : BOOL
113 : eq(110, 85) : BOOL
114 : eq(110, 88) : BOOL
115 : eq(110, 91) : BOOL
116 : eq(110, 94) : BOOL
117 : eq(110, 96) : BOOL
118 : eq(110, 98) : BOOL
119 : ite(118, 100, 101) : BV:8
120 : ite(117, 87, 119) : BV:8
121 : ite(116, 87, 120) : BV:8
122 : ite(115, 93, 121) : BV:8
123 : ite(114, 90, 122) : BV:8
124 : ite(113, 87, 123) : BV:8
125 : ite(112, 84, 124) : BV:8
126 : ite(111, 82, 125) : BV:8
127 : bvadd(98, 78) : BV:32
128 : eq(127, 80) : BOOL
129 : eq(127, 77) : BOOL
130 : eq(127, 85) : BOOL
131 : eq(127, 88) : BOOL
132 : eq(127, 91) : BOOL
133 : eq(127, 94) : BOOL
134 : eq(127, 96) : BOOL
135 : eq(127, 98) : BOOL
136 : ite(135, 100, 101) : BV:8
137 : ite(134, 87, 136) : BV:8
138 : ite(133, 87, 137) : BV:8
139 : ite(132, 93, 138) : BV:8
140 : ite(131, 90, 139) : BV:8
141 : ite(130, 87, 140) : BV:8
142 : ite(129, 84, 141) : BV:8
143 : ite(128, 82, 142) : BV:8
144 : bvadd(88, 78) : BV:32
145 : eq(144, 80) : BOOL
146 : eq(144, 77) : BOOL
147 : eq(144, 85) : BOOL
148 : eq(144, 88) : BOOL
149 : eq(144, 91) : BOOL
150 : eq(144, 94) : BOOL
151 : eq(144, 96) : BOOL
152 : eq(144, 98) : BOOL
153 : ite(152, 100, 101) : BV:8
154 : ite(151, 87, 153) : BV:8
155 : ite(150, 87, 154) : BV:8
156 : ite(149, 93, 155) : BV:8
157 : ite(148, 90, 156) : BV:8
158 : ite(147, 87, 157) : BV:8
159 : ite(146, 84, 158) : BV:8
160 : ite(145, 82, 159) : BV:8
161 : bvconcat(109, 126, 143, 160) : BV:32
162 : bvadd(75, 76, 161) : BV:32
163 : eq(162, 80) : BOOL
164 : eq(162, 77) : BOOL
165 : eq(162, 85) : BOOL
166 : eq(162, 88) : BOOL
167 : eq(162, 91) : BOOL
168 : eq(162, 94) : BOOL
169 : eq(162, 96) : BOOL
170 : eq(162, 98) : BOOL
171 : ite(170, 100, 101) : BV:8
172 : ite(169, 87, 171) : BV:8
173 : ite(168, 87, 172) : BV:8
174 : ite(167, 93, 173) : BV:8
175 : ite(166, 90, 174) : BV:8
176 : ite(165, 87, 175) : BV:8
177 : ite(164, 84, 176) : BV:8
178 : ite(163, 82, 177) : BV:8
179 : 2 { 0x2 +1.23e129 } : BV:32
180 : bvadd(179, 76, 161) : BV:32
181 : eq(180, 80) : BOOL
182 : eq(180, 77) : BOOL
183 : eq(180, 85) : BOOL
184 : eq(180, 88) : BOOL
185 : eq(180, 91) : BOOL
186 : eq(180, 94) : BOOL
187 : eq(180, 96) : BOOL
188 : eq(180, 98) : BOOL
189 : ite(188, 100, 101) : BV:8
190 : ite(187, 87, 189) : BV:8
191 : ite(186, 87, 190) : BV:8
192 : ite(185, 93, 191) : BV:8
193 : ite(184, 90, 192) : BV:8
194 : ite(183, 87, 193) : BV:8
195 : ite(182, 84, 194) : BV:8
196 : ite(181, 82, 195) : BV:8
197 : 1 { 0x1 +1.11e129 } : BV:32
198 : bvadd(197, 76, 161) : BV:32
199 : eq(198, 80) : BOOL
200 : eq(198, 77) : BOOL
201 : eq(198, 85) : BOOL
202 : eq(198, 88) : BOOL
203 : eq(198, 91) : BOOL
204 : eq(198, 94) : BOOL
205 : eq(198, 96) : BOOL
206 : eq(198, 98) : BOOL
207 : ite(206, 100, 101) : BV:8
208 : ite(205, 87, 207) : BV:8
209 : ite(204, 87, 208) : BV:8
210 : ite(203, 93, 209) : BV:8
211 : ite(202, 90, 210) : BV:8
212 : ite(201, 87, 211) : BV:8
213 : ite(200, 84, 212) : BV:8
214 : ite(199, 82, 213) : BV:8
215 : bvadd(76, 161) : BV:32
216 : eq(215, 80) : BOOL
217 : eq(215, 77) : BOOL
218 : eq(215, 85) : BOOL
219 : eq(215, 88) : BOOL
220 : eq(215, 91) : BOOL
221 : eq(215, 94) : BOOL
222 : eq(215, 96) : BOOL
223 : eq(215, 98) : BOOL
224 : ite(223, 100, 101) : BV:8
225 : ite(222, 87, 224) : BV:8
226 : ite(221, 87, 225) : BV:8
227 : ite(220, 93, 226) : BV:8
228 : ite(219, 90, 227) : BV:8
229 : ite(218, 87, 228) : BV:8
230 : ite(217, 84, 229) : BV:8
231 : ite(216, 82, 230) : BV:8
232 : bvconcat(178, 196, 214, 231) : BV:32
233 : ite(55, 2, 232) : BV:32
234 : ite(74, 232, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : lambda(52, 235) : FUNCTION[BV:32 -> BV:32]
237 : map(51, 236) : MAP[BV:32 -> BV:32]
238 : lambda(17, 237) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
239 : map(16, 238) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
240 : sym_const(239) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda16958 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 64 { 0x40 +1.762e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65 { 0x41 +1.774e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16961 : BV:32
18 : Lambda16959 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 66 { 0x42 +1.786e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda16960 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : bvmul(34, 52) : BV:32
58 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
59 : bvmul(34, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
62 : eq(60, 61) : BOOL
63 : 244 { 0xf4 -12 } : BV:8
64 : eq(60, 58) : BOOL
65 : 134 { 0x86 -122 } : BV:8
66 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
67 : eq(60, 66) : BOOL
68 : 255 { 0xff -1 } : BV:8
69 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
70 : eq(60, 69) : BOOL
71 : 240 { 0xf0 -16 } : BV:8
72 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
73 : eq(60, 72) : BOOL
74 : 127 { 0x7f } : BV:8
75 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
76 : eq(60, 75) : BOOL
77 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
78 : eq(60, 77) : BOOL
79 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
80 : eq(60, 79) : BOOL
81 : 247 { 0xf7 -9 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(78, 68, 83) : BV:8
85 : ite(76, 68, 84) : BV:8
86 : ite(73, 74, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : ite(62, 63, 89) : BV:8
91 : bvadd(77, 59) : BV:32
92 : eq(91, 61) : BOOL
93 : eq(91, 58) : BOOL
94 : eq(91, 66) : BOOL
95 : eq(91, 69) : BOOL
96 : eq(91, 72) : BOOL
97 : eq(91, 75) : BOOL
98 : eq(91, 77) : BOOL
99 : eq(91, 79) : BOOL
100 : ite(99, 81, 82) : BV:8
101 : ite(98, 68, 100) : BV:8
102 : ite(97, 68, 101) : BV:8
103 : ite(96, 74, 102) : BV:8
104 : ite(95, 71, 103) : BV:8
105 : ite(94, 68, 104) : BV:8
106 : ite(93, 65, 105) : BV:8
107 : ite(92, 63, 106) : BV:8
108 : bvadd(79, 59) : BV:32
109 : eq(108, 61) : BOOL
110 : eq(108, 58) : BOOL
111 : eq(108, 66) : BOOL
112 : eq(108, 69) : BOOL
113 : eq(108, 72) : BOOL
114 : eq(108, 75) : BOOL
115 : eq(108, 77) : BOOL
116 : eq(108, 79) : BOOL
117 : ite(116, 81, 82) : BV:8
118 : ite(115, 68, 117) : BV:8
119 : ite(114, 68, 118) : BV:8
120 : ite(113, 74, 119) : BV:8
121 : ite(112, 71, 120) : BV:8
122 : ite(111, 68, 121) : BV:8
123 : ite(110, 65, 122) : BV:8
124 : ite(109, 63, 123) : BV:8
125 : bvadd(69, 59) : BV:32
126 : eq(125, 61) : BOOL
127 : eq(125, 58) : BOOL
128 : eq(125, 66) : BOOL
129 : eq(125, 69) : BOOL
130 : eq(125, 72) : BOOL
131 : eq(125, 75) : BOOL
132 : eq(125, 77) : BOOL
133 : eq(125, 79) : BOOL
134 : ite(133, 81, 82) : BV:8
135 : ite(132, 68, 134) : BV:8
136 : ite(131, 68, 135) : BV:8
137 : ite(130, 74, 136) : BV:8
138 : ite(129, 71, 137) : BV:8
139 : ite(128, 68, 138) : BV:8
140 : ite(127, 65, 139) : BV:8
141 : ite(126, 63, 140) : BV:8
142 : bvconcat(90, 107, 124, 141) : BV:32
143 : bvadd(56, 57, 142) : BV:32
144 : eq(143, 61) : BOOL
145 : eq(143, 58) : BOOL
146 : eq(143, 66) : BOOL
147 : eq(143, 69) : BOOL
148 : eq(143, 72) : BOOL
149 : eq(143, 75) : BOOL
150 : eq(143, 77) : BOOL
151 : eq(143, 79) : BOOL
152 : ite(151, 81, 82) : BV:8
153 : ite(150, 68, 152) : BV:8
154 : ite(149, 68, 153) : BV:8
155 : ite(148, 74, 154) : BV:8
156 : ite(147, 71, 155) : BV:8
157 : ite(146, 68, 156) : BV:8
158 : ite(145, 65, 157) : BV:8
159 : ite(144, 63, 158) : BV:8
160 : 2 { 0x2 +1.23e129 } : BV:32
161 : bvadd(160, 57, 142) : BV:32
162 : eq(161, 61) : BOOL
163 : eq(161, 58) : BOOL
164 : eq(161, 66) : BOOL
165 : eq(161, 69) : BOOL
166 : eq(161, 72) : BOOL
167 : eq(161, 75) : BOOL
168 : eq(161, 77) : BOOL
169 : eq(161, 79) : BOOL
170 : ite(169, 81, 82) : BV:8
171 : ite(168, 68, 170) : BV:8
172 : ite(167, 68, 171) : BV:8
173 : ite(166, 74, 172) : BV:8
174 : ite(165, 71, 173) : BV:8
175 : ite(164, 68, 174) : BV:8
176 : ite(163, 65, 175) : BV:8
177 : ite(162, 63, 176) : BV:8
178 : 1 { 0x1 +1.11e129 } : BV:32
179 : bvadd(178, 57, 142) : BV:32
180 : eq(179, 61) : BOOL
181 : eq(179, 58) : BOOL
182 : eq(179, 66) : BOOL
183 : eq(179, 69) : BOOL
184 : eq(179, 72) : BOOL
185 : eq(179, 75) : BOOL
186 : eq(179, 77) : BOOL
187 : eq(179, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 68, 188) : BV:8
190 : ite(185, 68, 189) : BV:8
191 : ite(184, 74, 190) : BV:8
192 : ite(183, 71, 191) : BV:8
193 : ite(182, 68, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : ite(180, 63, 194) : BV:8
196 : bvadd(57, 142) : BV:32
197 : eq(196, 61) : BOOL
198 : eq(196, 58) : BOOL
199 : eq(196, 66) : BOOL
200 : eq(196, 69) : BOOL
201 : eq(196, 72) : BOOL
202 : eq(196, 75) : BOOL
203 : eq(196, 77) : BOOL
204 : eq(196, 79) : BOOL
205 : ite(204, 81, 82) : BV:8
206 : ite(203, 68, 205) : BV:8
207 : ite(202, 68, 206) : BV:8
208 : ite(201, 74, 207) : BV:8
209 : ite(200, 71, 208) : BV:8
210 : ite(199, 68, 209) : BV:8
211 : ite(198, 65, 210) : BV:8
212 : ite(197, 63, 211) : BV:8
213 : bvconcat(159, 177, 195, 212) : BV:32
214 : ite(55, 2, 213) : BV:32
215 : lambda(52, 214) : FUNCTION[BV:32 -> BV:32]
216 : map(51, 215) : MAP[BV:32 -> BV:32]
217 : lambda(17, 216) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
218 : map(16, 217) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
219 : sym_const(218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
=input.dst.llvm-%n
1 : 65 { 0x41 +1.774e129 } : BV:32
=input.dst.llvm-%m
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1073741567 ] -> 0, [ 1073741568; 1073741568 ] -> 240, [ 1073741569; 1073741569 ] -> 247, [ 1073741570; 1073741570 ] -> 255, [ 1073741571; 1073741571 ] -> 134, [ 1073741572; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 244, [ 1073741825; 1073741826 ] -> 255, [ 1073741827; 1073741827 ] -> 127, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 845988947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 845988948; 845988951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 845988952; 1066385715 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1066385716; 1066385719 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1066385720; 1666767831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1666767832; 1666767835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1666767836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 845988948 { 0x326cc454 +1.84974145e229 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1666767832 { 0x6358dbd8 +1.69420909e71 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1066385716 { 0x3f8fc134 +1.12308359e0 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 65 { 0x41 +1.774e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1817543187 { 0x6c558213 +1.66803205e89 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 65 { 0x41 +1.774e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 956917639 { 0x39096787 +1.7347190e243 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1666767832 { 0x6358dbd8 +1.69420909e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1666767835 { 0x6358dbdb +1.69420945e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1066385716 { 0x3f8fc134 +1.12308359e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1066385719 { 0x3f8fc137 +1.12308394e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 845988948 { 0x326cc454 +1.84974145e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 845988951 { 0x326cc457 +1.84974181e229 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 64 ] -> true, [ 65; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda16877 : BV:32
2 : Lambda16878 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 64 { 0x40 +1.762e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65 { 0x41 +1.774e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 66 { 0x42 +1.786e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda16882 : BV:32
2 : Lambda16883 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 65 { 0x41 +1.774e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 66 { 0x42 +1.786e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4 { 0x4 +1.47e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 5 { 0x5 +1.59e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : bvmul(30, 2) : BV:32
50 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
51 : bvmul(30, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
54 : eq(52, 53) : BOOL
55 : 244 { 0xf4 -12 } : BV:8
56 : eq(52, 50) : BOOL
57 : 134 { 0x86 -122 } : BV:8
58 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
59 : eq(52, 58) : BOOL
60 : 255 { 0xff -1 } : BV:8
61 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
62 : eq(52, 61) : BOOL
63 : 240 { 0xf0 -16 } : BV:8
64 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
65 : eq(52, 64) : BOOL
66 : 127 { 0x7f } : BV:8
67 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
68 : eq(52, 67) : BOOL
69 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
70 : eq(52, 69) : BOOL
71 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
72 : eq(52, 71) : BOOL
73 : 247 { 0xf7 -9 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(70, 60, 75) : BV:8
77 : ite(68, 60, 76) : BV:8
78 : ite(65, 66, 77) : BV:8
79 : ite(62, 63, 78) : BV:8
80 : ite(59, 60, 79) : BV:8
81 : ite(56, 57, 80) : BV:8
82 : ite(54, 55, 81) : BV:8
83 : bvadd(69, 51) : BV:32
84 : eq(83, 53) : BOOL
85 : eq(83, 50) : BOOL
86 : eq(83, 58) : BOOL
87 : eq(83, 61) : BOOL
88 : eq(83, 64) : BOOL
89 : eq(83, 67) : BOOL
90 : eq(83, 69) : BOOL
91 : eq(83, 71) : BOOL
92 : ite(91, 73, 74) : BV:8
93 : ite(90, 60, 92) : BV:8
94 : ite(89, 60, 93) : BV:8
95 : ite(88, 66, 94) : BV:8
96 : ite(87, 63, 95) : BV:8
97 : ite(86, 60, 96) : BV:8
98 : ite(85, 57, 97) : BV:8
99 : ite(84, 55, 98) : BV:8
100 : bvadd(71, 51) : BV:32
101 : eq(100, 53) : BOOL
102 : eq(100, 50) : BOOL
103 : eq(100, 58) : BOOL
104 : eq(100, 61) : BOOL
105 : eq(100, 64) : BOOL
106 : eq(100, 67) : BOOL
107 : eq(100, 69) : BOOL
108 : eq(100, 71) : BOOL
109 : ite(108, 73, 74) : BV:8
110 : ite(107, 60, 109) : BV:8
111 : ite(106, 60, 110) : BV:8
112 : ite(105, 66, 111) : BV:8
113 : ite(104, 63, 112) : BV:8
114 : ite(103, 60, 113) : BV:8
115 : ite(102, 57, 114) : BV:8
116 : ite(101, 55, 115) : BV:8
117 : bvadd(61, 51) : BV:32
118 : eq(117, 53) : BOOL
119 : eq(117, 50) : BOOL
120 : eq(117, 58) : BOOL
121 : eq(117, 61) : BOOL
122 : eq(117, 64) : BOOL
123 : eq(117, 67) : BOOL
124 : eq(117, 69) : BOOL
125 : eq(117, 71) : BOOL
126 : ite(125, 73, 74) : BV:8
127 : ite(124, 60, 126) : BV:8
128 : ite(123, 60, 127) : BV:8
129 : ite(122, 66, 128) : BV:8
130 : ite(121, 63, 129) : BV:8
131 : ite(120, 60, 130) : BV:8
132 : ite(119, 57, 131) : BV:8
133 : ite(118, 55, 132) : BV:8
134 : bvconcat(82, 99, 116, 133) : BV:32
135 : bvadd(48, 49, 134) : BV:32
136 : eq(135, 53) : BOOL
137 : eq(135, 50) : BOOL
138 : eq(135, 58) : BOOL
139 : eq(135, 61) : BOOL
140 : eq(135, 64) : BOOL
141 : eq(135, 67) : BOOL
142 : eq(135, 69) : BOOL
143 : eq(135, 71) : BOOL
144 : ite(143, 73, 74) : BV:8
145 : ite(142, 60, 144) : BV:8
146 : ite(141, 60, 145) : BV:8
147 : ite(140, 66, 146) : BV:8
148 : ite(139, 63, 147) : BV:8
149 : ite(138, 60, 148) : BV:8
150 : ite(137, 57, 149) : BV:8
151 : ite(136, 55, 150) : BV:8
152 : 2 { 0x2 +1.23e129 } : BV:32
153 : bvadd(152, 49, 134) : BV:32
154 : eq(153, 53) : BOOL
155 : eq(153, 50) : BOOL
156 : eq(153, 58) : BOOL
157 : eq(153, 61) : BOOL
158 : eq(153, 64) : BOOL
159 : eq(153, 67) : BOOL
160 : eq(153, 69) : BOOL
161 : eq(153, 71) : BOOL
162 : ite(161, 73, 74) : BV:8
163 : ite(160, 60, 162) : BV:8
164 : ite(159, 60, 163) : BV:8
165 : ite(158, 66, 164) : BV:8
166 : ite(157, 63, 165) : BV:8
167 : ite(156, 60, 166) : BV:8
168 : ite(155, 57, 167) : BV:8
169 : ite(154, 55, 168) : BV:8
170 : 1 { 0x1 +1.11e129 } : BV:32
171 : bvadd(170, 49, 134) : BV:32
172 : eq(171, 53) : BOOL
173 : eq(171, 50) : BOOL
174 : eq(171, 58) : BOOL
175 : eq(171, 61) : BOOL
176 : eq(171, 64) : BOOL
177 : eq(171, 67) : BOOL
178 : eq(171, 69) : BOOL
179 : eq(171, 71) : BOOL
180 : ite(179, 73, 74) : BV:8
181 : ite(178, 60, 180) : BV:8
182 : ite(177, 60, 181) : BV:8
183 : ite(176, 66, 182) : BV:8
184 : ite(175, 63, 183) : BV:8
185 : ite(174, 60, 184) : BV:8
186 : ite(173, 57, 185) : BV:8
187 : ite(172, 55, 186) : BV:8
188 : bvadd(49, 134) : BV:32
189 : eq(188, 53) : BOOL
190 : eq(188, 50) : BOOL
191 : eq(188, 58) : BOOL
192 : eq(188, 61) : BOOL
193 : eq(188, 64) : BOOL
194 : eq(188, 67) : BOOL
195 : eq(188, 69) : BOOL
196 : eq(188, 71) : BOOL
197 : ite(196, 73, 74) : BV:8
198 : ite(195, 60, 197) : BV:8
199 : ite(194, 60, 198) : BV:8
200 : ite(193, 66, 199) : BV:8
201 : ite(192, 63, 200) : BV:8
202 : ite(191, 60, 201) : BV:8
203 : ite(190, 57, 202) : BV:8
204 : ite(189, 55, 203) : BV:8
205 : bvconcat(151, 169, 187, 204) : BV:32
206 : ite(6, 3, 205) : BV:32
207 : ite(47, 205, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : lambda(1, 2, 208) : FUNCTION[BV:32,BV:32 -> BV:32]
210 : sym_const(209) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 64 ] -> true, [ 65; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda16888 : BV:32
2 : Lambda16889 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 64 { 0x40 +1.762e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 65 { 0x41 +1.774e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 66 { 0x42 +1.786e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda16884 : BV:32
2 : Lambda16885 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 244 { 0xf4 -12 } : BV:8
16 : eq(12, 10) : BOOL
17 : 134 { 0x86 -122 } : BV:8
18 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
19 : eq(12, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
22 : eq(12, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
25 : eq(12, 24) : BOOL
26 : 127 { 0x7f } : BV:8
27 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
28 : eq(12, 27) : BOOL
29 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
30 : eq(12, 29) : BOOL
31 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
32 : eq(12, 31) : BOOL
33 : 247 { 0xf7 -9 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 20, 35) : BV:8
37 : ite(28, 20, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(19, 20, 39) : BV:8
41 : ite(16, 17, 40) : BV:8
42 : ite(14, 15, 41) : BV:8
43 : bvadd(29, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 10) : BOOL
46 : eq(43, 18) : BOOL
47 : eq(43, 21) : BOOL
48 : eq(43, 24) : BOOL
49 : eq(43, 27) : BOOL
50 : eq(43, 29) : BOOL
51 : eq(43, 31) : BOOL
52 : ite(51, 33, 34) : BV:8
53 : ite(50, 20, 52) : BV:8
54 : ite(49, 20, 53) : BV:8
55 : ite(48, 26, 54) : BV:8
56 : ite(47, 23, 55) : BV:8
57 : ite(46, 20, 56) : BV:8
58 : ite(45, 17, 57) : BV:8
59 : ite(44, 15, 58) : BV:8
60 : bvadd(31, 11) : BV:32
61 : eq(60, 13) : BOOL
62 : eq(60, 10) : BOOL
63 : eq(60, 18) : BOOL
64 : eq(60, 21) : BOOL
65 : eq(60, 24) : BOOL
66 : eq(60, 27) : BOOL
67 : eq(60, 29) : BOOL
68 : eq(60, 31) : BOOL
69 : ite(68, 33, 34) : BV:8
70 : ite(67, 20, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 26, 71) : BV:8
73 : ite(64, 23, 72) : BV:8
74 : ite(63, 20, 73) : BV:8
75 : ite(62, 17, 74) : BV:8
76 : ite(61, 15, 75) : BV:8
77 : bvadd(21, 11) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 10) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : eq(77, 29) : BOOL
85 : eq(77, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 20, 86) : BV:8
88 : ite(83, 20, 87) : BV:8
89 : ite(82, 26, 88) : BV:8
90 : ite(81, 23, 89) : BV:8
91 : ite(80, 20, 90) : BV:8
92 : ite(79, 17, 91) : BV:8
93 : ite(78, 15, 92) : BV:8
94 : bvconcat(42, 59, 76, 93) : BV:32
95 : bvadd(7, 9, 94) : BV:32
96 : eq(95, 13) : BOOL
97 : eq(95, 10) : BOOL
98 : eq(95, 18) : BOOL
99 : eq(95, 21) : BOOL
100 : eq(95, 24) : BOOL
101 : eq(95, 27) : BOOL
102 : eq(95, 29) : BOOL
103 : eq(95, 31) : BOOL
104 : ite(103, 33, 34) : BV:8
105 : ite(102, 20, 104) : BV:8
106 : ite(101, 20, 105) : BV:8
107 : ite(100, 26, 106) : BV:8
108 : ite(99, 23, 107) : BV:8
109 : ite(98, 20, 108) : BV:8
110 : ite(97, 17, 109) : BV:8
111 : ite(96, 15, 110) : BV:8
112 : 2 { 0x2 +1.23e129 } : BV:32
113 : bvadd(112, 9, 94) : BV:32
114 : eq(113, 13) : BOOL
115 : eq(113, 10) : BOOL
116 : eq(113, 18) : BOOL
117 : eq(113, 21) : BOOL
118 : eq(113, 24) : BOOL
119 : eq(113, 27) : BOOL
120 : eq(113, 29) : BOOL
121 : eq(113, 31) : BOOL
122 : ite(121, 33, 34) : BV:8
123 : ite(120, 20, 122) : BV:8
124 : ite(119, 20, 123) : BV:8
125 : ite(118, 26, 124) : BV:8
126 : ite(117, 23, 125) : BV:8
127 : ite(116, 20, 126) : BV:8
128 : ite(115, 17, 127) : BV:8
129 : ite(114, 15, 128) : BV:8
130 : 1 { 0x1 +1.11e129 } : BV:32
131 : bvadd(130, 9, 94) : BV:32
132 : eq(131, 13) : BOOL
133 : eq(131, 10) : BOOL
134 : eq(131, 18) : BOOL
135 : eq(131, 21) : BOOL
136 : eq(131, 24) : BOOL
137 : eq(131, 27) : BOOL
138 : eq(131, 29) : BOOL
139 : eq(131, 31) : BOOL
140 : ite(139, 33, 34) : BV:8
141 : ite(138, 20, 140) : BV:8
142 : ite(137, 20, 141) : BV:8
143 : ite(136, 26, 142) : BV:8
144 : ite(135, 23, 143) : BV:8
145 : ite(134, 20, 144) : BV:8
146 : ite(133, 17, 145) : BV:8
147 : ite(132, 15, 146) : BV:8
148 : bvadd(9, 94) : BV:32
149 : eq(148, 13) : BOOL
150 : eq(148, 10) : BOOL
151 : eq(148, 18) : BOOL
152 : eq(148, 21) : BOOL
153 : eq(148, 24) : BOOL
154 : eq(148, 27) : BOOL
155 : eq(148, 29) : BOOL
156 : eq(148, 31) : BOOL
157 : ite(156, 33, 34) : BV:8
158 : ite(155, 20, 157) : BV:8
159 : ite(154, 20, 158) : BV:8
160 : ite(153, 26, 159) : BV:8
161 : ite(152, 23, 160) : BV:8
162 : ite(151, 20, 161) : BV:8
163 : ite(150, 17, 162) : BV:8
164 : ite(149, 15, 163) : BV:8
165 : bvconcat(111, 129, 147, 164) : BV:32
166 : ite(6, 3, 165) : BV:32
167 : lambda(1, 2, 166) : FUNCTION[BV:32,BV:32 -> BV:32]
168 : sym_const(167) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda16895 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
10 : eq(8, 9) : BOOL
11 : 244 { 0xf4 -12 } : BV:8
12 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
13 : eq(8, 12) : BOOL
14 : 134 { 0x86 -122 } : BV:8
15 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 240 { 0xf0 -16 } : BV:8
21 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
27 : eq(8, 26) : BOOL
28 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
29 : eq(8, 28) : BOOL
30 : 247 { 0xf7 -9 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 17, 32) : BV:8
34 : ite(25, 17, 33) : BV:8
35 : ite(22, 23, 34) : BV:8
36 : ite(19, 20, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 21) : BOOL
47 : eq(41, 24) : BOOL
48 : eq(41, 26) : BOOL
49 : eq(41, 28) : BOOL
50 : ite(49, 30, 31) : BV:8
51 : ite(48, 17, 50) : BV:8
52 : ite(47, 17, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : ite(42, 11, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 6, 7) : BV:32
60 : eq(59, 9) : BOOL
61 : eq(59, 12) : BOOL
62 : eq(59, 15) : BOOL
63 : eq(59, 18) : BOOL
64 : eq(59, 21) : BOOL
65 : eq(59, 24) : BOOL
66 : eq(59, 26) : BOOL
67 : eq(59, 28) : BOOL
68 : ite(67, 30, 31) : BV:8
69 : ite(66, 17, 68) : BV:8
70 : ite(65, 17, 69) : BV:8
71 : ite(64, 23, 70) : BV:8
72 : ite(63, 20, 71) : BV:8
73 : ite(62, 17, 72) : BV:8
74 : ite(61, 14, 73) : BV:8
75 : ite(60, 11, 74) : BV:8
76 : bvadd(6, 7) : BV:32
77 : eq(76, 9) : BOOL
78 : eq(76, 12) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 18) : BOOL
81 : eq(76, 21) : BOOL
82 : eq(76, 24) : BOOL
83 : eq(76, 26) : BOOL
84 : eq(76, 28) : BOOL
85 : ite(84, 30, 31) : BV:8
86 : ite(83, 17, 85) : BV:8
87 : ite(82, 17, 86) : BV:8
88 : ite(81, 23, 87) : BV:8
89 : ite(80, 20, 88) : BV:8
90 : ite(79, 17, 89) : BV:8
91 : ite(78, 14, 90) : BV:8
92 : ite(77, 11, 91) : BV:8
93 : bvconcat(39, 57, 75, 92) : BV:32
94 : ite(3, 4, 93) : BV:32
95 : lambda(1, 94) : FUNCTION[BV:32 -> BV:32]
96 : sym_const(95) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda16899 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : eq(9, 10) : BOOL
12 : 244 { 0xf4 -12 } : BV:8
13 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
14 : eq(9, 13) : BOOL
15 : 134 { 0x86 -122 } : BV:8
16 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
17 : eq(9, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
20 : eq(9, 19) : BOOL
21 : 240 { 0xf0 -16 } : BV:8
22 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
23 : eq(9, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
26 : eq(9, 25) : BOOL
27 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
28 : eq(9, 27) : BOOL
29 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
30 : eq(9, 29) : BOOL
31 : 247 { 0xf7 -9 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 18, 33) : BV:8
35 : ite(26, 18, 34) : BV:8
36 : ite(23, 24, 35) : BV:8
37 : ite(20, 21, 36) : BV:8
38 : ite(17, 18, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 22) : BOOL
48 : eq(42, 25) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : ite(43, 12, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 7, 8) : BV:32
61 : eq(60, 10) : BOOL
62 : eq(60, 13) : BOOL
63 : eq(60, 16) : BOOL
64 : eq(60, 19) : BOOL
65 : eq(60, 22) : BOOL
66 : eq(60, 25) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 18, 69) : BV:8
71 : ite(66, 18, 70) : BV:8
72 : ite(65, 24, 71) : BV:8
73 : ite(64, 21, 72) : BV:8
74 : ite(63, 18, 73) : BV:8
75 : ite(62, 15, 74) : BV:8
76 : ite(61, 12, 75) : BV:8
77 : bvadd(7, 8) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 13) : BOOL
80 : eq(77, 16) : BOOL
81 : eq(77, 19) : BOOL
82 : eq(77, 22) : BOOL
83 : eq(77, 25) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 18, 87) : BV:8
89 : ite(82, 24, 88) : BV:8
90 : ite(81, 21, 89) : BV:8
91 : ite(80, 18, 90) : BV:8
92 : ite(79, 15, 91) : BV:8
93 : ite(78, 12, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(5, 4, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda16903 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
10 : eq(8, 9) : BOOL
11 : 244 { 0xf4 -12 } : BV:8
12 : 1073741571 { 0x3fffff03 +1.99996984e0 } : BV:32
13 : eq(8, 12) : BOOL
14 : 134 { 0x86 -122 } : BV:8
15 : 1073741826 { 0x40000002 +1.23e1 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 1073741568 { 0x3fffff00 +1.99996948e0 } : BV:32
19 : eq(8, 18) : BOOL
20 : 240 { 0xf0 -16 } : BV:8
21 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
25 : eq(8, 24) : BOOL
26 : 1073741570 { 0x3fffff02 +1.99996972e0 } : BV:32
27 : eq(8, 26) : BOOL
28 : 1073741569 { 0x3fffff01 +1.99996960e0 } : BV:32
29 : eq(8, 28) : BOOL
30 : 247 { 0xf7 -9 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : ite(27, 17, 32) : BV:8
34 : ite(25, 17, 33) : BV:8
35 : ite(22, 23, 34) : BV:8
36 : ite(19, 20, 35) : BV:8
37 : ite(16, 17, 36) : BV:8
38 : ite(13, 14, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 6, 7) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : eq(41, 15) : BOOL
45 : eq(41, 18) : BOOL
46 : eq(41, 21) : BOOL
47 : eq(41, 24) : BOOL
48 : eq(41, 26) : BOOL
49 : eq(41, 28) : BOOL
50 : ite(49, 30, 31) : BV:8
51 : ite(48, 17, 50) : BV:8
52 : ite(47, 17, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : ite(42, 11, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 6, 7) : BV:32
60 : eq(59, 9) : BOOL
61 : eq(59, 12) : BOOL
62 : eq(59, 15) : BOOL
63 : eq(59, 18) : BOOL
64 : eq(59, 21) : BOOL
65 : eq(59, 24) : BOOL
66 : eq(59, 26) : BOOL
67 : eq(59, 28) : BOOL
68 : ite(67, 30, 31) : BV:8
69 : ite(66, 17, 68) : BV:8
70 : ite(65, 17, 69) : BV:8
71 : ite(64, 23, 70) : BV:8
72 : ite(63, 20, 71) : BV:8
73 : ite(62, 17, 72) : BV:8
74 : ite(61, 14, 73) : BV:8
75 : ite(60, 11, 74) : BV:8
76 : bvadd(6, 7) : BV:32
77 : eq(76, 9) : BOOL
78 : eq(76, 12) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 18) : BOOL
81 : eq(76, 21) : BOOL
82 : eq(76, 24) : BOOL
83 : eq(76, 26) : BOOL
84 : eq(76, 28) : BOOL
85 : ite(84, 30, 31) : BV:8
86 : ite(83, 17, 85) : BV:8
87 : ite(82, 17, 86) : BV:8
88 : ite(81, 23, 87) : BV:8
89 : ite(80, 20, 88) : BV:8
90 : ite(79, 17, 89) : BV:8
91 : ite(78, 14, 90) : BV:8
92 : ite(77, 11, 91) : BV:8
93 : bvconcat(39, 57, 75, 92) : BV:32
94 : ite(3, 4, 93) : BV:32
95 : lambda(1, 94) : FUNCTION[BV:32 -> BV:32]
96 : sym_const(95) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
535669744
=counter_example_end
=global nodece 71 num_edges_traversed 2
=global nodece 71 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 72
=global nodece 72 nodece z3.ce6787.num_edges_traversed1
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3.ce6787 24eeef278486ea1213165d3eabfe63
=input.spec-%var-x-1
1 : Lambda17302 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17305 : BV:32
18 : Lambda17303 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17304 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
82 : eq(80, 81) : BOOL
83 : 128 { 0x80 -128 } : BV:8
84 : eq(80, 78) : BOOL
85 : 159 { 0x9f -97 } : BV:8
86 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
87 : eq(80, 86) : BOOL
88 : 217 { 0xd9 -39 } : BV:8
89 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
90 : eq(80, 89) : BOOL
91 : 111 { 0x6f } : BV:8
92 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
93 : eq(80, 92) : BOOL
94 : 78 { 0x4e } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(84, 85, 98) : BV:8
100 : ite(82, 83, 99) : BV:8
101 : bvadd(89, 79) : BV:32
102 : eq(101, 81) : BOOL
103 : eq(101, 78) : BOOL
104 : eq(101, 86) : BOOL
105 : eq(101, 89) : BOOL
106 : eq(101, 92) : BOOL
107 : ite(106, 94, 95) : BV:8
108 : ite(105, 91, 107) : BV:8
109 : ite(104, 88, 108) : BV:8
110 : ite(103, 85, 109) : BV:8
111 : ite(102, 83, 110) : BV:8
112 : bvadd(92, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : ite(117, 94, 95) : BV:8
119 : ite(116, 91, 118) : BV:8
120 : ite(115, 88, 119) : BV:8
121 : ite(114, 85, 120) : BV:8
122 : ite(113, 83, 121) : BV:8
123 : bvadd(86, 79) : BV:32
124 : eq(123, 81) : BOOL
125 : eq(123, 78) : BOOL
126 : eq(123, 86) : BOOL
127 : eq(123, 89) : BOOL
128 : eq(123, 92) : BOOL
129 : ite(128, 94, 95) : BV:8
130 : ite(127, 91, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 83, 132) : BV:8
134 : bvconcat(100, 111, 122, 133) : BV:32
135 : bvadd(75, 77, 134) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 78) : BOOL
138 : eq(135, 86) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : ite(140, 94, 95) : BV:8
142 : ite(139, 91, 141) : BV:8
143 : ite(138, 88, 142) : BV:8
144 : ite(137, 85, 143) : BV:8
145 : ite(136, 83, 144) : BV:8
146 : 2 { 0x2 +1.23e129 } : BV:32
147 : bvadd(146, 77, 134) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : ite(152, 94, 95) : BV:8
154 : ite(151, 91, 153) : BV:8
155 : ite(150, 88, 154) : BV:8
156 : ite(149, 85, 155) : BV:8
157 : ite(148, 83, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 77, 134) : BV:32
160 : eq(159, 81) : BOOL
161 : eq(159, 78) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : ite(164, 94, 95) : BV:8
166 : ite(163, 91, 165) : BV:8
167 : ite(162, 88, 166) : BV:8
168 : ite(161, 85, 167) : BV:8
169 : ite(160, 83, 168) : BV:8
170 : bvadd(77, 134) : BV:32
171 : eq(170, 81) : BOOL
172 : eq(170, 78) : BOOL
173 : eq(170, 86) : BOOL
174 : eq(170, 89) : BOOL
175 : eq(170, 92) : BOOL
176 : ite(175, 94, 95) : BV:8
177 : ite(174, 91, 176) : BV:8
178 : ite(173, 88, 177) : BV:8
179 : ite(172, 85, 178) : BV:8
180 : ite(171, 83, 179) : BV:8
181 : bvconcat(145, 157, 169, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : ite(74, 181, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda17310 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17313 : BV:32
18 : Lambda17311 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17312 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
63 : eq(61, 62) : BOOL
64 : 128 { 0x80 -128 } : BV:8
65 : eq(61, 59) : BOOL
66 : 159 { 0x9f -97 } : BV:8
67 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
68 : eq(61, 67) : BOOL
69 : 217 { 0xd9 -39 } : BV:8
70 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
71 : eq(61, 70) : BOOL
72 : 111 { 0x6f } : BV:8
73 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
74 : eq(61, 73) : BOOL
75 : 78 { 0x4e } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : bvadd(70, 60) : BV:32
83 : eq(82, 62) : BOOL
84 : eq(82, 59) : BOOL
85 : eq(82, 67) : BOOL
86 : eq(82, 70) : BOOL
87 : eq(82, 73) : BOOL
88 : ite(87, 75, 76) : BV:8
89 : ite(86, 72, 88) : BV:8
90 : ite(85, 69, 89) : BV:8
91 : ite(84, 66, 90) : BV:8
92 : ite(83, 64, 91) : BV:8
93 : bvadd(73, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : ite(98, 75, 76) : BV:8
100 : ite(97, 72, 99) : BV:8
101 : ite(96, 69, 100) : BV:8
102 : ite(95, 66, 101) : BV:8
103 : ite(94, 64, 102) : BV:8
104 : bvadd(67, 60) : BV:32
105 : eq(104, 62) : BOOL
106 : eq(104, 59) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 70) : BOOL
109 : eq(104, 73) : BOOL
110 : ite(109, 75, 76) : BV:8
111 : ite(108, 72, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 64, 113) : BV:8
115 : bvconcat(81, 92, 103, 114) : BV:32
116 : bvadd(56, 58, 115) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 59) : BOOL
119 : eq(116, 67) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 64, 125) : BV:8
127 : 2 { 0x2 +1.23e129 } : BV:32
128 : bvadd(127, 58, 115) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : ite(133, 75, 76) : BV:8
135 : ite(132, 72, 134) : BV:8
136 : ite(131, 69, 135) : BV:8
137 : ite(130, 66, 136) : BV:8
138 : ite(129, 64, 137) : BV:8
139 : 1 { 0x1 +1.11e129 } : BV:32
140 : bvadd(139, 58, 115) : BV:32
141 : eq(140, 62) : BOOL
142 : eq(140, 59) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : bvadd(58, 115) : BV:32
152 : eq(151, 62) : BOOL
153 : eq(151, 59) : BOOL
154 : eq(151, 67) : BOOL
155 : eq(151, 70) : BOOL
156 : eq(151, 73) : BOOL
157 : ite(156, 75, 76) : BV:8
158 : ite(155, 72, 157) : BV:8
159 : ite(154, 69, 158) : BV:8
160 : ite(153, 66, 159) : BV:8
161 : ite(152, 64, 160) : BV:8
162 : bvconcat(126, 138, 150, 161) : BV:32
163 : ite(55, 2, 162) : BV:32
164 : lambda(52, 163) : FUNCTION[BV:32 -> BV:32]
165 : map(51, 164) : MAP[BV:32 -> BV:32]
166 : lambda(17, 165) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
167 : map(16, 166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
168 : sym_const(167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17315 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17316 : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 128 { 0x80 +1.1525e129 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
28 : eq(26, 27) : BOOL
29 : 128 { 0x80 -128 } : BV:8
30 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
31 : eq(26, 30) : BOOL
32 : 159 { 0x9f -97 } : BV:8
33 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
34 : eq(26, 33) : BOOL
35 : 217 { 0xd9 -39 } : BV:8
36 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
37 : eq(26, 36) : BOOL
38 : 111 { 0x6f } : BV:8
39 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
40 : eq(26, 39) : BOOL
41 : 78 { 0x4e } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 24, 25) : BV:32
50 : eq(49, 27) : BOOL
51 : eq(49, 30) : BOOL
52 : eq(49, 33) : BOOL
53 : eq(49, 36) : BOOL
54 : eq(49, 39) : BOOL
55 : ite(54, 41, 42) : BV:8
56 : ite(53, 38, 55) : BV:8
57 : ite(52, 35, 56) : BV:8
58 : ite(51, 32, 57) : BV:8
59 : ite(50, 29, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : ite(66, 41, 42) : BV:8
68 : ite(65, 38, 67) : BV:8
69 : ite(64, 35, 68) : BV:8
70 : ite(63, 32, 69) : BV:8
71 : ite(62, 29, 70) : BV:8
72 : bvadd(24, 25) : BV:32
73 : eq(72, 27) : BOOL
74 : eq(72, 30) : BOOL
75 : eq(72, 33) : BOOL
76 : eq(72, 36) : BOOL
77 : eq(72, 39) : BOOL
78 : ite(77, 41, 42) : BV:8
79 : ite(76, 38, 78) : BV:8
80 : ite(75, 35, 79) : BV:8
81 : ite(74, 32, 80) : BV:8
82 : ite(73, 29, 81) : BV:8
83 : bvconcat(47, 59, 71, 82) : BV:32
84 : ite(21, 2, 83) : BV:32
85 : ite(19, 2, 84) : BV:32
86 : lambda(17, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(16, 86) : MAP[BV:32 -> BV:32]
88 : sym_const(87) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
=input.dst.llvm-%n
1 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
=input.dst.llvm-%m
1 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2215115775 ] -> 0, [ 2215115776; 2215115776 ] -> 217, [ 2215115777; 2215115777 ] -> 78, [ 2215115778; 2215115778 ] -> 111, [ 2215115779; 2215115779 ] -> 159, [ 2215115780; 2215116795 ] -> 0, [ 2215116796; 2215116796 ] -> 128, [ 2215116797; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1882686467 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1882686468; 1882686471 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1882686472; 2618008735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2618008736; 2618008739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2618008740; 2634623619 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2634623620; 2634623623 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2634623624; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2634623620 { 0x9d092a84 -1660343676 -1.7160997e187 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1882686468 { 0x70378404 +1.43371629e97 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2618008736 { 0x9c0ba4a0 -1676958560 -1.9096145e185 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 1020 { 0x3fc +1.12159e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 16 { 0x10 +1.190e129 } : BV:32
2 : unit : UNIT
3 : Lambda17307 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17308 : BV:32
20 : 256 { 0x100 +1.3051e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 128 { 0x80 +1.1525e129 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
31 : eq(29, 30) : BOOL
32 : 128 { 0x80 -128 } : BV:8
33 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
34 : eq(29, 33) : BOOL
35 : 159 { 0x9f -97 } : BV:8
36 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
37 : eq(29, 36) : BOOL
38 : 217 { 0xd9 -39 } : BV:8
39 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
40 : eq(29, 39) : BOOL
41 : 111 { 0x6f } : BV:8
42 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
43 : eq(29, 42) : BOOL
44 : 78 { 0x4e } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 27, 28) : BV:32
53 : eq(52, 30) : BOOL
54 : eq(52, 33) : BOOL
55 : eq(52, 36) : BOOL
56 : eq(52, 39) : BOOL
57 : eq(52, 42) : BOOL
58 : ite(57, 44, 45) : BV:8
59 : ite(56, 41, 58) : BV:8
60 : ite(55, 38, 59) : BV:8
61 : ite(54, 35, 60) : BV:8
62 : ite(53, 32, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 27, 28) : BV:32
65 : eq(64, 30) : BOOL
66 : eq(64, 33) : BOOL
67 : eq(64, 36) : BOOL
68 : eq(64, 39) : BOOL
69 : eq(64, 42) : BOOL
70 : ite(69, 44, 45) : BV:8
71 : ite(68, 41, 70) : BV:8
72 : ite(67, 38, 71) : BV:8
73 : ite(66, 35, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : bvadd(27, 28) : BV:32
76 : eq(75, 30) : BOOL
77 : eq(75, 33) : BOOL
78 : eq(75, 36) : BOOL
79 : eq(75, 39) : BOOL
80 : eq(75, 42) : BOOL
81 : ite(80, 44, 45) : BV:8
82 : ite(79, 41, 81) : BV:8
83 : ite(78, 38, 82) : BV:8
84 : ite(77, 35, 83) : BV:8
85 : ite(76, 32, 84) : BV:8
86 : bvconcat(50, 62, 74, 85) : BV:32
87 : ite(24, 4, 86) : BV:32
88 : ite(23, 4, 87) : BV:32
89 : ite(21, 4, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : sum(1, 2, 91) : SUM[UNIT,MAP[BV:32 -> BV:32]]
93 : sym_const(92) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1272827854 { 0x4bddcfce +1.73290419e24 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17318 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17319 : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 128 { 0x80 +1.1525e129 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
29 : eq(27, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
32 : eq(27, 31) : BOOL
33 : 159 { 0x9f -97 } : BV:8
34 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
35 : eq(27, 34) : BOOL
36 : 217 { 0xd9 -39 } : BV:8
37 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
38 : eq(27, 37) : BOOL
39 : 111 { 0x6f } : BV:8
40 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
41 : eq(27, 40) : BOOL
42 : 78 { 0x4e } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 25, 26) : BV:32
51 : eq(50, 28) : BOOL
52 : eq(50, 31) : BOOL
53 : eq(50, 34) : BOOL
54 : eq(50, 37) : BOOL
55 : eq(50, 40) : BOOL
56 : ite(55, 42, 43) : BV:8
57 : ite(54, 39, 56) : BV:8
58 : ite(53, 36, 57) : BV:8
59 : ite(52, 33, 58) : BV:8
60 : ite(51, 30, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : ite(67, 42, 43) : BV:8
69 : ite(66, 39, 68) : BV:8
70 : ite(65, 36, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : ite(63, 30, 71) : BV:8
73 : bvadd(25, 26) : BV:32
74 : eq(73, 28) : BOOL
75 : eq(73, 31) : BOOL
76 : eq(73, 34) : BOOL
77 : eq(73, 37) : BOOL
78 : eq(73, 40) : BOOL
79 : ite(78, 42, 43) : BV:8
80 : ite(77, 39, 79) : BV:8
81 : ite(76, 36, 80) : BV:8
82 : ite(75, 33, 81) : BV:8
83 : ite(74, 30, 82) : BV:8
84 : bvconcat(48, 60, 72, 83) : BV:32
85 : ite(22, 2, 84) : BV:32
86 : ite(21, 2, 85) : BV:32
87 : ite(19, 2, 86) : BV:32
88 : lambda(17, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(16, 88) : MAP[BV:32 -> BV:32]
90 : sym_const(89) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1046418247 { 0x3e5f1347 +1.74277579e253 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 101916800 { 0x6132080 +1.14942932e141 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 101916928 { 0x6132100 +1.14944458e141 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 101916800 { 0x6132080 +1.14942932e141 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 101916928 { 0x6132100 +1.14944458e141 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 1020 { 0x3fc +1.12159e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1882686468 { 0x70378404 +1.43371629e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1882686471 { 0x70378407 +1.43371665e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2618008736 { 0x9c0ba4a0 -1676958560 -1.9096145e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2618008739 { 0x9c0ba4a3 -1676958557 -1.9096181e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2634623620 { 0x9d092a84 -1660343676 -1.7160997e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2634623623 { 0x9d092a87 -1660343673 -1.7161033e187 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 25479200 ] -> true, [ 25479201; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17229 : BV:32
2 : Lambda17230 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17234 : BV:32
2 : Lambda17235 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
55 : eq(53, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : eq(53, 51) : BOOL
58 : 159 { 0x9f -97 } : BV:8
59 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
60 : eq(53, 59) : BOOL
61 : 217 { 0xd9 -39 } : BV:8
62 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
63 : eq(53, 62) : BOOL
64 : 111 { 0x6f } : BV:8
65 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
66 : eq(53, 65) : BOOL
67 : 78 { 0x4e } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(55, 56, 72) : BV:8
74 : bvadd(62, 52) : BV:32
75 : eq(74, 54) : BOOL
76 : eq(74, 51) : BOOL
77 : eq(74, 59) : BOOL
78 : eq(74, 62) : BOOL
79 : eq(74, 65) : BOOL
80 : ite(79, 67, 68) : BV:8
81 : ite(78, 64, 80) : BV:8
82 : ite(77, 61, 81) : BV:8
83 : ite(76, 58, 82) : BV:8
84 : ite(75, 56, 83) : BV:8
85 : bvadd(65, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : ite(90, 67, 68) : BV:8
92 : ite(89, 64, 91) : BV:8
93 : ite(88, 61, 92) : BV:8
94 : ite(87, 58, 93) : BV:8
95 : ite(86, 56, 94) : BV:8
96 : bvadd(59, 52) : BV:32
97 : eq(96, 54) : BOOL
98 : eq(96, 51) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 62) : BOOL
101 : eq(96, 65) : BOOL
102 : ite(101, 67, 68) : BV:8
103 : ite(100, 64, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 58, 104) : BV:8
106 : ite(97, 56, 105) : BV:8
107 : bvconcat(73, 84, 95, 106) : BV:32
108 : bvadd(48, 50, 107) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 51) : BOOL
111 : eq(108, 59) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 64, 114) : BV:8
116 : ite(111, 61, 115) : BV:8
117 : ite(110, 58, 116) : BV:8
118 : ite(109, 56, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 50, 107) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : ite(125, 67, 68) : BV:8
127 : ite(124, 64, 126) : BV:8
128 : ite(123, 61, 127) : BV:8
129 : ite(122, 58, 128) : BV:8
130 : ite(121, 56, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 50, 107) : BV:32
133 : eq(132, 54) : BOOL
134 : eq(132, 51) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : ite(137, 67, 68) : BV:8
139 : ite(136, 64, 138) : BV:8
140 : ite(135, 61, 139) : BV:8
141 : ite(134, 58, 140) : BV:8
142 : ite(133, 56, 141) : BV:8
143 : bvadd(50, 107) : BV:32
144 : eq(143, 54) : BOOL
145 : eq(143, 51) : BOOL
146 : eq(143, 59) : BOOL
147 : eq(143, 62) : BOOL
148 : eq(143, 65) : BOOL
149 : ite(148, 67, 68) : BV:8
150 : ite(147, 64, 149) : BV:8
151 : ite(146, 61, 150) : BV:8
152 : ite(145, 58, 151) : BV:8
153 : ite(144, 56, 152) : BV:8
154 : bvconcat(118, 130, 142, 153) : BV:32
155 : ite(6, 3, 154) : BV:32
156 : ite(47, 154, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : lambda(1, 2, 157) : FUNCTION[BV:32,BV:32 -> BV:32]
159 : sym_const(158) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 25479200 ] -> true, [ 25479201; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda17240 : BV:32
2 : Lambda17241 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda17236 : BV:32
2 : Lambda17237 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
14 : eq(12, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : eq(12, 10) : BOOL
17 : 159 { 0x9f -97 } : BV:8
18 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
19 : eq(12, 18) : BOOL
20 : 217 { 0xd9 -39 } : BV:8
21 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
22 : eq(12, 21) : BOOL
23 : 111 { 0x6f } : BV:8
24 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
25 : eq(12, 24) : BOOL
26 : 78 { 0x4e } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : bvadd(21, 11) : BV:32
34 : eq(33, 13) : BOOL
35 : eq(33, 10) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 15, 42) : BV:8
44 : bvadd(24, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 15, 53) : BV:8
55 : bvadd(18, 11) : BV:32
56 : eq(55, 13) : BOOL
57 : eq(55, 10) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 15, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : bvadd(7, 9, 66) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 10) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : ite(72, 26, 27) : BV:8
74 : ite(71, 23, 73) : BV:8
75 : ite(70, 20, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 15, 76) : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : bvadd(78, 9, 66) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : ite(84, 26, 27) : BV:8
86 : ite(83, 23, 85) : BV:8
87 : ite(82, 20, 86) : BV:8
88 : ite(81, 17, 87) : BV:8
89 : ite(80, 15, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 9, 66) : BV:32
92 : eq(91, 13) : BOOL
93 : eq(91, 10) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : ite(96, 26, 27) : BV:8
98 : ite(95, 23, 97) : BV:8
99 : ite(94, 20, 98) : BV:8
100 : ite(93, 17, 99) : BV:8
101 : ite(92, 15, 100) : BV:8
102 : bvadd(9, 66) : BV:32
103 : eq(102, 13) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : ite(107, 26, 27) : BV:8
109 : ite(106, 23, 108) : BV:8
110 : ite(105, 20, 109) : BV:8
111 : ite(104, 17, 110) : BV:8
112 : ite(103, 15, 111) : BV:8
113 : bvconcat(77, 89, 101, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1091211395 ] -> true, [ 1091211396; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda17247 : BV:32
2 : 256 { 0x100 +1.3051e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 128 { 0x80 +1.1525e129 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
14 : eq(12, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
17 : eq(12, 16) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
20 : eq(12, 19) : BOOL
21 : 217 { 0xd9 -39 } : BV:8
22 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
23 : eq(12, 22) : BOOL
24 : 111 { 0x6f } : BV:8
25 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
26 : eq(12, 25) : BOOL
27 : 78 { 0x4e } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 10, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : eq(35, 22) : BOOL
40 : eq(35, 25) : BOOL
41 : ite(40, 27, 28) : BV:8
42 : ite(39, 24, 41) : BV:8
43 : ite(38, 21, 42) : BV:8
44 : ite(37, 18, 43) : BV:8
45 : ite(36, 15, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : ite(52, 27, 28) : BV:8
54 : ite(51, 24, 53) : BV:8
55 : ite(50, 21, 54) : BV:8
56 : ite(49, 18, 55) : BV:8
57 : ite(48, 15, 56) : BV:8
58 : bvadd(10, 11) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 19) : BOOL
62 : eq(58, 22) : BOOL
63 : eq(58, 25) : BOOL
64 : ite(63, 27, 28) : BV:8
65 : ite(62, 24, 64) : BV:8
66 : ite(61, 21, 65) : BV:8
67 : ite(60, 18, 66) : BV:8
68 : ite(59, 15, 67) : BV:8
69 : bvconcat(33, 45, 57, 68) : BV:32
70 : ite(7, 4, 69) : BV:32
71 : ite(6, 4, 70) : BV:32
72 : ite(3, 4, 71) : BV:32
73 : lambda(1, 72) : FUNCTION[BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1091211395 ] -> true, [ 1091211396; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda17251 : BV:32
2 : 256 { 0x100 +1.3051e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 128 { 0x80 +1.1525e129 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
14 : eq(12, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
17 : eq(12, 16) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
20 : eq(12, 19) : BOOL
21 : 217 { 0xd9 -39 } : BV:8
22 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
23 : eq(12, 22) : BOOL
24 : 111 { 0x6f } : BV:8
25 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
26 : eq(12, 25) : BOOL
27 : 78 { 0x4e } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 10, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : eq(35, 22) : BOOL
40 : eq(35, 25) : BOOL
41 : ite(40, 27, 28) : BV:8
42 : ite(39, 24, 41) : BV:8
43 : ite(38, 21, 42) : BV:8
44 : ite(37, 18, 43) : BV:8
45 : ite(36, 15, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : ite(52, 27, 28) : BV:8
54 : ite(51, 24, 53) : BV:8
55 : ite(50, 21, 54) : BV:8
56 : ite(49, 18, 55) : BV:8
57 : ite(48, 15, 56) : BV:8
58 : bvadd(10, 11) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 19) : BOOL
62 : eq(58, 22) : BOOL
63 : eq(58, 25) : BOOL
64 : ite(63, 27, 28) : BV:8
65 : ite(62, 24, 64) : BV:8
66 : ite(61, 21, 65) : BV:8
67 : ite(60, 18, 66) : BV:8
68 : ite(59, 15, 67) : BV:8
69 : bvconcat(33, 45, 57, 68) : BV:32
70 : ite(7, 4, 69) : BV:32
71 : ite(6, 4, 70) : BV:32
72 : ite(3, 4, 71) : BV:32
73 : lambda(1, 72) : FUNCTION[BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1091211395 ] -> true, [ 1091211396; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda17255 : BV:32
2 : 256 { 0x100 +1.3051e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 128 { 0x80 +1.1525e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
16 : eq(11, 15) : BOOL
17 : 159 { 0x9f -97 } : BV:8
18 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
19 : eq(11, 18) : BOOL
20 : 217 { 0xd9 -39 } : BV:8
21 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
22 : eq(11, 21) : BOOL
23 : 111 { 0x6f } : BV:8
24 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
25 : eq(11, 24) : BOOL
26 : 78 { 0x4e } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 9, 10) : BV:32
35 : eq(34, 12) : BOOL
36 : eq(34, 15) : BOOL
37 : eq(34, 18) : BOOL
38 : eq(34, 21) : BOOL
39 : eq(34, 24) : BOOL
40 : ite(39, 26, 27) : BV:8
41 : ite(38, 23, 40) : BV:8
42 : ite(37, 20, 41) : BV:8
43 : ite(36, 17, 42) : BV:8
44 : ite(35, 14, 43) : BV:8
45 : 1 { 0x1 +1.11e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : ite(51, 26, 27) : BV:8
53 : ite(50, 23, 52) : BV:8
54 : ite(49, 20, 53) : BV:8
55 : ite(48, 17, 54) : BV:8
56 : ite(47, 14, 55) : BV:8
57 : bvadd(9, 10) : BV:32
58 : eq(57, 12) : BOOL
59 : eq(57, 15) : BOOL
60 : eq(57, 18) : BOOL
61 : eq(57, 21) : BOOL
62 : eq(57, 24) : BOOL
63 : ite(62, 26, 27) : BV:8
64 : ite(61, 23, 63) : BV:8
65 : ite(60, 20, 64) : BV:8
66 : ite(59, 17, 65) : BV:8
67 : ite(58, 14, 66) : BV:8
68 : bvconcat(32, 44, 56, 67) : BV:32
69 : ite(6, 4, 68) : BV:32
70 : ite(3, 4, 69) : BV:32
71 : lambda(1, 70) : FUNCTION[BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3869226352
=counter_example_end
=global nodece 72 num_edges_traversed 1
=global nodece 72 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 73
=global nodece 73 nodece z3.ce6826.num_edges_traversed2
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3.ce6826 732ec5cc5a2f4071461d886d13581bf
=input.spec-%var-x-1
1 : Lambda17302 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17305 : BV:32
18 : Lambda17303 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17304 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
82 : eq(80, 81) : BOOL
83 : 128 { 0x80 -128 } : BV:8
84 : eq(80, 78) : BOOL
85 : 159 { 0x9f -97 } : BV:8
86 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
87 : eq(80, 86) : BOOL
88 : 217 { 0xd9 -39 } : BV:8
89 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
90 : eq(80, 89) : BOOL
91 : 111 { 0x6f } : BV:8
92 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
93 : eq(80, 92) : BOOL
94 : 78 { 0x4e } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(84, 85, 98) : BV:8
100 : ite(82, 83, 99) : BV:8
101 : bvadd(89, 79) : BV:32
102 : eq(101, 81) : BOOL
103 : eq(101, 78) : BOOL
104 : eq(101, 86) : BOOL
105 : eq(101, 89) : BOOL
106 : eq(101, 92) : BOOL
107 : ite(106, 94, 95) : BV:8
108 : ite(105, 91, 107) : BV:8
109 : ite(104, 88, 108) : BV:8
110 : ite(103, 85, 109) : BV:8
111 : ite(102, 83, 110) : BV:8
112 : bvadd(92, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : ite(117, 94, 95) : BV:8
119 : ite(116, 91, 118) : BV:8
120 : ite(115, 88, 119) : BV:8
121 : ite(114, 85, 120) : BV:8
122 : ite(113, 83, 121) : BV:8
123 : bvadd(86, 79) : BV:32
124 : eq(123, 81) : BOOL
125 : eq(123, 78) : BOOL
126 : eq(123, 86) : BOOL
127 : eq(123, 89) : BOOL
128 : eq(123, 92) : BOOL
129 : ite(128, 94, 95) : BV:8
130 : ite(127, 91, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 83, 132) : BV:8
134 : bvconcat(100, 111, 122, 133) : BV:32
135 : bvadd(75, 77, 134) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 78) : BOOL
138 : eq(135, 86) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : ite(140, 94, 95) : BV:8
142 : ite(139, 91, 141) : BV:8
143 : ite(138, 88, 142) : BV:8
144 : ite(137, 85, 143) : BV:8
145 : ite(136, 83, 144) : BV:8
146 : 2 { 0x2 +1.23e129 } : BV:32
147 : bvadd(146, 77, 134) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : ite(152, 94, 95) : BV:8
154 : ite(151, 91, 153) : BV:8
155 : ite(150, 88, 154) : BV:8
156 : ite(149, 85, 155) : BV:8
157 : ite(148, 83, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 77, 134) : BV:32
160 : eq(159, 81) : BOOL
161 : eq(159, 78) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : ite(164, 94, 95) : BV:8
166 : ite(163, 91, 165) : BV:8
167 : ite(162, 88, 166) : BV:8
168 : ite(161, 85, 167) : BV:8
169 : ite(160, 83, 168) : BV:8
170 : bvadd(77, 134) : BV:32
171 : eq(170, 81) : BOOL
172 : eq(170, 78) : BOOL
173 : eq(170, 86) : BOOL
174 : eq(170, 89) : BOOL
175 : eq(170, 92) : BOOL
176 : ite(175, 94, 95) : BV:8
177 : ite(174, 91, 176) : BV:8
178 : ite(173, 88, 177) : BV:8
179 : ite(172, 85, 178) : BV:8
180 : ite(171, 83, 179) : BV:8
181 : bvconcat(145, 157, 169, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : ite(74, 181, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda17310 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17313 : BV:32
18 : Lambda17311 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17312 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
63 : eq(61, 62) : BOOL
64 : 128 { 0x80 -128 } : BV:8
65 : eq(61, 59) : BOOL
66 : 159 { 0x9f -97 } : BV:8
67 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
68 : eq(61, 67) : BOOL
69 : 217 { 0xd9 -39 } : BV:8
70 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
71 : eq(61, 70) : BOOL
72 : 111 { 0x6f } : BV:8
73 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
74 : eq(61, 73) : BOOL
75 : 78 { 0x4e } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : bvadd(70, 60) : BV:32
83 : eq(82, 62) : BOOL
84 : eq(82, 59) : BOOL
85 : eq(82, 67) : BOOL
86 : eq(82, 70) : BOOL
87 : eq(82, 73) : BOOL
88 : ite(87, 75, 76) : BV:8
89 : ite(86, 72, 88) : BV:8
90 : ite(85, 69, 89) : BV:8
91 : ite(84, 66, 90) : BV:8
92 : ite(83, 64, 91) : BV:8
93 : bvadd(73, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : ite(98, 75, 76) : BV:8
100 : ite(97, 72, 99) : BV:8
101 : ite(96, 69, 100) : BV:8
102 : ite(95, 66, 101) : BV:8
103 : ite(94, 64, 102) : BV:8
104 : bvadd(67, 60) : BV:32
105 : eq(104, 62) : BOOL
106 : eq(104, 59) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 70) : BOOL
109 : eq(104, 73) : BOOL
110 : ite(109, 75, 76) : BV:8
111 : ite(108, 72, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 64, 113) : BV:8
115 : bvconcat(81, 92, 103, 114) : BV:32
116 : bvadd(56, 58, 115) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 59) : BOOL
119 : eq(116, 67) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 64, 125) : BV:8
127 : 2 { 0x2 +1.23e129 } : BV:32
128 : bvadd(127, 58, 115) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : ite(133, 75, 76) : BV:8
135 : ite(132, 72, 134) : BV:8
136 : ite(131, 69, 135) : BV:8
137 : ite(130, 66, 136) : BV:8
138 : ite(129, 64, 137) : BV:8
139 : 1 { 0x1 +1.11e129 } : BV:32
140 : bvadd(139, 58, 115) : BV:32
141 : eq(140, 62) : BOOL
142 : eq(140, 59) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : bvadd(58, 115) : BV:32
152 : eq(151, 62) : BOOL
153 : eq(151, 59) : BOOL
154 : eq(151, 67) : BOOL
155 : eq(151, 70) : BOOL
156 : eq(151, 73) : BOOL
157 : ite(156, 75, 76) : BV:8
158 : ite(155, 72, 157) : BV:8
159 : ite(154, 69, 158) : BV:8
160 : ite(153, 66, 159) : BV:8
161 : ite(152, 64, 160) : BV:8
162 : bvconcat(126, 138, 150, 161) : BV:32
163 : ite(55, 2, 162) : BV:32
164 : lambda(52, 163) : FUNCTION[BV:32 -> BV:32]
165 : map(51, 164) : MAP[BV:32 -> BV:32]
166 : lambda(17, 165) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
167 : map(16, 166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
168 : sym_const(167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17315 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17316 : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 128 { 0x80 +1.1525e129 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
28 : eq(26, 27) : BOOL
29 : 128 { 0x80 -128 } : BV:8
30 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
31 : eq(26, 30) : BOOL
32 : 159 { 0x9f -97 } : BV:8
33 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
34 : eq(26, 33) : BOOL
35 : 217 { 0xd9 -39 } : BV:8
36 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
37 : eq(26, 36) : BOOL
38 : 111 { 0x6f } : BV:8
39 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
40 : eq(26, 39) : BOOL
41 : 78 { 0x4e } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 24, 25) : BV:32
50 : eq(49, 27) : BOOL
51 : eq(49, 30) : BOOL
52 : eq(49, 33) : BOOL
53 : eq(49, 36) : BOOL
54 : eq(49, 39) : BOOL
55 : ite(54, 41, 42) : BV:8
56 : ite(53, 38, 55) : BV:8
57 : ite(52, 35, 56) : BV:8
58 : ite(51, 32, 57) : BV:8
59 : ite(50, 29, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : ite(66, 41, 42) : BV:8
68 : ite(65, 38, 67) : BV:8
69 : ite(64, 35, 68) : BV:8
70 : ite(63, 32, 69) : BV:8
71 : ite(62, 29, 70) : BV:8
72 : bvadd(24, 25) : BV:32
73 : eq(72, 27) : BOOL
74 : eq(72, 30) : BOOL
75 : eq(72, 33) : BOOL
76 : eq(72, 36) : BOOL
77 : eq(72, 39) : BOOL
78 : ite(77, 41, 42) : BV:8
79 : ite(76, 38, 78) : BV:8
80 : ite(75, 35, 79) : BV:8
81 : ite(74, 32, 80) : BV:8
82 : ite(73, 29, 81) : BV:8
83 : bvconcat(47, 59, 71, 82) : BV:32
84 : ite(21, 2, 83) : BV:32
85 : ite(19, 2, 84) : BV:32
86 : lambda(17, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(16, 86) : MAP[BV:32 -> BV:32]
88 : sym_const(87) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
=input.dst.llvm-%n
1 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
=input.dst.llvm-%m
1 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2215115775 ] -> 0, [ 2215115776; 2215115776 ] -> 217, [ 2215115777; 2215115777 ] -> 78, [ 2215115778; 2215115778 ] -> 111, [ 2215115779; 2215115779 ] -> 159, [ 2215115780; 2215116795 ] -> 0, [ 2215116796; 2215116796 ] -> 128, [ 2215116797; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1882686467 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1882686468; 1882686471 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1882686472; 2618008735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2618008736; 2618008739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2618008740; 2634623619 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2634623620; 2634623623 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2634623624; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2634623620 { 0x9d092a84 -1660343676 -1.7160997e187 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1882686468 { 0x70378404 +1.43371629e97 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2618008736 { 0x9c0ba4a0 -1676958560 -1.9096145e185 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 16 { 0x10 +1.190e129 } : BV:32
2 : unit : UNIT
3 : Lambda17307 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17308 : BV:32
20 : 256 { 0x100 +1.3051e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 128 { 0x80 +1.1525e129 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
31 : eq(29, 30) : BOOL
32 : 128 { 0x80 -128 } : BV:8
33 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
34 : eq(29, 33) : BOOL
35 : 159 { 0x9f -97 } : BV:8
36 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
37 : eq(29, 36) : BOOL
38 : 217 { 0xd9 -39 } : BV:8
39 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
40 : eq(29, 39) : BOOL
41 : 111 { 0x6f } : BV:8
42 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
43 : eq(29, 42) : BOOL
44 : 78 { 0x4e } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 27, 28) : BV:32
53 : eq(52, 30) : BOOL
54 : eq(52, 33) : BOOL
55 : eq(52, 36) : BOOL
56 : eq(52, 39) : BOOL
57 : eq(52, 42) : BOOL
58 : ite(57, 44, 45) : BV:8
59 : ite(56, 41, 58) : BV:8
60 : ite(55, 38, 59) : BV:8
61 : ite(54, 35, 60) : BV:8
62 : ite(53, 32, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 27, 28) : BV:32
65 : eq(64, 30) : BOOL
66 : eq(64, 33) : BOOL
67 : eq(64, 36) : BOOL
68 : eq(64, 39) : BOOL
69 : eq(64, 42) : BOOL
70 : ite(69, 44, 45) : BV:8
71 : ite(68, 41, 70) : BV:8
72 : ite(67, 38, 71) : BV:8
73 : ite(66, 35, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : bvadd(27, 28) : BV:32
76 : eq(75, 30) : BOOL
77 : eq(75, 33) : BOOL
78 : eq(75, 36) : BOOL
79 : eq(75, 39) : BOOL
80 : eq(75, 42) : BOOL
81 : ite(80, 44, 45) : BV:8
82 : ite(79, 41, 81) : BV:8
83 : ite(78, 38, 82) : BV:8
84 : ite(77, 35, 83) : BV:8
85 : ite(76, 32, 84) : BV:8
86 : bvconcat(50, 62, 74, 85) : BV:32
87 : ite(24, 4, 86) : BV:32
88 : ite(23, 4, 87) : BV:32
89 : ite(21, 4, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : sum(1, 2, 91) : SUM[UNIT,MAP[BV:32 -> BV:32]]
93 : sym_const(92) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1272827855 { 0x4bddcfcf +1.73290431e24 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17318 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17319 : BV:32
18 : 256 { 0x100 +1.3051e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 128 { 0x80 +1.1525e129 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
29 : eq(27, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
32 : eq(27, 31) : BOOL
33 : 159 { 0x9f -97 } : BV:8
34 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
35 : eq(27, 34) : BOOL
36 : 217 { 0xd9 -39 } : BV:8
37 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
38 : eq(27, 37) : BOOL
39 : 111 { 0x6f } : BV:8
40 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
41 : eq(27, 40) : BOOL
42 : 78 { 0x4e } : BV:8
43 : 0 { 0x0 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(38, 39, 44) : BV:8
46 : ite(35, 36, 45) : BV:8
47 : ite(32, 33, 46) : BV:8
48 : ite(29, 30, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 25, 26) : BV:32
51 : eq(50, 28) : BOOL
52 : eq(50, 31) : BOOL
53 : eq(50, 34) : BOOL
54 : eq(50, 37) : BOOL
55 : eq(50, 40) : BOOL
56 : ite(55, 42, 43) : BV:8
57 : ite(54, 39, 56) : BV:8
58 : ite(53, 36, 57) : BV:8
59 : ite(52, 33, 58) : BV:8
60 : ite(51, 30, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : ite(67, 42, 43) : BV:8
69 : ite(66, 39, 68) : BV:8
70 : ite(65, 36, 69) : BV:8
71 : ite(64, 33, 70) : BV:8
72 : ite(63, 30, 71) : BV:8
73 : bvadd(25, 26) : BV:32
74 : eq(73, 28) : BOOL
75 : eq(73, 31) : BOOL
76 : eq(73, 34) : BOOL
77 : eq(73, 37) : BOOL
78 : eq(73, 40) : BOOL
79 : ite(78, 42, 43) : BV:8
80 : ite(77, 39, 79) : BV:8
81 : ite(76, 36, 80) : BV:8
82 : ite(75, 33, 81) : BV:8
83 : ite(74, 30, 82) : BV:8
84 : bvconcat(48, 60, 72, 83) : BV:32
85 : ite(22, 2, 84) : BV:32
86 : ite(21, 2, 85) : BV:32
87 : ite(19, 2, 86) : BV:32
88 : lambda(17, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(16, 88) : MAP[BV:32 -> BV:32]
90 : sym_const(89) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 255 { 0xff +1.3039e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1046418248 { 0x3e5f1348 +1.74277591e253 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1882686468 { 0x70378404 +1.43371629e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1882686471 { 0x70378407 +1.43371665e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2618008736 { 0x9c0ba4a0 -1676958560 -1.9096145e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2618008739 { 0x9c0ba4a3 -1676958557 -1.9096181e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2634623620 { 0x9d092a84 -1660343676 -1.7160997e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2634623623 { 0x9d092a87 -1660343673 -1.7161033e187 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 25479200 ] -> true, [ 25479201; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17229 : BV:32
2 : Lambda17230 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17234 : BV:32
2 : Lambda17235 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
55 : eq(53, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : eq(53, 51) : BOOL
58 : 159 { 0x9f -97 } : BV:8
59 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
60 : eq(53, 59) : BOOL
61 : 217 { 0xd9 -39 } : BV:8
62 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
63 : eq(53, 62) : BOOL
64 : 111 { 0x6f } : BV:8
65 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
66 : eq(53, 65) : BOOL
67 : 78 { 0x4e } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(55, 56, 72) : BV:8
74 : bvadd(62, 52) : BV:32
75 : eq(74, 54) : BOOL
76 : eq(74, 51) : BOOL
77 : eq(74, 59) : BOOL
78 : eq(74, 62) : BOOL
79 : eq(74, 65) : BOOL
80 : ite(79, 67, 68) : BV:8
81 : ite(78, 64, 80) : BV:8
82 : ite(77, 61, 81) : BV:8
83 : ite(76, 58, 82) : BV:8
84 : ite(75, 56, 83) : BV:8
85 : bvadd(65, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : ite(90, 67, 68) : BV:8
92 : ite(89, 64, 91) : BV:8
93 : ite(88, 61, 92) : BV:8
94 : ite(87, 58, 93) : BV:8
95 : ite(86, 56, 94) : BV:8
96 : bvadd(59, 52) : BV:32
97 : eq(96, 54) : BOOL
98 : eq(96, 51) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 62) : BOOL
101 : eq(96, 65) : BOOL
102 : ite(101, 67, 68) : BV:8
103 : ite(100, 64, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 58, 104) : BV:8
106 : ite(97, 56, 105) : BV:8
107 : bvconcat(73, 84, 95, 106) : BV:32
108 : bvadd(48, 50, 107) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 51) : BOOL
111 : eq(108, 59) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 64, 114) : BV:8
116 : ite(111, 61, 115) : BV:8
117 : ite(110, 58, 116) : BV:8
118 : ite(109, 56, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 50, 107) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : ite(125, 67, 68) : BV:8
127 : ite(124, 64, 126) : BV:8
128 : ite(123, 61, 127) : BV:8
129 : ite(122, 58, 128) : BV:8
130 : ite(121, 56, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 50, 107) : BV:32
133 : eq(132, 54) : BOOL
134 : eq(132, 51) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : ite(137, 67, 68) : BV:8
139 : ite(136, 64, 138) : BV:8
140 : ite(135, 61, 139) : BV:8
141 : ite(134, 58, 140) : BV:8
142 : ite(133, 56, 141) : BV:8
143 : bvadd(50, 107) : BV:32
144 : eq(143, 54) : BOOL
145 : eq(143, 51) : BOOL
146 : eq(143, 59) : BOOL
147 : eq(143, 62) : BOOL
148 : eq(143, 65) : BOOL
149 : ite(148, 67, 68) : BV:8
150 : ite(147, 64, 149) : BV:8
151 : ite(146, 61, 150) : BV:8
152 : ite(145, 58, 151) : BV:8
153 : ite(144, 56, 152) : BV:8
154 : bvconcat(118, 130, 142, 153) : BV:32
155 : ite(6, 3, 154) : BV:32
156 : ite(47, 154, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : lambda(1, 2, 157) : FUNCTION[BV:32,BV:32 -> BV:32]
159 : sym_const(158) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 25479200 ] -> true, [ 25479201; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda17240 : BV:32
2 : Lambda17241 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 25479202 { 0x184c822 +1.3735756e132 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 25479201 { 0x184c821 +1.3735744e132 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1091211395 { 0x410a9083 +1.8253514e3 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1091211397 { 0x410a9085 +1.8253538e3 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 1091211396 { 0x410a9084 +1.8253526e3 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda17236 : BV:32
2 : Lambda17237 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
14 : eq(12, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : eq(12, 10) : BOOL
17 : 159 { 0x9f -97 } : BV:8
18 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
19 : eq(12, 18) : BOOL
20 : 217 { 0xd9 -39 } : BV:8
21 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
22 : eq(12, 21) : BOOL
23 : 111 { 0x6f } : BV:8
24 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
25 : eq(12, 24) : BOOL
26 : 78 { 0x4e } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(14, 15, 31) : BV:8
33 : bvadd(21, 11) : BV:32
34 : eq(33, 13) : BOOL
35 : eq(33, 10) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 15, 42) : BV:8
44 : bvadd(24, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 15, 53) : BV:8
55 : bvadd(18, 11) : BV:32
56 : eq(55, 13) : BOOL
57 : eq(55, 10) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 15, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : bvadd(7, 9, 66) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 10) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : ite(72, 26, 27) : BV:8
74 : ite(71, 23, 73) : BV:8
75 : ite(70, 20, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 15, 76) : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : bvadd(78, 9, 66) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : ite(84, 26, 27) : BV:8
86 : ite(83, 23, 85) : BV:8
87 : ite(82, 20, 86) : BV:8
88 : ite(81, 17, 87) : BV:8
89 : ite(80, 15, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 9, 66) : BV:32
92 : eq(91, 13) : BOOL
93 : eq(91, 10) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : ite(96, 26, 27) : BV:8
98 : ite(95, 23, 97) : BV:8
99 : ite(94, 20, 98) : BV:8
100 : ite(93, 17, 99) : BV:8
101 : ite(92, 15, 100) : BV:8
102 : bvadd(9, 66) : BV:32
103 : eq(102, 13) : BOOL
104 : eq(102, 10) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : ite(107, 26, 27) : BV:8
109 : ite(106, 23, 108) : BV:8
110 : ite(105, 20, 109) : BV:8
111 : ite(104, 17, 110) : BV:8
112 : ite(103, 15, 111) : BV:8
113 : bvconcat(77, 89, 101, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 1091211395 ] -> true, [ 1091211396; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda17247 : BV:32
2 : 256 { 0x100 +1.3051e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 128 { 0x80 +1.1525e129 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
14 : eq(12, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
17 : eq(12, 16) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
20 : eq(12, 19) : BOOL
21 : 217 { 0xd9 -39 } : BV:8
22 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
23 : eq(12, 22) : BOOL
24 : 111 { 0x6f } : BV:8
25 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
26 : eq(12, 25) : BOOL
27 : 78 { 0x4e } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 10, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : eq(35, 22) : BOOL
40 : eq(35, 25) : BOOL
41 : ite(40, 27, 28) : BV:8
42 : ite(39, 24, 41) : BV:8
43 : ite(38, 21, 42) : BV:8
44 : ite(37, 18, 43) : BV:8
45 : ite(36, 15, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : ite(52, 27, 28) : BV:8
54 : ite(51, 24, 53) : BV:8
55 : ite(50, 21, 54) : BV:8
56 : ite(49, 18, 55) : BV:8
57 : ite(48, 15, 56) : BV:8
58 : bvadd(10, 11) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 19) : BOOL
62 : eq(58, 22) : BOOL
63 : eq(58, 25) : BOOL
64 : ite(63, 27, 28) : BV:8
65 : ite(62, 24, 64) : BV:8
66 : ite(61, 21, 65) : BV:8
67 : ite(60, 18, 66) : BV:8
68 : ite(59, 15, 67) : BV:8
69 : bvconcat(33, 45, 57, 68) : BV:32
70 : ite(7, 4, 69) : BV:32
71 : ite(6, 4, 70) : BV:32
72 : ite(3, 4, 71) : BV:32
73 : lambda(1, 72) : FUNCTION[BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 1091211395 ] -> true, [ 1091211396; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda17251 : BV:32
2 : 256 { 0x100 +1.3051e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 128 { 0x80 +1.1525e129 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
14 : eq(12, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
17 : eq(12, 16) : BOOL
18 : 159 { 0x9f -97 } : BV:8
19 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
20 : eq(12, 19) : BOOL
21 : 217 { 0xd9 -39 } : BV:8
22 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
23 : eq(12, 22) : BOOL
24 : 111 { 0x6f } : BV:8
25 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
26 : eq(12, 25) : BOOL
27 : 78 { 0x4e } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(14, 15, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 10, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : eq(35, 22) : BOOL
40 : eq(35, 25) : BOOL
41 : ite(40, 27, 28) : BV:8
42 : ite(39, 24, 41) : BV:8
43 : ite(38, 21, 42) : BV:8
44 : ite(37, 18, 43) : BV:8
45 : ite(36, 15, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : ite(52, 27, 28) : BV:8
54 : ite(51, 24, 53) : BV:8
55 : ite(50, 21, 54) : BV:8
56 : ite(49, 18, 55) : BV:8
57 : ite(48, 15, 56) : BV:8
58 : bvadd(10, 11) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : eq(58, 19) : BOOL
62 : eq(58, 22) : BOOL
63 : eq(58, 25) : BOOL
64 : ite(63, 27, 28) : BV:8
65 : ite(62, 24, 64) : BV:8
66 : ite(61, 21, 65) : BV:8
67 : ite(60, 18, 66) : BV:8
68 : ite(59, 15, 67) : BV:8
69 : bvconcat(33, 45, 57, 68) : BV:32
70 : ite(7, 4, 69) : BV:32
71 : ite(6, 4, 70) : BV:32
72 : ite(3, 4, 71) : BV:32
73 : lambda(1, 72) : FUNCTION[BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 1091211395 ] -> true, [ 1091211396; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda17255 : BV:32
2 : 256 { 0x100 +1.3051e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 25479200 { 0x184c820 +1.3735733e132 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 128 { 0x80 +1.1525e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
13 : eq(11, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 2215115779 { 0x8407fc03 -2079851517 -1.6237828e137 } : BV:32
16 : eq(11, 15) : BOOL
17 : 159 { 0x9f -97 } : BV:8
18 : 2215115776 { 0x8407fc00 -2079851520 -1.6237792e137 } : BV:32
19 : eq(11, 18) : BOOL
20 : 217 { 0xd9 -39 } : BV:8
21 : 2215115778 { 0x8407fc02 -2079851518 -1.6237816e137 } : BV:32
22 : eq(11, 21) : BOOL
23 : 111 { 0x6f } : BV:8
24 : 2215115777 { 0x8407fc01 -2079851519 -1.6237804e137 } : BV:32
25 : eq(11, 24) : BOOL
26 : 78 { 0x4e } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 9, 10) : BV:32
35 : eq(34, 12) : BOOL
36 : eq(34, 15) : BOOL
37 : eq(34, 18) : BOOL
38 : eq(34, 21) : BOOL
39 : eq(34, 24) : BOOL
40 : ite(39, 26, 27) : BV:8
41 : ite(38, 23, 40) : BV:8
42 : ite(37, 20, 41) : BV:8
43 : ite(36, 17, 42) : BV:8
44 : ite(35, 14, 43) : BV:8
45 : 1 { 0x1 +1.11e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : ite(51, 26, 27) : BV:8
53 : ite(50, 23, 52) : BV:8
54 : ite(49, 20, 53) : BV:8
55 : ite(48, 17, 54) : BV:8
56 : ite(47, 14, 55) : BV:8
57 : bvadd(9, 10) : BV:32
58 : eq(57, 12) : BOOL
59 : eq(57, 15) : BOOL
60 : eq(57, 18) : BOOL
61 : eq(57, 21) : BOOL
62 : eq(57, 24) : BOOL
63 : ite(62, 26, 27) : BV:8
64 : ite(61, 23, 63) : BV:8
65 : ite(60, 20, 64) : BV:8
66 : ite(59, 17, 65) : BV:8
67 : ite(58, 14, 66) : BV:8
68 : bvconcat(32, 44, 56, 67) : BV:32
69 : ite(6, 4, 68) : BV:32
70 : ite(3, 4, 69) : BV:32
71 : lambda(1, 70) : FUNCTION[BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3869226352
=counter_example_end
=global nodece 73 num_edges_traversed 2
=global nodece 73 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 74
=global nodece 74 nodece z3.ce6861.num_edges_traversed1
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3.ce6861 c5444e89144af881795117d068a43259
=input.spec-%var-x-1
1 : Lambda17841 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17844 : BV:32
18 : Lambda17842 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17843 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 637534211 { 0x26000003 +1.35e205 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
82 : eq(80, 81) : BOOL
83 : 16 { 0x10 } : BV:8
84 : eq(80, 78) : BOOL
85 : 240 { 0xf0 -16 } : BV:8
86 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
87 : eq(80, 86) : BOOL
88 : 145 { 0x91 -111 } : BV:8
89 : 637534208 { 0x26000000 +1.0e205 } : BV:32
90 : eq(80, 89) : BOOL
91 : 193 { 0xc1 -63 } : BV:8
92 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
93 : eq(80, 92) : BOOL
94 : 137 { 0x89 -119 } : BV:8
95 : 637534210 { 0x26000002 +1.23e205 } : BV:32
96 : eq(80, 95) : BOOL
97 : 255 { 0xff -1 } : BV:8
98 : 637534209 { 0x26000001 +1.11e205 } : BV:32
99 : eq(80, 98) : BOOL
100 : 239 { 0xef -17 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(96, 97, 102) : BV:8
104 : ite(93, 94, 103) : BV:8
105 : ite(90, 91, 104) : BV:8
106 : ite(87, 88, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(82, 83, 107) : BV:8
109 : bvadd(95, 79) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 78) : BOOL
112 : eq(109, 86) : BOOL
113 : eq(109, 89) : BOOL
114 : eq(109, 92) : BOOL
115 : eq(109, 95) : BOOL
116 : eq(109, 98) : BOOL
117 : ite(116, 100, 101) : BV:8
118 : ite(115, 97, 117) : BV:8
119 : ite(114, 94, 118) : BV:8
120 : ite(113, 91, 119) : BV:8
121 : ite(112, 88, 120) : BV:8
122 : ite(111, 85, 121) : BV:8
123 : ite(110, 83, 122) : BV:8
124 : bvadd(98, 79) : BV:32
125 : eq(124, 81) : BOOL
126 : eq(124, 78) : BOOL
127 : eq(124, 86) : BOOL
128 : eq(124, 89) : BOOL
129 : eq(124, 92) : BOOL
130 : eq(124, 95) : BOOL
131 : eq(124, 98) : BOOL
132 : ite(131, 100, 101) : BV:8
133 : ite(130, 97, 132) : BV:8
134 : ite(129, 94, 133) : BV:8
135 : ite(128, 91, 134) : BV:8
136 : ite(127, 88, 135) : BV:8
137 : ite(126, 85, 136) : BV:8
138 : ite(125, 83, 137) : BV:8
139 : bvadd(89, 79) : BV:32
140 : eq(139, 81) : BOOL
141 : eq(139, 78) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 89) : BOOL
144 : eq(139, 92) : BOOL
145 : eq(139, 95) : BOOL
146 : eq(139, 98) : BOOL
147 : ite(146, 100, 101) : BV:8
148 : ite(145, 97, 147) : BV:8
149 : ite(144, 94, 148) : BV:8
150 : ite(143, 91, 149) : BV:8
151 : ite(142, 88, 150) : BV:8
152 : ite(141, 85, 151) : BV:8
153 : ite(140, 83, 152) : BV:8
154 : bvconcat(108, 123, 138, 153) : BV:32
155 : bvadd(75, 77, 154) : BV:32
156 : eq(155, 81) : BOOL
157 : eq(155, 78) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : ite(162, 100, 101) : BV:8
164 : ite(161, 97, 163) : BV:8
165 : ite(160, 94, 164) : BV:8
166 : ite(159, 91, 165) : BV:8
167 : ite(158, 88, 166) : BV:8
168 : ite(157, 85, 167) : BV:8
169 : ite(156, 83, 168) : BV:8
170 : 2 { 0x2 +1.23e129 } : BV:32
171 : bvadd(170, 77, 154) : BV:32
172 : eq(171, 81) : BOOL
173 : eq(171, 78) : BOOL
174 : eq(171, 86) : BOOL
175 : eq(171, 89) : BOOL
176 : eq(171, 92) : BOOL
177 : eq(171, 95) : BOOL
178 : eq(171, 98) : BOOL
179 : ite(178, 100, 101) : BV:8
180 : ite(177, 97, 179) : BV:8
181 : ite(176, 94, 180) : BV:8
182 : ite(175, 91, 181) : BV:8
183 : ite(174, 88, 182) : BV:8
184 : ite(173, 85, 183) : BV:8
185 : ite(172, 83, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 77, 154) : BV:32
188 : eq(187, 81) : BOOL
189 : eq(187, 78) : BOOL
190 : eq(187, 86) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : eq(187, 98) : BOOL
195 : ite(194, 100, 101) : BV:8
196 : ite(193, 97, 195) : BV:8
197 : ite(192, 94, 196) : BV:8
198 : ite(191, 91, 197) : BV:8
199 : ite(190, 88, 198) : BV:8
200 : ite(189, 85, 199) : BV:8
201 : ite(188, 83, 200) : BV:8
202 : bvadd(77, 154) : BV:32
203 : eq(202, 81) : BOOL
204 : eq(202, 78) : BOOL
205 : eq(202, 86) : BOOL
206 : eq(202, 89) : BOOL
207 : eq(202, 92) : BOOL
208 : eq(202, 95) : BOOL
209 : eq(202, 98) : BOOL
210 : ite(209, 100, 101) : BV:8
211 : ite(208, 97, 210) : BV:8
212 : ite(207, 94, 211) : BV:8
213 : ite(206, 91, 212) : BV:8
214 : ite(205, 88, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 83, 215) : BV:8
217 : bvconcat(169, 185, 201, 216) : BV:32
218 : ite(55, 2, 217) : BV:32
219 : ite(74, 217, 218) : BV:32
220 : ite(55, 2, 219) : BV:32
221 : lambda(52, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(51, 221) : MAP[BV:32 -> BV:32]
223 : lambda(17, 222) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
224 : map(16, 223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
225 : sym_const(224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda17849 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17852 : BV:32
18 : Lambda17850 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17851 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 637534211 { 0x26000003 +1.35e205 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
63 : eq(61, 62) : BOOL
64 : 16 { 0x10 } : BV:8
65 : eq(61, 59) : BOOL
66 : 240 { 0xf0 -16 } : BV:8
67 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
68 : eq(61, 67) : BOOL
69 : 145 { 0x91 -111 } : BV:8
70 : 637534208 { 0x26000000 +1.0e205 } : BV:32
71 : eq(61, 70) : BOOL
72 : 193 { 0xc1 -63 } : BV:8
73 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
74 : eq(61, 73) : BOOL
75 : 137 { 0x89 -119 } : BV:8
76 : 637534210 { 0x26000002 +1.23e205 } : BV:32
77 : eq(61, 76) : BOOL
78 : 255 { 0xff -1 } : BV:8
79 : 637534209 { 0x26000001 +1.11e205 } : BV:32
80 : eq(61, 79) : BOOL
81 : 239 { 0xef -17 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(71, 72, 85) : BV:8
87 : ite(68, 69, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(63, 64, 88) : BV:8
90 : bvadd(76, 60) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 59) : BOOL
93 : eq(90, 67) : BOOL
94 : eq(90, 70) : BOOL
95 : eq(90, 73) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : bvadd(79, 60) : BV:32
106 : eq(105, 62) : BOOL
107 : eq(105, 59) : BOOL
108 : eq(105, 67) : BOOL
109 : eq(105, 70) : BOOL
110 : eq(105, 73) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 72, 115) : BV:8
117 : ite(108, 69, 116) : BV:8
118 : ite(107, 66, 117) : BV:8
119 : ite(106, 64, 118) : BV:8
120 : bvadd(70, 60) : BV:32
121 : eq(120, 62) : BOOL
122 : eq(120, 59) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 70) : BOOL
125 : eq(120, 73) : BOOL
126 : eq(120, 76) : BOOL
127 : eq(120, 79) : BOOL
128 : ite(127, 81, 82) : BV:8
129 : ite(126, 78, 128) : BV:8
130 : ite(125, 75, 129) : BV:8
131 : ite(124, 72, 130) : BV:8
132 : ite(123, 69, 131) : BV:8
133 : ite(122, 66, 132) : BV:8
134 : ite(121, 64, 133) : BV:8
135 : bvconcat(89, 104, 119, 134) : BV:32
136 : bvadd(56, 58, 135) : BV:32
137 : eq(136, 62) : BOOL
138 : eq(136, 59) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : ite(143, 81, 82) : BV:8
145 : ite(142, 78, 144) : BV:8
146 : ite(141, 75, 145) : BV:8
147 : ite(140, 72, 146) : BV:8
148 : ite(139, 69, 147) : BV:8
149 : ite(138, 66, 148) : BV:8
150 : ite(137, 64, 149) : BV:8
151 : 2 { 0x2 +1.23e129 } : BV:32
152 : bvadd(151, 58, 135) : BV:32
153 : eq(152, 62) : BOOL
154 : eq(152, 59) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 70) : BOOL
157 : eq(152, 73) : BOOL
158 : eq(152, 76) : BOOL
159 : eq(152, 79) : BOOL
160 : ite(159, 81, 82) : BV:8
161 : ite(158, 78, 160) : BV:8
162 : ite(157, 75, 161) : BV:8
163 : ite(156, 72, 162) : BV:8
164 : ite(155, 69, 163) : BV:8
165 : ite(154, 66, 164) : BV:8
166 : ite(153, 64, 165) : BV:8
167 : 1 { 0x1 +1.11e129 } : BV:32
168 : bvadd(167, 58, 135) : BV:32
169 : eq(168, 62) : BOOL
170 : eq(168, 59) : BOOL
171 : eq(168, 67) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : eq(168, 79) : BOOL
176 : ite(175, 81, 82) : BV:8
177 : ite(174, 78, 176) : BV:8
178 : ite(173, 75, 177) : BV:8
179 : ite(172, 72, 178) : BV:8
180 : ite(171, 69, 179) : BV:8
181 : ite(170, 66, 180) : BV:8
182 : ite(169, 64, 181) : BV:8
183 : bvadd(58, 135) : BV:32
184 : eq(183, 62) : BOOL
185 : eq(183, 59) : BOOL
186 : eq(183, 67) : BOOL
187 : eq(183, 70) : BOOL
188 : eq(183, 73) : BOOL
189 : eq(183, 76) : BOOL
190 : eq(183, 79) : BOOL
191 : ite(190, 81, 82) : BV:8
192 : ite(189, 78, 191) : BV:8
193 : ite(188, 75, 192) : BV:8
194 : ite(187, 72, 193) : BV:8
195 : ite(186, 69, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 64, 196) : BV:8
198 : bvconcat(150, 166, 182, 197) : BV:32
199 : ite(55, 2, 198) : BV:32
200 : lambda(52, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(51, 200) : MAP[BV:32 -> BV:32]
202 : lambda(17, 201) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
203 : map(16, 202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
204 : sym_const(203) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17854 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17855 : BV:32
18 : 134217728 { 0x8000000 +1.0e145 } : BV:32
19 : eq(17, 18) : BOOL
20 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
28 : eq(26, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 637534211 { 0x26000003 +1.35e205 } : BV:32
31 : eq(26, 30) : BOOL
32 : 240 { 0xf0 -16 } : BV:8
33 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
34 : eq(26, 33) : BOOL
35 : 145 { 0x91 -111 } : BV:8
36 : 637534208 { 0x26000000 +1.0e205 } : BV:32
37 : eq(26, 36) : BOOL
38 : 193 { 0xc1 -63 } : BV:8
39 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
40 : eq(26, 39) : BOOL
41 : 137 { 0x89 -119 } : BV:8
42 : 637534210 { 0x26000002 +1.23e205 } : BV:32
43 : eq(26, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 637534209 { 0x26000001 +1.11e205 } : BV:32
46 : eq(26, 45) : BOOL
47 : 239 { 0xef -17 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 24, 25) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : eq(57, 33) : BOOL
61 : eq(57, 36) : BOOL
62 : eq(57, 39) : BOOL
63 : eq(57, 42) : BOOL
64 : eq(57, 45) : BOOL
65 : ite(64, 47, 48) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 41, 66) : BV:8
68 : ite(61, 38, 67) : BV:8
69 : ite(60, 35, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 24, 25) : BV:32
74 : eq(73, 27) : BOOL
75 : eq(73, 30) : BOOL
76 : eq(73, 33) : BOOL
77 : eq(73, 36) : BOOL
78 : eq(73, 39) : BOOL
79 : eq(73, 42) : BOOL
80 : eq(73, 45) : BOOL
81 : ite(80, 47, 48) : BV:8
82 : ite(79, 44, 81) : BV:8
83 : ite(78, 41, 82) : BV:8
84 : ite(77, 38, 83) : BV:8
85 : ite(76, 35, 84) : BV:8
86 : ite(75, 32, 85) : BV:8
87 : ite(74, 29, 86) : BV:8
88 : bvadd(24, 25) : BV:32
89 : eq(88, 27) : BOOL
90 : eq(88, 30) : BOOL
91 : eq(88, 33) : BOOL
92 : eq(88, 36) : BOOL
93 : eq(88, 39) : BOOL
94 : eq(88, 42) : BOOL
95 : eq(88, 45) : BOOL
96 : ite(95, 47, 48) : BV:8
97 : ite(94, 44, 96) : BV:8
98 : ite(93, 41, 97) : BV:8
99 : ite(92, 38, 98) : BV:8
100 : ite(91, 35, 99) : BV:8
101 : ite(90, 32, 100) : BV:8
102 : ite(89, 29, 101) : BV:8
103 : bvconcat(55, 71, 87, 102) : BV:32
104 : ite(21, 2, 103) : BV:32
105 : ite(19, 2, 104) : BV:32
106 : lambda(17, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(16, 106) : MAP[BV:32 -> BV:32]
108 : sym_const(107) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 637534208 { 0x26000000 +1.0e205 } : BV:32
=input.dst.llvm-%n
1 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
=input.dst.llvm-%m
1 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 637534207 ] -> 0, [ 637534208; 637534208 ] -> 193, [ 637534209; 637534209 ] -> 239, [ 637534210; 637534210 ] -> 255, [ 637534211; 637534211 ] -> 240, [ 637534212; 1174405115 ] -> 0, [ 1174405116; 1174405116 ] -> 16, [ 1174405117; 1174405117 ] -> 0, [ 1174405118; 1174405118 ] -> 145, [ 1174405119; 1174405119 ] -> 137, [ 1174405120; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1139470063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1139470064; 1139470067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1139470068; 3346364275 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3346364276; 3346364279 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3346364280; 3399516023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3399516024; 3399516027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3399516028; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3399516024 { 0xcaa07f78 -895451272 -1.25389003e22 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3346364276 { 0xc7757774 -948603020 -1.91770792e15 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1139470064 { 0x43eaeef0 +1.83541679e8 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 536870908 { 0x1ffffffc +1.99999952e192 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
2 : unit : UNIT
3 : Lambda17846 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17847 : BV:32
20 : 134217728 { 0x8000000 +1.0e145 } : BV:32
21 : eq(19, 20) : BOOL
22 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
31 : eq(29, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 637534211 { 0x26000003 +1.35e205 } : BV:32
34 : eq(29, 33) : BOOL
35 : 240 { 0xf0 -16 } : BV:8
36 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
37 : eq(29, 36) : BOOL
38 : 145 { 0x91 -111 } : BV:8
39 : 637534208 { 0x26000000 +1.0e205 } : BV:32
40 : eq(29, 39) : BOOL
41 : 193 { 0xc1 -63 } : BV:8
42 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
43 : eq(29, 42) : BOOL
44 : 137 { 0x89 -119 } : BV:8
45 : 637534210 { 0x26000002 +1.23e205 } : BV:32
46 : eq(29, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 637534209 { 0x26000001 +1.11e205 } : BV:32
49 : eq(29, 48) : BOOL
50 : 239 { 0xef -17 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 27, 28) : BV:32
61 : eq(60, 30) : BOOL
62 : eq(60, 33) : BOOL
63 : eq(60, 36) : BOOL
64 : eq(60, 39) : BOOL
65 : eq(60, 42) : BOOL
66 : eq(60, 45) : BOOL
67 : eq(60, 48) : BOOL
68 : ite(67, 50, 51) : BV:8
69 : ite(66, 47, 68) : BV:8
70 : ite(65, 44, 69) : BV:8
71 : ite(64, 41, 70) : BV:8
72 : ite(63, 38, 71) : BV:8
73 : ite(62, 35, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 27, 28) : BV:32
77 : eq(76, 30) : BOOL
78 : eq(76, 33) : BOOL
79 : eq(76, 36) : BOOL
80 : eq(76, 39) : BOOL
81 : eq(76, 42) : BOOL
82 : eq(76, 45) : BOOL
83 : eq(76, 48) : BOOL
84 : ite(83, 50, 51) : BV:8
85 : ite(82, 47, 84) : BV:8
86 : ite(81, 44, 85) : BV:8
87 : ite(80, 41, 86) : BV:8
88 : ite(79, 38, 87) : BV:8
89 : ite(78, 35, 88) : BV:8
90 : ite(77, 32, 89) : BV:8
91 : bvadd(27, 28) : BV:32
92 : eq(91, 30) : BOOL
93 : eq(91, 33) : BOOL
94 : eq(91, 36) : BOOL
95 : eq(91, 39) : BOOL
96 : eq(91, 42) : BOOL
97 : eq(91, 45) : BOOL
98 : eq(91, 48) : BOOL
99 : ite(98, 50, 51) : BV:8
100 : ite(97, 47, 99) : BV:8
101 : ite(96, 44, 100) : BV:8
102 : ite(95, 41, 101) : BV:8
103 : ite(94, 38, 102) : BV:8
104 : ite(93, 35, 103) : BV:8
105 : ite(92, 32, 104) : BV:8
106 : bvconcat(58, 74, 90, 105) : BV:32
107 : ite(24, 4, 106) : BV:32
108 : ite(23, 4, 107) : BV:32
109 : ite(21, 4, 108) : BV:32
110 : lambda(19, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(18, 110) : MAP[BV:32 -> BV:32]
112 : sum(1, 2, 111) : SUM[UNIT,MAP[BV:32 -> BV:32]]
113 : sym_const(112) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-0.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1542471169 { 0x5bf03e01 +1.87689220e56 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%19%bbentry
1 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17857 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17858 : BV:32
18 : 134217728 { 0x8000000 +1.0e145 } : BV:32
19 : eq(17, 18) : BOOL
20 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
29 : eq(27, 28) : BOOL
30 : 16 { 0x10 } : BV:8
31 : 637534211 { 0x26000003 +1.35e205 } : BV:32
32 : eq(27, 31) : BOOL
33 : 240 { 0xf0 -16 } : BV:8
34 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
35 : eq(27, 34) : BOOL
36 : 145 { 0x91 -111 } : BV:8
37 : 637534208 { 0x26000000 +1.0e205 } : BV:32
38 : eq(27, 37) : BOOL
39 : 193 { 0xc1 -63 } : BV:8
40 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
41 : eq(27, 40) : BOOL
42 : 137 { 0x89 -119 } : BV:8
43 : 637534210 { 0x26000002 +1.23e205 } : BV:32
44 : eq(27, 43) : BOOL
45 : 255 { 0xff -1 } : BV:8
46 : 637534209 { 0x26000001 +1.11e205 } : BV:32
47 : eq(27, 46) : BOOL
48 : 239 { 0xef -17 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 25, 26) : BV:32
59 : eq(58, 28) : BOOL
60 : eq(58, 31) : BOOL
61 : eq(58, 34) : BOOL
62 : eq(58, 37) : BOOL
63 : eq(58, 40) : BOOL
64 : eq(58, 43) : BOOL
65 : eq(58, 46) : BOOL
66 : ite(65, 48, 49) : BV:8
67 : ite(64, 45, 66) : BV:8
68 : ite(63, 42, 67) : BV:8
69 : ite(62, 39, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 33, 70) : BV:8
72 : ite(59, 30, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 25, 26) : BV:32
75 : eq(74, 28) : BOOL
76 : eq(74, 31) : BOOL
77 : eq(74, 34) : BOOL
78 : eq(74, 37) : BOOL
79 : eq(74, 40) : BOOL
80 : eq(74, 43) : BOOL
81 : eq(74, 46) : BOOL
82 : ite(81, 48, 49) : BV:8
83 : ite(80, 45, 82) : BV:8
84 : ite(79, 42, 83) : BV:8
85 : ite(78, 39, 84) : BV:8
86 : ite(77, 36, 85) : BV:8
87 : ite(76, 33, 86) : BV:8
88 : ite(75, 30, 87) : BV:8
89 : bvadd(25, 26) : BV:32
90 : eq(89, 28) : BOOL
91 : eq(89, 31) : BOOL
92 : eq(89, 34) : BOOL
93 : eq(89, 37) : BOOL
94 : eq(89, 40) : BOOL
95 : eq(89, 43) : BOOL
96 : eq(89, 46) : BOOL
97 : ite(96, 48, 49) : BV:8
98 : ite(95, 45, 97) : BV:8
99 : ite(94, 42, 98) : BV:8
100 : ite(93, 39, 99) : BV:8
101 : ite(92, 36, 100) : BV:8
102 : ite(91, 33, 101) : BV:8
103 : ite(90, 30, 102) : BV:8
104 : bvconcat(56, 72, 88, 103) : BV:32
105 : ite(22, 2, 104) : BV:32
106 : ite(21, 2, 105) : BV:32
107 : ite(19, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-3.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_ij-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1803190057 { 0x6b7a7f29 +1.95700562e87 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 1887436816 { 0x70800010 +1.190e98 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.gepoffset.2.total_offset.Lfor.cond1%1%bbentry
1 : 4195418144 { 0xfa110020 -99549152 -1.13281631e117 } : BV:32
=input.dst.llvm-%289705b5b10ef8e46579c979a515b48.intermediate.gepoffset.1.offset.Lfor.cond1%1%bbentry
1 : 1887436816 { 0x70800010 +1.190e98 } : BV:32
=input.dst.llvm-%add.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond1%1%bbentry
1 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
=input.dst.llvm-%arrayidx4.Lfor.cond1%1%bbentry
1 : 4195418144 { 0xfa110020 -99549152 -1.13281631e117 } : BV:32
=input.dst.llvm-%0.Lfor.cond1%1%bbentry
1 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
=input.dst.llvm-%1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%f25d6cf8dff9a98ac1e1b199dd7135b.gepoffset.1.total_offset.Lfor.cond1%1%bbentry
1 : 536870908 { 0x1ffffffc +1.99999952e192 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3346364276 { 0xc7757774 -948603020 -1.91770792e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3346364279 { 0xc7757777 -948603017 -1.91770827e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1139470064 { 0x43eaeef0 +1.83541679e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1139470067 { 0x43eaeef3 +1.83541715e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3399516024 { 0xcaa07f78 -895451272 -1.25389003e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3399516027 { 0xcaa07f7b -895451269 -1.25389039e22 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 471859203 ] -> true, [ 471859204; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17768 : BV:32
2 : Lambda17769 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17773 : BV:32
2 : Lambda17774 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 637534211 { 0x26000003 +1.35e205 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
55 : eq(53, 54) : BOOL
56 : 16 { 0x10 } : BV:8
57 : eq(53, 51) : BOOL
58 : 240 { 0xf0 -16 } : BV:8
59 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
60 : eq(53, 59) : BOOL
61 : 145 { 0x91 -111 } : BV:8
62 : 637534208 { 0x26000000 +1.0e205 } : BV:32
63 : eq(53, 62) : BOOL
64 : 193 { 0xc1 -63 } : BV:8
65 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
66 : eq(53, 65) : BOOL
67 : 137 { 0x89 -119 } : BV:8
68 : 637534210 { 0x26000002 +1.23e205 } : BV:32
69 : eq(53, 68) : BOOL
70 : 255 { 0xff -1 } : BV:8
71 : 637534209 { 0x26000001 +1.11e205 } : BV:32
72 : eq(53, 71) : BOOL
73 : 239 { 0xef -17 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(55, 56, 80) : BV:8
82 : bvadd(68, 52) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 51) : BOOL
85 : eq(82, 59) : BOOL
86 : eq(82, 62) : BOOL
87 : eq(82, 65) : BOOL
88 : eq(82, 68) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 70, 90) : BV:8
92 : ite(87, 67, 91) : BV:8
93 : ite(86, 64, 92) : BV:8
94 : ite(85, 61, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : bvadd(71, 52) : BV:32
98 : eq(97, 54) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : eq(97, 65) : BOOL
103 : eq(97, 68) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : ite(100, 61, 108) : BV:8
110 : ite(99, 58, 109) : BV:8
111 : ite(98, 56, 110) : BV:8
112 : bvadd(62, 52) : BV:32
113 : eq(112, 54) : BOOL
114 : eq(112, 51) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 62) : BOOL
117 : eq(112, 65) : BOOL
118 : eq(112, 68) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 70, 120) : BV:8
122 : ite(117, 67, 121) : BV:8
123 : ite(116, 64, 122) : BV:8
124 : ite(115, 61, 123) : BV:8
125 : ite(114, 58, 124) : BV:8
126 : ite(113, 56, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(48, 50, 127) : BV:32
129 : eq(128, 54) : BOOL
130 : eq(128, 51) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 70, 136) : BV:8
138 : ite(133, 67, 137) : BV:8
139 : ite(132, 64, 138) : BV:8
140 : ite(131, 61, 139) : BV:8
141 : ite(130, 58, 140) : BV:8
142 : ite(129, 56, 141) : BV:8
143 : 2 { 0x2 +1.23e129 } : BV:32
144 : bvadd(143, 50, 127) : BV:32
145 : eq(144, 54) : BOOL
146 : eq(144, 51) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 62) : BOOL
149 : eq(144, 65) : BOOL
150 : eq(144, 68) : BOOL
151 : eq(144, 71) : BOOL
152 : ite(151, 73, 74) : BV:8
153 : ite(150, 70, 152) : BV:8
154 : ite(149, 67, 153) : BV:8
155 : ite(148, 64, 154) : BV:8
156 : ite(147, 61, 155) : BV:8
157 : ite(146, 58, 156) : BV:8
158 : ite(145, 56, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 50, 127) : BV:32
161 : eq(160, 54) : BOOL
162 : eq(160, 51) : BOOL
163 : eq(160, 59) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : eq(160, 71) : BOOL
168 : ite(167, 73, 74) : BV:8
169 : ite(166, 70, 168) : BV:8
170 : ite(165, 67, 169) : BV:8
171 : ite(164, 64, 170) : BV:8
172 : ite(163, 61, 171) : BV:8
173 : ite(162, 58, 172) : BV:8
174 : ite(161, 56, 173) : BV:8
175 : bvadd(50, 127) : BV:32
176 : eq(175, 54) : BOOL
177 : eq(175, 51) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 62) : BOOL
180 : eq(175, 65) : BOOL
181 : eq(175, 68) : BOOL
182 : eq(175, 71) : BOOL
183 : ite(182, 73, 74) : BV:8
184 : ite(181, 70, 183) : BV:8
185 : ite(180, 67, 184) : BV:8
186 : ite(179, 64, 185) : BV:8
187 : ite(178, 61, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 56, 188) : BV:8
190 : bvconcat(142, 158, 174, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : ite(47, 190, 191) : BV:32
193 : ite(6, 3, 192) : BV:32
194 : lambda(1, 2, 193) : FUNCTION[BV:32,BV:32 -> BV:32]
195 : sym_const(194) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 471859203 ] -> true, [ 471859204; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda17779 : BV:32
2 : Lambda17780 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda17775 : BV:32
2 : Lambda17776 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 637534211 { 0x26000003 +1.35e205 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
14 : eq(12, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : eq(12, 10) : BOOL
17 : 240 { 0xf0 -16 } : BV:8
18 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
19 : eq(12, 18) : BOOL
20 : 145 { 0x91 -111 } : BV:8
21 : 637534208 { 0x26000000 +1.0e205 } : BV:32
22 : eq(12, 21) : BOOL
23 : 193 { 0xc1 -63 } : BV:8
24 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
25 : eq(12, 24) : BOOL
26 : 137 { 0x89 -119 } : BV:8
27 : 637534210 { 0x26000002 +1.23e205 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 637534209 { 0x26000001 +1.11e205 } : BV:32
31 : eq(12, 30) : BOOL
32 : 239 { 0xef -17 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 478154751 ] -> true, [ 478154752; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda17786 : BV:32
2 : 134217728 { 0x8000000 +1.0e145 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
14 : eq(12, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 637534211 { 0x26000003 +1.35e205 } : BV:32
17 : eq(12, 16) : BOOL
18 : 240 { 0xf0 -16 } : BV:8
19 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
20 : eq(12, 19) : BOOL
21 : 145 { 0x91 -111 } : BV:8
22 : 637534208 { 0x26000000 +1.0e205 } : BV:32
23 : eq(12, 22) : BOOL
24 : 193 { 0xc1 -63 } : BV:8
25 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
26 : eq(12, 25) : BOOL
27 : 137 { 0x89 -119 } : BV:8
28 : 637534210 { 0x26000002 +1.23e205 } : BV:32
29 : eq(12, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 637534209 { 0x26000001 +1.11e205 } : BV:32
32 : eq(12, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 478154751 ] -> true, [ 478154752; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda17790 : BV:32
2 : 134217728 { 0x8000000 +1.0e145 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
14 : eq(12, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 637534211 { 0x26000003 +1.35e205 } : BV:32
17 : eq(12, 16) : BOOL
18 : 240 { 0xf0 -16 } : BV:8
19 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
20 : eq(12, 19) : BOOL
21 : 145 { 0x91 -111 } : BV:8
22 : 637534208 { 0x26000000 +1.0e205 } : BV:32
23 : eq(12, 22) : BOOL
24 : 193 { 0xc1 -63 } : BV:8
25 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
26 : eq(12, 25) : BOOL
27 : 137 { 0x89 -119 } : BV:8
28 : 637534210 { 0x26000002 +1.23e205 } : BV:32
29 : eq(12, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 637534209 { 0x26000001 +1.11e205 } : BV:32
32 : eq(12, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 478154751 ] -> true, [ 478154752; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda17794 : BV:32
2 : 134217728 { 0x8000000 +1.0e145 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
13 : eq(11, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 637534211 { 0x26000003 +1.35e205 } : BV:32
16 : eq(11, 15) : BOOL
17 : 240 { 0xf0 -16 } : BV:8
18 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
19 : eq(11, 18) : BOOL
20 : 145 { 0x91 -111 } : BV:8
21 : 637534208 { 0x26000000 +1.0e205 } : BV:32
22 : eq(11, 21) : BOOL
23 : 193 { 0xc1 -63 } : BV:8
24 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
25 : eq(11, 24) : BOOL
26 : 137 { 0x89 -119 } : BV:8
27 : 637534210 { 0x26000002 +1.23e205 } : BV:32
28 : eq(11, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 637534209 { 0x26000001 +1.11e205 } : BV:32
31 : eq(11, 30) : BOOL
32 : 239 { 0xef -17 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 9, 10) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : eq(42, 18) : BOOL
46 : eq(42, 21) : BOOL
47 : eq(42, 24) : BOOL
48 : eq(42, 27) : BOOL
49 : eq(42, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 9, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : eq(58, 27) : BOOL
65 : eq(58, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 23, 68) : BV:8
70 : ite(61, 20, 69) : BV:8
71 : ite(60, 17, 70) : BV:8
72 : ite(59, 14, 71) : BV:8
73 : bvadd(9, 10) : BV:32
74 : eq(73, 12) : BOOL
75 : eq(73, 15) : BOOL
76 : eq(73, 18) : BOOL
77 : eq(73, 21) : BOOL
78 : eq(73, 24) : BOOL
79 : eq(73, 27) : BOOL
80 : eq(73, 30) : BOOL
81 : ite(80, 32, 33) : BV:8
82 : ite(79, 29, 81) : BV:8
83 : ite(78, 26, 82) : BV:8
84 : ite(77, 23, 83) : BV:8
85 : ite(76, 20, 84) : BV:8
86 : ite(75, 17, 85) : BV:8
87 : ite(74, 14, 86) : BV:8
88 : bvconcat(40, 56, 72, 87) : BV:32
89 : ite(6, 4, 88) : BV:32
90 : ite(3, 4, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1245552418
=counter_example_end
=global nodece 74 num_edges_traversed 1
=global nodece 74 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 75
=global nodece 75 nodece z3.ce6900.num_edges_traversed2
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(epsilon)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3.ce6900 1816db55ebb6688570469e67e17129
=input.spec-%var-x-1
1 : Lambda17841 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17844 : BV:32
18 : Lambda17842 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17843 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 637534211 { 0x26000003 +1.35e205 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
82 : eq(80, 81) : BOOL
83 : 16 { 0x10 } : BV:8
84 : eq(80, 78) : BOOL
85 : 240 { 0xf0 -16 } : BV:8
86 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
87 : eq(80, 86) : BOOL
88 : 145 { 0x91 -111 } : BV:8
89 : 637534208 { 0x26000000 +1.0e205 } : BV:32
90 : eq(80, 89) : BOOL
91 : 193 { 0xc1 -63 } : BV:8
92 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
93 : eq(80, 92) : BOOL
94 : 137 { 0x89 -119 } : BV:8
95 : 637534210 { 0x26000002 +1.23e205 } : BV:32
96 : eq(80, 95) : BOOL
97 : 255 { 0xff -1 } : BV:8
98 : 637534209 { 0x26000001 +1.11e205 } : BV:32
99 : eq(80, 98) : BOOL
100 : 239 { 0xef -17 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(96, 97, 102) : BV:8
104 : ite(93, 94, 103) : BV:8
105 : ite(90, 91, 104) : BV:8
106 : ite(87, 88, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(82, 83, 107) : BV:8
109 : bvadd(95, 79) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 78) : BOOL
112 : eq(109, 86) : BOOL
113 : eq(109, 89) : BOOL
114 : eq(109, 92) : BOOL
115 : eq(109, 95) : BOOL
116 : eq(109, 98) : BOOL
117 : ite(116, 100, 101) : BV:8
118 : ite(115, 97, 117) : BV:8
119 : ite(114, 94, 118) : BV:8
120 : ite(113, 91, 119) : BV:8
121 : ite(112, 88, 120) : BV:8
122 : ite(111, 85, 121) : BV:8
123 : ite(110, 83, 122) : BV:8
124 : bvadd(98, 79) : BV:32
125 : eq(124, 81) : BOOL
126 : eq(124, 78) : BOOL
127 : eq(124, 86) : BOOL
128 : eq(124, 89) : BOOL
129 : eq(124, 92) : BOOL
130 : eq(124, 95) : BOOL
131 : eq(124, 98) : BOOL
132 : ite(131, 100, 101) : BV:8
133 : ite(130, 97, 132) : BV:8
134 : ite(129, 94, 133) : BV:8
135 : ite(128, 91, 134) : BV:8
136 : ite(127, 88, 135) : BV:8
137 : ite(126, 85, 136) : BV:8
138 : ite(125, 83, 137) : BV:8
139 : bvadd(89, 79) : BV:32
140 : eq(139, 81) : BOOL
141 : eq(139, 78) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 89) : BOOL
144 : eq(139, 92) : BOOL
145 : eq(139, 95) : BOOL
146 : eq(139, 98) : BOOL
147 : ite(146, 100, 101) : BV:8
148 : ite(145, 97, 147) : BV:8
149 : ite(144, 94, 148) : BV:8
150 : ite(143, 91, 149) : BV:8
151 : ite(142, 88, 150) : BV:8
152 : ite(141, 85, 151) : BV:8
153 : ite(140, 83, 152) : BV:8
154 : bvconcat(108, 123, 138, 153) : BV:32
155 : bvadd(75, 77, 154) : BV:32
156 : eq(155, 81) : BOOL
157 : eq(155, 78) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : ite(162, 100, 101) : BV:8
164 : ite(161, 97, 163) : BV:8
165 : ite(160, 94, 164) : BV:8
166 : ite(159, 91, 165) : BV:8
167 : ite(158, 88, 166) : BV:8
168 : ite(157, 85, 167) : BV:8
169 : ite(156, 83, 168) : BV:8
170 : 2 { 0x2 +1.23e129 } : BV:32
171 : bvadd(170, 77, 154) : BV:32
172 : eq(171, 81) : BOOL
173 : eq(171, 78) : BOOL
174 : eq(171, 86) : BOOL
175 : eq(171, 89) : BOOL
176 : eq(171, 92) : BOOL
177 : eq(171, 95) : BOOL
178 : eq(171, 98) : BOOL
179 : ite(178, 100, 101) : BV:8
180 : ite(177, 97, 179) : BV:8
181 : ite(176, 94, 180) : BV:8
182 : ite(175, 91, 181) : BV:8
183 : ite(174, 88, 182) : BV:8
184 : ite(173, 85, 183) : BV:8
185 : ite(172, 83, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 77, 154) : BV:32
188 : eq(187, 81) : BOOL
189 : eq(187, 78) : BOOL
190 : eq(187, 86) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : eq(187, 98) : BOOL
195 : ite(194, 100, 101) : BV:8
196 : ite(193, 97, 195) : BV:8
197 : ite(192, 94, 196) : BV:8
198 : ite(191, 91, 197) : BV:8
199 : ite(190, 88, 198) : BV:8
200 : ite(189, 85, 199) : BV:8
201 : ite(188, 83, 200) : BV:8
202 : bvadd(77, 154) : BV:32
203 : eq(202, 81) : BOOL
204 : eq(202, 78) : BOOL
205 : eq(202, 86) : BOOL
206 : eq(202, 89) : BOOL
207 : eq(202, 92) : BOOL
208 : eq(202, 95) : BOOL
209 : eq(202, 98) : BOOL
210 : ite(209, 100, 101) : BV:8
211 : ite(208, 97, 210) : BV:8
212 : ite(207, 94, 211) : BV:8
213 : ite(206, 91, 212) : BV:8
214 : ite(205, 88, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 83, 215) : BV:8
217 : bvconcat(169, 185, 201, 216) : BV:32
218 : ite(55, 2, 217) : BV:32
219 : ite(74, 217, 218) : BV:32
220 : ite(55, 2, 219) : BV:32
221 : lambda(52, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(51, 221) : MAP[BV:32 -> BV:32]
223 : lambda(17, 222) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
224 : map(16, 223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
225 : sym_const(224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda17849 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17852 : BV:32
18 : Lambda17850 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17851 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 637534211 { 0x26000003 +1.35e205 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
63 : eq(61, 62) : BOOL
64 : 16 { 0x10 } : BV:8
65 : eq(61, 59) : BOOL
66 : 240 { 0xf0 -16 } : BV:8
67 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
68 : eq(61, 67) : BOOL
69 : 145 { 0x91 -111 } : BV:8
70 : 637534208 { 0x26000000 +1.0e205 } : BV:32
71 : eq(61, 70) : BOOL
72 : 193 { 0xc1 -63 } : BV:8
73 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
74 : eq(61, 73) : BOOL
75 : 137 { 0x89 -119 } : BV:8
76 : 637534210 { 0x26000002 +1.23e205 } : BV:32
77 : eq(61, 76) : BOOL
78 : 255 { 0xff -1 } : BV:8
79 : 637534209 { 0x26000001 +1.11e205 } : BV:32
80 : eq(61, 79) : BOOL
81 : 239 { 0xef -17 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(71, 72, 85) : BV:8
87 : ite(68, 69, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(63, 64, 88) : BV:8
90 : bvadd(76, 60) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 59) : BOOL
93 : eq(90, 67) : BOOL
94 : eq(90, 70) : BOOL
95 : eq(90, 73) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : bvadd(79, 60) : BV:32
106 : eq(105, 62) : BOOL
107 : eq(105, 59) : BOOL
108 : eq(105, 67) : BOOL
109 : eq(105, 70) : BOOL
110 : eq(105, 73) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 72, 115) : BV:8
117 : ite(108, 69, 116) : BV:8
118 : ite(107, 66, 117) : BV:8
119 : ite(106, 64, 118) : BV:8
120 : bvadd(70, 60) : BV:32
121 : eq(120, 62) : BOOL
122 : eq(120, 59) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 70) : BOOL
125 : eq(120, 73) : BOOL
126 : eq(120, 76) : BOOL
127 : eq(120, 79) : BOOL
128 : ite(127, 81, 82) : BV:8
129 : ite(126, 78, 128) : BV:8
130 : ite(125, 75, 129) : BV:8
131 : ite(124, 72, 130) : BV:8
132 : ite(123, 69, 131) : BV:8
133 : ite(122, 66, 132) : BV:8
134 : ite(121, 64, 133) : BV:8
135 : bvconcat(89, 104, 119, 134) : BV:32
136 : bvadd(56, 58, 135) : BV:32
137 : eq(136, 62) : BOOL
138 : eq(136, 59) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : ite(143, 81, 82) : BV:8
145 : ite(142, 78, 144) : BV:8
146 : ite(141, 75, 145) : BV:8
147 : ite(140, 72, 146) : BV:8
148 : ite(139, 69, 147) : BV:8
149 : ite(138, 66, 148) : BV:8
150 : ite(137, 64, 149) : BV:8
151 : 2 { 0x2 +1.23e129 } : BV:32
152 : bvadd(151, 58, 135) : BV:32
153 : eq(152, 62) : BOOL
154 : eq(152, 59) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 70) : BOOL
157 : eq(152, 73) : BOOL
158 : eq(152, 76) : BOOL
159 : eq(152, 79) : BOOL
160 : ite(159, 81, 82) : BV:8
161 : ite(158, 78, 160) : BV:8
162 : ite(157, 75, 161) : BV:8
163 : ite(156, 72, 162) : BV:8
164 : ite(155, 69, 163) : BV:8
165 : ite(154, 66, 164) : BV:8
166 : ite(153, 64, 165) : BV:8
167 : 1 { 0x1 +1.11e129 } : BV:32
168 : bvadd(167, 58, 135) : BV:32
169 : eq(168, 62) : BOOL
170 : eq(168, 59) : BOOL
171 : eq(168, 67) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : eq(168, 79) : BOOL
176 : ite(175, 81, 82) : BV:8
177 : ite(174, 78, 176) : BV:8
178 : ite(173, 75, 177) : BV:8
179 : ite(172, 72, 178) : BV:8
180 : ite(171, 69, 179) : BV:8
181 : ite(170, 66, 180) : BV:8
182 : ite(169, 64, 181) : BV:8
183 : bvadd(58, 135) : BV:32
184 : eq(183, 62) : BOOL
185 : eq(183, 59) : BOOL
186 : eq(183, 67) : BOOL
187 : eq(183, 70) : BOOL
188 : eq(183, 73) : BOOL
189 : eq(183, 76) : BOOL
190 : eq(183, 79) : BOOL
191 : ite(190, 81, 82) : BV:8
192 : ite(189, 78, 191) : BV:8
193 : ite(188, 75, 192) : BV:8
194 : ite(187, 72, 193) : BV:8
195 : ite(186, 69, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 64, 196) : BV:8
198 : bvconcat(150, 166, 182, 197) : BV:32
199 : ite(55, 2, 198) : BV:32
200 : lambda(52, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(51, 200) : MAP[BV:32 -> BV:32]
202 : lambda(17, 201) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
203 : map(16, 202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
204 : sym_const(203) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17854 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17855 : BV:32
18 : 134217728 { 0x8000000 +1.0e145 } : BV:32
19 : eq(17, 18) : BOOL
20 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
28 : eq(26, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 637534211 { 0x26000003 +1.35e205 } : BV:32
31 : eq(26, 30) : BOOL
32 : 240 { 0xf0 -16 } : BV:8
33 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
34 : eq(26, 33) : BOOL
35 : 145 { 0x91 -111 } : BV:8
36 : 637534208 { 0x26000000 +1.0e205 } : BV:32
37 : eq(26, 36) : BOOL
38 : 193 { 0xc1 -63 } : BV:8
39 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
40 : eq(26, 39) : BOOL
41 : 137 { 0x89 -119 } : BV:8
42 : 637534210 { 0x26000002 +1.23e205 } : BV:32
43 : eq(26, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 637534209 { 0x26000001 +1.11e205 } : BV:32
46 : eq(26, 45) : BOOL
47 : 239 { 0xef -17 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 24, 25) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : eq(57, 33) : BOOL
61 : eq(57, 36) : BOOL
62 : eq(57, 39) : BOOL
63 : eq(57, 42) : BOOL
64 : eq(57, 45) : BOOL
65 : ite(64, 47, 48) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 41, 66) : BV:8
68 : ite(61, 38, 67) : BV:8
69 : ite(60, 35, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 24, 25) : BV:32
74 : eq(73, 27) : BOOL
75 : eq(73, 30) : BOOL
76 : eq(73, 33) : BOOL
77 : eq(73, 36) : BOOL
78 : eq(73, 39) : BOOL
79 : eq(73, 42) : BOOL
80 : eq(73, 45) : BOOL
81 : ite(80, 47, 48) : BV:8
82 : ite(79, 44, 81) : BV:8
83 : ite(78, 41, 82) : BV:8
84 : ite(77, 38, 83) : BV:8
85 : ite(76, 35, 84) : BV:8
86 : ite(75, 32, 85) : BV:8
87 : ite(74, 29, 86) : BV:8
88 : bvadd(24, 25) : BV:32
89 : eq(88, 27) : BOOL
90 : eq(88, 30) : BOOL
91 : eq(88, 33) : BOOL
92 : eq(88, 36) : BOOL
93 : eq(88, 39) : BOOL
94 : eq(88, 42) : BOOL
95 : eq(88, 45) : BOOL
96 : ite(95, 47, 48) : BV:8
97 : ite(94, 44, 96) : BV:8
98 : ite(93, 41, 97) : BV:8
99 : ite(92, 38, 98) : BV:8
100 : ite(91, 35, 99) : BV:8
101 : ite(90, 32, 100) : BV:8
102 : ite(89, 29, 101) : BV:8
103 : bvconcat(55, 71, 87, 102) : BV:32
104 : ite(21, 2, 103) : BV:32
105 : ite(19, 2, 104) : BV:32
106 : lambda(17, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(16, 106) : MAP[BV:32 -> BV:32]
108 : sym_const(107) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 637534208 { 0x26000000 +1.0e205 } : BV:32
=input.dst.llvm-%n
1 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
=input.dst.llvm-%m
1 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 637534207 ] -> 0, [ 637534208; 637534208 ] -> 193, [ 637534209; 637534209 ] -> 239, [ 637534210; 637534210 ] -> 255, [ 637534211; 637534211 ] -> 240, [ 637534212; 1174405115 ] -> 0, [ 1174405116; 1174405116 ] -> 16, [ 1174405117; 1174405117 ] -> 0, [ 1174405118; 1174405118 ] -> 145, [ 1174405119; 1174405119 ] -> 137, [ 1174405120; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1139470063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1139470064; 1139470067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1139470068; 3346364275 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3346364276; 3346364279 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3346364280; 3399516023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3399516024; 3399516027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3399516028; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3399516024 { 0xcaa07f78 -895451272 -1.25389003e22 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3346364276 { 0xc7757774 -948603020 -1.91770792e15 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1139470064 { 0x43eaeef0 +1.83541679e8 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%19%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 471859206 { 0x1c200006 +1.25000071e185 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
2 : unit : UNIT
3 : Lambda17846 : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17847 : BV:32
20 : 134217728 { 0x8000000 +1.0e145 } : BV:32
21 : eq(19, 20) : BOOL
22 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
31 : eq(29, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 637534211 { 0x26000003 +1.35e205 } : BV:32
34 : eq(29, 33) : BOOL
35 : 240 { 0xf0 -16 } : BV:8
36 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
37 : eq(29, 36) : BOOL
38 : 145 { 0x91 -111 } : BV:8
39 : 637534208 { 0x26000000 +1.0e205 } : BV:32
40 : eq(29, 39) : BOOL
41 : 193 { 0xc1 -63 } : BV:8
42 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
43 : eq(29, 42) : BOOL
44 : 137 { 0x89 -119 } : BV:8
45 : 637534210 { 0x26000002 +1.23e205 } : BV:32
46 : eq(29, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 637534209 { 0x26000001 +1.11e205 } : BV:32
49 : eq(29, 48) : BOOL
50 : 239 { 0xef -17 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 27, 28) : BV:32
61 : eq(60, 30) : BOOL
62 : eq(60, 33) : BOOL
63 : eq(60, 36) : BOOL
64 : eq(60, 39) : BOOL
65 : eq(60, 42) : BOOL
66 : eq(60, 45) : BOOL
67 : eq(60, 48) : BOOL
68 : ite(67, 50, 51) : BV:8
69 : ite(66, 47, 68) : BV:8
70 : ite(65, 44, 69) : BV:8
71 : ite(64, 41, 70) : BV:8
72 : ite(63, 38, 71) : BV:8
73 : ite(62, 35, 72) : BV:8
74 : ite(61, 32, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 27, 28) : BV:32
77 : eq(76, 30) : BOOL
78 : eq(76, 33) : BOOL
79 : eq(76, 36) : BOOL
80 : eq(76, 39) : BOOL
81 : eq(76, 42) : BOOL
82 : eq(76, 45) : BOOL
83 : eq(76, 48) : BOOL
84 : ite(83, 50, 51) : BV:8
85 : ite(82, 47, 84) : BV:8
86 : ite(81, 44, 85) : BV:8
87 : ite(80, 41, 86) : BV:8
88 : ite(79, 38, 87) : BV:8
89 : ite(78, 35, 88) : BV:8
90 : ite(77, 32, 89) : BV:8
91 : bvadd(27, 28) : BV:32
92 : eq(91, 30) : BOOL
93 : eq(91, 33) : BOOL
94 : eq(91, 36) : BOOL
95 : eq(91, 39) : BOOL
96 : eq(91, 42) : BOOL
97 : eq(91, 45) : BOOL
98 : eq(91, 48) : BOOL
99 : ite(98, 50, 51) : BV:8
100 : ite(97, 47, 99) : BV:8
101 : ite(96, 44, 100) : BV:8
102 : ite(95, 41, 101) : BV:8
103 : ite(94, 38, 102) : BV:8
104 : ite(93, 35, 103) : BV:8
105 : ite(92, 32, 104) : BV:8
106 : bvconcat(58, 74, 90, 105) : BV:32
107 : ite(24, 4, 106) : BV:32
108 : ite(23, 4, 107) : BV:32
109 : ite(21, 4, 108) : BV:32
110 : lambda(19, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(18, 110) : MAP[BV:32 -> BV:32]
112 : sum(1, 2, 111) : SUM[UNIT,MAP[BV:32 -> BV:32]]
113 : sym_const(112) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1542471170 { 0x5bf03e02 +1.87689232e56 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17857 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17858 : BV:32
18 : 134217728 { 0x8000000 +1.0e145 } : BV:32
19 : eq(17, 18) : BOOL
20 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
29 : eq(27, 28) : BOOL
30 : 16 { 0x10 } : BV:8
31 : 637534211 { 0x26000003 +1.35e205 } : BV:32
32 : eq(27, 31) : BOOL
33 : 240 { 0xf0 -16 } : BV:8
34 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
35 : eq(27, 34) : BOOL
36 : 145 { 0x91 -111 } : BV:8
37 : 637534208 { 0x26000000 +1.0e205 } : BV:32
38 : eq(27, 37) : BOOL
39 : 193 { 0xc1 -63 } : BV:8
40 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
41 : eq(27, 40) : BOOL
42 : 137 { 0x89 -119 } : BV:8
43 : 637534210 { 0x26000002 +1.23e205 } : BV:32
44 : eq(27, 43) : BOOL
45 : 255 { 0xff -1 } : BV:8
46 : 637534209 { 0x26000001 +1.11e205 } : BV:32
47 : eq(27, 46) : BOOL
48 : 239 { 0xef -17 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 25, 26) : BV:32
59 : eq(58, 28) : BOOL
60 : eq(58, 31) : BOOL
61 : eq(58, 34) : BOOL
62 : eq(58, 37) : BOOL
63 : eq(58, 40) : BOOL
64 : eq(58, 43) : BOOL
65 : eq(58, 46) : BOOL
66 : ite(65, 48, 49) : BV:8
67 : ite(64, 45, 66) : BV:8
68 : ite(63, 42, 67) : BV:8
69 : ite(62, 39, 68) : BV:8
70 : ite(61, 36, 69) : BV:8
71 : ite(60, 33, 70) : BV:8
72 : ite(59, 30, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 25, 26) : BV:32
75 : eq(74, 28) : BOOL
76 : eq(74, 31) : BOOL
77 : eq(74, 34) : BOOL
78 : eq(74, 37) : BOOL
79 : eq(74, 40) : BOOL
80 : eq(74, 43) : BOOL
81 : eq(74, 46) : BOOL
82 : ite(81, 48, 49) : BV:8
83 : ite(80, 45, 82) : BV:8
84 : ite(79, 42, 83) : BV:8
85 : ite(78, 39, 84) : BV:8
86 : ite(77, 36, 85) : BV:8
87 : ite(76, 33, 86) : BV:8
88 : ite(75, 30, 87) : BV:8
89 : bvadd(25, 26) : BV:32
90 : eq(89, 28) : BOOL
91 : eq(89, 31) : BOOL
92 : eq(89, 34) : BOOL
93 : eq(89, 37) : BOOL
94 : eq(89, 40) : BOOL
95 : eq(89, 43) : BOOL
96 : eq(89, 46) : BOOL
97 : ite(96, 48, 49) : BV:8
98 : ite(95, 45, 97) : BV:8
99 : ite(94, 42, 98) : BV:8
100 : ite(93, 39, 99) : BV:8
101 : ite(92, 36, 100) : BV:8
102 : ite(91, 33, 101) : BV:8
103 : ite(90, 30, 102) : BV:8
104 : bvconcat(56, 72, 88, 103) : BV:32
105 : ite(22, 2, 104) : BV:32
106 : ite(21, 2, 105) : BV:32
107 : ite(19, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1803190058 { 0x6b7a7f2a +1.95700573e87 } : BV:32
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 471859206 { 0x1c200006 +1.25000071e185 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3346364276 { 0xc7757774 -948603020 -1.91770792e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3346364279 { 0xc7757777 -948603017 -1.91770827e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1139470064 { 0x43eaeef0 +1.83541679e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1139470067 { 0x43eaeef3 +1.83541715e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3399516024 { 0xcaa07f78 -895451272 -1.25389003e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3399516027 { 0xcaa07f7b -895451269 -1.25389039e22 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 471859203 ] -> true, [ 471859204; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17768 : BV:32
2 : Lambda17769 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17773 : BV:32
2 : Lambda17774 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 637534211 { 0x26000003 +1.35e205 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
55 : eq(53, 54) : BOOL
56 : 16 { 0x10 } : BV:8
57 : eq(53, 51) : BOOL
58 : 240 { 0xf0 -16 } : BV:8
59 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
60 : eq(53, 59) : BOOL
61 : 145 { 0x91 -111 } : BV:8
62 : 637534208 { 0x26000000 +1.0e205 } : BV:32
63 : eq(53, 62) : BOOL
64 : 193 { 0xc1 -63 } : BV:8
65 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
66 : eq(53, 65) : BOOL
67 : 137 { 0x89 -119 } : BV:8
68 : 637534210 { 0x26000002 +1.23e205 } : BV:32
69 : eq(53, 68) : BOOL
70 : 255 { 0xff -1 } : BV:8
71 : 637534209 { 0x26000001 +1.11e205 } : BV:32
72 : eq(53, 71) : BOOL
73 : 239 { 0xef -17 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(55, 56, 80) : BV:8
82 : bvadd(68, 52) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 51) : BOOL
85 : eq(82, 59) : BOOL
86 : eq(82, 62) : BOOL
87 : eq(82, 65) : BOOL
88 : eq(82, 68) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 70, 90) : BV:8
92 : ite(87, 67, 91) : BV:8
93 : ite(86, 64, 92) : BV:8
94 : ite(85, 61, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : bvadd(71, 52) : BV:32
98 : eq(97, 54) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : eq(97, 65) : BOOL
103 : eq(97, 68) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : ite(100, 61, 108) : BV:8
110 : ite(99, 58, 109) : BV:8
111 : ite(98, 56, 110) : BV:8
112 : bvadd(62, 52) : BV:32
113 : eq(112, 54) : BOOL
114 : eq(112, 51) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 62) : BOOL
117 : eq(112, 65) : BOOL
118 : eq(112, 68) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 70, 120) : BV:8
122 : ite(117, 67, 121) : BV:8
123 : ite(116, 64, 122) : BV:8
124 : ite(115, 61, 123) : BV:8
125 : ite(114, 58, 124) : BV:8
126 : ite(113, 56, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(48, 50, 127) : BV:32
129 : eq(128, 54) : BOOL
130 : eq(128, 51) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 70, 136) : BV:8
138 : ite(133, 67, 137) : BV:8
139 : ite(132, 64, 138) : BV:8
140 : ite(131, 61, 139) : BV:8
141 : ite(130, 58, 140) : BV:8
142 : ite(129, 56, 141) : BV:8
143 : 2 { 0x2 +1.23e129 } : BV:32
144 : bvadd(143, 50, 127) : BV:32
145 : eq(144, 54) : BOOL
146 : eq(144, 51) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 62) : BOOL
149 : eq(144, 65) : BOOL
150 : eq(144, 68) : BOOL
151 : eq(144, 71) : BOOL
152 : ite(151, 73, 74) : BV:8
153 : ite(150, 70, 152) : BV:8
154 : ite(149, 67, 153) : BV:8
155 : ite(148, 64, 154) : BV:8
156 : ite(147, 61, 155) : BV:8
157 : ite(146, 58, 156) : BV:8
158 : ite(145, 56, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 50, 127) : BV:32
161 : eq(160, 54) : BOOL
162 : eq(160, 51) : BOOL
163 : eq(160, 59) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : eq(160, 71) : BOOL
168 : ite(167, 73, 74) : BV:8
169 : ite(166, 70, 168) : BV:8
170 : ite(165, 67, 169) : BV:8
171 : ite(164, 64, 170) : BV:8
172 : ite(163, 61, 171) : BV:8
173 : ite(162, 58, 172) : BV:8
174 : ite(161, 56, 173) : BV:8
175 : bvadd(50, 127) : BV:32
176 : eq(175, 54) : BOOL
177 : eq(175, 51) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 62) : BOOL
180 : eq(175, 65) : BOOL
181 : eq(175, 68) : BOOL
182 : eq(175, 71) : BOOL
183 : ite(182, 73, 74) : BV:8
184 : ite(181, 70, 183) : BV:8
185 : ite(180, 67, 184) : BV:8
186 : ite(179, 64, 185) : BV:8
187 : ite(178, 61, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 56, 188) : BV:8
190 : bvconcat(142, 158, 174, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : ite(47, 190, 191) : BV:32
193 : ite(6, 3, 192) : BV:32
194 : lambda(1, 2, 193) : FUNCTION[BV:32,BV:32 -> BV:32]
195 : sym_const(194) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 471859203 ] -> true, [ 471859204; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda17779 : BV:32
2 : Lambda17780 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 471859203 { 0x1c200003 +1.25000035e185 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 471859205 { 0x1c200005 +1.25000059e185 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 478154751 { 0x1c800fff +1.48816e186 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 478154753 { 0x1c801001 +1.48840e186 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 478154752 { 0x1c801000 +1.48828e186 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda17775 : BV:32
2 : Lambda17776 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 637534211 { 0x26000003 +1.35e205 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
14 : eq(12, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : eq(12, 10) : BOOL
17 : 240 { 0xf0 -16 } : BV:8
18 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
19 : eq(12, 18) : BOOL
20 : 145 { 0x91 -111 } : BV:8
21 : 637534208 { 0x26000000 +1.0e205 } : BV:32
22 : eq(12, 21) : BOOL
23 : 193 { 0xc1 -63 } : BV:8
24 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
25 : eq(12, 24) : BOOL
26 : 137 { 0x89 -119 } : BV:8
27 : 637534210 { 0x26000002 +1.23e205 } : BV:32
28 : eq(12, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 637534209 { 0x26000001 +1.11e205 } : BV:32
31 : eq(12, 30) : BOOL
32 : 239 { 0xef -17 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(21, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 478154751 ] -> true, [ 478154752; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda17786 : BV:32
2 : 134217728 { 0x8000000 +1.0e145 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
14 : eq(12, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 637534211 { 0x26000003 +1.35e205 } : BV:32
17 : eq(12, 16) : BOOL
18 : 240 { 0xf0 -16 } : BV:8
19 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
20 : eq(12, 19) : BOOL
21 : 145 { 0x91 -111 } : BV:8
22 : 637534208 { 0x26000000 +1.0e205 } : BV:32
23 : eq(12, 22) : BOOL
24 : 193 { 0xc1 -63 } : BV:8
25 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
26 : eq(12, 25) : BOOL
27 : 137 { 0x89 -119 } : BV:8
28 : 637534210 { 0x26000002 +1.23e205 } : BV:32
29 : eq(12, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 637534209 { 0x26000001 +1.11e205 } : BV:32
32 : eq(12, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 478154751 ] -> true, [ 478154752; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : Lambda17790 : BV:32
2 : 134217728 { 0x8000000 +1.0e145 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
14 : eq(12, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 637534211 { 0x26000003 +1.35e205 } : BV:32
17 : eq(12, 16) : BOOL
18 : 240 { 0xf0 -16 } : BV:8
19 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
20 : eq(12, 19) : BOOL
21 : 145 { 0x91 -111 } : BV:8
22 : 637534208 { 0x26000000 +1.0e205 } : BV:32
23 : eq(12, 22) : BOOL
24 : 193 { 0xc1 -63 } : BV:8
25 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
26 : eq(12, 25) : BOOL
27 : 137 { 0x89 -119 } : BV:8
28 : 637534210 { 0x26000002 +1.23e205 } : BV:32
29 : eq(12, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 637534209 { 0x26000001 +1.11e205 } : BV:32
32 : eq(12, 31) : BOOL
33 : 239 { 0xef -17 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 10, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : eq(43, 22) : BOOL
48 : eq(43, 25) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 24, 53) : BV:8
55 : ite(46, 21, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 10, 11) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 22) : BOOL
64 : eq(59, 25) : BOOL
65 : eq(59, 28) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 30, 67) : BV:8
69 : ite(64, 27, 68) : BV:8
70 : ite(63, 24, 69) : BV:8
71 : ite(62, 21, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 15, 72) : BV:8
74 : bvadd(10, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : eq(74, 22) : BOOL
79 : eq(74, 25) : BOOL
80 : eq(74, 28) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 30, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 24, 84) : BV:8
86 : ite(77, 21, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 15, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : ite(7, 4, 89) : BV:32
91 : ite(6, 4, 90) : BV:32
92 : ite(3, 4, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 478154751 ] -> true, [ 478154752; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda17794 : BV:32
2 : 134217728 { 0x8000000 +1.0e145 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 471859204 { 0x1c200004 +1.25000047e185 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 2307981328 { 0x89910010 -1986985968 -1.13281440e148 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1174405116 { 0x45fffffc +1.99999952e12 } : BV:32
13 : eq(11, 12) : BOOL
14 : 16 { 0x10 } : BV:8
15 : 637534211 { 0x26000003 +1.35e205 } : BV:32
16 : eq(11, 15) : BOOL
17 : 240 { 0xf0 -16 } : BV:8
18 : 1174405118 { 0x45fffffe +1.99999976e12 } : BV:32
19 : eq(11, 18) : BOOL
20 : 145 { 0x91 -111 } : BV:8
21 : 637534208 { 0x26000000 +1.0e205 } : BV:32
22 : eq(11, 21) : BOOL
23 : 193 { 0xc1 -63 } : BV:8
24 : 1174405119 { 0x45ffffff +1.99999988e12 } : BV:32
25 : eq(11, 24) : BOOL
26 : 137 { 0x89 -119 } : BV:8
27 : 637534210 { 0x26000002 +1.23e205 } : BV:32
28 : eq(11, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 637534209 { 0x26000001 +1.11e205 } : BV:32
31 : eq(11, 30) : BOOL
32 : 239 { 0xef -17 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 9, 10) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : eq(42, 18) : BOOL
46 : eq(42, 21) : BOOL
47 : eq(42, 24) : BOOL
48 : eq(42, 27) : BOOL
49 : eq(42, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 9, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : eq(58, 27) : BOOL
65 : eq(58, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 23, 68) : BV:8
70 : ite(61, 20, 69) : BV:8
71 : ite(60, 17, 70) : BV:8
72 : ite(59, 14, 71) : BV:8
73 : bvadd(9, 10) : BV:32
74 : eq(73, 12) : BOOL
75 : eq(73, 15) : BOOL
76 : eq(73, 18) : BOOL
77 : eq(73, 21) : BOOL
78 : eq(73, 24) : BOOL
79 : eq(73, 27) : BOOL
80 : eq(73, 30) : BOOL
81 : ite(80, 32, 33) : BV:8
82 : ite(79, 29, 81) : BV:8
83 : ite(78, 26, 82) : BV:8
84 : ite(77, 23, 83) : BV:8
85 : ite(76, 20, 84) : BV:8
86 : ite(75, 17, 85) : BV:8
87 : ite(74, 14, 86) : BV:8
88 : bvconcat(40, 56, 72, 87) : BV:32
89 : ite(6, 4, 88) : BV:32
90 : ite(3, 4, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1245552418
=counter_example_end
=global nodece 75 num_edges_traversed 2
=global nodece 75 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 76
=global nodece 76 nodece z3v487.ce6935.num_edges_traversed0
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(epsilon)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3v487.ce6935 b7ca7663a929b65626b18912528e664
=input.spec-%var-x-1
1 : Lambda18786 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18789 : BV:32
18 : Lambda18787 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda18788 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda18791 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18794 : BV:32
18 : Lambda18792 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda18793 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
=input.dst.llvm-%m
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 283656063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 283656064; 283656067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 283656068; 343063523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 343063524; 343063527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 343063528; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 343063524 { 0x1472bbe4 +1.89635896e169 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 283656064 { 0x10e83f80 +1.81443786e162 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 283656064 { 0x10e83f80 +1.81443786e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 283656067 { 0x10e83f83 +1.81443822e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 343063524 { 0x1472bbe4 +1.89635896e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 343063527 { 0x1472bbe7 +1.89635932e169 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4114990379 ] -> true, [ 4114990380; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda18746 : BV:32
2 : Lambda18747 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4114990379 ] -> true, [ 4114990380; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda18755 : BV:32
2 : Lambda18756 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda18759 : BV:32
2 : Lambda18760 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4114990379 { 0xf545c52b -179976917 -1.54507958e107 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4114990380 { 0xf545c52c -179976916 -1.54507970e107 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4114990381 { 0xf545c52d -179976915 -1.54507982e107 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2097153 { 0x200001 +1.25000011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2141042241
=counter_example_end
=global nodece 76 num_edges_traversed 0
=global nodece 76 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 77
=global nodece 77 nodece z3.ce6936.num_edges_traversed0
=global nodece 77 nodece_path
=global nodece 77 nodece_path.graph_edge_composition
(epsilon)
=global nodece 77 nodece_cached_counterexample
=counter_example_begin z3.ce6936 d0949ac10da576e39dd4129fad6540
=input.spec-%var-x-1
1 : Lambda18806 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3066867761 { 0xb6ccb031 -1228099535 -1.59912693e238 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18809 : BV:32
18 : Lambda18807 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda18808 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 145 { 0x91 -111 } : BV:8
28 : eq(25, 21) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 253 { 0xfd -3 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda18813 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3066867761 { 0xb6ccb031 -1228099535 -1.59912693e238 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18816 : BV:32
18 : Lambda18814 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda18815 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 145 { 0x91 -111 } : BV:8
28 : eq(25, 21) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 253 { 0xfd -3 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 145, [ 1; 1 ] -> 247, [ 2; 2 ] -> 253, [ 3; 3 ] -> 255, [ 4; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1153173059 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1153173060; 1153173063 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1153173064; 2216168527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2216168528; 2216168531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2216168532; 3290990103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3290990104; 3290990107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3290990108; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1153173060 { 0x44bc0644 +1.46894121e10 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3290990104 { 0xc4288618 -1003977192 -1.31659221e9 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2216168528 { 0x84180c50 -2078798768 -1.18787574e137 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3066867762 { 0xb6ccb032 -1228099534 -1.59912705e238 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3290990104 { 0xc4288618 -1003977192 -1.31659221e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3290990107 { 0xc428861b -1003977189 -1.31659257e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2216168528 { 0x84180c50 -2078798768 -1.18787574e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2216168531 { 0x84180c53 -2078798765 -1.18787610e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1153173060 { 0x44bc0644 +1.46894121e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1153173063 { 0x44bc0647 +1.46894156e10 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 3066867761 ] -> true, [ 3066867762; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda18767 : BV:32
2 : Lambda18768 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 145 { 0x91 -111 } : BV:8
11 : eq(7, 3) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 247 { 0xf7 -9 } : BV:8
16 : 253 { 0xfd -3 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3066867761 ] -> true, [ 3066867762; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda18769 : BV:32
2 : Lambda18770 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 145 { 0x91 -111 } : BV:8
11 : eq(7, 3) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 247 { 0xf7 -9 } : BV:8
16 : 253 { 0xfd -3 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3264518217
=counter_example_end
=global nodece 77 num_edges_traversed 0
=global nodece 77 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 78
=global nodece 78 nodece z3.ce7304.num_edges_traversed2
=global nodece 78 nodece_path
=global nodece 78 nodece_path.graph_edge_composition
(epsilon)
=global nodece 78 nodece_cached_counterexample
=counter_example_begin z3.ce7304 cde51211acd5bc890a475d96deccae
=retaddr_const
1 : 542194088 { 0x205139a8 +1.63457202e193 } : BV:32
=input.spec-%var-x-1
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda54 : BV:32
11 : Lambda52 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda53 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda51 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda54 : BV:32
11 : Lambda52 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda53 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1072488283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1072488284; 1072488287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1072488288; 1496640175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1496640176; 1496640179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1496640180; 4258622623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4258622624; 4258622627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4258622628; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1496640176 { 0x5934eab0 +1.41341209e51 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1072488284 { 0x3fecdf5c +1.85056638e0 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4258622624 { 0xfdd56ca0 -36344672 -1.66737747e124 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda19067 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda19068 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 542194088 { 0x205139a8 +1.63457202e193 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 216936722 { 0xcee3112 +1.86087250e154 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1072488284 { 0x3fecdf5c +1.85056638e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1072488287 { 0x3fecdf5f +1.85056674e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4258622624 { 0xfdd56ca0 -36344672 -1.66737747e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4258622627 { 0xfdd56ca3 -36344669 -1.66737782e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1496640176 { 0x5934eab0 +1.41341209e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1496640179 { 0x5934eab3 +1.41341245e51 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 78 num_edges_traversed 2
=global nodece 78 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 79
=global nodece 79 nodece z3.ce7286.num_edges_traversed2
=global nodece 79 nodece_path
=global nodece 79 nodece_path.graph_edge_composition
(epsilon)
=global nodece 79 nodece_cached_counterexample
=counter_example_begin z3.ce7286 3c45325cb8f2d1477b32662c4a6dd071
=retaddr_const
1 : 214063548 { 0xcc259bc +1.51836347e154 } : BV:32
=input.spec-%var-x-1
1 : Lambda151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda154 : BV:32
11 : Lambda152 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda153 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda154 : BV:32
11 : Lambda152 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda153 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 707125783 ] -> 0, [ 707125784; 707125784 ] -> 128, [ 707125785; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 626279043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 626279044; 626279047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 626279048; 707125783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 707125784; 707125787 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 707125788; 1244027327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1244027328; 1244027331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1244027332; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 626279044 { 0x25544284 +1.65827989e203 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1244027328 { 0x4a2659c0 +1.29961395e21 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda19055 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda19056 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
12 : eq(10, 11) : BOOL
13 : 128 { 0x80 -128 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 214063548 { 0xcc259bc +1.51836347e154 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1328825927 { 0x4f344647 +1.40839469e31 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 626279044 { 0x25544284 +1.65827989e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 626279047 { 0x25544287 +1.65828025e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1244027328 { 0x4a2659c0 +1.29961395e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1244027331 { 0x4a2659c3 +1.29961431e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 707125787 { 0x2a25e21b +1.29596269e213 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda122 : BV:32
2 : Lambda123 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda127 : BV:32
2 : Lambda128 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 707125784 { 0x2a25e218 +1.29596233e213 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3432939377
=counter_example_end
=global nodece 79 num_edges_traversed 2
=global nodece 79 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 80
=global nodece 80 nodece z3v487.ce7268.num_edges_traversed2
=global nodece 80 nodece_path
=global nodece 80 nodece_path.graph_edge_composition
(epsilon)
=global nodece 80 nodece_cached_counterexample
=counter_example_begin z3v487.ce7268 155a64a99d60ea1ae86f11b63aa6b211
=retaddr_const
1 : 1093070041 { 0x4126ecd9 +1.30410301e3 } : BV:32
=input.spec-%var-x-1
1 : Lambda173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda176 : BV:32
11 : Lambda174 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda175 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 528 { 0x210 +1.6294e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda176 : BV:32
11 : Lambda174 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda175 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 528 { 0x210 +1.6294e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 527 ] -> 0, [ 528; 528 ] -> 2, [ 529; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 528; 531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 532; 895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 896; 899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 900; 66051 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 66052; 66055 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 66056; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 528 { 0x210 +1.6294e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 896 { 0x380 +1.10681e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 66052 { 0x10204 +1.787401e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda19043 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda19044 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 528 { 0x210 +1.6294e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1093070041 { 0x4126ecd9 +1.30410301e3 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1241543916 { 0x4a0074ec +1.356817e21 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 896 { 0x380 +1.10681e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 899 { 0x383 +1.10716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 66052 { 0x10204 +1.787401e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 66055 { 0x10207 +1.787436e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 528 { 0x210 +1.6294e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 531 { 0x213 +1.6330e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda133 : BV:32
2 : Lambda134 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 528 { 0x210 +1.6294e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda138 : BV:32
2 : Lambda139 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 528 { 0x210 +1.6294e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3774610773
=counter_example_end
=global nodece 80 num_edges_traversed 2
=global nodece 80 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 81
=global nodece 81 nodece z3.ce7250.num_edges_traversed2
=global nodece 81 nodece_path
=global nodece 81 nodece_path.graph_edge_composition
(epsilon)
=global nodece 81 nodece_cached_counterexample
=counter_example_begin z3.ce7250 45467112fdd4816387138c37672952
=retaddr_const
1 : 647621390 { 0x2699eb0e +1.20248579e206 } : BV:32
=input.spec-%var-x-1
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda234 : BV:32
11 : Lambda232 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda233 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda234 : BV:32
11 : Lambda232 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda233 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1978462187 ] -> 0, [ 1978462188; 1978462188 ] -> 1, [ 1978462189; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1978462187 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1978462188; 1978462191 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1978462192; 2364063719 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2364063720; 2364063723 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2364063724; 2675444035 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2675444036; 2675444039 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2675444040; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2364063720 { 0x8ce8bfe8 -1930903576 -1.81835651e154 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2675444036 { 0x9f780944 -1619523260 -1.93778276e191 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda19031 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda19032 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 647621390 { 0x2699eb0e +1.20248579e206 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1313432177 { 0x4e496271 +1.57331669e29 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2364063720 { 0x8ce8bfe8 -1930903576 -1.81835651e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2364063723 { 0x8ce8bfeb -1930903573 -1.81835687e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2675444036 { 0x9f780944 -1619523260 -1.93778276e191 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2675444039 { 0x9f780947 -1619523257 -1.93778312e191 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1978462191 { 0x75ecefef +1.85107219e108 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda202 : BV:32
2 : Lambda203 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda207 : BV:32
2 : Lambda208 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1978462188 { 0x75ecefec +1.85107183e108 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3078948147
=counter_example_end
=global nodece 81 num_edges_traversed 2
=global nodece 81 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 82
=global nodece 82 nodece z3.ce7232.num_edges_traversed2
=global nodece 82 nodece_path
=global nodece 82 nodece_path.graph_edge_composition
(epsilon)
=global nodece 82 nodece_cached_counterexample
=counter_example_begin z3.ce7232 c08270eabfecb4656baf062d07a6fca
=retaddr_const
1 : 1774234007 { 0x69c0a997 +1.50517547e84 } : BV:32
=input.spec-%var-x-1
1 : Lambda311 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : Lambda312 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda313 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
21 : eq(19, 20) : BOOL
22 : 128 { 0x80 -128 } : BV:8
23 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
24 : eq(19, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : ite(24, 22, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : eq(29, 23) : BOOL
32 : ite(31, 22, 25) : BV:8
33 : ite(30, 22, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : ite(37, 22, 25) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : bvadd(17, 18) : BV:32
41 : eq(40, 20) : BOOL
42 : eq(40, 23) : BOOL
43 : ite(42, 22, 25) : BV:8
44 : ite(41, 22, 43) : BV:8
45 : bvconcat(27, 33, 39, 44) : BV:32
46 : bvadd(14, 16, 45) : BV:32
47 : eq(46, 20) : BOOL
48 : eq(46, 23) : BOOL
49 : ite(48, 22, 25) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : bvadd(28, 16, 45) : BV:32
52 : eq(51, 20) : BOOL
53 : eq(51, 23) : BOOL
54 : ite(53, 22, 25) : BV:8
55 : ite(52, 22, 54) : BV:8
56 : bvadd(34, 16, 45) : BV:32
57 : eq(56, 20) : BOOL
58 : eq(56, 23) : BOOL
59 : ite(58, 22, 25) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : bvadd(16, 45) : BV:32
62 : eq(61, 20) : BOOL
63 : eq(61, 23) : BOOL
64 : ite(63, 22, 25) : BV:8
65 : ite(62, 22, 64) : BV:8
66 : bvconcat(50, 55, 60, 65) : BV:32
67 : lambda(13, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(12, 67) : MAP[BV:32 -> BV:32]
69 : lambda(10, 68) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
70 : map(9, 69) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
71 : sym_const(70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda311 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : Lambda312 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda313 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
21 : eq(19, 20) : BOOL
22 : 128 { 0x80 -128 } : BV:8
23 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
24 : eq(19, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : ite(24, 22, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : eq(29, 23) : BOOL
32 : ite(31, 22, 25) : BV:8
33 : ite(30, 22, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : ite(37, 22, 25) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : bvadd(17, 18) : BV:32
41 : eq(40, 20) : BOOL
42 : eq(40, 23) : BOOL
43 : ite(42, 22, 25) : BV:8
44 : ite(41, 22, 43) : BV:8
45 : bvconcat(27, 33, 39, 44) : BV:32
46 : bvadd(14, 16, 45) : BV:32
47 : eq(46, 20) : BOOL
48 : eq(46, 23) : BOOL
49 : ite(48, 22, 25) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : bvadd(28, 16, 45) : BV:32
52 : eq(51, 20) : BOOL
53 : eq(51, 23) : BOOL
54 : ite(53, 22, 25) : BV:8
55 : ite(52, 22, 54) : BV:8
56 : bvadd(34, 16, 45) : BV:32
57 : eq(56, 20) : BOOL
58 : eq(56, 23) : BOOL
59 : ite(58, 22, 25) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : bvadd(16, 45) : BV:32
62 : eq(61, 20) : BOOL
63 : eq(61, 23) : BOOL
64 : ite(63, 22, 25) : BV:8
65 : ite(62, 22, 64) : BV:8
66 : bvconcat(50, 55, 60, 65) : BV:32
67 : lambda(13, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(12, 67) : MAP[BV:32 -> BV:32]
69 : lambda(10, 68) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
70 : map(9, 69) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
71 : sym_const(70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1738598139 ] -> 0, [ 1738598140; 1738598140 ] -> 128, [ 1738598141; 1738598142 ] -> 0, [ 1738598143; 1738598143 ] -> 128, [ 1738598144; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1554251703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1554251704; 1554251707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1554251708; 1738598139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1738598140; 1738598143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1738598144; 2728497139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2728497140; 2728497143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2728497144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2728497140 { 0xa2a18ff4 -1566470156 -1.26220560e198 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1554251704 { 0x5ca3ffb8 +1.28124141e58 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda19019 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda19020 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
12 : eq(10, 11) : BOOL
13 : 128 { 0x80 -128 } : BV:8
14 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
15 : eq(10, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : ite(15, 13, 16) : BV:8
18 : ite(12, 13, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 9, 1) : BV:32
21 : eq(20, 11) : BOOL
22 : eq(20, 14) : BOOL
23 : ite(22, 13, 16) : BV:8
24 : ite(21, 13, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 1) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 13, 16) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 1) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 13, 16) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(6, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(5, 37) : MAP[BV:32 -> BV:32]
39 : sum(1, 2, 38) : SUM[UNIT,MAP[BV:32 -> BV:32]]
40 : sym_const(39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1774234007 { 0x69c0a997 +1.50517547e84 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1633243998 { 0x6159535e +1.69785666e67 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1554251704 { 0x5ca3ffb8 +1.28124141e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1554251707 { 0x5ca3ffbb +1.28124177e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2728497140 { 0xa2a18ff4 -1566470156 -1.26220560e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2728497143 { 0xa2a18ff7 -1566470153 -1.26220595e198 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda282 : BV:32
2 : Lambda283 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda287 : BV:32
2 : Lambda288 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2147483776 { 0x80000080 -2147483520 -1.1525e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1738598143 { 0x67a0e6ff +1.25704944e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 1738598140 { 0x67a0e6fc +1.25704908e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1435306660
=counter_example_end
=global nodece 82 num_edges_traversed 2
=global nodece 82 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 83
=global nodece 83 nodece z3v487.ce7214.num_edges_traversed2
=global nodece 83 nodece_path
=global nodece 83 nodece_path.graph_edge_composition
(epsilon)
=global nodece 83 nodece_cached_counterexample
=counter_example_begin z3v487.ce7214 4bfacf773f9771dfcade12373fc915c5
=retaddr_const
1 : 154962255 { 0x93c894f +1.47294032e147 } : BV:32
=input.spec-%var-x-1
1 : Lambda333 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda336 : BV:32
11 : Lambda334 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda335 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 33554464 { 0x2000020 +1.381e133 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
24 : eq(19, 23) : BOOL
25 : 32 { 0x20 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda333 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda336 : BV:32
11 : Lambda334 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda335 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 33554464 { 0x2000020 +1.381e133 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
21 : eq(19, 20) : BOOL
22 : 2 { 0x2 } : BV:8
23 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
24 : eq(19, 23) : BOOL
25 : 32 { 0x20 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 33554464 { 0x2000020 +1.381e133 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 269557767 ] -> 0, [ 269557768; 269557768 ] -> 32, [ 269557769; 269557770 ] -> 0, [ 269557771; 269557771 ] -> 2, [ 269557772; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3346099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3346100; 3346103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3346104; 269557767 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 269557768; 269557771 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 269557772; 1343766599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1343766600; 1343766603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1343766604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1343766600 { 0x50184048 +1.18946170e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3346100 { 0x330eb4 +1.39888620e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda19007 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda19008 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
15 : eq(10, 14) : BOOL
16 : 32 { 0x20 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 1) : BV:32
28 : eq(27, 11) : BOOL
29 : eq(27, 14) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : bvadd(9, 1) : BV:32
33 : eq(32, 11) : BOOL
34 : eq(32, 14) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 13, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 154962255 { 0x93c894f +1.47294032e147 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1031657095 { 0x3d7dd687 +1.98310935e251 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2056759925 { 0x7a97aa75 +1.18488943e118 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3346100 { 0x330eb4 +1.39888620e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3346103 { 0x330eb7 +1.39888656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1343766600 { 0x50184048 +1.18946170e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1343766603 { 0x5018404b +1.18946206e33 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda293 : BV:32
2 : Lambda294 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 33554464 { 0x2000020 +1.381e133 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda298 : BV:32
2 : Lambda299 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 33554464 { 0x2000020 +1.381e133 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 269557771 { 0x1011200b +1.13379037e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 269557768 { 0x10112008 +1.13379001e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 32 { 0x20 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3613916283
=counter_example_end
=global nodece 83 num_edges_traversed 2
=global nodece 83 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 84
=global nodece 84 nodece z3v487.ce7196.num_edges_traversed2
=global nodece 84 nodece_path
=global nodece 84 nodece_path.graph_edge_composition
(epsilon)
=global nodece 84 nodece_cached_counterexample
=counter_example_begin z3v487.ce7196 de86935e30d3b0ba6edec68a084ee94
=retaddr_const
1 : 1672692550 { 0x63b34346 +1.40049052e72 } : BV:32
=input.spec-%var-x-1
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda418 : BV:32
11 : Lambda416 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda417 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda415 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda418 : BV:32
11 : Lambda416 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda417 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 16732019 ] -> 0, [ 16732020; 16732020 ] -> 16, [ 16732021; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 16732019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16732020; 16732023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 16732024; 16945127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16945128; 16945131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 16945132; 2147632071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147632072; 2147632075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147632076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147632072 { 0x800243c8 -2147335224 -1.1769351e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 16945128 { 0x1028fe8 +1.2001667e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda18995 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda18996 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
12 : eq(10, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1672692550 { 0x63b34346 +1.40049052e72 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1699371488 { 0x654a59e0 +1.58086776e75 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170441650 { 0x45c385b2 +1.52751755e12 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 16945128 { 0x1028fe8 +1.2001667e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 16945131 { 0x1028feb +1.2001702e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 16732023 { 0xff4f77 +1.99461257e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147632072 { 0x800243c8 -2147335224 -1.1769351e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147632075 { 0x800243cb -2147335221 -1.1769387e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda375 : BV:32
2 : Lambda376 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda380 : BV:32
2 : Lambda381 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 16732020 { 0xff4f74 +1.99461221e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3169298731
=counter_example_end
=global nodece 84 num_edges_traversed 2
=global nodece 84 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 85
=global nodece 85 nodece z3.ce7178.num_edges_traversed2
=global nodece 85 nodece_path
=global nodece 85 nodece_path.graph_edge_composition
(epsilon)
=global nodece 85 nodece_cached_counterexample
=counter_example_begin z3.ce7178 ae7c2ea705b6d956f7452864853a2df
=retaddr_const
1 : 163695532 { 0x9c1cbac +1.51402807e148 } : BV:32
=input.spec-%var-x-1
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda644 : BV:32
11 : Lambda642 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda643 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
24 : eq(19, 23) : BOOL
25 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
26 : eq(19, 25) : BOOL
27 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda641 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda644 : BV:32
11 : Lambda642 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda643 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
24 : eq(19, 23) : BOOL
25 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
26 : eq(19, 25) : BOOL
27 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1777298643 ] -> 4, [ 1777298644; 1777298647 ] -> 0, [ 1777298648; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1524960039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1524960040; 1524960043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1524960044; 1777298643 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1777298644; 1777298647 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1777298648; 3349973779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3349973780; 3349973783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3349973784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1524960040 { 0x5ae50b28 +1.78940296e54 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3349973780 { 0xc7ac8b14 -944993516 -1.34799432e16 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda18983 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda18984 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
18 : eq(11, 17) : BOOL
19 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
20 : eq(11, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : ite(20, 14, 21) : BV:8
23 : ite(18, 14, 22) : BV:8
24 : ite(16, 14, 23) : BV:8
25 : ite(13, 14, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : eq(27, 17) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 14, 21) : BV:8
33 : ite(30, 14, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 14, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 9, 10) : BV:32
38 : eq(37, 12) : BOOL
39 : eq(37, 15) : BOOL
40 : eq(37, 17) : BOOL
41 : eq(37, 19) : BOOL
42 : ite(41, 14, 21) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 14, 44) : BV:8
46 : bvadd(9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 19) : BOOL
51 : ite(50, 14, 21) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 14, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : lambda(6, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(5, 56) : MAP[BV:32 -> BV:32]
58 : sum(1, 2, 57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
59 : sym_const(58) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 163695532 { 0x9c1cbac +1.51402807e148 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 829475213 { 0x3170c98d +1.88115084e227 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3349973780 { 0xc7ac8b14 -944993516 -1.34799432e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3349973783 { 0xc7ac8b17 -944993513 -1.34799468e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1524960040 { 0x5ae50b28 +1.78940296e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1524960043 { 0x5ae50b2b +1.78940331e54 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda612 : BV:32
2 : Lambda613 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda617 : BV:32
2 : Lambda618 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1777298645 { 0x69ef6cd5 +1.87050879e84 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1777298646 { 0x69ef6cd6 +1.87050890e84 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1777298644 { 0x69ef6cd4 +1.87050867e84 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1777298647 { 0x69ef6cd7 +1.87050902e84 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3552478230
=counter_example_end
=global nodece 85 num_edges_traversed 2
=global nodece 85 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 86
=global nodece 86 nodece z3v487.ce7160.num_edges_traversed2
=global nodece 86 nodece_path
=global nodece 86 nodece_path.graph_edge_composition
(epsilon)
=global nodece 86 nodece_cached_counterexample
=counter_example_begin z3v487.ce7160 84d94b335e1287eac2def1c7ec68f32c
=retaddr_const
1 : 159742775 { 0x9857b37 +1.4282271e148 } : BV:32
=input.spec-%var-x-1
1 : Lambda904 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda907 : BV:32
11 : Lambda905 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda906 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 6 { 0x6 +1.71e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 5 { 0x5 +1.59e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : eq(18, 15) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 21, 27) : BV:8
29 : ite(25, 21, 28) : BV:8
30 : ite(23, 21, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvadd(32, 17, 2) : BV:32
34 : eq(33, 19) : BOOL
35 : eq(33, 22) : BOOL
36 : eq(33, 24) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 21, 27) : BV:8
39 : ite(36, 21, 38) : BV:8
40 : ite(35, 21, 39) : BV:8
41 : ite(34, 21, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 17, 2) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 21, 27) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 2) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 15) : BOOL
57 : ite(56, 21, 27) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(31, 41, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 15) : BOOL
67 : ite(66, 21, 27) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(32, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 15) : BOOL
76 : ite(75, 21, 27) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(42, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 15) : BOOL
85 : ite(84, 21, 27) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 15) : BOOL
94 : ite(93, 21, 27) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : lambda(10, 100) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
102 : map(9, 101) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
103 : sym_const(102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda904 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda907 : BV:32
11 : Lambda905 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda906 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 6 { 0x6 +1.71e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 5 { 0x5 +1.59e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : eq(18, 15) : BOOL
27 : 0 { 0x0 } : BV:8
28 : ite(26, 21, 27) : BV:8
29 : ite(25, 21, 28) : BV:8
30 : ite(23, 21, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvadd(32, 17, 2) : BV:32
34 : eq(33, 19) : BOOL
35 : eq(33, 22) : BOOL
36 : eq(33, 24) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 21, 27) : BV:8
39 : ite(36, 21, 38) : BV:8
40 : ite(35, 21, 39) : BV:8
41 : ite(34, 21, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 17, 2) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 21, 27) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 2) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 15) : BOOL
57 : ite(56, 21, 27) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(31, 41, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 15) : BOOL
67 : ite(66, 21, 27) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(32, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 15) : BOOL
76 : ite(75, 21, 27) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(42, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 15) : BOOL
85 : ite(84, 21, 27) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 15) : BOOL
94 : ite(93, 21, 27) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : lambda(10, 100) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
102 : map(9, 101) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
103 : sym_const(102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 7 ] -> 255, [ 8; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8; 144547 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 144548; 144551 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 144552; 8297615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8297616; 8297619 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8297620; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 8297616 { 0x7e9c90 +1.98915290e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 144548 { 0x234a4 +1.1723146e129 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda18971 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda18972 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 7 { 0x7 +1.83e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(10, 14) : BOOL
16 : 5 { 0x5 +1.59e129 } : BV:32
17 : eq(10, 16) : BOOL
18 : eq(10, 8) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 13, 19) : BV:8
21 : ite(17, 13, 20) : BV:8
22 : ite(15, 13, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 9, 1) : BV:32
26 : eq(25, 11) : BOOL
27 : eq(25, 14) : BOOL
28 : eq(25, 16) : BOOL
29 : eq(25, 8) : BOOL
30 : ite(29, 13, 19) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : ite(27, 13, 31) : BV:8
33 : ite(26, 13, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 9, 1) : BV:32
36 : eq(35, 11) : BOOL
37 : eq(35, 14) : BOOL
38 : eq(35, 16) : BOOL
39 : eq(35, 8) : BOOL
40 : ite(39, 13, 19) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 13, 41) : BV:8
43 : ite(36, 13, 42) : BV:8
44 : bvadd(9, 1) : BV:32
45 : eq(44, 11) : BOOL
46 : eq(44, 14) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 8) : BOOL
49 : ite(48, 13, 19) : BV:8
50 : ite(47, 13, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(6, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(5, 54) : MAP[BV:32 -> BV:32]
56 : sum(1, 2, 55) : SUM[UNIT,MAP[BV:32 -> BV:32]]
57 : sym_const(56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 159742775 { 0x9857b37 +1.4282271e148 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 642855445 { 0x26513215 +1.63434088e205 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 8297616 { 0x7e9c90 +1.98915290e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 8297619 { 0x7e9c93 +1.98915326e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 144548 { 0x234a4 +1.1723146e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 144551 { 0x234a7 +1.1723182e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda875 : BV:32
2 : Lambda876 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : eq(8, 4) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 11, 17) : BV:8
19 : ite(15, 11, 18) : BV:8
20 : ite(13, 11, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 14) : BOOL
27 : eq(23, 4) : BOOL
28 : ite(27, 11, 17) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 6, 7) : BV:32
34 : eq(33, 9) : BOOL
35 : eq(33, 12) : BOOL
36 : eq(33, 14) : BOOL
37 : eq(33, 4) : BOOL
38 : ite(37, 11, 17) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : ite(35, 11, 39) : BV:8
41 : ite(34, 11, 40) : BV:8
42 : bvadd(6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 14) : BOOL
46 : eq(42, 4) : BOOL
47 : ite(46, 11, 17) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : bvconcat(21, 31, 41, 50) : BV:32
52 : bvadd(3, 5, 51) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 4) : BOOL
57 : ite(56, 11, 17) : BV:8
58 : ite(55, 11, 57) : BV:8
59 : ite(54, 11, 58) : BV:8
60 : ite(53, 11, 59) : BV:8
61 : bvadd(22, 5, 51) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 14) : BOOL
65 : eq(61, 4) : BOOL
66 : ite(65, 11, 17) : BV:8
67 : ite(64, 11, 66) : BV:8
68 : ite(63, 11, 67) : BV:8
69 : ite(62, 11, 68) : BV:8
70 : bvadd(32, 5, 51) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 4) : BOOL
75 : ite(74, 11, 17) : BV:8
76 : ite(73, 11, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : bvadd(5, 51) : BV:32
80 : eq(79, 9) : BOOL
81 : eq(79, 12) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 4) : BOOL
84 : ite(83, 11, 17) : BV:8
85 : ite(82, 11, 84) : BV:8
86 : ite(81, 11, 85) : BV:8
87 : ite(80, 11, 86) : BV:8
88 : bvconcat(60, 69, 78, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda880 : BV:32
2 : Lambda881 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : eq(8, 4) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 11, 17) : BV:8
19 : ite(15, 11, 18) : BV:8
20 : ite(13, 11, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 14) : BOOL
27 : eq(23, 4) : BOOL
28 : ite(27, 11, 17) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : ite(25, 11, 29) : BV:8
31 : ite(24, 11, 30) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 6, 7) : BV:32
34 : eq(33, 9) : BOOL
35 : eq(33, 12) : BOOL
36 : eq(33, 14) : BOOL
37 : eq(33, 4) : BOOL
38 : ite(37, 11, 17) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : ite(35, 11, 39) : BV:8
41 : ite(34, 11, 40) : BV:8
42 : bvadd(6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 14) : BOOL
46 : eq(42, 4) : BOOL
47 : ite(46, 11, 17) : BV:8
48 : ite(45, 11, 47) : BV:8
49 : ite(44, 11, 48) : BV:8
50 : ite(43, 11, 49) : BV:8
51 : bvconcat(21, 31, 41, 50) : BV:32
52 : bvadd(3, 5, 51) : BV:32
53 : eq(52, 9) : BOOL
54 : eq(52, 12) : BOOL
55 : eq(52, 14) : BOOL
56 : eq(52, 4) : BOOL
57 : ite(56, 11, 17) : BV:8
58 : ite(55, 11, 57) : BV:8
59 : ite(54, 11, 58) : BV:8
60 : ite(53, 11, 59) : BV:8
61 : bvadd(22, 5, 51) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 14) : BOOL
65 : eq(61, 4) : BOOL
66 : ite(65, 11, 17) : BV:8
67 : ite(64, 11, 66) : BV:8
68 : ite(63, 11, 67) : BV:8
69 : ite(62, 11, 68) : BV:8
70 : bvadd(32, 5, 51) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 4) : BOOL
75 : ite(74, 11, 17) : BV:8
76 : ite(73, 11, 75) : BV:8
77 : ite(72, 11, 76) : BV:8
78 : ite(71, 11, 77) : BV:8
79 : bvadd(5, 51) : BV:32
80 : eq(79, 9) : BOOL
81 : eq(79, 12) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 4) : BOOL
84 : ite(83, 11, 17) : BV:8
85 : ite(82, 11, 84) : BV:8
86 : ite(81, 11, 85) : BV:8
87 : ite(80, 11, 86) : BV:8
88 : bvconcat(60, 69, 78, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2211894552
=counter_example_end
=global nodece 86 num_edges_traversed 2
=global nodece 86 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 87
=global nodece 87 nodece z3.ce7028.num_edges_traversed2
=global nodece 87 nodece_path
=global nodece 87 nodece_path.graph_edge_composition
(epsilon)
=global nodece 87 nodece_cached_counterexample
=counter_example_begin z3.ce7028 bb2e43e82a303c86d314c19bcff41f
=retaddr_const
1 : 300388355 { 0x11e79003 +1.80908238e164 } : BV:32
=input.spec-%var-x-1
1 : Lambda15353 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15356 : BV:32
17 : Lambda15354 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15355 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda15366 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda15369 : BV:32
17 : Lambda15367 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda15368 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 41943043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 41943044; 41943047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 41943048; 2878023327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2878023328; 2878023331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2878023332; 2952823471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2952823472; 2952823475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2952823476; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2952823472 { 0xb00082b0 -1342143824 -1.398826e225 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2878023328 { 0xab8b26a0 -1416943968 -1.8711624e216 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 41943044 { 0x2800004 +1.47e134 } : BV:32
=input.spec-%var-i-0.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1818470839 { 0x6c63a9b7 +1.77861678e89 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-16.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda18883 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda18884 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1698758202 { 0x6540fe3a +1.50775837e75 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 300388355 { 0x11e79003 +1.80908238e164 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 993137387 { 0x3b3212eb +1.39120233e247 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2878023328 { 0xab8b26a0 -1416943968 -1.8711624e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2878023331 { 0xab8b26a3 -1416943965 -1.8711659e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 41943044 { 0x2800004 +1.47e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 41943047 { 0x2800007 +1.83e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2952823472 { 0xb00082b0 -1342143824 -1.398826e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2952823475 { 0xb00082b3 -1342143821 -1.398862e225 } : BV:32
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%8%d.0
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.spec-%tmpvar-7.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4018531671
=counter_example_end
=global nodece 87 num_edges_traversed 2
=global nodece 87 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 42
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 44
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 45
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 46
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 47
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set point_expr 77
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 done
=inductive-invariants point_set point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 4 for input.dst.llvm-%x
2147483776
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 done
=inductive-invariants point_set point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 done
=inductive-invariants point_set point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 done
=inductive-invariants point_set point z3.ce6861
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 2 for input.spec-%var-i-0.L3%7%bbentry
134217727
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 3 for input.spec-%var-ret-1.L3%7%bbentry
273776908
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 4 for input.dst.llvm-%x
637534208
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 5 for input.dst.llvm-%n
471859204
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 6 for input.dst.llvm-%m
478154752
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
134217727
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 39 for input.spec-%var-j-0.L3%19%bbentry
471859205
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
134217728
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
471859205
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6861 expr point z3.ce6861 done
=inductive-invariants point_set point z3v487.ce6647
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 3 for input.spec-%var-ret-1.L3%7%bbentry
133396646
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 4 for input.dst.llvm-%x
40
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 6 for input.dst.llvm-%m
10
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6647 expr point z3v487.ce6647 done
=inductive-invariants point_set point z3v487.ce257
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 4 for input.dst.llvm-%x
2176913664
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce257 expr point z3v487.ce257 done
=inductive-invariants point_set point z3v487.ce6788
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 3 for input.spec-%var-ret-1.L3%7%bbentry
74928696
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 4 for input.dst.llvm-%x
2147483644
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6788 expr point z3v487.ce6788 done
=inductive-invariants point_set point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 done
=inductive-invariants point_set point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 6 for input.dst.llvm-%m
128
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 done
=inductive-invariants point_set point z3.ce6582
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 4 for input.dst.llvm-%x
1208156164
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 5 for input.dst.llvm-%n
1560268478
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6582 expr point z3.ce6582 done
=inductive-invariants point_set point z3v487.ce6526
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 3 for input.spec-%var-ret-1.L3%7%bbentry
343517096
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 4 for input.dst.llvm-%x
1073741824
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 5 for input.dst.llvm-%n
1220542464
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6526 expr point z3v487.ce6526 done
=inductive-invariants point_set point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 done
=inductive-invariants point_set point z3.ce6525
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1536972716
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 4 for input.dst.llvm-%x
1208156164
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 5 for input.dst.llvm-%n
1560268478
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6525 expr point z3.ce6525 done
=inductive-invariants point_set point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 4 for input.dst.llvm-%x
33554464
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 done
=inductive-invariants point_set point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 done
=inductive-invariants point_set point z3.ce113
=inductive-invariants point_set point z3.ce113 expr point z3.ce113
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce113 expr point z3.ce113 done
=inductive-invariants point_set point z3.ce179
=inductive-invariants point_set point z3.ce179 expr point z3.ce179
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce179 expr point z3.ce179 done
=inductive-invariants point_set point z3v487.ce114
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce114 expr point z3v487.ce114 done
=inductive-invariants point_set point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 4 for input.dst.llvm-%x
67372036
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 6 for input.dst.llvm-%m
67372036
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce157 expr point z3.ce157 done
=inductive-invariants point_set point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 done
=inductive-invariants point_set point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 done
=inductive-invariants point_set point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 done
=inductive-invariants point_set point z3v487.ce201
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 6 for input.dst.llvm-%m
2155905040
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce201 expr point z3v487.ce201 done
=inductive-invariants point_set point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 done
=inductive-invariants point_set point z3.ce6602
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 4 for input.dst.llvm-%x
1208156164
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 5 for input.dst.llvm-%n
1560268478
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 40 for input.spec-%var-ret-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741825
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6602 expr point z3.ce6602 done
=inductive-invariants point_set point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce158 expr point z3v487.ce158 done
=inductive-invariants point_set point z3.ce202
=inductive-invariants point_set point z3.ce202 expr point z3.ce202
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce202 expr point z3.ce202 done
=inductive-invariants point_set point z3v487.ce245
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 4 for input.dst.llvm-%x
1082405120
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 5 for input.dst.llvm-%n
271581184
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 6 for input.dst.llvm-%m
133447875
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce245 expr point z3v487.ce245 done
=inductive-invariants point_set point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 4 for input.dst.llvm-%x
2176913664
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 done
=inductive-invariants point_set point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 4 for input.dst.llvm-%x
3413356288
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 6 for input.dst.llvm-%m
1235583807
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce256 expr point z3.ce256 done
=inductive-invariants point_set point z3.ce278
=inductive-invariants point_set point z3.ce278 expr point z3.ce278
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 4 for input.dst.llvm-%x
3413356288
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 6 for input.dst.llvm-%m
1235583807
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 done
=inductive-invariants point_set point z3v487.ce311
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 done
=inductive-invariants point_set point z3v487.ce300
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 4 for input.dst.llvm-%x
2176913664
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 5 for input.dst.llvm-%n
134742036
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 6 for input.dst.llvm-%m
1207959580
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 done
=inductive-invariants point_set point z3v487.ce3971
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3971 expr point z3v487.ce3971 done
=inductive-invariants point_set point z3.ce312
=inductive-invariants point_set point z3.ce312 expr point z3.ce312
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce312 expr point z3.ce312 done
=inductive-invariants point_set point z3.ce6787
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 2 for input.spec-%var-i-0.L3%7%bbentry
255
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 3 for input.spec-%var-ret-1.L3%7%bbentry
2123205341
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 4 for input.dst.llvm-%x
2215115776
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 5 for input.dst.llvm-%n
25479201
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 6 for input.dst.llvm-%m
1091211396
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
255
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 39 for input.spec-%var-j-0.L3%19%bbentry
25479201
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
256
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
25479201
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6787 expr point z3.ce6787 done
=inductive-invariants point_set point z3v487.ce6721
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 3 for input.spec-%var-ret-1.L3%7%bbentry
920362968
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 4 for input.dst.llvm-%x
822083584
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 5 for input.dst.llvm-%n
1318017224
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 6 for input.dst.llvm-%m
10
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6721 expr point z3v487.ce6721 done
=inductive-invariants point_set point z3v487.ce4085
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 5 for input.dst.llvm-%n
262144
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4085 expr point z3v487.ce4085 done
=inductive-invariants point_set point z3.ce3970
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3970 expr point z3.ce3970 done
=inductive-invariants point_set point z3v487.ce4047
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4047 expr point z3v487.ce4047 done
=inductive-invariants point_set point z3.ce4008
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4008 expr point z3.ce4008 done
=inductive-invariants point_set point z3v487.ce1289
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 6 for input.dst.llvm-%m
65536
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1289 expr point z3v487.ce1289 done
=inductive-invariants point_set point z3.ce1290
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1290 expr point z3.ce1290 done
=inductive-invariants point_set point z3v487.ce4009
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 5 for input.dst.llvm-%n
8192
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 6 for input.dst.llvm-%m
32768
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4009 expr point z3v487.ce4009 done
=inductive-invariants point_set point z3.ce4046
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4046 expr point z3.ce4046 done
=inductive-invariants point_set point z3.ce4084
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4084 expr point z3.ce4084 done
=inductive-invariants point_set point z3v487.ce4160
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 6 for input.dst.llvm-%m
1073744036
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4160 expr point z3v487.ce4160 done
=inductive-invariants point_set point z3.ce4122
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4122 expr point z3.ce4122 done
=inductive-invariants point_set point z3v487.ce4123
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4123 expr point z3v487.ce4123 done
=inductive-invariants point_set point z3v487.ce4179
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 4 for input.dst.llvm-%x
256
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 6 for input.dst.llvm-%m
452984833
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4179 expr point z3v487.ce4179 done
=inductive-invariants point_set point z3v487.ce4217
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 6 for input.dst.llvm-%m
140510284
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4217 expr point z3v487.ce4217 done
=inductive-invariants point_set point z3v487.ce4236
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 5 for input.dst.llvm-%n
406880264
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 6 for input.dst.llvm-%m
587206658
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4236 expr point z3v487.ce4236 done
=inductive-invariants point_set point z3v487.ce4198
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 5 for input.dst.llvm-%n
2836467724
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 6 for input.dst.llvm-%m
32842
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4198 expr point z3v487.ce4198 done
=inductive-invariants point_set point z3v487.ce4294
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 4 for input.dst.llvm-%x
33554432
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4294 expr point z3v487.ce4294 done
=inductive-invariants point_set point z3v487.ce4256
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 4 for input.dst.llvm-%x
33554432
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4256 expr point z3v487.ce4256 done
=inductive-invariants point_set point z3.ce4255
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 4 for input.dst.llvm-%x
1024
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 6 for input.dst.llvm-%m
410323005
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4255 expr point z3.ce4255 done
=inductive-invariants point_set point z3.ce4293
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 4 for input.dst.llvm-%x
1024
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 6 for input.dst.llvm-%m
410323005
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4293 expr point z3.ce4293 done
=inductive-invariants point_set point z3v487.ce4331
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 4 for input.dst.llvm-%x
256
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 6 for input.dst.llvm-%m
452984833
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4331 expr point z3v487.ce4331 done
=inductive-invariants point_set point z3.ce5142
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5142 expr point z3.ce5142 done
=inductive-invariants point_set point z3v487.ce5152
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5152 expr point z3v487.ce5152 done
=inductive-invariants point_set point z3.ce5196
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5196 expr point z3.ce5196 done
=inductive-invariants point_set point z3.ce5174
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5174 expr point z3.ce5174 done
=inductive-invariants point_set point z3.ce5216
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5216 expr point z3.ce5216 done
=inductive-invariants point_set point z3.ce5260
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
3
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5260 expr point z3.ce5260 done
=inductive-invariants point_set point z3.ce5226
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5226 expr point z3.ce5226 done
=inductive-invariants point_set point z3v487.ce5396
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5396 expr point z3v487.ce5396 done
=inductive-invariants point_set point z3v487.ce5634
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 2 for input.spec-%var-i-0.L3%7%bbentry
5
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5634 expr point z3v487.ce5634 done
=inductive-invariants point_set point z3.ce5513
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 5 for input.dst.llvm-%n
66
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5513 expr point z3.ce5513 done
=inductive-invariants point_set point z3.ce5762
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 5 for input.dst.llvm-%n
3756654520
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483649
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5762 expr point z3.ce5762 done
=inductive-invariants point_set point z3.ce6464
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 4 for input.dst.llvm-%x
251658240
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 5 for input.dst.llvm-%n
1663712314
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741825
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6464 expr point z3.ce6464 done
=inductive-invariants point_set point z3v487.ce6143
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 6 for input.dst.llvm-%m
2155905040
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 40 for input.spec-%var-ret-0.L3%19%bbentry
2155905152
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
2155905152
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6143 expr point z3v487.ce6143 done
=inductive-invariants point_set point z3v487.ce6428
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 3 for input.spec-%var-ret-1.L3%7%bbentry
355887616
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 4 for input.dst.llvm-%x
536870912
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 5 for input.dst.llvm-%n
548474880
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 6 for input.dst.llvm-%m
4096
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6428 expr point z3v487.ce6428 done
=inductive-invariants point_set point z3.ce6342
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 3 for input.spec-%var-ret-1.L3%7%bbentry
64
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 4 for input.dst.llvm-%x
218103808
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 5 for input.dst.llvm-%n
2223142194
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 40 for input.spec-%var-ret-0.L3%19%bbentry
64
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741825
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
64
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6342 expr point z3.ce6342 done
=inductive-invariants point_set point z3.ce6307
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 4 for input.dst.llvm-%x
218103808
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 5 for input.dst.llvm-%n
2223142194
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 40 for input.spec-%var-ret-0.L3%19%bbentry
64
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
64
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6307 expr point z3.ce6307 done
=inductive-invariants point_set point z3v487.ce6308
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 2 for input.spec-%var-i-0.L3%7%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 4 for input.dst.llvm-%x
536870912
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 5 for input.dst.llvm-%n
548474880
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 6 for input.dst.llvm-%m
4096
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 40 for input.spec-%var-ret-0.L3%19%bbentry
16
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
16
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6308 expr point z3v487.ce6308 done
=inductive-invariants point_set point z3v487.ce6202
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 2 for input.spec-%var-i-0.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 6 for input.dst.llvm-%m
65536
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6202 expr point z3v487.ce6202 done
=inductive-invariants point_set point z3.ce6257
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 2 for input.spec-%var-i-0.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6257 expr point z3.ce6257 done
=inductive-invariants point_set point z3.ce6646
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 3 for input.spec-%var-ret-1.L3%7%bbentry
83286333
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 4 for input.dst.llvm-%x
1207998724
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 5 for input.dst.llvm-%n
2516582400
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 6 for input.dst.llvm-%m
6
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6646 expr point z3.ce6646 done
=inductive-invariants point_set point z3v487.ce6862
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 2 for input.spec-%var-i-0.L3%7%bbentry
31
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1552310730
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 4 for input.dst.llvm-%x
2147483520
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 5 for input.dst.llvm-%n
807230468
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 6 for input.dst.llvm-%m
1077263362
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
31
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 39 for input.spec-%var-j-0.L3%19%bbentry
807230469
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
32
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
807230469
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6862 expr point z3v487.ce6862 done
=inductive-invariants point_set point z3.ce6427
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 2 for input.spec-%var-i-0.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1534917568
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 4 for input.dst.llvm-%x
251658240
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 5 for input.dst.llvm-%n
1663712314
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 40 for input.spec-%var-ret-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6427 expr point z3.ce6427 done
=inductive-invariants point_set point z3.ce6720
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 2 for input.spec-%var-i-0.L3%7%bbentry
64
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 3 for input.spec-%var-ret-1.L3%7%bbentry
956917638
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 4 for input.dst.llvm-%x
1073741568
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 5 for input.dst.llvm-%n
65
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 6 for input.dst.llvm-%m
5
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
64
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
65
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6720 expr point z3.ce6720 done
=inductive-invariants point_set point z3.ce5602
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 5 for input.dst.llvm-%n
4098
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5602 expr point z3.ce5602 done
=inductive-invariants point_set point z3v487.ce5482
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 5 for input.dst.llvm-%n
2147483650
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5482 expr point z3v487.ce5482 done
=inductive-invariants point_set point z3.ce5420
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5420 expr point z3.ce5420 done
=inductive-invariants point_set point z3.ce5481
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 2 for input.spec-%var-i-0.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 5 for input.dst.llvm-%n
66
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5481 expr point z3.ce5481 done
=inductive-invariants point_set point z3v487.ce5419
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 5 for input.dst.llvm-%n
131072
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5419 expr point z3v487.ce5419 done
=inductive-invariants point_set point z3v487.ce5449
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 2 for input.spec-%var-i-0.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 5 for input.dst.llvm-%n
131072
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5449 expr point z3v487.ce5449 done
=inductive-invariants point_set point z3v487.ce5573
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 5 for input.dst.llvm-%n
6
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5573 expr point z3v487.ce5573 done
=inductive-invariants point_set point z3.ce5572
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 2 for input.spec-%var-i-0.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 5 for input.dst.llvm-%n
4098
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5572 expr point z3.ce5572 done
=inductive-invariants point_set point z3v487.ce5686
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 2 for input.spec-%var-i-0.L3%7%bbentry
6
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
7
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5686 expr point z3v487.ce5686 done
=inductive-invariants point_set point z3.ce5635
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 2 for input.spec-%var-i-0.L3%7%bbentry
5
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 5 for input.dst.llvm-%n
2147483649
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5635 expr point z3.ce5635 done
=inductive-invariants point_set point z3.ce5730
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 5 for input.dst.llvm-%n
3756654520
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5730 expr point z3.ce5730 done
=inductive-invariants point_set point z3v487.ce5851
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 5 for input.dst.llvm-%n
3825205248
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5851 expr point z3v487.ce5851 done
=inductive-invariants point_set point z3v487.ce5664
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 2 for input.spec-%var-i-0.L3%7%bbentry
5
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
6
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5664 expr point z3v487.ce5664 done
=inductive-invariants point_set point z3.ce5822
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 5 for input.dst.llvm-%n
4017810766
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5822 expr point z3.ce5822 done
=inductive-invariants point_set point z3.ce5883
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5883 expr point z3.ce5883 done
=inductive-invariants point_set point z3v487.ce5731
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 5 for input.dst.llvm-%n
3190798066
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5731 expr point z3v487.ce5731 done
=inductive-invariants point_set point z3v487.ce5821
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 2 for input.spec-%var-i-0.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 5 for input.dst.llvm-%n
3825205248
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5821 expr point z3v487.ce5821 done
=inductive-invariants point_set point z3v487.ce5884
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5884 expr point z3v487.ce5884 done
=inductive-invariants point_set point z3v487.ce5945
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5945 expr point z3v487.ce5945 done
=inductive-invariants point_set point z3.ce5944
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 2 for input.spec-%var-i-0.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 7 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5944 expr point z3.ce5944 done
=inductive-invariants point_set point z3.ce6018
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 2 for input.spec-%var-i-0.L3%7%bbentry
135167
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 4 for input.dst.llvm-%x
4210692
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 5 for input.dst.llvm-%n
33573578
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 6 for input.dst.llvm-%m
256
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
135167
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 40 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 41 for input.spec-%tmpvar-9.L3%19%bbentry
135168
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 42 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 44 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 45 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 46 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 47 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 48 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 49 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 50 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 51 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 52 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 53 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 54 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 55 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 56 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 57 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 58 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 59 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 60 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 63 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 64 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 67 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 val 68 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6018 expr point z3.ce6018 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L3%19%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce135
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce69
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce47
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce91
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce26
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce25
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce6582
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce70
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce92
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce113
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce157
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce5152
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=13; number of preds=3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 8->0; 
7
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce5152
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce5634
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce5419
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce5572
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce5821
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3.ce5944
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce91
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce179
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce201
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce25
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce223
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce201
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce5152
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce5634
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce5419
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3.ce5572
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce5821
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 6: z3.ce5944
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce91
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3.ce25
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3.ce179
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce201
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3v487.ce5152
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L3%19%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 12 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 40
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 42
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.44
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.43
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-32-free_var_idx.42
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.41
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-0.L3%7%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-0.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce135
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce6525
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce113
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce201
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce6602
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce3970
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce4008
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce4009
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce4046
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce5226
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce6464
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce6143
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3.ce6342
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 14: z3.ce6307
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 15: z3v487.ce6308
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 16: z3v487.ce6202
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 17: z3.ce6427
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 18: z3.ce6018
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=12; number of visited CEs=19; number of preds=6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 8->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 
8
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 8->1; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 
41
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->0; 41->1; 42->0; 43->0; 44->0; 
42
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->0; 41->0; 42->1; 43->0; 44->0; 
43
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->4294967295; 40->0; 41->0; 42->0; 43->1; 44->0; 
44
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 8->0; 39->0; 40->4294967295; 41->0; 42->0; 43->0; 44->1; 
matrix done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce6143
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce6646
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce6720
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 41
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce5226
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce5513
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce5481
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce5730
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3.ce5883
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce113
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce179
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce201
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce201
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce1289
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce4084
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3.ce5260
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3.ce5226
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce5513
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 4: z3.ce5762
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 5: z3v487.ce5664
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3v487.ce6143
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3.ce6646
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3.ce6720
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name dst-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 48 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 45
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 46
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 47
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 49
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 50
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 51
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 53
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 54
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 55
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 57
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 58
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 59
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 62
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 63
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 64
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 66
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini point_expr 68
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 1: z3.ce6861
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 2: z3.ce179
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 3: z3v487.ce201
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 4: z3.ce6787
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 5: z3v487.ce1289
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 6: z3.ce5226
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 7: z3.ce5762
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 8: z3v487.ce6143
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based name spec-coupling-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 69
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 71
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 72
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 73
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 74
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 75
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based point_expr 77
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-0.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based visited ce 0: z3.ce91
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-0.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-0.L3%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L3%19%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-j-0.L3%19%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : 0 { 0x0 +1.0e1025 } : INT
11 : sum_is(7, 10) : BOOL
12 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
14 : map_get(12, 13) : SUM[UNIT,MAP[BV:32 -> BV:32]]
15 : sum_is(14, 8) : BOOL
16 : and(11, 15) : BOOL
17 : or(9, 16) : BOOL
18 : or(4, 17) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L3%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%19%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%tmpvar-9.L3%19%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-i-0.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 2
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 3
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 4
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 5
1 : input.spec-%tmpvar-7.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 6
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140382 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140383 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140469 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140365 : 4 { 0x4 +1.0e1025 } : INT
140366 : 0 { 0x0 } : BOOL
140470 : select(140382, 140383, 140469, 140384, 140365, 140366) : BV:32
=RhsExpr
140381 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140382 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140383 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140471 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140385 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140365 : 4 { 0x4 +1.0e1025 } : INT
140366 : 0 { 0x0 } : BOOL
140472 : select(140382, 140383, 140471, 140385, 140365, 140366) : BV:32
=RhsExpr
140380 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140382 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140383 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140473 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140386 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140365 : 4 { 0x4 +1.0e1025 } : INT
140366 : 0 { 0x0 } : BOOL
140474 : select(140382, 140383, 140473, 140386, 140365, 140366) : BV:32
=RhsExpr
140379 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140379 : input.dst.llvm-%x : BV:32
140365 : 4 { 0x4 +1.0e1025 } : INT
140392 : islangaligned(140379, 140365) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
140906 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
140907 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
140908 : bvule(140906, 140907) : BOOL
140362 : 4 { 0x4 +1.47e129 } : BV:32
140416 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140909 : bvadd(140362, 140416) : BV:32
140910 : bvadd(140906, 140909) : BV:32
140911 : eq(140907, 140910) : BOOL
140912 : and(140908, 140911) : BOOL
140913 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140914 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140915 : bvule(140913, 140914) : BOOL
140916 : and(140912, 140915) : BOOL
140917 : bvadd(140913, 140909) : BV:32
140918 : eq(140914, 140917) : BOOL
140919 : and(140916, 140918) : BOOL
140920 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
140921 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
140922 : bvule(140920, 140921) : BOOL
140923 : and(140919, 140922) : BOOL
140924 : bvadd(140920, 140909) : BV:32
140925 : eq(140921, 140924) : BOOL
140926 : and(140923, 140925) : BOOL
140927 : bvuge(140906, 140913) : BOOL
140928 : bvule(140906, 140914) : BOOL
140929 : and(140927, 140928) : BOOL
140931 : bvuge(140907, 140913) : BOOL
140932 : bvule(140907, 140914) : BOOL
140933 : and(140931, 140932) : BOOL
140934 : not(140933) : BOOL
140935 : andnot1(140929, 140934) : BOOL
140930 : bvuge(140913, 140906) : BOOL
140936 : bvule(140913, 140907) : BOOL
140937 : and(140930, 140936) : BOOL
140939 : bvuge(140914, 140906) : BOOL
140940 : bvule(140914, 140907) : BOOL
140941 : and(140939, 140940) : BOOL
140942 : not(140941) : BOOL
140943 : andnot1(140937, 140942) : BOOL
140938 : and(140935, 140943) : BOOL
140944 : bvuge(140906, 140920) : BOOL
140945 : bvule(140906, 140921) : BOOL
140946 : and(140944, 140945) : BOOL
140948 : bvuge(140907, 140920) : BOOL
140949 : bvule(140907, 140921) : BOOL
140950 : and(140948, 140949) : BOOL
140951 : not(140950) : BOOL
140952 : andnot1(140946, 140951) : BOOL
140955 : and(140938, 140952) : BOOL
140947 : bvuge(140920, 140906) : BOOL
140953 : bvule(140920, 140907) : BOOL
140954 : and(140947, 140953) : BOOL
140956 : bvuge(140921, 140906) : BOOL
140957 : bvule(140921, 140907) : BOOL
140958 : and(140956, 140957) : BOOL
140959 : not(140958) : BOOL
140960 : andnot1(140954, 140959) : BOOL
140961 : and(140955, 140960) : BOOL
140962 : bvuge(140913, 140920) : BOOL
140963 : bvule(140913, 140921) : BOOL
140964 : and(140962, 140963) : BOOL
140966 : bvuge(140914, 140920) : BOOL
140967 : bvule(140914, 140921) : BOOL
140968 : and(140966, 140967) : BOOL
140969 : not(140968) : BOOL
140970 : andnot1(140964, 140969) : BOOL
140973 : and(140961, 140970) : BOOL
140965 : bvuge(140920, 140913) : BOOL
140971 : bvule(140920, 140914) : BOOL
140972 : and(140965, 140971) : BOOL
140974 : bvuge(140921, 140913) : BOOL
140975 : bvule(140921, 140914) : BOOL
140976 : and(140974, 140975) : BOOL
140977 : not(140976) : BOOL
140978 : andnot1(140972, 140977) : BOOL
140979 : and(140973, 140978) : BOOL
140980 : and(140926, 140979) : BOOL
140385 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140981 : 3 { 0x3 +1.35e129 } : BV:32
140982 : bvand(140385, 140981) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140983 : eq(140982, 140276) : BOOL
140386 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140984 : bvand(140386, 140981) : BV:32
140985 : eq(140984, 140276) : BOOL
140986 : and(140983, 140985) : BOOL
140384 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140987 : bvand(140384, 140981) : BV:32
140988 : eq(140987, 140276) : BOOL
140989 : and(140986, 140988) : BOOL
140990 : and(140980, 140989) : BOOL
140991 : eq(140385, 140906) : BOOL
140992 : eq(140386, 140913) : BOOL
140993 : and(140991, 140992) : BOOL
140994 : eq(140384, 140920) : BOOL
140995 : and(140993, 140994) : BOOL
140996 : and(140990, 140995) : BOOL
140383 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140288 : 1 { 0x1 +1.11e129 } : BV:32
140387 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140997 : region_agrees_with_memlabel(140383, 140276, 140288, 140387) : BOOL
140998 : and(140996, 140997) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140346 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140350 : bvule(140276, 140346) : BOOL
140380 : input.dst.llvm-%n : BV:32
141000 : bvult(140346, 140380) : BOOL
141001 : and(140350, 141000) : BOOL
141002 : lambda(140346, 141001) : FUNCTION[BV:32 -> BOOL]
140347 : Lambda1 : BV:32
140354 : bvule(140276, 140347) : BOOL
140381 : input.dst.llvm-%m : BV:32
141003 : bvult(140347, 140381) : BOOL
141021 : and(140354, 141003) : BOOL
141022 : lambda(140347, 141021) : FUNCTION[BV:32 -> BOOL]
140382 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140383 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140999 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
140362 : 4 { 0x4 +1.47e129 } : BV:32
140368 : bvmul(140347, 140362) : BV:32
140363 : bvmul(140346, 140362) : BV:32
140379 : input.dst.llvm-%x : BV:32
141042 : bvadd(140363, 140379) : BV:32
140365 : 4 { 0x4 +1.0e1025 } : INT
140366 : 0 { 0x0 } : BOOL
141063 : select(140382, 140383, 140999, 141042, 140365, 140366) : BV:32
141064 : bvadd(140368, 141063) : BV:32
141065 : select(140382, 140383, 140999, 141064, 140365, 140366) : BV:32
141066 : lambda(140347, 141065) : FUNCTION[BV:32 -> BV:32]
141067 : map(141022, 141066) : MAP[BV:32 -> BV:32]
141068 : lambda(140346, 141067) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141069 : map(141002, 141068) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141070 : eq(140273, 141069) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
merged-predicate
=LhsExpr
140616 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140381 : input.dst.llvm-%m : BV:32
140617 : bvult(140616, 140381) : BOOL
140508 : 4 { 0x4 +1.0e1025 } : BV:64
140614 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140410 : 32 { 0x20 +1.0e1025 } : INT
140635 : bvsign_ext(140614, 140410) : BV:64
140754 : bvmul(140508, 140635) : BV:64
140414 : 63 { 0x3f +1.0e1025 } : INT
140755 : bvextract(140754, 140414, 140410) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140634 : bvslt(140614, 140276) : BOOL
140416 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140768 : ite(140634, 140416, 140276) : BV:32
140770 : eq(140755, 140768) : BOOL
140365 : 4 { 0x4 +1.0e1025 } : INT
140772 : isindexforsize(140770, 140365) : BOOL
140379 : input.dst.llvm-%x : BV:32
140362 : 4 { 0x4 +1.47e129 } : BV:32
140701 : bvmul(140362, 140614) : BV:32
140704 : bvadd(140379, 140701) : BV:32
140774 : isgepoffset(140704, 140701) : BOOL
140778 : islangaligned(140704, 140365) : BOOL
140382 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140383 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140494 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140366 : 0 { 0x0 } : BOOL
140710 : select(140382, 140383, 140494, 140704, 140365, 140366) : BV:32
140780 : islangaligned(140710, 140365) : BOOL
140783 : and(140778, 140780) : BOOL
140650 : bvsign_ext(140616, 140410) : BV:64
140796 : bvmul(140508, 140650) : BV:64
140797 : bvextract(140796, 140414, 140410) : BV:32
140649 : bvslt(140616, 140276) : BOOL
140810 : ite(140649, 140416, 140276) : BV:32
140812 : eq(140797, 140810) : BOOL
140814 : isindexforsize(140812, 140365) : BOOL
140713 : bvmul(140362, 140616) : BV:32
140715 : bvadd(140710, 140713) : BV:32
140816 : isgepoffset(140715, 140713) : BOOL
140821 : and(140772, 140774, 140778, 140783, 140814, 140816) : BOOL
140736 : islangaligned(140715, 140365) : BOOL
192880 : and(140821, 140736) : BOOL
140275 : 1 { 0x1 } : BOOL
192912 : eq(192880, 140275) : BOOL
193934 : implies(140617, 192912) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 5
=bv_rank at L3%19%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 9
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
