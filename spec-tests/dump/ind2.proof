=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L1%1%d L1%2%bbentry L1%4%bbentry L1%9%bbentry E0%0%d
=Edges:
L0%0%d => L1%1%d
L1%1%d => L1%4%bbentry
L1%1%d => L1%2%bbentry
L1%2%bbentry => L1%9%bbentry
L1%4%bbentry => L1%9%bbentry
L1%9%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%1%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%2%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%4%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%9%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-2.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L1%1%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:func_head
tfg_edge_comment end

=Edge: L1%1%d => L1%4%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:match_sum_cond_1
tfg_edge_comment end

=Edge: L1%1%d => L1%2%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:match_sum_cond_0
tfg_edge_comment end

=Edge: L1%2%bbentry => L1%9%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-1.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-empty-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L1%4%bbentry => L1%9%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-1.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-node-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-node_next-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-node_val-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*match_prod_0)*((match_prod_1*match_prod_final)*match_sum_merge_1))
tfg_edge_comment end

=Edge: L1%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-2.E0%0%d
1 : input.spec-%tmpvar-1.L1%9%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-l-0
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 9 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 10 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 11 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L1%9%bbentry
1 : input.spec-%tmpvar-1.L1%9%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 12 in src.spec.foo.
REGMEM
spec-%tmpvar-2.E0%0%d
1 : input.spec-%tmpvar-2.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 13 in src.spec.foo.
REGMEM
spec-%var-empty-0.L1%9%bbentry
1 : input.spec-%var-empty-0.L1%9%bbentry : UNIT
=Loc 14 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L1%9%bbentry
1 : input.spec-%tmpvar-0.L1%9%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 15 in src.spec.foo.
REGMEM
spec-%var-node-0.L1%9%bbentry
1 : input.spec-%var-node-0.L1%9%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 16 in src.spec.foo.
REGMEM
spec-%var-node_next-0.L1%9%bbentry
1 : input.spec-%var-node_next-0.L1%9%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 17 in src.spec.foo.
REGMEM
spec-%var-node_val-0.L1%9%bbentry
1 : input.spec-%var-node_val-0.L1%9%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L1%1%d
1, 
=live locs at L1%2%bbentry
1, 
=live locs at L1%4%bbentry
1, 
=live locs at L1%9%bbentry
11, 
=live locs at E0%0%d
12, 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 9, 10
=loc definedness at L1%1%d
1, 9, 10
=loc definedness at L1%2%bbentry
1, 9, 10
=loc definedness at L1%4%bbentry
1, 9, 10
=loc definedness at L1%9%bbentry
1, 9, 10, 11
=loc definedness at E0%0%d
1, 9, 10, 11, 12

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L1%1%d
1
=branch affecting variable locs at L1%2%bbentry

=branch affecting variable locs at L1%4%bbentry

=branch affecting variable locs at L1%9%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L1%1%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L1%1%d done
=graph_with_edge_structures.loc_to_expr_map at L1%1%d=>L1%2%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%1%d=>L1%2%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%1%d=>L1%4%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%1%d=>L1%4%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%2%bbentry=>L1%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%2%bbentry=>L1%9%bbentry for loc_id 11 {input.spec-%tmpvar-1.L1%9%bbentry }
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L1%2%bbentry=>L1%9%bbentry for loc_id 13 {input.spec-%var-empty-0.L1%9%bbentry }
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L1%2%bbentry=>L1%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry for loc_id 11 {input.spec-%tmpvar-1.L1%9%bbentry }
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry for loc_id 14 {input.spec-%tmpvar-0.L1%9%bbentry }
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry for loc_id 15 {input.spec-%var-node-0.L1%9%bbentry }
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry for loc_id 16 {input.spec-%var-node_next-0.L1%9%bbentry }
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry for loc_id 17 {input.spec-%var-node_val-0.L1%9%bbentry }
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L1%9%bbentry=>E0%0%d for loc_id 12 {input.spec-%tmpvar-2.E0%0%d }
1 : input.spec-%tmpvar-1.L1%9%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L1%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L1%1%d:
vacuous mls at L1%2%bbentry:
vacuous mls at L1%4%bbentry:
vacuous mls at L1%9%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L1%1%d:
non-vacuous mls at L1%2%bbentry:
non-vacuous mls at L1%4%bbentry:
non-vacuous mls at L1%9%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 13
=loc_expr
140299 : input.spec-%var-empty-0.L1%9%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=avail_exprs_val.end
=loc 14
=loc_expr
140411 : input.spec-%tmpvar-0.L1%9%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=loc 15
=loc_expr
140412 : input.spec-%var-node-0.L1%9%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=avail_exprs_val.end
=loc 16
=loc_expr
140414 : input.spec-%var-node_next-0.L1%9%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=loc 17
=loc_expr
140415 : input.spec-%var-node_val-0.L1%9%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 9 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 10 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 11 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 12 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 13 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 14 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 15 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 16 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 17 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L1%1%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%1%d=>L1%2%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%1%d=>L1%4%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%2%bbentry=>L1%9%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%4%bbentry=>L1%9%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L1%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%1%d=>L1%2%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%1%d=>L1%4%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%2%bbentry=>L1%9%bbentry
=spec-%tmpvar-1.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-empty-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%4%bbentry=>L1%9%bbentry
=spec-%tmpvar-1.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-node-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-node_next-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : prod_get(3, 2) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-node_val-0.L1%9%bbentry
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : prod_get(3, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%9%bbentry=>E0%0%d
=spec-%tmpvar-2.E0%0%d
1 : input.spec-%tmpvar-1.L1%9%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L1%1%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L1%1%d done
=graph_with_simplified_assets.simplified_assumes at L1%1%d=>L1%2%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%1%d=>L1%2%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%1%d=>L1%4%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%1%d=>L1%4%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%2%bbentry=>L1%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%2%bbentry=>L1%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%4%bbentry=>L1%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%4%bbentry=>L1%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L1%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L1%1%d for src.spec.foo
=suffixpath_at_L1%1%d.graph_edge_composition
(L0%0%d=>L1%1%d)
=suffixpath_at_L1%2%bbentry for src.spec.foo
=suffixpath_at_L1%2%bbentry.graph_edge_composition
((L0%0%d=>L1%1%d)*(L1%1%d=>L1%2%bbentry))
=suffixpath_at_L1%4%bbentry for src.spec.foo
=suffixpath_at_L1%4%bbentry.graph_edge_composition
((L0%0%d=>L1%1%d)*(L1%1%d=>L1%4%bbentry))
=suffixpath_at_L1%9%bbentry for src.spec.foo
=suffixpath_at_L1%9%bbentry.graph_edge_composition
(((L0%0%d=>L1%1%d)*((L1%1%d=>L1%2%bbentry)*(L1%2%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%1%d)*((L1%1%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>L1%1%d)*((L1%1%d=>L1%2%bbentry)*(L1%2%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%1%d)*((L1%1%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry))))*(L1%9%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L1%1%d
tfg.assumes_around_edge at L0%0%d=>L1%1%d done
tfg.assumes_around_edge at L1%1%d=>L1%2%bbentry
tfg.assumes_around_edge at L1%1%d=>L1%2%bbentry done
tfg.assumes_around_edge at L1%1%d=>L1%4%bbentry
tfg.assumes_around_edge at L1%1%d=>L1%4%bbentry done
tfg.assumes_around_edge at L1%2%bbentry=>L1%9%bbentry
tfg.assumes_around_edge at L1%2%bbentry=>L1%9%bbentry done
tfg.assumes_around_edge at L1%4%bbentry=>L1%9%bbentry
tfg.assumes_around_edge at L1%4%bbentry=>L1%9%bbentry done
tfg.assumes_around_edge at L1%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L1%9%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lcond.end%1%bbentry Lcond.false%1%intermediateVal0 Lcond.true%1%d Lentry%2%d E0%0%d
=Edges:
L0%0%d => Lentry%2%d
Lentry%2%d => Lcond.true%1%d
Lentry%2%d => Lcond.false%1%intermediateVal0
Lcond.true%1%d => Lcond.end%1%bbentry
Lcond.false%1%intermediateVal0 => Lcond.end%1%bbentry
Lcond.end%1%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.false%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.true%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 9 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*  %tobool = icmp ne %struct.list* %l, null, !dbg !22)
tfg_edge_comment end

=Edge: Lentry%2%d => Lcond.true%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %cond.true, label %cond.false, !dbg !22*  br i1 %tobool, label %cond.true, label %cond.false, !dbg !22)*  br i1 %tobool, label %cond.true, label %cond.false, !dbg !22)
tfg_edge_comment end

=Edge: Lentry%2%d => Lcond.false%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %cond.true, label %cond.false, !dbg !22*  br i1 %tobool, label %cond.true, label %cond.false, !dbg !22)*(  br i1 %tobool, label %cond.true, label %cond.false, !dbg !22*  br label %cond.end, !dbg !22))
tfg_edge_comment end

=Edge: Lcond.true%1%d => Lcond.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%0.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(8, 9) : BV:32
11 : bvadd(4, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 3, 11, 12, 13) : BV:32
=dst.llvm-%next.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 8 { 0x8 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%l : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvadd(18, 22) : BV:32
24 : bvadd(16, 23) : BV:32
25 : isgepoffset(24, 22) : BOOL
26 : and(21, 25) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
11 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
12 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
13 : mlvar.dst.llvm.foo.0 : MEMLABEL
14 : 0 { 0x0 } : BOOL
15 : select(11, 12, 13, 8, 9, 14) : BV:32
16 : 8 { 0x8 +1.0e1025 } : INT
17 : islangaligned(15, 16) : BOOL
18 : and(17, 10) : BOOL
19 : and(10, 18) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %next = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 1, !dbg !23*  %next = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 1, !dbg !23)*(  %next = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 1, !dbg !23*  %next = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 1, !dbg !23))*((((  %0 = load %struct.list*, %struct.list** %next, align 4, !dbg !23*  %0 = load %struct.list*, %struct.list** %next, align 4, !dbg !23)*  br label %cond.end, !dbg !22)*(  %cond = phi %struct.list* [ %0, %cond.true ], [ %l, %cond.false ], !dbg !22*  br label %cond.end, !dbg !22))*(  br label %cond.end, !dbg !22*  br label %cond.end, !dbg !22)))
tfg_edge_comment end

=Edge: Lcond.false%1%intermediateVal0 => Lcond.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((  %cond = phi %struct.list* [ %0, %cond.true ], [ %l, %cond.false ], !dbg !22*  br label %cond.end, !dbg !22)*(  br label %cond.end, !dbg !22*  br label %cond.end, !dbg !22))
tfg_edge_comment end

=Edge: Lcond.end%1%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  ret %struct.list* %cond, !dbg !24)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100001 in dst.llvm.foo.
REGMEM
dst.llvm-%l
1 : input.dst.llvm-%l : BV:32
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100017 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100018 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100024 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100025 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100026 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100032 in dst.llvm.foo.
REGMEM
dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lcond.end%1%bbentry
1 : input.dst.llvm-%0.Lcond.end%1%bbentry : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%next.Lcond.end%1%bbentry
1 : input.dst.llvm-%next.Lcond.end%1%bbentry : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lentry%2%d
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100001, 100025, 100026, 
=live locs at Lcond.end%1%bbentry
100026, 100028[f], 
=live locs at Lcond.false%1%intermediateVal0
100001, 100026, 
=live locs at Lcond.true%1%d
100001, 100025, 100026, 
=live locs at Lentry%2%d
100001, 100025, 100026, 100027, 
=live locs at E0%0%d
100026, 100028[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100001, 100022, 100024, 100025, 100026
=loc definedness at Lcond.end%1%bbentry
100001, 100022, 100024, 100025, 100026, 100027, 100028, 100041, 100042
=loc definedness at Lcond.false%1%intermediateVal0
100001, 100022, 100024, 100025, 100026, 100027, 100041, 100042
=loc definedness at Lcond.true%1%d
100001, 100022, 100024, 100025, 100026, 100027, 100041, 100042
=loc definedness at Lentry%2%d
100001, 100022, 100024, 100025, 100026, 100027, 100041, 100042
=loc definedness at E0%0%d
100001, 100022, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100041, 100042

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100001
=branch affecting variable locs at Lcond.end%1%bbentry

=branch affecting variable locs at Lcond.false%1%intermediateVal0

=branch affecting variable locs at Lcond.true%1%d

=branch affecting variable locs at Lentry%2%d
100027
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100027 {input.dst.llvm-%tobool.Lentry%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100041 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100042 {input.dst.cur_rounding_mode.Lentry%2%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d for loc_id 100029 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d for loc_id 100030 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d for loc_id 100031 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry for loc_id 100028 {input.dst.llvm-%cond.Lcond.end%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry for loc_id 100032 {input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100028 {input.dst.llvm-%cond.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100033 {input.dst.llvm-%0.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100034 {input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100035 {input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100036 {input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100037 {input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100038 {input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100039 {input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100040 {input.dst.llvm-%next.Lcond.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.false%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.false%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.true%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.true%1%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lcond.end%1%bbentry:
vacuous mls at Lcond.false%1%intermediateVal0:
vacuous mls at Lcond.true%1%d:
vacuous mls at Lentry%2%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lcond.end%1%bbentry:
non-vacuous mls at Lcond.false%1%intermediateVal0:
non-vacuous mls at Lcond.true%1%d:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100001
=loc_expr
140334 : input.dst.llvm-%l : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140375 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140376 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140378 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140380 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100018
=loc_expr
140382 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140339 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140333 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140425 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 100029
=loc_expr
140428 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100030
=loc_expr
140429 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100031
=loc_expr
140431 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100032
=loc_expr
140432 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100033
=loc_expr
140433 : input.dst.llvm-%0.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100034
=loc_expr
140434 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100035
=loc_expr
140435 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140436 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100037
=loc_expr
140437 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140438 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140439 : input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140440 : input.dst.llvm-%next.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140441 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100042
=loc_expr
140442 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100031 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100031 spreled-expr
140267 : retaddr_const : BV:32
=loc 100034 expr
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=loc 100034 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100035 expr
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=loc 100035 spreled-expr
140321 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100037 expr
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=loc 100037 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100038 expr
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=loc 100038 spreled-expr
140321 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100041 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100041 spreled-expr
140339 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100042 expr
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=loc 100042 spreled-expr
140338 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100001 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100018 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100031 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.end%1%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.true%1%d=>Lcond.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lcond.false%1%intermediateVal0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lcond.true%1%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%2%d
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.end%1%bbentry=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.true%1%d=>Lcond.end%1%bbentry
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%0.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%l : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%next.Lcond.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lcond.false%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lcond.true%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d assume# 0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.end%1%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lcond.end%1%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
4 : 4 { 0x4 +1.0e1025 } : INT
5 : islangaligned(3, 4) : BOOL
6 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
9 : 0 { 0x0 } : BOOL
10 : select(6, 7, 8, 3, 4, 9) : BV:32
11 : 8 { 0x8 +1.0e1025 } : INT
12 : islangaligned(10, 11) : BOOL
13 : and(5, 12) : BOOL
14 : and(5, 13) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.end%1%bbentry assume# 1
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
4 : isgepoffset(3, 1) : BOOL
5 : 1 { 0x1 } : BOOL
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : isgepoffset(2, 6) : BOOL
8 : and(5, 7) : BOOL
9 : and(4, 8) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.false%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.false%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.true%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.true%1%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lcond.end%1%bbentry for dst.llvm.foo
=suffixpath_at_Lcond.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*(Lcond.true%1%d=>Lcond.end%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.false%1%intermediateVal0)*(Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry))))
=suffixpath_at_Lcond.false%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lcond.false%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lcond.false%1%intermediateVal0))
=suffixpath_at_Lcond.true%1%d for dst.llvm.foo
=suffixpath_at_Lcond.true%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lcond.true%1%d))
=suffixpath_at_Lentry%2%d for dst.llvm.foo
=suffixpath_at_Lentry%2%d.graph_edge_composition
(L0%0%d=>Lentry%2%d)
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*(Lcond.true%1%d=>Lcond.end%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.false%1%intermediateVal0)*(Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry))))*(Lcond.end%1%bbentry=>E0%0%d))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140334 : input.dst.llvm-%l : BV:32
140340 : 8 { 0x8 +1.0e1025 } : INT
140341 : islangaligned(140334, 140340) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lentry%2%d done
tfg.assumes_around_edge at Lcond.end%1%bbentry=>E0%0%d
tfg.assumes_around_edge at Lcond.end%1%bbentry=>E0%0%d done
tfg.assumes_around_edge at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
tfg.assumes_around_edge at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry done
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #0
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lcond.true%1%d=>Lcond.end%1%bbentry
=LhsExpr
140321 : 4 { 0x4 +1.47e129 } : BV:32
140334 : input.dst.llvm-%l : BV:32
140413 : bvadd(140321, 140334) : BV:32
140308 : 4 { 0x4 +1.0e1025 } : INT
140471 : islangaligned(140413, 140308) : BOOL
140331 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140332 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140402 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140309 : 0 { 0x0 } : BOOL
140449 : select(140331, 140332, 140402, 140413, 140308, 140309) : BV:32
140340 : 8 { 0x8 +1.0e1025 } : INT
140473 : islangaligned(140449, 140340) : BOOL
140476 : and(140471, 140473) : BOOL
140478 : and(140471, 140476) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #1
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #1.pred
=Comment
undef-behavioursome.edge.Lcond.true%1%d=>Lcond.end%1%bbentry
=LhsExpr
140321 : 4 { 0x4 +1.47e129 } : BV:32
140334 : input.dst.llvm-%l : BV:32
140413 : bvadd(140321, 140334) : BV:32
140430 : isgepoffset(140413, 140321) : BOOL
140275 : 1 { 0x1 } : BOOL
140290 : 0 { 0x0 +1.0e129 } : BV:32
140407 : isgepoffset(140334, 140290) : BOOL
140462 : and(140275, 140407) : BOOL
140466 : and(140430, 140462) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry done
tfg.assumes_around_edge at Lentry%2%d=>Lcond.false%1%intermediateVal0
tfg.assumes_around_edge at Lentry%2%d=>Lcond.false%1%intermediateVal0 done
tfg.assumes_around_edge at Lentry%2%d=>Lcond.true%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lcond.true%1%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lcond.end%1%d
=linename
line 7
=pc
Lcond.false%1%d
=linename
line 7
=pc
Lcond.true%1%d
=linename
line 7
=pc
Lcond.true%2%d
=linename
line 7
=pc
Lcond.true%3%d
=linename
line 7
=pc
Lentry%1%d
=linename
line 7
=pc
Lentry%2%d
=linename
line 7
=PC_to_linename done
=PC_to_column_name:
=pc
Lcond.end%1%d
=column_name
 at column 3
=pc
Lcond.false%1%d
=column_name
 at column 10
=pc
Lcond.true%1%d
=column_name
 at column 17
=pc
Lcond.true%2%d
=column_name
 at column 17
=pc
Lcond.true%3%d
=column_name
 at column 10
=pc
Lentry%1%d
=column_name
 at column 10
=pc
Lentry%2%d
=column_name
 at column 10
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lcond.end%1%d
=line_and_column
(line 7 at column 3)
=pc
Lcond.false%1%d
=line_and_column
(line 7 at column 10)
=pc
Lcond.true%1%d
=line_and_column
(line 7 at column 17)
=pc
Lcond.true%2%d
=line_and_column
(line 7 at column 17)
=pc
Lcond.true%3%d
=line_and_column
(line 7 at column 10)
=pc
Lentry%1%d
=line_and_column
(line 7 at column 10)
=pc
Lentry%2%d
=line_and_column
(line 7 at column 10)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry : L0%0%d : (4 + l'{L0%0%d})
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%l : L0%0%d : l'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%tobool : L0%0%d : not(l' = 0)
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset : L0%0%d : (l' + 4)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%next]_4
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset
input.dst.llvm-%cond.phi.tmpvar.cond.true : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%cond.phi.tmpvar.cond.false : L0%0%d : l'
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%cond
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%tobool.Lentry%2%d : L0%0%d : not(l'{L0%0%d} = 0)
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry : L0%0%d : 4
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : L0%0%d : l'{L0%0%d}
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%cond.Lcond.end%1%bbentry
input.dst.llvm-%0.Lcond.end%1%bbentry : L0%0%d : DSTMEM[(4 + l'{L0%0%d})]_4
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : L0%0%d : DSTMEM[(4 + l'{L0%0%d})]_4
input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : L0%0%d : 4
input.dst.llvm-%next.Lcond.end%1%bbentry : L0%0%d : (4 + l'{L0%0%d})
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d={L0%0%d}
input.dst.cur_rounding_mode.Lentry%2%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%next
=dst.llvm-%next loop pc: L0%0%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
1 : 00000000000000000000000000000100b
2 : input.dst.llvm-%l : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
1 : 00000000000000000000000000000100b
2 : input.dst.llvm-%l : BV32
3 : scev_op_add(1, 2) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev nullptr
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
4 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
4 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%cond
=dst.llvm-%cond loop pc: L0%0%d
=dst.llvm-%cond val_scevb
=dst.llvm-%cond val_scevb scev
=dst.llvm-%cond val_scevb scev loop: L0%0%d
=dst.llvm-%cond val_scevb scev scev_overflow_flag: 
=dst.llvm-%cond val_scevb scev scev_expr
5 : input.dst.llvm-%cond : BV32
=dst.llvm-%cond val_scevb scev scev_expr done
=dst.llvm-%cond val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%cond val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%cond val_scevb signed lower bound: 32:4294967295
=dst.llvm-%cond val_scevb signed upper bound: 32:4294967295
=dst.llvm-%cond atuse_scevb
=dst.llvm-%cond atuse_scevb scev
=dst.llvm-%cond atuse_scevb scev loop: L0%0%d
=dst.llvm-%cond atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%cond atuse_scevb scev scev_expr
5 : input.dst.llvm-%cond : BV32
=dst.llvm-%cond atuse_scevb scev scev_expr done
=dst.llvm-%cond atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%cond atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%cond atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%cond atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%cond atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lcond.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 4 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 5 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%0.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 7 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 8 edges
  Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%next.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns done
=Reaching Definitions at Lcond.false%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lcond.true%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 4 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 4 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 5 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 6 edges
  Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 7 edges
  Lcond.end%1%bbentry=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%0.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 8 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lcond.end%1%bbentry=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lcond.end%1%bbentry=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%next.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.3.total_offset.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%l
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%tobool.Lentry%2%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.2.total_offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.gepoffset.1.total_offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%998eb72526f97b66b8f3b86b2a6de8.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%next.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%2%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind2.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-inductive-list
=LhsExpr
1 : $spec-arg-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : $llvm-arg-0 : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : $llvm-md : ARRAY[BV:32 -> BV:8]
6 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(14, 15) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : $llvm-ret : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : $llvm-md : ARRAY[BV:32 -> BV:8]
6 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(14, 15) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 9 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L1%1%d#{0,0})*((((L1%1%d#{0,0}=>L1%2%bbentry#{0,0})*(L1%2%bbentry#{0,0}=>L1%9%bbentry#{0,0}))+((L1%1%d#{0,0}=>L1%4%bbentry#{0,0})*(L1%4%bbentry#{0,0}=>L1%9%bbentry#{0,0})))*(L1%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>Lentry%2%d#{0,0})*((((Lentry%2%d#{0,0}=>Lcond.false%1%intermediateVal0#{0,0})*(Lcond.false%1%intermediateVal0#{0,0}=>Lcond.end%1%bbentry#{0,0}))+((Lentry%2%d#{0,0}=>Lcond.true%1%d#{0,0})*(Lcond.true%1%d#{0,0}=>Lcond.end%1%bbentry#{0,0})))*(Lcond.end%1%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce6.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce6 e46898e94632faf49e4d5b2eccd6e0
=input.spec-%var-l-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar57 : BV:32
4 : Lambda253Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda254Var : BV:32
7 : prod(1, 3) : PROD[BV:32,BV:32]
8 : sum(1, 2, 7) : SUM[UNIT,PROD[BV:32,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
11 : prod(1, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar59 : BV:32
4 : Lambda258Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda259Var : BV:32
7 : prod(1, 3) : PROD[BV:32,BV:32]
8 : sum(1, 2, 7) : SUM[UNIT,PROD[BV:32,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
11 : prod(1, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-node-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar61 : BV:32
4 : Lambda263Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda264Var : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-node_next-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar63 : BV:32
4 : Lambda268Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda269Var : BV:32
7 : prod(1, 3) : PROD[BV:32,BV:32]
8 : sum(1, 2, 7) : SUM[UNIT,PROD[BV:32,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
11 : prod(1, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-node_val-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
202303626
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce7.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce7 c11fd15aaa4a63ba2357d16fb9e344
=input.spec-%var-l-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar73 : BV:32
4 : Lambda293Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda294Var : BV:32
7 : prod(1, 3) : PROD[BV:32,BV:32]
8 : sum(1, 2, 7) : SUM[UNIT,PROD[BV:32,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
11 : prod(1, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar75 : BV:32
4 : Lambda298Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda299Var : BV:32
7 : prod(1, 3) : PROD[BV:32,BV:32]
8 : sum(1, 2, 7) : SUM[UNIT,PROD[BV:32,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
11 : prod(1, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-node-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar77 : BV:32
4 : Lambda303Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda304Var : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-node_next-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar79 : BV:32
4 : Lambda308Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda309Var : BV:32
7 : prod(1, 3) : PROD[BV:32,BV:32]
8 : sum(1, 2, 7) : SUM[UNIT,PROD[BV:32,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
11 : prod(1, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-node_val-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2109014828
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce8.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce8 5d2d2c846f0f2bc20c3c137d350d22b
=input.spec-%var-l-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
4 : Indvar89 : BV:32
5 : Lambda333Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda334Var : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar91 : BV:32
4 : Lambda338Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda339Var : BV:32
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : sum(1, 2, 3) : SUM[UNIT,BV:32]
9 : prod(7, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-node-0.L1%9%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : unit : UNIT
4 : Indvar93 : BV:32
5 : Lambda343Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda344Var : BV:32
8 : sum(2, 3, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(2, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(2, 3, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-node_next-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar95 : BV:32
4 : Lambda348Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda349Var : BV:32
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : sum(1, 2, 3) : SUM[UNIT,BV:32]
9 : prod(7, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-node_val-0.L1%9%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L1%9%bbentry.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-node-0.L1%9%bbentry.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.2.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-node_next-0.L1%9%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
84007017
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-2.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
5 : or(3, 4) : BOOL
6 : not(5) : BOOL
7 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : 0 { 0x0 +1.0e1025 } : INT
11 : sum_is(7, 10) : BOOL
12 : or(9, 11) : BOOL
13 : or(6, 12) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-2.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140331 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140332 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140384 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140333 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140308 : 4 { 0x4 +1.0e1025 } : INT
140309 : 0 { 0x0 } : BOOL
140385 : select(140331, 140332, 140384, 140333, 140308, 140309) : BV:32
=RhsExpr
140334 : input.dst.llvm-%l : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
precond-mlasserts
=LhsExpr
140488 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140489 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140490 : bvule(140488, 140489) : BOOL
140321 : 4 { 0x4 +1.47e129 } : BV:32
140358 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140491 : bvadd(140321, 140358) : BV:32
140492 : bvadd(140488, 140491) : BV:32
140493 : eq(140489, 140492) : BOOL
140494 : and(140490, 140493) : BOOL
140333 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140495 : 3 { 0x3 +1.35e129 } : BV:32
140496 : bvand(140333, 140495) : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140497 : eq(140496, 140290) : BOOL
140498 : and(140494, 140497) : BOOL
140499 : eq(140333, 140488) : BOOL
140500 : and(140498, 140499) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140334 : input.dst.llvm-%l : BV:32
140340 : 8 { 0x8 +1.0e1025 } : INT
140341 : islangaligned(140334, 140340) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.pred
=Comment
pointer-implements-inductive-list
=LhsExpr
140273 : input.spec-%var-l-0 : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140334 : input.dst.llvm-%l : BV:32
140315 : Indvar0 : BV:32
140320 : Lambda1Var : BV:32
140331 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140332 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140501 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140321 : 4 { 0x4 +1.47e129 } : BV:32
140322 : bvadd(140320, 140321) : BV:32
140308 : 4 { 0x4 +1.0e1025 } : INT
140309 : 0 { 0x0 } : BOOL
140527 : select(140331, 140332, 140501, 140322, 140308, 140309) : BV:32
140528 : lambda(140320, 140527) : FUNCTION[BV:32 -> BV:32]
140311 : Lambda0Var : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140512 : eq(140290, 140311) : BOOL
140310 : 1 { 0x1 +1.11e129 } : BV:32
140513 : ite(140512, 140290, 140310) : BV:32
140314 : unit : UNIT
140529 : select(140331, 140332, 140501, 140311, 140308, 140309) : BV:32
140530 : prod(140529, 140315) : PROD[BV:32,BV:32]
140531 : sum(140513, 140314, 140530) : SUM[UNIT,PROD[BV:32,BV:32]]
140532 : lambda(140311, 140531) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
140533 : ind(140334, 140315, 140528, 140532) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140534 : eq(140273, 140533) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #4.pred
=Comment
merged-predicate
=LhsExpr
140290 : 0 { 0x0 +1.0e129 } : BV:32
140334 : input.dst.llvm-%l : BV:32
140404 : eq(140290, 140334) : BOOL
140405 : not(140404) : BOOL
140321 : 4 { 0x4 +1.47e129 } : BV:32
140413 : bvadd(140321, 140334) : BV:32
140308 : 4 { 0x4 +1.0e1025 } : INT
140471 : islangaligned(140413, 140308) : BOOL
140331 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140332 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140402 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140309 : 0 { 0x0 } : BOOL
140449 : select(140331, 140332, 140402, 140413, 140308, 140309) : BV:32
140340 : 8 { 0x8 +1.0e1025 } : INT
140473 : islangaligned(140449, 140340) : BOOL
140476 : and(140471, 140473) : BOOL
140478 : and(140471, 140476) : BOOL
140430 : isgepoffset(140413, 140321) : BOOL
140275 : 1 { 0x1 } : BOOL
140407 : isgepoffset(140334, 140290) : BOOL
140462 : and(140275, 140407) : BOOL
140466 : and(140430, 140462) : BOOL
140681 : and(140478, 140466) : BOOL
140682 : eq(140681, 140275) : BOOL
140683 : implies(140405, 140682) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
