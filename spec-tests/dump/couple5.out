argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=couple5.proof
argv[5] = --spec-iospecs=couple5.iospecs
argv[6] = couple5.spec
argv[7] = couple5.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2708062
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/repos/superopt-project/superopt-tests/spec-tests/couple5.c
argv[10] = -o
argv[11] = par_tmpdir/couple5.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/couple5.spec.etfg
argv[10] = par_tmpdir/couple5.c.bc
argv[11] = -o
argv[12] = par_tmpdir/couple5.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 184 time spent: 0:0:0 [0.000387s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 211 time spent: 0:0:0 [0.000397s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2462 time spent: 0:0:0 [0.014239s total; 0.000006 per start]
expr_simplify_solver: num_starts 152 time spent: 0:0:0 [0.020260s total; 0.000133 per start]
expr_simplify_syntactic: num_starts 152 time spent: 0:0:0 [0.025910s total; 0.000170 per start]
expr_simplify_select_on_store: num_starts 8 time spent: 0:0:0 [0.021542s total; 0.002693 per start]
expr_simplify_using_lhs_set_helper: num_starts 144 time spent: 0:0:0 [0.050814s total; 0.000353 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 432 time spent: 0:0:0 [0.050407s total; 0.000117 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 147 time spent: 0:0:0 [0.000644s total; 0.000004 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000146s total; 0.000012 per start]
expr_simplify_not: num_starts 4 time spent: 0:0:0 [0.000013s total; 0.000003 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000553s total; 0.000138 per start]
canonicalize_expr_tree: num_starts 89 time spent: 0:0:0 [0.001628s total; 0.000018 per start]
expr_simplify_memalloc_using_memlabel: num_starts 5 time spent: 0:0:0 [0.000016s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 8 time spent: 0:0:0 [0.021232s total; 0.002654 per start]
get_arithmetic_addsub_atoms: num_starts 124 time spent: 0:0:0 [0.000100s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 250 time spent: 0:0:0 [0.003424s total; 0.000014 per start]
expr_is_consts_struct_constant: num_starts 3220 time spent: 0:0:0 [0.002011s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 5446 time spent: 0:0:0 [0.056090s total; 0.000010 per start]
expr_do_simplify_helper_cache: num_starts 5446 time spent: 0:0:0 [0.004140s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000011s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000188s total; 0.000005 per start]
array_constant_equals: num_starts 19 time spent: 0:0:0 [0.000043s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 221 time spent: 0:0:0 [0.339773s total; 0.001537 per start]
alias_val_xfer_and_meet: num_starts 221 time spent: 0:0:0 [0.076570s total; 0.000346 per start]
get_sprel_map_from_avail_exprs: num_starts 268 time spent: 0:0:0 [0.039095s total; 0.000146 per start]
update_memlabels_for_memslot_locs: num_starts 46 time spent: 0:0:0 [0.000261s total; 0.000006 per start]
populate_gen_and_kill_sets_for_edge: num_starts 442 time spent: 0:0:0 [0.025598s total; 0.000058 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1108 time spent: 0:0:0 [0.084570s total; 0.000076 per start]
compute_locs_definitely_written_on_edge: num_starts 442 time spent: 0:0:0 [0.000215s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 98 time spent: 0:0:0 [0.009147s total; 0.000093 per start]
edge_update_memlabel_map_for_mlvars: num_starts 221 time spent: 0:0:0 [0.003612s total; 0.000016 per start]
add_new_locs_based_on_edge: num_starts 221 time spent: 0:0:0 [0.047973s total; 0.000217 per start]
expand_locset_to_include_slots_for_memmask: num_starts 141 time spent: 0:0:0 [0.000564s total; 0.000004 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_execution_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 8e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 2.9e-05s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 2.9e-05s (num_starts 8; 0.0000s/start)
add_extra_node_at_start_pc.: 3.4e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 3.7e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3.8e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 4.6e-05s (num_starts 1; 0.0000s/start)
lr_status_meet.: 8.9e-05s (num_starts 117; 0.0000s/start)
main.3.: 9.5e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000109s (num_starts 123; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000112s (num_starts 6; 0.0000s/start)
expr_is_callee_save_const.: 0.000141s (num_starts 127; 0.0000s/start)
compute_sprel_relations.: 0.000158s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.000164s (num_starts 1; 0.0002s/start)
graph_locs_add_all_specvars.: 0.000211s (num_starts 1; 0.0002s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000212s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000267s (num_starts 345; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000288s (num_starts 73; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.00031s (num_starts 73; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000336s (num_starts 1; 0.0003s/start)
populate_locid2expr_map.: 0.000355s (num_starts 2; 0.0002s/start)
graph_locs_add_all_local_vars.: 0.000364s (num_starts 1; 0.0004s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000452s (num_starts 8; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000454s (num_starts 45; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000608s (num_starts 2; 0.0003s/start)
expr_represents_llvm_undef.: 0.000824s (num_starts 129; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000939s (num_starts 1; 0.0009s/start)
canonicalize_llvm_nextpcs.: 0.001029s (num_starts 1; 0.0010s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001328s (num_starts 1; 0.0013s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.00133s (num_starts 221; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.001508s (num_starts 146; 0.0000s/start)
populate_simplified_to_state.: 0.001624s (num_starts 3; 0.0005s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.001922s (num_starts 1; 0.0019s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001997s (num_starts 1; 0.0020s/start)
sp_version_relations_val_t::meet.: 0.002244s (num_starts 4056; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.002325s (num_starts 1; 0.0023s/start)
populate_exit_return_values_for_llvm_method.: 0.002417s (num_starts 1; 0.0024s/start)
tfg::collect_assumes_around_edge.: 0.002534s (num_starts 211; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.002715s (num_starts 221; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.002757s (num_starts 129; 0.0000s/start)
graph_with_locs_constructor.src.spec.foo.: 0.00315s (num_starts 1; 0.0032s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.003262s (num_starts 1; 0.0033s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.003338s (num_starts 221; 0.0000s/start)
compute_z3_expr.: 0.003627s (num_starts 84; 0.0000s/start)
query:convert_from_z3.: 0.003843s (num_starts 84; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.004177s (num_starts 147; 0.0000s/start)
graph_visit_exprs.: 0.004617s (num_starts 4; 0.0012s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.006279s (num_starts 1; 0.0063s/start)
compute_lr_status_for_expr.: 0.007136s (num_starts 131; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.007197s (num_starts 1; 0.0072s/start)
query:convert_to_z3.: 0.007234s (num_starts 84; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.007317s (num_starts 117; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.007521s (num_starts 117; 0.0001s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.008492s (num_starts 1; 0.0085s/start)
populate_simplified_assets.: 0.010066s (num_starts 6; 0.0017s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.010983s (num_starts 1; 0.0110s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.010986s (num_starts 1; 0.0110s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.010992s (num_starts 1; 0.0110s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.010996s (num_starts 1; 0.0110s/start)
tfg_constructor.src.spec.foo.: 0.011s (num_starts 1; 0.0110s/start)
populate_dominator_and_postdominator_relations.: 0.011207s (num_starts 2; 0.0056s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.011287s (num_starts 160; 0.0001s/start)
populate_transitive_closure.: 0.011473s (num_starts 1; 0.0115s/start)
graph_to_stream.: 0.011597s (num_starts 1; 0.0116s/start)
create_closure_matrix.: 0.011751s (num_starts 267; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.012249s (num_starts 4242; 0.0000s/start)
query:simplify-z3.: 0.014455s (num_starts 173; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.015223s (num_starts 2; 0.0076s/start)
graph_identify_back_edges.: 0.015225s (num_starts 5; 0.0030s/start)
tfg::populate_loc_definedness.before_initialize.: 0.015874s (num_starts 2; 0.0079s/start)
graph_identify_natural_loops.: 0.016144s (num_starts 5; 0.0032s/start)
tfg::populate_loc_definedness.: 0.016426s (num_starts 2; 0.0082s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.019341s (num_starts 2462; 0.0000s/start)
populate_branch_affecting_locs.: 0.022113s (num_starts 2; 0.0111s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.022223s (num_starts 221; 0.0001s/start)
compute_new_lr_status_on_locs.: 0.02287s (num_starts 221; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.023313s (num_starts 3; 0.0078s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.02479s (num_starts 1; 0.0248s/start)
find_dominators.: 0.024963s (num_starts 9; 0.0028s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.025092s (num_starts 1; 0.0251s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.025712s (num_starts 1; 0.0257s/start)
compute_regions.: 0.025883s (num_starts 5; 0.0052s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.033326s (num_starts 234; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.033397s (num_starts 3; 0.0111s/start)
tfg_preprocess.dst.llvm.foo.: 0.035761s (num_starts 1; 0.0358s/start)
tfg::tfg_preprocess.: 0.035764s (num_starts 1; 0.0358s/start)
get_tfg.: 0.044415s (num_starts 1; 0.0444s/start)
get_function_tfg_map.foo.: 0.044456s (num_starts 1; 0.0445s/start)
get_function_tfg_map.: 0.044459s (num_starts 1; 0.0445s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.046358s (num_starts 221; 0.0002s/start)
create_sp_version_relations_lattice_at_pc.: 0.050784s (num_starts 267; 0.0002s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.050969s (num_starts 144; 0.0004s/start)
main.2.: 0.052318s (num_starts 1; 0.0523s/start)
populate_loc_liveness.: 0.058337s (num_starts 2; 0.0292s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.071666s (num_starts 2462; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.074721s (num_starts 2462; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.07698s (num_starts 221; 0.0003s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.0826s (num_starts 221; 0.0004s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.092564s (num_starts 2462; 0.0000s/start)
avail_exprs_create_submap.: 0.119775s (num_starts 663; 0.0002s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.144948s (num_starts 221; 0.0007s/start)
tfg_postprocess_after_pointsto_analysis.: 0.149976s (num_starts 1; 0.1500s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.192493s (num_starts 1; 0.1925s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.340051s (num_starts 221; 0.0015s/start)
ftmap_run_pointsto_analysis.: 0.575968s (num_starts 1; 0.5760s/start)
parse_consts_db.: 6.78266s (num_starts 1; 6.7827s/start)
main.: 7.52522s (num_starts 1; 7.5252s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file couple5.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: foo...</MSG>
<MSG>0:22 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:23 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:23 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:23 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:24 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%17%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%20%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%20%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:24 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:24 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:24 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:24 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:24 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht18-prove_trivial4-prove14...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:33 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:33 : foo.A1 (d:1, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:33 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:33 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>0:33 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140277 : 1 { 0x1 } : BOOL                          : true
170533 : not(140277) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140274 : input.spec-%var-n-2 : BV:32               : 0
140614 : bvuge(140278, 140274) : BOOL              : true
170510 : not(140614) : BOOL                        : false
170534 : or(170533, 170510) : BOOL                 : false

ce =
=counter_example_begin z3.ce4 3f7d5da55a465c12b79ae3f43be31
=input.spec-%var-x-2
1 : Lambda296Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda297Var : BV:32
11 : Lambda298Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda299Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda331Var : BV:32
11 : Lambda332Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda333Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059788587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059788588; 1059788591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059788592; 3005945539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3005945540; 3005945543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3005945544; 3422552071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3422552072; 3422552075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3422552076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda313Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314Var : BV:32
11 : Lambda315Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda316Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3422552075 { 0xcc00000b -872415221 -1.131e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3005945543 { 0xb32b16c7 -1289021753 -1.33663260e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059788591 { 0x3f2b172f +1.33664500e255 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2249326309
=counter_example_end


failcond-expr = or(not(true), not(bvuge(0, input.spec-%var-n-2))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-n-2 : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>0:33 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140277 : 1 { 0x1 } : BOOL                          : true
170533 : not(140277) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140274 : input.spec-%var-n-2 : BV:32               : 0
140614 : bvuge(140278, 140274) : BOOL              : true
170510 : not(140614) : BOOL                        : false
170534 : or(170533, 170510) : BOOL                 : false

ce =
=counter_example_begin z3.ce4 3f7d5da55a465c12b79ae3f43be31
=input.spec-%var-x-2
1 : Lambda296Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda297Var : BV:32
11 : Lambda298Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda299Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda331Var : BV:32
11 : Lambda332Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda333Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059788587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059788588; 1059788591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059788592; 3005945539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3005945540; 3005945543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3005945544; 3422552071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3422552072; 3422552075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3422552076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda313Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314Var : BV:32
11 : Lambda315Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda316Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3422552075 { 0xcc00000b -872415221 -1.131e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3005945543 { 0xb32b16c7 -1289021753 -1.33663260e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059788591 { 0x3f2b172f +1.33664500e255 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2249326309
=counter_example_end


</MSG>
<MSG>0:33 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:33 : Chose (after CE propagation) product-TFG foo.A1 (d:1, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:33 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:33 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:33 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:33 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:33 : foo.A1 (d:1, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:33 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:33 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 1 paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 1 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 1 paths to src pc L3%20%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 1 feasible correlations for paths to src pc L3%20%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Adding node L3%10%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B3: Propagated 7 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : foo.A1.B3: Added the 7 propagated CEs at PC L3%10%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:33 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Added correlation to the product-TFG foo.A1.B3 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%17%bbentry ending at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Adding node L3%17%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B4: Propagated 7 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : foo.A1.B4: Added the 7 propagated CEs at PC L3%17%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:33 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Added correlation to the product-TFG foo.A1.B4 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%20%bbentry ending at L3%20%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%20%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Adding node L3%20%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%20%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140710 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140413 : input.dst.llvm-%n : BV:32                 : 2097152
140711 : bvult(140710, 140413) : BOOL              : true
140998 : not(140711) : BOOL                        : false
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2097152
140559 : bvuge(140556, 140557) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
172058 : bvuge(140278, 140571) : BOOL              : true
172062 : not(172058) : BOOL                        : false
172077 : andnot1(140559, 172062) : BOOL            : false
172079 : or(140998, 172077) : BOOL                 : false

ce =
=counter_example_begin z3.ce504 b5459dd3b0c130777550b56b239cb
=input.spec-%var-x-2
1 : Lambda7023Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7024Var : BV:32
18 : Lambda7025Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7026Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda7053Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7054Var : BV:32
18 : Lambda7055Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7056Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 128 ] -> 68, [ 129; 129 ] -> 221, [ 130; 130 ] -> 239, [ 131; 131 ] -> 211, [ 132; 4294967295 ] -> 68, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 453290851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 453290852; 453290855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 453290856; 2977759231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2977759232; 2977759235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2977759236; 3276112863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3276112864; 3276112867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3276112868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.llvm-%x
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda7038Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7039Var : BV:32
18 : Lambda7040Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7041Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2977759235 { 0xb17d0003 -1317208061 -1.97656285e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 453290855 { 0x1b04ab67 +1.3648078e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3276112867 { 0xc34583e3 -1018854429 -1.54308736e7 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda6876Var : BV:32
2 : Lambda6877Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda6880Var : BV:32
2 : Lambda6881Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda6885Var : BV:32
2 : Lambda6886Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
85856348
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), not(bvuge(0, input.spec-%var-m-1.L3%7%bbentry)))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : not(10) : BOOL
12 : andnot1(7, 11) : BOOL
13 : or(4, 12) : BOOL
</MSG>
<MSG>0:33 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%20%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Failed correlation of src pathset L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%20%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140710 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140413 : input.dst.llvm-%n : BV:32                 : 2097152
140711 : bvult(140710, 140413) : BOOL              : true
140998 : not(140711) : BOOL                        : false
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2097152
140559 : bvuge(140556, 140557) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
172058 : bvuge(140278, 140571) : BOOL              : true
172062 : not(172058) : BOOL                        : false
172077 : andnot1(140559, 172062) : BOOL            : false
172079 : or(140998, 172077) : BOOL                 : false

ce =
=counter_example_begin z3.ce504 b5459dd3b0c130777550b56b239cb
=input.spec-%var-x-2
1 : Lambda7023Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7024Var : BV:32
18 : Lambda7025Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7026Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda7053Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7054Var : BV:32
18 : Lambda7055Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7056Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 128 ] -> 68, [ 129; 129 ] -> 221, [ 130; 130 ] -> 239, [ 131; 131 ] -> 211, [ 132; 4294967295 ] -> 68, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 453290851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 453290852; 453290855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 453290856; 2977759231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2977759232; 2977759235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2977759236; 3276112863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3276112864; 3276112867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3276112868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.llvm-%x
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda7038Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7039Var : BV:32
18 : Lambda7040Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda7041Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2977759235 { 0xb17d0003 -1317208061 -1.97656285e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 453290855 { 0x1b04ab67 +1.3648078e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3276112867 { 0xc34583e3 -1018854429 -1.54308736e7 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda6876Var : BV:32
2 : Lambda6877Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda6880Var : BV:32
2 : Lambda6881Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda6885Var : BV:32
2 : Lambda6886Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
85856348
=counter_example_end


</MSG>
<MSG>0:33 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:1, s:0, sp: 5)...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:1, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140710 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140413 : input.dst.llvm-%n : BV:32                 : 2147483648
140711 : bvult(140710, 140413) : BOOL              : true
140998 : not(140711) : BOOL                        : false
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
140559 : bvuge(140556, 140557) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2155905028
172058 : bvuge(140278, 140571) : BOOL              : false
172086 : andnot1(140559, 172058) : BOOL            : false
172088 : or(140998, 172086) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce297 854d7b348962f7626ad179c7568c1c6
=input.spec-%var-x-2
1 : Lambda4421Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4422Var : BV:32
18 : Lambda4423Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4424Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda4421Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4422Var : BV:32
18 : Lambda4423Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4424Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 8199 ] -> 128, [ 8200; 8203 ] -> 0, [ 8204; 2101251 ] -> 128, [ 2101252; 2101254 ] -> 0, [ 2101255; 8407039 ] -> 128, [ 8407040; 8407040 ] -> 4, [ 8407041; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8200; 8203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8204; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2101256; 8407039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8407040; 8407043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8407044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.llvm-%m
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1311755958 { 0x4e2fceb6 +1.37349581e29 } : COUNT
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda4434Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4435Var : BV:32
18 : Lambda4436Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4437Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : ite(55, 2, 309) : BV:32
311 : lambda(52, 310) : FUNCTION[BV:32 -> BV:32]
312 : map(51, 311) : MAP[BV:32 -> BV:32]
313 : lambda(17, 312) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
314 : map(16, 313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
315 : sym_const(314) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1311755958 { 0x4e2fceb6 +1.37349581e29 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8203 { 0x200b +1.97787e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8407043 { 0x804803 +1.219762e130 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda4338Var : BV:32
2 : Lambda4339Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda4340Var : BV:32
2 : Lambda4341Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda4342Var : BV:32
2 : Lambda4343Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda4347Var : BV:32
2 : Lambda4348Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda4352Var : BV:32
2 : Lambda4353Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda4354Var : BV:32
2 : Lambda4355Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2796946253
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), bvuge(0, input.spec-%var-m-1.L3%7%bbentry))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : andnot1(7, 10) : BOOL
12 : or(4, 11) : BOOL
</MSG>
<MSG>0:33 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140710 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140413 : input.dst.llvm-%n : BV:32                 : 2147483648
140711 : bvult(140710, 140413) : BOOL              : true
140998 : not(140711) : BOOL                        : false
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
140559 : bvuge(140556, 140557) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2155905028
172058 : bvuge(140278, 140571) : BOOL              : false
172086 : andnot1(140559, 172058) : BOOL            : false
172088 : or(140998, 172086) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce297 854d7b348962f7626ad179c7568c1c6
=input.spec-%var-x-2
1 : Lambda4421Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4422Var : BV:32
18 : Lambda4423Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4424Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda4421Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4422Var : BV:32
18 : Lambda4423Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4424Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 8199 ] -> 128, [ 8200; 8203 ] -> 0, [ 8204; 2101251 ] -> 128, [ 2101252; 2101254 ] -> 0, [ 2101255; 8407039 ] -> 128, [ 8407040; 8407040 ] -> 4, [ 8407041; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8200; 8203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8204; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2101256; 8407039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8407040; 8407043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8407044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.llvm-%m
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1311755958 { 0x4e2fceb6 +1.37349581e29 } : COUNT
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda4434Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4435Var : BV:32
18 : Lambda4436Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4437Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : ite(55, 2, 309) : BV:32
311 : lambda(52, 310) : FUNCTION[BV:32 -> BV:32]
312 : map(51, 311) : MAP[BV:32 -> BV:32]
313 : lambda(17, 312) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
314 : map(16, 313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
315 : sym_const(314) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1311755958 { 0x4e2fceb6 +1.37349581e29 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8203 { 0x200b +1.97787e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8407043 { 0x804803 +1.219762e130 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda4338Var : BV:32
2 : Lambda4339Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda4340Var : BV:32
2 : Lambda4341Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda4342Var : BV:32
2 : Lambda4343Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda4347Var : BV:32
2 : Lambda4348Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda4352Var : BV:32
2 : Lambda4353Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda4354Var : BV:32
2 : Lambda4355Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2796946253
=counter_example_end


</MSG>
<MSG>0:33 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:1, s:0, sp: 5)...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B1: Propagated 7 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : foo.A1.B1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:33 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Added correlation to the product-TFG foo.A1.B1 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 13 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>0:33 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:33 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:33 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 13 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht21-prove_trivial15-prove6...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:38 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:38 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>0:41 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:41 : foo.A1.B1 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:41 : foo.A1.B1 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:41 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>0:41 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:41 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>0:41 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:41 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:41 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht14-prove_trivial10-prove4...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial2-prove9...</MSG>
<MSG>0:47 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:47 : foo.A1.B3 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:47 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:47 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>0:47 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:47 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>0:47 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:47 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:47 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht20-prove_trivial15-prove5...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial3-prove9...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:48 : foo.A1.B4 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:48 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:48 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>0:48 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:48 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>0:48 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:48 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:48 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht12-prove_trivial10-prove2...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:49 : foo.A1.B3 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:49 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:49 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : Attempting correlation of src pathset L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>0:49 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:49 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:49 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:49 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:49 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:49 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:49 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:49 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:49 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Propagated 7 out of 12 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:49 : foo.A1.B3.C1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:49 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:49 : Added correlation to the product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:49 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:49 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:49 : Constructed infer_invariants_dfa with initial worklist L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:49 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:50 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial0-prove9...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:53 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:54 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:54 : foo.A1.B3.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Considering 2 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Found 2 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>0:55 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 39 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:55 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140712 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140411 : input.dst.llvm-%m : BV:32                 : 1048576
140713 : bvult(140712, 140411) : BOOL              : true
217566 : not(140713) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 1048576
172058 : bvuge(140278, 140571) : BOOL              : false
140286 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 2130052
140616 : bvadd(140286, 140556) : BV:32             : 2130053
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
223784 : bvuge(140616, 140557) : BOOL              : false
224335 : andnot2(172058, 223784) : BOOL            : false
224338 : or(217566, 224335) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce3766 964a5266bbfc7fa521493bb047b49
=input.spec-%var-x-2
1 : Lambda28798Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28799Var : BV:32
18 : Lambda28800Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28801Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
82 : eq(80, 81) : BOOL
83 : 14 { 0xe } : BV:8
84 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
85 : eq(80, 84) : BOOL
86 : 64 { 0x40 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : eq(91, 84) : BOOL
94 : ite(93, 86, 87) : BV:8
95 : ite(92, 83, 94) : BV:8
96 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : ite(99, 86, 87) : BV:8
101 : ite(98, 83, 100) : BV:8
102 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 83, 106) : BV:8
108 : bvconcat(89, 95, 101, 107) : BV:32
109 : bvadd(75, 77, 108) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : ite(111, 86, 87) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 77, 108) : BV:32
116 : eq(115, 81) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 86, 87) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 77, 108) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 83, 124) : BV:8
126 : bvadd(77, 108) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : ite(128, 86, 87) : BV:8
130 : ite(127, 83, 129) : BV:8
131 : bvconcat(113, 119, 125, 130) : BV:32
132 : ite(55, 2, 131) : BV:32
133 : ite(74, 131, 132) : BV:32
134 : ite(55, 2, 133) : BV:32
135 : lambda(52, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(51, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda28824Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28825Var : BV:32
18 : Lambda28826Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28827Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
63 : eq(61, 62) : BOOL
64 : 14 { 0xe } : BV:8
65 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
66 : eq(61, 65) : BOOL
67 : 64 { 0x40 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : eq(72, 65) : BOOL
75 : ite(74, 67, 68) : BV:8
76 : ite(73, 64, 75) : BV:8
77 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
78 : bvadd(77, 60) : BV:32
79 : eq(78, 62) : BOOL
80 : eq(78, 65) : BOOL
81 : ite(80, 67, 68) : BV:8
82 : ite(79, 64, 81) : BV:8
83 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
84 : bvadd(83, 60) : BV:32
85 : eq(84, 62) : BOOL
86 : eq(84, 65) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 64, 87) : BV:8
89 : bvconcat(70, 76, 82, 88) : BV:32
90 : bvadd(56, 58, 89) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 65) : BOOL
93 : ite(92, 67, 68) : BV:8
94 : ite(91, 64, 93) : BV:8
95 : 2 { 0x2 +1.23e129 } : BV:32
96 : bvadd(95, 58, 89) : BV:32
97 : eq(96, 62) : BOOL
98 : eq(96, 65) : BOOL
99 : ite(98, 67, 68) : BV:8
100 : ite(97, 64, 99) : BV:8
101 : 1 { 0x1 +1.11e129 } : BV:32
102 : bvadd(101, 58, 89) : BV:32
103 : eq(102, 62) : BOOL
104 : eq(102, 65) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 64, 105) : BV:8
107 : bvadd(58, 89) : BV:32
108 : eq(107, 62) : BOOL
109 : eq(107, 65) : BOOL
110 : ite(109, 67, 68) : BV:8
111 : ite(108, 64, 110) : BV:8
112 : bvconcat(94, 100, 106, 111) : BV:32
113 : ite(55, 2, 112) : BV:32
114 : lambda(52, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(51, 114) : MAP[BV:32 -> BV:32]
116 : lambda(17, 115) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
117 : map(16, 116) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
118 : sym_const(117) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2231501921 ] -> 0, [ 2231501922; 2231501922 ] -> 64, [ 2231501923; 2231501923 ] -> 14, [ 2231501924; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2752515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2752516; 2752519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2752520; 269092863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 269092864; 269092867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 269092868; 2232426623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2232426624; 2232426627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2232426628; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2752516 { 0x2a0004 +1.32812547e129 } : BV:32
=input.dst.llvm-%m
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 269092864 { 0x100a0800 +1.7836914e161 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2232426624 { 0x85102080 -2062540672 -1.12599182e139 } : BV:32
=input.dst.llvm-%x
1 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 2130052 { 0x208084 +1.25392198e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda28811Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28812Var : BV:32
18 : Lambda28813Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28814Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
82 : eq(80, 81) : BOOL
83 : 14 { 0xe } : BV:8
84 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
85 : eq(80, 84) : BOOL
86 : 64 { 0x40 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : eq(91, 84) : BOOL
94 : ite(93, 86, 87) : BV:8
95 : ite(92, 83, 94) : BV:8
96 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : ite(99, 86, 87) : BV:8
101 : ite(98, 83, 100) : BV:8
102 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 83, 106) : BV:8
108 : bvconcat(89, 95, 101, 107) : BV:32
109 : bvadd(75, 77, 108) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : ite(111, 86, 87) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 77, 108) : BV:32
116 : eq(115, 81) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 86, 87) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 77, 108) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 83, 124) : BV:8
126 : bvadd(77, 108) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : ite(128, 86, 87) : BV:8
130 : ite(127, 83, 129) : BV:8
131 : bvconcat(113, 119, 125, 130) : BV:32
132 : ite(55, 2, 131) : BV:32
133 : ite(74, 131, 132) : BV:32
134 : ite(55, 2, 133) : BV:32
135 : ite(55, 2, 134) : BV:32
136 : lambda(52, 135) : FUNCTION[BV:32 -> BV:32]
137 : map(51, 136) : MAP[BV:32 -> BV:32]
138 : lambda(17, 137) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
139 : map(16, 138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140 : sym_const(139) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2130052 { 0x208084 +1.25392198e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 269092864 { 0x100a0800 +1.7836914e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 269092867 { 0x100a0803 +1.7836949e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2232426624 { 0x85102080 -2062540672 -1.12599182e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2232426627 { 0x85102083 -2062540669 -1.12599217e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2752516 { 0x2a0004 +1.32812547e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2752519 { 0x2a0007 +1.32812583e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda28658Var : BV:32
2 : Lambda28659Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
55 : eq(53, 54) : BOOL
56 : 14 { 0xe } : BV:8
57 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
58 : eq(53, 57) : BOOL
59 : 64 { 0x40 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : eq(64, 57) : BOOL
67 : ite(66, 59, 60) : BV:8
68 : ite(65, 56, 67) : BV:8
69 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : ite(72, 59, 60) : BV:8
74 : ite(71, 56, 73) : BV:8
75 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : bvconcat(62, 68, 74, 80) : BV:32
82 : bvadd(48, 50, 81) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : ite(84, 59, 60) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : bvadd(87, 50, 81) : BV:32
89 : eq(88, 54) : BOOL
90 : eq(88, 57) : BOOL
91 : ite(90, 59, 60) : BV:8
92 : ite(89, 56, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 50, 81) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : bvadd(50, 81) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : ite(101, 59, 60) : BV:8
103 : ite(100, 56, 102) : BV:8
104 : bvconcat(86, 92, 98, 103) : BV:32
105 : ite(6, 3, 104) : BV:32
106 : ite(47, 104, 105) : BV:32
107 : ite(6, 3, 106) : BV:32
108 : lambda(1, 2, 107) : FUNCTION[BV:32,BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda28665Var : BV:32
2 : Lambda28666Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
14 : eq(12, 13) : BOOL
15 : 14 { 0xe } : BV:8
16 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
17 : eq(12, 16) : BOOL
18 : 64 { 0x40 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : eq(23, 16) : BOOL
26 : ite(25, 18, 19) : BV:8
27 : ite(24, 15, 26) : BV:8
28 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
29 : bvadd(28, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 16) : BOOL
32 : ite(31, 18, 19) : BV:8
33 : ite(30, 15, 32) : BV:8
34 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : ite(37, 18, 19) : BV:8
39 : ite(36, 15, 38) : BV:8
40 : bvconcat(21, 27, 33, 39) : BV:32
41 : bvadd(7, 9, 40) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 16) : BOOL
44 : ite(43, 18, 19) : BV:8
45 : ite(42, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 9, 40) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : ite(49, 18, 19) : BV:8
51 : ite(48, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 9, 40) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : ite(55, 18, 19) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : bvadd(9, 40) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : ite(60, 18, 19) : BV:8
62 : ite(59, 15, 61) : BV:8
63 : bvconcat(45, 51, 57, 62) : BV:32
64 : ite(6, 3, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda28660Var : BV:32
2 : Lambda28661Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda28667Var : BV:32
2 : Lambda28668Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda28672Var : BV:32
2 : Lambda28673Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
55 : eq(53, 54) : BOOL
56 : 14 { 0xe } : BV:8
57 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
58 : eq(53, 57) : BOOL
59 : 64 { 0x40 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : eq(64, 57) : BOOL
67 : ite(66, 59, 60) : BV:8
68 : ite(65, 56, 67) : BV:8
69 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : ite(72, 59, 60) : BV:8
74 : ite(71, 56, 73) : BV:8
75 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : bvconcat(62, 68, 74, 80) : BV:32
82 : bvadd(48, 50, 81) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : ite(84, 59, 60) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : bvadd(87, 50, 81) : BV:32
89 : eq(88, 54) : BOOL
90 : eq(88, 57) : BOOL
91 : ite(90, 59, 60) : BV:8
92 : ite(89, 56, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 50, 81) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : bvadd(50, 81) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : ite(101, 59, 60) : BV:8
103 : ite(100, 56, 102) : BV:8
104 : bvconcat(86, 92, 98, 103) : BV:32
105 : ite(6, 3, 104) : BV:32
106 : ite(47, 104, 105) : BV:32
107 : ite(6, 3, 106) : BV:32
108 : ite(6, 3, 107) : BV:32
109 : lambda(1, 2, 108) : FUNCTION[BV:32,BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda28674Var : BV:32
2 : Lambda28675Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3225615549
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)), andnot2(bvuge(0, input.spec-%var-m-1.L3%7%bbentry), bvuge(bvadd(1, input.spec-%var-i-1.L3%7%bbentry), input.spec-%var-n-1.L3%7%bbentry))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.spec-%var-m-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : input.spec-%var-i-1.L3%7%bbentry : BV:32
10 : bvadd(8, 9) : BV:32
11 : input.spec-%var-n-1.L3%7%bbentry : BV:32
12 : bvuge(10, 11) : BOOL
13 : andnot2(7, 12) : BOOL
14 : or(4, 13) : BOOL
</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140712 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140411 : input.dst.llvm-%m : BV:32                 : 1048576
140713 : bvult(140712, 140411) : BOOL              : true
217566 : not(140713) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 1048576
172058 : bvuge(140278, 140571) : BOOL              : false
140286 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 2130052
140616 : bvadd(140286, 140556) : BV:32             : 2130053
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
223784 : bvuge(140616, 140557) : BOOL              : false
224335 : andnot2(172058, 223784) : BOOL            : false
224338 : or(217566, 224335) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce3766 964a5266bbfc7fa521493bb047b49
=input.spec-%var-x-2
1 : Lambda28798Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28799Var : BV:32
18 : Lambda28800Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28801Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
82 : eq(80, 81) : BOOL
83 : 14 { 0xe } : BV:8
84 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
85 : eq(80, 84) : BOOL
86 : 64 { 0x40 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : eq(91, 84) : BOOL
94 : ite(93, 86, 87) : BV:8
95 : ite(92, 83, 94) : BV:8
96 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : ite(99, 86, 87) : BV:8
101 : ite(98, 83, 100) : BV:8
102 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 83, 106) : BV:8
108 : bvconcat(89, 95, 101, 107) : BV:32
109 : bvadd(75, 77, 108) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : ite(111, 86, 87) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 77, 108) : BV:32
116 : eq(115, 81) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 86, 87) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 77, 108) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 83, 124) : BV:8
126 : bvadd(77, 108) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : ite(128, 86, 87) : BV:8
130 : ite(127, 83, 129) : BV:8
131 : bvconcat(113, 119, 125, 130) : BV:32
132 : ite(55, 2, 131) : BV:32
133 : ite(74, 131, 132) : BV:32
134 : ite(55, 2, 133) : BV:32
135 : lambda(52, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(51, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda28824Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28825Var : BV:32
18 : Lambda28826Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28827Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
63 : eq(61, 62) : BOOL
64 : 14 { 0xe } : BV:8
65 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
66 : eq(61, 65) : BOOL
67 : 64 { 0x40 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : eq(72, 65) : BOOL
75 : ite(74, 67, 68) : BV:8
76 : ite(73, 64, 75) : BV:8
77 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
78 : bvadd(77, 60) : BV:32
79 : eq(78, 62) : BOOL
80 : eq(78, 65) : BOOL
81 : ite(80, 67, 68) : BV:8
82 : ite(79, 64, 81) : BV:8
83 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
84 : bvadd(83, 60) : BV:32
85 : eq(84, 62) : BOOL
86 : eq(84, 65) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 64, 87) : BV:8
89 : bvconcat(70, 76, 82, 88) : BV:32
90 : bvadd(56, 58, 89) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 65) : BOOL
93 : ite(92, 67, 68) : BV:8
94 : ite(91, 64, 93) : BV:8
95 : 2 { 0x2 +1.23e129 } : BV:32
96 : bvadd(95, 58, 89) : BV:32
97 : eq(96, 62) : BOOL
98 : eq(96, 65) : BOOL
99 : ite(98, 67, 68) : BV:8
100 : ite(97, 64, 99) : BV:8
101 : 1 { 0x1 +1.11e129 } : BV:32
102 : bvadd(101, 58, 89) : BV:32
103 : eq(102, 62) : BOOL
104 : eq(102, 65) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 64, 105) : BV:8
107 : bvadd(58, 89) : BV:32
108 : eq(107, 62) : BOOL
109 : eq(107, 65) : BOOL
110 : ite(109, 67, 68) : BV:8
111 : ite(108, 64, 110) : BV:8
112 : bvconcat(94, 100, 106, 111) : BV:32
113 : ite(55, 2, 112) : BV:32
114 : lambda(52, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(51, 114) : MAP[BV:32 -> BV:32]
116 : lambda(17, 115) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
117 : map(16, 116) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
118 : sym_const(117) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2231501921 ] -> 0, [ 2231501922; 2231501922 ] -> 64, [ 2231501923; 2231501923 ] -> 14, [ 2231501924; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2752515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2752516; 2752519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2752520; 269092863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 269092864; 269092867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 269092868; 2232426623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2232426624; 2232426627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2232426628; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2752516 { 0x2a0004 +1.32812547e129 } : BV:32
=input.dst.llvm-%m
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 269092864 { 0x100a0800 +1.7836914e161 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2232426624 { 0x85102080 -2062540672 -1.12599182e139 } : BV:32
=input.dst.llvm-%x
1 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 2130052 { 0x208084 +1.25392198e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda28811Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28812Var : BV:32
18 : Lambda28813Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28814Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
82 : eq(80, 81) : BOOL
83 : 14 { 0xe } : BV:8
84 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
85 : eq(80, 84) : BOOL
86 : 64 { 0x40 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(82, 83, 88) : BV:8
90 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : eq(91, 84) : BOOL
94 : ite(93, 86, 87) : BV:8
95 : ite(92, 83, 94) : BV:8
96 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : ite(99, 86, 87) : BV:8
101 : ite(98, 83, 100) : BV:8
102 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 83, 106) : BV:8
108 : bvconcat(89, 95, 101, 107) : BV:32
109 : bvadd(75, 77, 108) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : ite(111, 86, 87) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 77, 108) : BV:32
116 : eq(115, 81) : BOOL
117 : eq(115, 84) : BOOL
118 : ite(117, 86, 87) : BV:8
119 : ite(116, 83, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 77, 108) : BV:32
122 : eq(121, 81) : BOOL
123 : eq(121, 84) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 83, 124) : BV:8
126 : bvadd(77, 108) : BV:32
127 : eq(126, 81) : BOOL
128 : eq(126, 84) : BOOL
129 : ite(128, 86, 87) : BV:8
130 : ite(127, 83, 129) : BV:8
131 : bvconcat(113, 119, 125, 130) : BV:32
132 : ite(55, 2, 131) : BV:32
133 : ite(74, 131, 132) : BV:32
134 : ite(55, 2, 133) : BV:32
135 : ite(55, 2, 134) : BV:32
136 : lambda(52, 135) : FUNCTION[BV:32 -> BV:32]
137 : map(51, 136) : MAP[BV:32 -> BV:32]
138 : lambda(17, 137) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
139 : map(16, 138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140 : sym_const(139) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2130052 { 0x208084 +1.25392198e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 269092864 { 0x100a0800 +1.7836914e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 269092867 { 0x100a0803 +1.7836949e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2232426624 { 0x85102080 -2062540672 -1.12599182e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2232426627 { 0x85102083 -2062540669 -1.12599217e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2752516 { 0x2a0004 +1.32812547e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2752519 { 0x2a0007 +1.32812583e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda28658Var : BV:32
2 : Lambda28659Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
55 : eq(53, 54) : BOOL
56 : 14 { 0xe } : BV:8
57 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
58 : eq(53, 57) : BOOL
59 : 64 { 0x40 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : eq(64, 57) : BOOL
67 : ite(66, 59, 60) : BV:8
68 : ite(65, 56, 67) : BV:8
69 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : ite(72, 59, 60) : BV:8
74 : ite(71, 56, 73) : BV:8
75 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : bvconcat(62, 68, 74, 80) : BV:32
82 : bvadd(48, 50, 81) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : ite(84, 59, 60) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : bvadd(87, 50, 81) : BV:32
89 : eq(88, 54) : BOOL
90 : eq(88, 57) : BOOL
91 : ite(90, 59, 60) : BV:8
92 : ite(89, 56, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 50, 81) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : bvadd(50, 81) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : ite(101, 59, 60) : BV:8
103 : ite(100, 56, 102) : BV:8
104 : bvconcat(86, 92, 98, 103) : BV:32
105 : ite(6, 3, 104) : BV:32
106 : ite(47, 104, 105) : BV:32
107 : ite(6, 3, 106) : BV:32
108 : lambda(1, 2, 107) : FUNCTION[BV:32,BV:32 -> BV:32]
109 : sym_const(108) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda28665Var : BV:32
2 : Lambda28666Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
14 : eq(12, 13) : BOOL
15 : 14 { 0xe } : BV:8
16 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
17 : eq(12, 16) : BOOL
18 : 64 { 0x40 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : eq(23, 16) : BOOL
26 : ite(25, 18, 19) : BV:8
27 : ite(24, 15, 26) : BV:8
28 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
29 : bvadd(28, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 16) : BOOL
32 : ite(31, 18, 19) : BV:8
33 : ite(30, 15, 32) : BV:8
34 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : ite(37, 18, 19) : BV:8
39 : ite(36, 15, 38) : BV:8
40 : bvconcat(21, 27, 33, 39) : BV:32
41 : bvadd(7, 9, 40) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 16) : BOOL
44 : ite(43, 18, 19) : BV:8
45 : ite(42, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 9, 40) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : ite(49, 18, 19) : BV:8
51 : ite(48, 15, 50) : BV:8
52 : 1 { 0x1 +1.11e129 } : BV:32
53 : bvadd(52, 9, 40) : BV:32
54 : eq(53, 13) : BOOL
55 : eq(53, 16) : BOOL
56 : ite(55, 18, 19) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : bvadd(9, 40) : BV:32
59 : eq(58, 13) : BOOL
60 : eq(58, 16) : BOOL
61 : ite(60, 18, 19) : BV:8
62 : ite(59, 15, 61) : BV:8
63 : bvconcat(45, 51, 57, 62) : BV:32
64 : ite(6, 3, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda28660Var : BV:32
2 : Lambda28661Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda28667Var : BV:32
2 : Lambda28668Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda28672Var : BV:32
2 : Lambda28673Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2222981715 { 0x84800253 -2071985581 -1.7092e138 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2231501923 { 0x85020463 -2063465373 -1.1575887e139 } : BV:32
55 : eq(53, 54) : BOOL
56 : 14 { 0xe } : BV:8
57 : 2231501922 { 0x85020462 -2063465374 -1.1575875e139 } : BV:32
58 : eq(53, 57) : BOOL
59 : 64 { 0x40 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : 2222981714 { 0x84800252 -2071985582 -1.7081e138 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : eq(64, 57) : BOOL
67 : ite(66, 59, 60) : BV:8
68 : ite(65, 56, 67) : BV:8
69 : 2222981713 { 0x84800251 -2071985583 -1.7069e138 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : ite(72, 59, 60) : BV:8
74 : ite(71, 56, 73) : BV:8
75 : 2222981712 { 0x84800250 -2071985584 -1.7057e138 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : bvconcat(62, 68, 74, 80) : BV:32
82 : bvadd(48, 50, 81) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : ite(84, 59, 60) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : bvadd(87, 50, 81) : BV:32
89 : eq(88, 54) : BOOL
90 : eq(88, 57) : BOOL
91 : ite(90, 59, 60) : BV:8
92 : ite(89, 56, 91) : BV:8
93 : 1 { 0x1 +1.11e129 } : BV:32
94 : bvadd(93, 50, 81) : BV:32
95 : eq(94, 54) : BOOL
96 : eq(94, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : bvadd(50, 81) : BV:32
100 : eq(99, 54) : BOOL
101 : eq(99, 57) : BOOL
102 : ite(101, 59, 60) : BV:8
103 : ite(100, 56, 102) : BV:8
104 : bvconcat(86, 92, 98, 103) : BV:32
105 : ite(6, 3, 104) : BV:32
106 : ite(47, 104, 105) : BV:32
107 : ite(6, 3, 106) : BV:32
108 : ite(6, 3, 107) : BV:32
109 : lambda(1, 2, 108) : FUNCTION[BV:32,BV:32 -> BV:32]
110 : sym_const(109) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda28674Var : BV:32
2 : Lambda28675Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1048577 { 0x100001 +1.12500011e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3225615549
=counter_example_end


</MSG>
<MSG>0:55 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14)...</MSG>
<MSG>0:55 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 39 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:55 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Propagated 3 out of 23 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140712 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 1
140411 : input.dst.llvm-%m : BV:32                 : 1
140713 : bvult(140712, 140411) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 1
172058 : bvuge(140278, 140571) : BOOL              : false
217780 : or(140713, 172058) : BOOL                 : false

ce =
=counter_example_begin z3.ce3840 9ad220d3a6bdddd323ccf46a3f5e906f
=input.spec-%var-x-2
1 : Lambda15110Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15111Var : BV:32
18 : Lambda15112Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda15113Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : bvmul(8, 51) : BV:32
75 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
76 : bvmul(8, 17) : BV:32
77 : bvadd(75, 76) : BV:32
78 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
79 : eq(77, 78) : BOOL
80 : 104 { 0x68 } : BV:8
81 : eq(77, 75) : BOOL
82 : 127 { 0x7f } : BV:8
83 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
84 : eq(77, 83) : BOOL
85 : 110 { 0x6e } : BV:8
86 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
87 : eq(77, 86) : BOOL
88 : 63 { 0x3f } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : bvadd(83, 76) : BV:32
95 : eq(94, 78) : BOOL
96 : eq(94, 75) : BOOL
97 : eq(94, 83) : BOOL
98 : eq(94, 86) : BOOL
99 : ite(98, 88, 89) : BV:8
100 : ite(97, 85, 99) : BV:8
101 : ite(96, 82, 100) : BV:8
102 : ite(95, 80, 101) : BV:8
103 : bvadd(86, 76) : BV:32
104 : eq(103, 78) : BOOL
105 : eq(103, 75) : BOOL
106 : eq(103, 83) : BOOL
107 : eq(103, 86) : BOOL
108 : ite(107, 88, 89) : BV:8
109 : ite(106, 85, 108) : BV:8
110 : ite(105, 82, 109) : BV:8
111 : ite(104, 80, 110) : BV:8
112 : bvadd(78, 76) : BV:32
113 : eq(112, 78) : BOOL
114 : eq(112, 75) : BOOL
115 : eq(112, 83) : BOOL
116 : eq(112, 86) : BOOL
117 : ite(116, 88, 89) : BV:8
118 : ite(115, 85, 117) : BV:8
119 : ite(114, 82, 118) : BV:8
120 : ite(113, 80, 119) : BV:8
121 : bvconcat(93, 102, 111, 120) : BV:32
122 : bvadd(4, 74, 121) : BV:32
123 : eq(122, 78) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 83) : BOOL
126 : eq(122, 86) : BOOL
127 : ite(126, 88, 89) : BV:8
128 : ite(125, 85, 127) : BV:8
129 : ite(124, 82, 128) : BV:8
130 : ite(123, 80, 129) : BV:8
131 : bvadd(40, 74, 121) : BV:32
132 : eq(131, 78) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 83) : BOOL
135 : eq(131, 86) : BOOL
136 : ite(135, 88, 89) : BV:8
137 : ite(134, 85, 136) : BV:8
138 : ite(133, 82, 137) : BV:8
139 : ite(132, 80, 138) : BV:8
140 : bvadd(36, 74, 121) : BV:32
141 : eq(140, 78) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 83) : BOOL
144 : eq(140, 86) : BOOL
145 : ite(144, 88, 89) : BV:8
146 : ite(143, 85, 145) : BV:8
147 : ite(142, 82, 146) : BV:8
148 : ite(141, 80, 147) : BV:8
149 : bvadd(74, 121) : BV:32
150 : eq(149, 78) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 83) : BOOL
153 : eq(149, 86) : BOOL
154 : ite(153, 88, 89) : BV:8
155 : ite(152, 85, 154) : BV:8
156 : ite(151, 82, 155) : BV:8
157 : ite(150, 80, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(54, 2, 158) : BV:32
160 : ite(73, 158, 159) : BV:32
161 : ite(54, 2, 160) : BV:32
162 : lambda(51, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(50, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-2
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda15136Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15137Var : BV:32
18 : Lambda15138Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda15139Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : bvmul(8, 51) : BV:32
56 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
57 : bvmul(8, 17) : BV:32
58 : bvadd(56, 57) : BV:32
59 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
60 : eq(58, 59) : BOOL
61 : 104 { 0x68 } : BV:8
62 : eq(58, 56) : BOOL
63 : 127 { 0x7f } : BV:8
64 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
65 : eq(58, 64) : BOOL
66 : 110 { 0x6e } : BV:8
67 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
68 : eq(58, 67) : BOOL
69 : 63 { 0x3f } : BV:8
70 : 0 { 0x0 } : BV:8
71 : ite(68, 69, 70) : BV:8
72 : ite(65, 66, 71) : BV:8
73 : ite(62, 63, 72) : BV:8
74 : ite(60, 61, 73) : BV:8
75 : bvadd(64, 57) : BV:32
76 : eq(75, 59) : BOOL
77 : eq(75, 56) : BOOL
78 : eq(75, 64) : BOOL
79 : eq(75, 67) : BOOL
80 : ite(79, 69, 70) : BV:8
81 : ite(78, 66, 80) : BV:8
82 : ite(77, 63, 81) : BV:8
83 : ite(76, 61, 82) : BV:8
84 : bvadd(67, 57) : BV:32
85 : eq(84, 59) : BOOL
86 : eq(84, 56) : BOOL
87 : eq(84, 64) : BOOL
88 : eq(84, 67) : BOOL
89 : ite(88, 69, 70) : BV:8
90 : ite(87, 66, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(85, 61, 91) : BV:8
93 : bvadd(59, 57) : BV:32
94 : eq(93, 59) : BOOL
95 : eq(93, 56) : BOOL
96 : eq(93, 64) : BOOL
97 : eq(93, 67) : BOOL
98 : ite(97, 69, 70) : BV:8
99 : ite(96, 66, 98) : BV:8
100 : ite(95, 63, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : bvconcat(74, 83, 92, 101) : BV:32
103 : bvadd(4, 55, 102) : BV:32
104 : eq(103, 59) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 64) : BOOL
107 : eq(103, 67) : BOOL
108 : ite(107, 69, 70) : BV:8
109 : ite(106, 66, 108) : BV:8
110 : ite(105, 63, 109) : BV:8
111 : ite(104, 61, 110) : BV:8
112 : bvadd(40, 55, 102) : BV:32
113 : eq(112, 59) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 64) : BOOL
116 : eq(112, 67) : BOOL
117 : ite(116, 69, 70) : BV:8
118 : ite(115, 66, 117) : BV:8
119 : ite(114, 63, 118) : BV:8
120 : ite(113, 61, 119) : BV:8
121 : bvadd(36, 55, 102) : BV:32
122 : eq(121, 59) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 64) : BOOL
125 : eq(121, 67) : BOOL
126 : ite(125, 69, 70) : BV:8
127 : ite(124, 66, 126) : BV:8
128 : ite(123, 63, 127) : BV:8
129 : ite(122, 61, 128) : BV:8
130 : bvadd(55, 102) : BV:32
131 : eq(130, 59) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 64) : BOOL
134 : eq(130, 67) : BOOL
135 : ite(134, 69, 70) : BV:8
136 : ite(133, 66, 135) : BV:8
137 : ite(132, 63, 136) : BV:8
138 : ite(131, 61, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(54, 2, 139) : BV:32
141 : lambda(51, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(50, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 104, [ 2147483649; 2147483649 ] -> 63, [ 2147483650; 2147483650 ] -> 110, [ 2147483651; 2147483651 ] -> 127, [ 2147483652; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1560853687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1560853688; 1560853691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1560853692; 1638490075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1638490076; 1638490079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1638490080; 2645227667 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645227668; 2645227671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2645227672; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2645227668 { 0x9daaf894 -1649739628 -1.33571100e188 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1560853688 { 0x5d08bcb8 +1.6825923e59 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1638490076 { 0x61a95fdc +1.32323789e68 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-m-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1560853688 { 0x5d08bcb8 +1.6825923e59 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1560853691 { 0x5d08bcbb +1.6825959e59 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1638490076 { 0x61a95fdc +1.32323789e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1638490079 { 0x61a95fdf +1.32323825e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2645227668 { 0x9daaf894 -1649739628 -1.33571100e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2645227671 { 0x9daaf897 -1649739625 -1.33571135e188 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda15019Var : BV:32
2 : Lambda15020Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : bvmul(12, 2) : BV:32
48 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
49 : bvmul(12, 1) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 104 { 0x68 } : BV:8
54 : eq(50, 48) : BOOL
55 : 127 { 0x7f } : BV:8
56 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
57 : eq(50, 56) : BOOL
58 : 110 { 0x6e } : BV:8
59 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
60 : eq(50, 59) : BOOL
61 : 63 { 0x3f } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(57, 58, 63) : BV:8
65 : ite(54, 55, 64) : BV:8
66 : ite(52, 53, 65) : BV:8
67 : bvadd(56, 49) : BV:32
68 : eq(67, 51) : BOOL
69 : eq(67, 48) : BOOL
70 : eq(67, 56) : BOOL
71 : eq(67, 59) : BOOL
72 : ite(71, 61, 62) : BV:8
73 : ite(70, 58, 72) : BV:8
74 : ite(69, 55, 73) : BV:8
75 : ite(68, 53, 74) : BV:8
76 : bvadd(59, 49) : BV:32
77 : eq(76, 51) : BOOL
78 : eq(76, 48) : BOOL
79 : eq(76, 56) : BOOL
80 : eq(76, 59) : BOOL
81 : ite(80, 61, 62) : BV:8
82 : ite(79, 58, 81) : BV:8
83 : ite(78, 55, 82) : BV:8
84 : ite(77, 53, 83) : BV:8
85 : bvadd(51, 49) : BV:32
86 : eq(85, 51) : BOOL
87 : eq(85, 48) : BOOL
88 : eq(85, 56) : BOOL
89 : eq(85, 59) : BOOL
90 : ite(89, 61, 62) : BV:8
91 : ite(88, 58, 90) : BV:8
92 : ite(87, 55, 91) : BV:8
93 : ite(86, 53, 92) : BV:8
94 : bvconcat(66, 75, 84, 93) : BV:32
95 : bvadd(8, 47, 94) : BV:32
96 : eq(95, 51) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 56) : BOOL
99 : eq(95, 59) : BOOL
100 : ite(99, 61, 62) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 55, 101) : BV:8
103 : ite(96, 53, 102) : BV:8
104 : bvadd(36, 47, 94) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 56) : BOOL
108 : eq(104, 59) : BOOL
109 : ite(108, 61, 62) : BV:8
110 : ite(107, 58, 109) : BV:8
111 : ite(106, 55, 110) : BV:8
112 : ite(105, 53, 111) : BV:8
113 : bvadd(32, 47, 94) : BV:32
114 : eq(113, 51) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 56) : BOOL
117 : eq(113, 59) : BOOL
118 : ite(117, 61, 62) : BV:8
119 : ite(116, 58, 118) : BV:8
120 : ite(115, 55, 119) : BV:8
121 : ite(114, 53, 120) : BV:8
122 : bvadd(47, 94) : BV:32
123 : eq(122, 51) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 56) : BOOL
126 : eq(122, 59) : BOOL
127 : ite(126, 61, 62) : BV:8
128 : ite(125, 58, 127) : BV:8
129 : ite(124, 55, 128) : BV:8
130 : ite(123, 53, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(46, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda15026Var : BV:32
2 : Lambda15027Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 104 { 0x68 } : BV:8
16 : eq(12, 10) : BOOL
17 : 127 { 0x7f } : BV:8
18 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 110 { 0x6e } : BV:8
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : bvadd(18, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 10) : BOOL
32 : eq(29, 18) : BOOL
33 : eq(29, 21) : BOOL
34 : ite(33, 23, 24) : BV:8
35 : ite(32, 20, 34) : BV:8
36 : ite(31, 17, 35) : BV:8
37 : ite(30, 15, 36) : BV:8
38 : bvadd(21, 11) : BV:32
39 : eq(38, 13) : BOOL
40 : eq(38, 10) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : ite(42, 23, 24) : BV:8
44 : ite(41, 20, 43) : BV:8
45 : ite(40, 17, 44) : BV:8
46 : ite(39, 15, 45) : BV:8
47 : bvadd(13, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 10) : BOOL
50 : eq(47, 18) : BOOL
51 : eq(47, 21) : BOOL
52 : ite(51, 23, 24) : BV:8
53 : ite(50, 20, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 15, 54) : BV:8
56 : bvconcat(28, 37, 46, 55) : BV:32
57 : bvadd(7, 9, 56) : BV:32
58 : eq(57, 13) : BOOL
59 : eq(57, 10) : BOOL
60 : eq(57, 18) : BOOL
61 : eq(57, 21) : BOOL
62 : ite(61, 23, 24) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 17, 63) : BV:8
65 : ite(58, 15, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 9, 56) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 10) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : ite(71, 23, 24) : BV:8
73 : ite(70, 20, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 15, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 9, 56) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 10) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : ite(81, 23, 24) : BV:8
83 : ite(80, 20, 82) : BV:8
84 : ite(79, 17, 83) : BV:8
85 : ite(78, 15, 84) : BV:8
86 : bvadd(9, 56) : BV:32
87 : eq(86, 13) : BOOL
88 : eq(86, 10) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : ite(90, 23, 24) : BV:8
92 : ite(89, 20, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 15, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(6, 3, 95) : BV:32
97 : lambda(1, 2, 96) : FUNCTION[BV:32,BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda15021Var : BV:32
2 : Lambda15022Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda15028Var : BV:32
2 : Lambda15029Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda15033Var : BV:32
2 : Lambda15034Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : bvmul(12, 2) : BV:32
48 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
49 : bvmul(12, 1) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 104 { 0x68 } : BV:8
54 : eq(50, 48) : BOOL
55 : 127 { 0x7f } : BV:8
56 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
57 : eq(50, 56) : BOOL
58 : 110 { 0x6e } : BV:8
59 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
60 : eq(50, 59) : BOOL
61 : 63 { 0x3f } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(57, 58, 63) : BV:8
65 : ite(54, 55, 64) : BV:8
66 : ite(52, 53, 65) : BV:8
67 : bvadd(56, 49) : BV:32
68 : eq(67, 51) : BOOL
69 : eq(67, 48) : BOOL
70 : eq(67, 56) : BOOL
71 : eq(67, 59) : BOOL
72 : ite(71, 61, 62) : BV:8
73 : ite(70, 58, 72) : BV:8
74 : ite(69, 55, 73) : BV:8
75 : ite(68, 53, 74) : BV:8
76 : bvadd(59, 49) : BV:32
77 : eq(76, 51) : BOOL
78 : eq(76, 48) : BOOL
79 : eq(76, 56) : BOOL
80 : eq(76, 59) : BOOL
81 : ite(80, 61, 62) : BV:8
82 : ite(79, 58, 81) : BV:8
83 : ite(78, 55, 82) : BV:8
84 : ite(77, 53, 83) : BV:8
85 : bvadd(51, 49) : BV:32
86 : eq(85, 51) : BOOL
87 : eq(85, 48) : BOOL
88 : eq(85, 56) : BOOL
89 : eq(85, 59) : BOOL
90 : ite(89, 61, 62) : BV:8
91 : ite(88, 58, 90) : BV:8
92 : ite(87, 55, 91) : BV:8
93 : ite(86, 53, 92) : BV:8
94 : bvconcat(66, 75, 84, 93) : BV:32
95 : bvadd(8, 47, 94) : BV:32
96 : eq(95, 51) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 56) : BOOL
99 : eq(95, 59) : BOOL
100 : ite(99, 61, 62) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 55, 101) : BV:8
103 : ite(96, 53, 102) : BV:8
104 : bvadd(36, 47, 94) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 56) : BOOL
108 : eq(104, 59) : BOOL
109 : ite(108, 61, 62) : BV:8
110 : ite(107, 58, 109) : BV:8
111 : ite(106, 55, 110) : BV:8
112 : ite(105, 53, 111) : BV:8
113 : bvadd(32, 47, 94) : BV:32
114 : eq(113, 51) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 56) : BOOL
117 : eq(113, 59) : BOOL
118 : ite(117, 61, 62) : BV:8
119 : ite(116, 58, 118) : BV:8
120 : ite(115, 55, 119) : BV:8
121 : ite(114, 53, 120) : BV:8
122 : bvadd(47, 94) : BV:32
123 : eq(122, 51) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 56) : BOOL
126 : eq(122, 59) : BOOL
127 : ite(126, 61, 62) : BV:8
128 : ite(125, 58, 127) : BV:8
129 : ite(124, 55, 128) : BV:8
130 : ite(123, 53, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(46, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : lambda(1, 2, 135) : FUNCTION[BV:32,BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda15035Var : BV:32
2 : Lambda15036Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3948394262
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m), bvuge(0, input.spec-%var-m-1.L3%7%bbentry)):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : input.spec-%var-m-1.L3%7%bbentry : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140712 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 1
140411 : input.dst.llvm-%m : BV:32                 : 1
140713 : bvult(140712, 140411) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 1
172058 : bvuge(140278, 140571) : BOOL              : false
217780 : or(140713, 172058) : BOOL                 : false

ce =
=counter_example_begin z3.ce3840 9ad220d3a6bdddd323ccf46a3f5e906f
=input.spec-%var-x-2
1 : Lambda15110Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15111Var : BV:32
18 : Lambda15112Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda15113Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : bvmul(8, 51) : BV:32
75 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
76 : bvmul(8, 17) : BV:32
77 : bvadd(75, 76) : BV:32
78 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
79 : eq(77, 78) : BOOL
80 : 104 { 0x68 } : BV:8
81 : eq(77, 75) : BOOL
82 : 127 { 0x7f } : BV:8
83 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
84 : eq(77, 83) : BOOL
85 : 110 { 0x6e } : BV:8
86 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
87 : eq(77, 86) : BOOL
88 : 63 { 0x3f } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : bvadd(83, 76) : BV:32
95 : eq(94, 78) : BOOL
96 : eq(94, 75) : BOOL
97 : eq(94, 83) : BOOL
98 : eq(94, 86) : BOOL
99 : ite(98, 88, 89) : BV:8
100 : ite(97, 85, 99) : BV:8
101 : ite(96, 82, 100) : BV:8
102 : ite(95, 80, 101) : BV:8
103 : bvadd(86, 76) : BV:32
104 : eq(103, 78) : BOOL
105 : eq(103, 75) : BOOL
106 : eq(103, 83) : BOOL
107 : eq(103, 86) : BOOL
108 : ite(107, 88, 89) : BV:8
109 : ite(106, 85, 108) : BV:8
110 : ite(105, 82, 109) : BV:8
111 : ite(104, 80, 110) : BV:8
112 : bvadd(78, 76) : BV:32
113 : eq(112, 78) : BOOL
114 : eq(112, 75) : BOOL
115 : eq(112, 83) : BOOL
116 : eq(112, 86) : BOOL
117 : ite(116, 88, 89) : BV:8
118 : ite(115, 85, 117) : BV:8
119 : ite(114, 82, 118) : BV:8
120 : ite(113, 80, 119) : BV:8
121 : bvconcat(93, 102, 111, 120) : BV:32
122 : bvadd(4, 74, 121) : BV:32
123 : eq(122, 78) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 83) : BOOL
126 : eq(122, 86) : BOOL
127 : ite(126, 88, 89) : BV:8
128 : ite(125, 85, 127) : BV:8
129 : ite(124, 82, 128) : BV:8
130 : ite(123, 80, 129) : BV:8
131 : bvadd(40, 74, 121) : BV:32
132 : eq(131, 78) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 83) : BOOL
135 : eq(131, 86) : BOOL
136 : ite(135, 88, 89) : BV:8
137 : ite(134, 85, 136) : BV:8
138 : ite(133, 82, 137) : BV:8
139 : ite(132, 80, 138) : BV:8
140 : bvadd(36, 74, 121) : BV:32
141 : eq(140, 78) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 83) : BOOL
144 : eq(140, 86) : BOOL
145 : ite(144, 88, 89) : BV:8
146 : ite(143, 85, 145) : BV:8
147 : ite(142, 82, 146) : BV:8
148 : ite(141, 80, 147) : BV:8
149 : bvadd(74, 121) : BV:32
150 : eq(149, 78) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 83) : BOOL
153 : eq(149, 86) : BOOL
154 : ite(153, 88, 89) : BV:8
155 : ite(152, 85, 154) : BV:8
156 : ite(151, 82, 155) : BV:8
157 : ite(150, 80, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(54, 2, 158) : BV:32
160 : ite(73, 158, 159) : BV:32
161 : ite(54, 2, 160) : BV:32
162 : lambda(51, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(50, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-2
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda15136Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15137Var : BV:32
18 : Lambda15138Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda15139Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : bvmul(8, 51) : BV:32
56 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
57 : bvmul(8, 17) : BV:32
58 : bvadd(56, 57) : BV:32
59 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
60 : eq(58, 59) : BOOL
61 : 104 { 0x68 } : BV:8
62 : eq(58, 56) : BOOL
63 : 127 { 0x7f } : BV:8
64 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
65 : eq(58, 64) : BOOL
66 : 110 { 0x6e } : BV:8
67 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
68 : eq(58, 67) : BOOL
69 : 63 { 0x3f } : BV:8
70 : 0 { 0x0 } : BV:8
71 : ite(68, 69, 70) : BV:8
72 : ite(65, 66, 71) : BV:8
73 : ite(62, 63, 72) : BV:8
74 : ite(60, 61, 73) : BV:8
75 : bvadd(64, 57) : BV:32
76 : eq(75, 59) : BOOL
77 : eq(75, 56) : BOOL
78 : eq(75, 64) : BOOL
79 : eq(75, 67) : BOOL
80 : ite(79, 69, 70) : BV:8
81 : ite(78, 66, 80) : BV:8
82 : ite(77, 63, 81) : BV:8
83 : ite(76, 61, 82) : BV:8
84 : bvadd(67, 57) : BV:32
85 : eq(84, 59) : BOOL
86 : eq(84, 56) : BOOL
87 : eq(84, 64) : BOOL
88 : eq(84, 67) : BOOL
89 : ite(88, 69, 70) : BV:8
90 : ite(87, 66, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(85, 61, 91) : BV:8
93 : bvadd(59, 57) : BV:32
94 : eq(93, 59) : BOOL
95 : eq(93, 56) : BOOL
96 : eq(93, 64) : BOOL
97 : eq(93, 67) : BOOL
98 : ite(97, 69, 70) : BV:8
99 : ite(96, 66, 98) : BV:8
100 : ite(95, 63, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : bvconcat(74, 83, 92, 101) : BV:32
103 : bvadd(4, 55, 102) : BV:32
104 : eq(103, 59) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 64) : BOOL
107 : eq(103, 67) : BOOL
108 : ite(107, 69, 70) : BV:8
109 : ite(106, 66, 108) : BV:8
110 : ite(105, 63, 109) : BV:8
111 : ite(104, 61, 110) : BV:8
112 : bvadd(40, 55, 102) : BV:32
113 : eq(112, 59) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 64) : BOOL
116 : eq(112, 67) : BOOL
117 : ite(116, 69, 70) : BV:8
118 : ite(115, 66, 117) : BV:8
119 : ite(114, 63, 118) : BV:8
120 : ite(113, 61, 119) : BV:8
121 : bvadd(36, 55, 102) : BV:32
122 : eq(121, 59) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 64) : BOOL
125 : eq(121, 67) : BOOL
126 : ite(125, 69, 70) : BV:8
127 : ite(124, 66, 126) : BV:8
128 : ite(123, 63, 127) : BV:8
129 : ite(122, 61, 128) : BV:8
130 : bvadd(55, 102) : BV:32
131 : eq(130, 59) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 64) : BOOL
134 : eq(130, 67) : BOOL
135 : ite(134, 69, 70) : BV:8
136 : ite(133, 66, 135) : BV:8
137 : ite(132, 63, 136) : BV:8
138 : ite(131, 61, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(54, 2, 139) : BV:32
141 : lambda(51, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(50, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 104, [ 2147483649; 2147483649 ] -> 63, [ 2147483650; 2147483650 ] -> 110, [ 2147483651; 2147483651 ] -> 127, [ 2147483652; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1560853687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1560853688; 1560853691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1560853692; 1638490075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1638490076; 1638490079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1638490080; 2645227667 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2645227668; 2645227671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2645227672; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2645227668 { 0x9daaf894 -1649739628 -1.33571100e188 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1560853688 { 0x5d08bcb8 +1.6825923e59 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1638490076 { 0x61a95fdc +1.32323789e68 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-m-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1560853688 { 0x5d08bcb8 +1.6825923e59 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1560853691 { 0x5d08bcbb +1.6825959e59 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1638490076 { 0x61a95fdc +1.32323789e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1638490079 { 0x61a95fdf +1.32323825e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2645227668 { 0x9daaf894 -1649739628 -1.33571100e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2645227671 { 0x9daaf897 -1649739625 -1.33571135e188 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda15019Var : BV:32
2 : Lambda15020Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : bvmul(12, 2) : BV:32
48 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
49 : bvmul(12, 1) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 104 { 0x68 } : BV:8
54 : eq(50, 48) : BOOL
55 : 127 { 0x7f } : BV:8
56 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
57 : eq(50, 56) : BOOL
58 : 110 { 0x6e } : BV:8
59 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
60 : eq(50, 59) : BOOL
61 : 63 { 0x3f } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(57, 58, 63) : BV:8
65 : ite(54, 55, 64) : BV:8
66 : ite(52, 53, 65) : BV:8
67 : bvadd(56, 49) : BV:32
68 : eq(67, 51) : BOOL
69 : eq(67, 48) : BOOL
70 : eq(67, 56) : BOOL
71 : eq(67, 59) : BOOL
72 : ite(71, 61, 62) : BV:8
73 : ite(70, 58, 72) : BV:8
74 : ite(69, 55, 73) : BV:8
75 : ite(68, 53, 74) : BV:8
76 : bvadd(59, 49) : BV:32
77 : eq(76, 51) : BOOL
78 : eq(76, 48) : BOOL
79 : eq(76, 56) : BOOL
80 : eq(76, 59) : BOOL
81 : ite(80, 61, 62) : BV:8
82 : ite(79, 58, 81) : BV:8
83 : ite(78, 55, 82) : BV:8
84 : ite(77, 53, 83) : BV:8
85 : bvadd(51, 49) : BV:32
86 : eq(85, 51) : BOOL
87 : eq(85, 48) : BOOL
88 : eq(85, 56) : BOOL
89 : eq(85, 59) : BOOL
90 : ite(89, 61, 62) : BV:8
91 : ite(88, 58, 90) : BV:8
92 : ite(87, 55, 91) : BV:8
93 : ite(86, 53, 92) : BV:8
94 : bvconcat(66, 75, 84, 93) : BV:32
95 : bvadd(8, 47, 94) : BV:32
96 : eq(95, 51) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 56) : BOOL
99 : eq(95, 59) : BOOL
100 : ite(99, 61, 62) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 55, 101) : BV:8
103 : ite(96, 53, 102) : BV:8
104 : bvadd(36, 47, 94) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 56) : BOOL
108 : eq(104, 59) : BOOL
109 : ite(108, 61, 62) : BV:8
110 : ite(107, 58, 109) : BV:8
111 : ite(106, 55, 110) : BV:8
112 : ite(105, 53, 111) : BV:8
113 : bvadd(32, 47, 94) : BV:32
114 : eq(113, 51) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 56) : BOOL
117 : eq(113, 59) : BOOL
118 : ite(117, 61, 62) : BV:8
119 : ite(116, 58, 118) : BV:8
120 : ite(115, 55, 119) : BV:8
121 : ite(114, 53, 120) : BV:8
122 : bvadd(47, 94) : BV:32
123 : eq(122, 51) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 56) : BOOL
126 : eq(122, 59) : BOOL
127 : ite(126, 61, 62) : BV:8
128 : ite(125, 58, 127) : BV:8
129 : ite(124, 55, 128) : BV:8
130 : ite(123, 53, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(46, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda15026Var : BV:32
2 : Lambda15027Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 104 { 0x68 } : BV:8
16 : eq(12, 10) : BOOL
17 : 127 { 0x7f } : BV:8
18 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 110 { 0x6e } : BV:8
21 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : bvadd(18, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 10) : BOOL
32 : eq(29, 18) : BOOL
33 : eq(29, 21) : BOOL
34 : ite(33, 23, 24) : BV:8
35 : ite(32, 20, 34) : BV:8
36 : ite(31, 17, 35) : BV:8
37 : ite(30, 15, 36) : BV:8
38 : bvadd(21, 11) : BV:32
39 : eq(38, 13) : BOOL
40 : eq(38, 10) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : ite(42, 23, 24) : BV:8
44 : ite(41, 20, 43) : BV:8
45 : ite(40, 17, 44) : BV:8
46 : ite(39, 15, 45) : BV:8
47 : bvadd(13, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 10) : BOOL
50 : eq(47, 18) : BOOL
51 : eq(47, 21) : BOOL
52 : ite(51, 23, 24) : BV:8
53 : ite(50, 20, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 15, 54) : BV:8
56 : bvconcat(28, 37, 46, 55) : BV:32
57 : bvadd(7, 9, 56) : BV:32
58 : eq(57, 13) : BOOL
59 : eq(57, 10) : BOOL
60 : eq(57, 18) : BOOL
61 : eq(57, 21) : BOOL
62 : ite(61, 23, 24) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 17, 63) : BV:8
65 : ite(58, 15, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 9, 56) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 10) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : ite(71, 23, 24) : BV:8
73 : ite(70, 20, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 15, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 9, 56) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 10) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : ite(81, 23, 24) : BV:8
83 : ite(80, 20, 82) : BV:8
84 : ite(79, 17, 83) : BV:8
85 : ite(78, 15, 84) : BV:8
86 : bvadd(9, 56) : BV:32
87 : eq(86, 13) : BOOL
88 : eq(86, 10) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : ite(90, 23, 24) : BV:8
92 : ite(89, 20, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 15, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(6, 3, 95) : BV:32
97 : lambda(1, 2, 96) : FUNCTION[BV:32,BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda15021Var : BV:32
2 : Lambda15022Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda15028Var : BV:32
2 : Lambda15029Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda15033Var : BV:32
2 : Lambda15034Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : bvmul(12, 2) : BV:32
48 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
49 : bvmul(12, 1) : BV:32
50 : bvadd(48, 49) : BV:32
51 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 104 { 0x68 } : BV:8
54 : eq(50, 48) : BOOL
55 : 127 { 0x7f } : BV:8
56 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
57 : eq(50, 56) : BOOL
58 : 110 { 0x6e } : BV:8
59 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
60 : eq(50, 59) : BOOL
61 : 63 { 0x3f } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(57, 58, 63) : BV:8
65 : ite(54, 55, 64) : BV:8
66 : ite(52, 53, 65) : BV:8
67 : bvadd(56, 49) : BV:32
68 : eq(67, 51) : BOOL
69 : eq(67, 48) : BOOL
70 : eq(67, 56) : BOOL
71 : eq(67, 59) : BOOL
72 : ite(71, 61, 62) : BV:8
73 : ite(70, 58, 72) : BV:8
74 : ite(69, 55, 73) : BV:8
75 : ite(68, 53, 74) : BV:8
76 : bvadd(59, 49) : BV:32
77 : eq(76, 51) : BOOL
78 : eq(76, 48) : BOOL
79 : eq(76, 56) : BOOL
80 : eq(76, 59) : BOOL
81 : ite(80, 61, 62) : BV:8
82 : ite(79, 58, 81) : BV:8
83 : ite(78, 55, 82) : BV:8
84 : ite(77, 53, 83) : BV:8
85 : bvadd(51, 49) : BV:32
86 : eq(85, 51) : BOOL
87 : eq(85, 48) : BOOL
88 : eq(85, 56) : BOOL
89 : eq(85, 59) : BOOL
90 : ite(89, 61, 62) : BV:8
91 : ite(88, 58, 90) : BV:8
92 : ite(87, 55, 91) : BV:8
93 : ite(86, 53, 92) : BV:8
94 : bvconcat(66, 75, 84, 93) : BV:32
95 : bvadd(8, 47, 94) : BV:32
96 : eq(95, 51) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 56) : BOOL
99 : eq(95, 59) : BOOL
100 : ite(99, 61, 62) : BV:8
101 : ite(98, 58, 100) : BV:8
102 : ite(97, 55, 101) : BV:8
103 : ite(96, 53, 102) : BV:8
104 : bvadd(36, 47, 94) : BV:32
105 : eq(104, 51) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 56) : BOOL
108 : eq(104, 59) : BOOL
109 : ite(108, 61, 62) : BV:8
110 : ite(107, 58, 109) : BV:8
111 : ite(106, 55, 110) : BV:8
112 : ite(105, 53, 111) : BV:8
113 : bvadd(32, 47, 94) : BV:32
114 : eq(113, 51) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 56) : BOOL
117 : eq(113, 59) : BOOL
118 : ite(117, 61, 62) : BV:8
119 : ite(116, 58, 118) : BV:8
120 : ite(115, 55, 119) : BV:8
121 : ite(114, 53, 120) : BV:8
122 : bvadd(47, 94) : BV:32
123 : eq(122, 51) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 56) : BOOL
126 : eq(122, 59) : BOOL
127 : ite(126, 61, 62) : BV:8
128 : ite(125, 58, 127) : BV:8
129 : ite(124, 55, 128) : BV:8
130 : ite(123, 53, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(46, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : lambda(1, 2, 135) : FUNCTION[BV:32,BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda15035Var : BV:32
2 : Lambda15036Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
3948394262
=counter_example_end


</MSG>
<MSG>0:55 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D1 (d:2, s:0, sp: 14)...</MSG>
<MSG>0:55 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>0:55 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:55 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:55 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht18-prove_trivial15-prove3...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:55 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:56 : foo.A1.B4 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:56 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:56 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Attempting correlation of src pathset L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>0:56 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:56 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:56 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:56 : Creating ssa-path for the src-tfg path L3%17%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : Adding a CG edge composition using the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:56 : Identifying common alloc-deallocs in the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : Identified no common alloc-deallocs in the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:56 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Adding edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:56 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Propagated 7 out of 12 counter-examples across edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:56 : foo.A1.B4.C1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:56 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : Done adding a CG edge composition using the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:56 : Added correlation to the product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:56 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:56 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:56 : Constructed infer_invariants_dfa with initial worklist L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:56 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:58 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:59 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:02 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:03 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:06 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:07 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:09 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:10 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:12 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:13 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:13 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>1:13 : foo.A1.B4.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:14 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:14 : Considering 2 paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:14 : Attempting correlation of src pathset L3%17%bbentry=>L3%17%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:14 : Attempting correlation of src pathset L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:14 : Found 2 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:14 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:14 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>1:14 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 42 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 28 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:14 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:14 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:14 : Creating ssa-path for the src-tfg path L3%17%bbentry --> L3%17%bbentry ending at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:14 : Adding a CG edge composition using the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:14 : Identifying common alloc-deallocs in the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>1:14 : Identified no common alloc-deallocs in the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:14 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:14 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:14 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:14 : foo.A1.B4.C1.D2: Adding edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:14 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:14 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:14 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:21 : foo.A1.B4.C1.D2: Propagated 2 out of 28 counter-examples across edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Added the 2 propagated CEs at PC L3%17%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:23 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:23 : Done adding a CG edge composition using the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:23 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>1:23 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 42 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 32 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>1:23 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:23 : Constructed infer_invariants_dfa with initial worklist L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht20-prove_trivial18-prove14...</MSG>
<MSG>1:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial2-prove8...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>3:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>3:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 18 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove10...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:18 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>3:18 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:18 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>3:18 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:18 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:18 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:18 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:18 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 18 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:19 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove10...</MSG>
<MSG>3:19 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:19 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:19 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:19 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>3:19 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:19 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:19 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 18 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove10...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:20 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 16 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 18 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial10-prove4...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:21 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 16 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>3:22 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:23 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:23 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:23 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:23 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:23 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:23 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>3:23 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 52 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 59 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>3:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>3:23 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:23 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>3:23 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>3:23 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>3:23 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Propagated 18 out of 37 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Added the 18 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>3:23 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>3:23 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>3:23 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 52 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 59 counterexamples (for correlating 20 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 13 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:23 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>3:23 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:23 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>3:23 : Checking equivalence proof...</MSG>
<MSG>3:25 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [11]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-ret-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%m ; 9-->input.dst.llvm-%n ; 10-->input.dst.llvm-%x ; 11-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      4.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      5.: bvneg(bvmul(4294967295, input.spec-%var-ret-1.L3%7%bbentry))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      6.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
     is_assumed_eqclass : 0
    16 visited ces:
      0.:z3v487.ce3      1.:z3.ce158      2.:z3.ce31      3.:z3.ce59      4.:z3v487.ce87      5.:z3.ce186      6.:z3v487.ce116      7.:z3.ce115      8.:z3v487.ce143      9.:z3v487.ce157      10.:z3v487.ce185      11.:z3v487.ce213      12.:z3v487.ce241      13.:z3.ce3889      14.:z3.ce5696      15.:z3.ce6089
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-i-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce4732      2.:z3.ce3889      3.:z3.ce4188      4.:z3v487.ce4300      5.:z3v487.ce4518      6.:z3v487.ce4844      7.:z3.ce5023      8.:z3v487.ce5154
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce269      2.:z3.ce31      3.:z3v487.ce297
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce325      2.:z3v487.ce87      3.:z3v487.ce297
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce269      2.:z3.ce31      3.:z3v487.ce297
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce325      2.:z3v487.ce87      3.:z3v487.ce297
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce4732      2.:z3.ce3889      3.:z3.ce4188      4.:z3v487.ce4300      5.:z3v487.ce4518      6.:z3v487.ce4844      7.:z3.ce5023      8.:z3v487.ce5154
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 13-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 18-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 19-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 20-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 21-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 33-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce269      2.:z3.ce31      3.:z3v487.ce87      4.:z3v487.ce297      5.:z3.ce3889
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 37-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141166](input.spec-%var-x-2, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141945](input.spec-%var-x-1.L3%7%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 39-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141952](input.spec-%var-x-1.L3%7%bbentry, map[141951](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141950](Lambda0Var, map[141949](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 40-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141959](input.spec-%var-x-1.L3%7%bbentry, map[141958](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141957](Lambda0Var, map[141956](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 41-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141966](input.spec-%var-x-1.L3%7%bbentry, map[141965](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141964](Lambda0Var, map[141963](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 42-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141973](input.spec-%var-x-1.L3%7%bbentry, map[141972](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141971](Lambda0Var, map[141970](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141945](input.spec-%var-x-1.L3%7%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141166](input.spec-%var-x-2, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

L3%17%bbentry_Lfor.cond1%1%bbentry: (d:1, s:0, sp: 9)
  Invariant state (15 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce31
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [20]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-ret-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%m ; 9-->input.dst.llvm-%n ; 10-->input.dst.llvm-%x ; 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 43-->input.spec-%tmpvar-14.L3%8%d ; 44-->input.spec-%var-j-0.L3%17%bbentry ; 45-->input.spec-%var-m-0.L3%17%bbentry ; 46-->input.spec-%var-i-0.L3%17%bbentry ; 47-->input.spec-%var-ret-0.L3%17%bbentry ; 48-->input.spec-%tmpvar-16.L3%17%bbentry ; 49-->input.spec-%var-n-0.L3%17%bbentry ; 50-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 51-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 52-->input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry ; 
    14 preds:
      0.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
      1.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      2.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      3.: bvneg(bvmul(4294967295, input.spec-%var-ret-0.L3%17%bbentry))  ==  input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      5.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-0.L3%17%bbentry
      6.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      7.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.spec-%var-i-0.L3%17%bbentry
      8.: bvadd(1, bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry)))  ==  input.spec-%tmpvar-16.L3%17%bbentry
      9.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      10.: 0                     ==  bvzero_ext(bool_to_bv(input.spec-%tmpvar-14.L3%8%d), 31)
      11.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      12.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-0.L3%17%bbentry
      13.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%17%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
     is_assumed_eqclass : 0
    18 visited ces:
      0.:z3.ce31      1.:z3.ce59      2.:z3v487.ce213      3.:z3v487.ce297      4.:z3.ce2092      5.:z3.ce2139      6.:z3v487.ce2091      7.:z3.ce3959      8.:z3.ce5417      9.:z3.ce5468      10.:z3.ce5628      11.:z3.ce5775      12.:z3v487.ce5776      13.:z3.ce5582      14.:z3.ce5823      15.:z3v487.ce5930      16.:z3.ce5973      17.:z3.ce6021
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1.L3%7%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce269      1.:z3.ce31      2.:z3.ce59      3.:z3v487.ce297
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 44-->input.spec-%var-j-0.L3%17%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%17%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%17%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce31      1.:z3.ce6474      2.:z3.ce6576      3.:z3.ce5417      4.:z3.ce6270      5.:z3.ce6168      6.:z3.ce6372      7.:z3.ce6678
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 45-->input.spec-%var-m-0.L3%17%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce31      1.:z3v487.ce297      2.:z3.ce2187      3.:z3.ce2235      4.:z3v487.ce2091
    eqclass 5:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 46-->input.spec-%var-i-0.L3%17%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%17%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce31      1.:z3.ce3998      2.:z3v487.ce4568      3.:z3.ce4449      4.:z3.ce3959      5.:z3.ce4248      6.:z3v487.ce4333      7.:z3v487.ce4792      8.:z3v487.ce4765      9.:z3.ce4954
    eqclass 6:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce31      1.:z3v487.ce297      2.:z3.ce2187      3.:z3.ce2235      4.:z3v487.ce2091
    eqclass 7:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 48-->input.spec-%tmpvar-16.L3%17%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%tmpvar-16.L3%17%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce31      1.:z3.ce4449      2.:z3.ce3959      3.:z3.ce4412      4.:z3.ce4248      5.:z3.ce4221      6.:z3v487.ce4661      7.:z3.ce4917      8.:z3v487.ce4765      9.:z3.ce5096
    eqclass 8:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce269      1.:z3.ce31      2.:z3.ce59      3.:z3v487.ce297
    eqclass 9:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce31      1.:z3v487.ce297      2.:z3.ce2187      3.:z3.ce2235      4.:z3v487.ce2091
    eqclass 10:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce31      1.:z3.ce3998      2.:z3v487.ce4568      3.:z3.ce4449      4.:z3.ce3959      5.:z3.ce4248      6.:z3v487.ce4333      7.:z3v487.ce4792      8.:z3v487.ce4765      9.:z3.ce4954
    eqclass 11:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 51-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce31      1.:z3.ce6474      2.:z3.ce6576      3.:z3.ce5417      4.:z3.ce6270      5.:z3.ce6168      6.:z3.ce6372      7.:z3.ce6678
    eqclass 12:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 13-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 18-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 19-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 20-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 21-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 33-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 53-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 54-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 55-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 56-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 57-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 58-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 59-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 60-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 61-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 62-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 63-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 64-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 65-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 66-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 67-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 68-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 69-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 70-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 71-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 72-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 73-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 74-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 75-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 76-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce269      1.:z3.ce31      2.:z3v487.ce297      3.:z3.ce6894      4.:z3v487.ce2091      5.:z3.ce3959      6.:z3.ce4954      7.:z3.ce5417      8.:z3.ce6792
    eqclass 13:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 37-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141166](input.spec-%var-x-2, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141945](input.spec-%var-x-1.L3%7%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 77-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[158989](input.spec-%var-x-2, map[141958](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141957](Lambda0Var, map[141956](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 78-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163361](input.spec-%var-x-2, map[141951](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141950](Lambda0Var, map[141949](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 79-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[171929](input.spec-%var-x-2, map[171926](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[171925](Lambda0Var, map[171924](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 80-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[171928](input.spec-%var-x-2, map[141972](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141971](Lambda0Var, map[141970](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 81-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[172023](input.spec-%var-x-0.L3%17%bbentry, map[141972](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141971](Lambda0Var, map[141970](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 82-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[172024](input.spec-%var-x-0.L3%17%bbentry, map[171926](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[171925](Lambda0Var, map[171924](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 83-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[172020](input.spec-%var-x-0.L3%17%bbentry, map[141951](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141950](Lambda0Var, map[141949](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 84-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[172022](input.spec-%var-x-0.L3%17%bbentry, map[141958](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141957](Lambda0Var, map[141956](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 85-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[172025](input.spec-%var-x-0.L3%17%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    3 preds:
      0.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[172025](input.spec-%var-x-0.L3%17%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141945](input.spec-%var-x-1.L3%7%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      2.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141166](input.spec-%var-x-2, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce31
    eqclass 14:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce31

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 52 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 59 counterexamples (for correlating 20 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 13 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 183.14s, query:smt.: 26.8483s (num_starts 344; 0.0780s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 70.9818s (num_starts 1333; 0.0532s/start)ftmap_run_pointsto_analysis.: 0.63312s (num_starts 2; 0.3166s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 7e-06s (num_starts 8; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 1.5e-05s (num_starts 2; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.6e-05s (num_starts 13; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.7e-05s (num_starts 7; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.9e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 2e-05s (num_starts 2; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.2e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 3.1e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 3.1e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 3.3e-05s (num_starts 3; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.7e-05s (num_starts 13; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 4.3e-05s (num_starts 1; 0.0000s/start)
prune_dst_memslots.: 5.1e-05s (num_starts 7; 0.0000s/start)
get_intersected_lr_status.: 5.5e-05s (num_starts 2; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 6.2e-05s (num_starts 82; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 7.4e-05s (num_starts 8; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 7.8e-05s (num_starts 104; 0.0000s/start)
determinize_value_expr_map.: 9.7e-05s (num_starts 43; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000126s (num_starts 3; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000128s (num_starts 7; 0.0000s/start)
remove_complex_bv_exprs.: 0.000138s (num_starts 7; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000144s (num_starts 44; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000154s (num_starts 60; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000155s (num_starts 199; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000164s (num_starts 135; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.000177s (num_starts 17; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000186s (num_starts 18; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000198s (num_starts 13; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000223s (num_starts 3; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.000254s (num_starts 17; 0.0000s/start)
compute_sprel_relations.: 0.000274s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000289s (num_starts 2; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000322s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000323s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000324s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000324s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000324s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000325s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000327s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000341s (num_starts 1; 0.0003s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000368s (num_starts 18; 0.0000s/start)
populate_locid2expr_map.: 0.000388s (num_starts 2; 0.0002s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000411s (num_starts 7; 0.0001s/start)
lr_status_meet.: 0.000438s (num_starts 642; 0.0000s/start)
expr_is_hidden_reg.: 0.000508s (num_starts 668; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000515s (num_starts 32; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000544s (num_starts 2; 0.0003s/start)
get_sprel_map_pair.: 0.00055s (num_starts 60; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000569s (num_starts 16; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000594s (num_starts 3; 0.0002s/start)
expr_is_callee_save_const.: 0.000609s (num_starts 680; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000628s (num_starts 1; 0.0006s/start)
graph_locs_add_local_vars_for_edge.: 0.000691s (num_starts 32; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000729s (num_starts 2; 0.0004s/start)
prove_trivial.: 0.000808s (num_starts 859; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000905s (num_starts 1756; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001002s (num_starts 75; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.001006s (num_starts 157; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.001077s (num_starts 45; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001134s (num_starts 1; 0.0011s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001316s (num_starts 9; 0.0001s/start)
populate_simplified_to_state.: 0.00141s (num_starts 3; 0.0005s/start)
populate_dominator_and_postdominator_relations.: 0.00147s (num_starts 2; 0.0007s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001556s (num_starts 9; 0.0002s/start)
parse_yices_model.: 0.001563s (num_starts 1; 0.0016s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.001581s (num_starts 182; 0.0000s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001595s (num_starts 9; 0.0002s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001617s (num_starts 23; 0.0001s/start)
graph_locs_add_all_llvmvars.: 0.001748s (num_starts 2; 0.0009s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001821s (num_starts 11; 0.0002s/start)
identify_address_taken_local_variables.: 0.001877s (num_starts 1; 0.0019s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.002058s (num_starts 1410; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.0021s (num_starts 7; 0.0003s/start)
graph_locs_add_all_specvars.: 0.00219s (num_starts 2; 0.0011s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.002261s (num_starts 399; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002348s (num_starts 11; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00237s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002372s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002373s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002378s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002382s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002388s (num_starts 1; 0.0024s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.002543s (num_starts 1; 0.0025s/start)
sort_exprs_and_compute_bv_eqclass.: 0.002704s (num_starts 7; 0.0004s/start)
collect_dst_to_src_submap_preds.: 0.002724s (num_starts 1333; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.002755s (num_starts 48; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002755s (num_starts 1; 0.0028s/start)
compute_bv_bool_eqclass.: 0.00278s (num_starts 7; 0.0004s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002826s (num_starts 1; 0.0028s/start)
pth_collect_preds_using_atom_func.: 0.002878s (num_starts 106; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002888s (num_starts 2; 0.0014s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.002929s (num_starts 551; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.002978s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.002984s (num_starts 2; 0.0015s/start)
collect_assumes_around_edge.: 0.003046s (num_starts 13; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003065s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003068s (num_starts 1; 0.0031s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.003084s (num_starts 5; 0.0006s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.003309s (num_starts 48; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.003409s (num_starts 129; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.003573s (num_starts 48; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003579s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003585s (num_starts 1; 0.0036s/start)
tfg_edge_composition_get_assumes.: 0.003627s (num_starts 106; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003657s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.003662s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003665s (num_starts 2; 0.0018s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.003724s (num_starts 253; 0.0000s/start)
expr_represents_llvm_undef.: 0.003761s (num_starts 684; 0.0000s/start)
graph_visit_exprs.: 0.003895s (num_starts 3; 0.0013s/start)
create_closure_matrix.: 0.003911s (num_starts 267; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.003939s (num_starts 231; 0.0000s/start)
populate_simplified_assets.: 0.004111s (num_starts 6; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.004275s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.004283s (num_starts 2; 0.0021s/start)
tfg::populate_loc_definedness.before_solve.: 0.004309s (num_starts 3; 0.0014s/start)
removeMostPromising.: 0.004462s (num_starts 36; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.00452s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.004522s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.004523s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004557s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004733s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.004745s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004753s (num_starts 4; 0.0012s/start)
tfg::populate_loc_definedness.before_initialize.: 0.004767s (num_starts 3; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.00477s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.004784s (num_starts 4; 0.0012s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004799s (num_starts 7; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004809s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.00495s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.004962s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.00499s (num_starts 3; 0.0017s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.004991s (num_starts 406; 0.0000s/start)
tfg::populate_loc_definedness.: 0.004992s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.005001s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.005005s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.005025s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.005038s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.005045s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.005125s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.005132s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.005139s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.005153s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.005161s (num_starts 3; 0.0017s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.005166s (num_starts 7; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.005175s (num_starts 3; 0.0017s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.005214s (num_starts 78; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.005452s (num_starts 2; 0.0027s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.005476s (num_starts 157; 0.0000s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.005564s (num_starts 551; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005971s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.005977s (num_starts 1; 0.0060s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.006021s (num_starts 127; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.006119s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.006128s (num_starts 3; 0.0020s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.006206s (num_starts 35; 0.0002s/start)
proof_query_is_trivial_helper.: 0.006373s (num_starts 1474; 0.0000s/start)
graph_identify_back_edges.: 0.006532s (num_starts 44; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.006706s (num_starts 2; 0.0034s/start)
corr_graph_enumerate_correlations.: 0.006715s (num_starts 13; 0.0005s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.006891s (num_starts 2832; 0.0000s/start)
find_dominators.: 0.006914s (num_starts 48; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00696s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006964s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006973s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.00698s (num_starts 2; 0.0035s/start)
populate_locs_potentially_modified_on_edge.: 0.007097s (num_starts 3; 0.0024s/start)
graph_visit_exprs_and_keys.: 0.007255s (num_starts 2; 0.0036s/start)
graph_identify_natural_loops.: 0.007315s (num_starts 44; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.007426s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007435s (num_starts 2; 0.0037s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.007447s (num_starts 6; 0.0012s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.007772s (num_starts 157; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007787s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.00779s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007792s (num_starts 3; 0.0026s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.007827s (num_starts 1438; 0.0000s/start)
set_result_and_counter_example.: 0.007845s (num_starts 344; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.007964s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.007977s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008042s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.008048s (num_starts 1; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.008076s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.008081s (num_starts 4; 0.0020s/start)
aliasing_constraints.convert_to_expr.: 0.008983s (num_starts 551; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.009149s (num_starts 3; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.009161s (num_starts 3; 0.0031s/start)
compute_ssa_vars_renaming_map.: 0.00919s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.00935s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.009354s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.00938s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.009396s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.010411s (num_starts 2; 0.0052s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.010572s (num_starts 130; 0.0001s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.010589s (num_starts 1438; 0.0000s/start)
generate_aliasing_constraints_from_expr.: 0.01059s (num_starts 2792; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.011233s (num_starts 3; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.01135s (num_starts 4; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.01137s (num_starts 4; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011678s (num_starts 2; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011683s (num_starts 2; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.0117s (num_starts 2; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.011711s (num_starts 2; 0.0059s/start)
populate_branch_affecting_locs.: 0.011918s (num_starts 3; 0.0040s/start)
get_unrolled_loop_paths_from.: 0.012457s (num_starts 7; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012528s (num_starts 2; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.012541s (num_starts 2; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.01274s (num_starts 4; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.012748s (num_starts 4; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.012775s (num_starts 4; 0.0032s/start)
expr_linear_relation_holds::visit.var.: 0.012916s (num_starts 684; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.012992s (num_starts 6; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.013021s (num_starts 6; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.013352s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.013406s (num_starts 6; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.013419s (num_starts 6; 0.0022s/start)
tfg_suffixpath_get_expr_helper.: 0.013906s (num_starts 28; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014678s (num_starts 3; 0.0049s/start)
proof_query_is_trivial.: 0.01481s (num_starts 1410; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.015093s (num_starts 3; 0.0050s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.015101s (num_starts 8; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.015111s (num_starts 3; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015127s (num_starts 2; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.015136s (num_starts 2; 0.0076s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.015741s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015743s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015748s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.015871s (num_starts 1; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.016219s (num_starts 4; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.016258s (num_starts 4; 0.0041s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.016538s (num_starts 551; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.017165s (num_starts 1; 0.0172s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.017169s (num_starts 1; 0.0172s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.017171s (num_starts 1; 0.0172s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.01724s (num_starts 8; 0.0022s/start)
populate_transitive_closure.: 0.01778s (num_starts 59; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.018575s (num_starts 1; 0.0186s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.018577s (num_starts 1; 0.0186s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018629s (num_starts 3; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018632s (num_starts 3; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.018653s (num_starts 3; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.018701s (num_starts 3; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.018772s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.018774s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.018775s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.018776s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.018789s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.018794s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.018801s (num_starts 1; 0.0188s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.019389s (num_starts 8; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019477s (num_starts 3; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.019488s (num_starts 3; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019976s (num_starts 5; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.02001s (num_starts 5; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.020029s (num_starts 5; 0.0040s/start)
compute_regions.: 0.020198s (num_starts 44; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.020794s (num_starts 8; 0.0026s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.020857s (num_starts 84; 0.0002s/start)
graph_with_guessing_sync_preds.: 0.021069s (num_starts 1333; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.021808s (num_starts 730; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.022065s (num_starts 10; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.02226s (num_starts 10; 0.0022s/start)
expr_substitute_using_available_exprs_submap.: 0.022392s (num_starts 613; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.022489s (num_starts 3; 0.0075s/start)
construct_linear_combination_exprs.: 0.022629s (num_starts 974; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022767s (num_starts 1; 0.0228s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.023113s (num_starts 1; 0.0231s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.023115s (num_starts 1; 0.0231s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.023197s (num_starts 1; 0.0232s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.023204s (num_starts 1; 0.0232s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.023784s (num_starts 730; 0.0000s/start)
compute_vars_reaching_definitions.: 0.024796s (num_starts 2; 0.0124s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.024816s (num_starts 293; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.024982s (num_starts 1; 0.0250s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.025364s (num_starts 2; 0.0127s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.02537s (num_starts 6; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.025371s (num_starts 2; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.025376s (num_starts 2; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.025404s (num_starts 6; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.025453s (num_starts 6; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.02553s (num_starts 6; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.025691s (num_starts 10; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.026316s (num_starts 15; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.02636s (num_starts 15; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.026378s (num_starts 15; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026805s (num_starts 4; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.026909s (num_starts 4; 0.0067s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.028193s (num_starts 3; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.028368s (num_starts 1; 0.0284s/start)
ldr_decomposition.: 0.02988s (num_starts 253; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.030502s (num_starts 672; 0.0000s/start)
create_sp_version_relations_lattice_at_pc.: 0.030543s (num_starts 267; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.030614s (num_starts 2; 0.0153s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.03092s (num_starts 17; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.031014s (num_starts 9; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.031025s (num_starts 9; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.031943s (num_starts 3; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.031963s (num_starts 3; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.033761s (num_starts 5; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.033819s (num_starts 5; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.034736s (num_starts 7; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.034778s (num_starts 7; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.035004s (num_starts 4; 0.0088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.035017s (num_starts 4; 0.0088s/start)
graph_to_stream.: 0.036177s (num_starts 4; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.036731s (num_starts 10; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.036867s (num_starts 10; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.036956s (num_starts 2; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.036965s (num_starts 2; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.036967s (num_starts 2; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.037461s (num_starts 4; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.03749s (num_starts 4; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.037764s (num_starts 2; 0.0189s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.037765s (num_starts 2; 0.0189s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.037775s (num_starts 2; 0.0189s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.037784s (num_starts 2; 0.0189s/start)
get_next_potential_correlations.: 0.039376s (num_starts 7; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.040849s (num_starts 2; 0.0204s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.040933s (num_starts 642; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.041281s (num_starts 3; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.0413s (num_starts 3; 0.0138s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.041862s (num_starts 642; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.044216s (num_starts 3184; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.044844s (num_starts 2; 0.0224s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.044858s (num_starts 2; 0.0224s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.045496s (num_starts 5; 0.0091s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.045601s (num_starts 5; 0.0091s/start)
compute_lr_status_for_expr.: 0.04682s (num_starts 785; 0.0001s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.046873s (num_starts 82; 0.0006s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.047112s (num_starts 231; 0.0002s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.047136s (num_starts 82; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.047867s (num_starts 2; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.047883s (num_starts 2; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.048216s (num_starts 3; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.048226s (num_starts 3; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.049802s (num_starts 10; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.04982s (num_starts 10; 0.0050s/start)
do_ssa_transformation.: 0.049974s (num_starts 2; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.050227s (num_starts 10; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.050244s (num_starts 10; 0.0050s/start)
gen_pred_from_coeff_row.simplify.: 0.052576s (num_starts 974; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.05314s (num_starts 13; 0.0041s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.054031s (num_starts 231; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.055969s (num_starts 7; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.056056s (num_starts 7; 0.0080s/start)
collect_aliasing_constraints_around_path_helper.: 0.05692s (num_starts 442; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.057224s (num_starts 18; 0.0032s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.057905s (num_starts 75; 0.0008s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.059766s (num_starts 231; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.061208s (num_starts 6; 0.0102s/start)
collect_aliasing_constraints_around_path.: 0.061256s (num_starts 278; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.061296s (num_starts 12; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.061374s (num_starts 12; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.061692s (num_starts 10; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.061744s (num_starts 10; 0.0062s/start)
get_sprel_map_pair_at_pc.: 0.062185s (num_starts 551; 0.0001s/start)
query:convert_from_z3.: 0.063861s (num_starts 1007; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.065187s (num_starts 2; 0.0326s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.065338s (num_starts 2; 0.0327s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.065351s (num_starts 2; 0.0327s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.065759s (num_starts 11; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.065879s (num_starts 11; 0.0060s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.0659s (num_starts 2158; 0.0000s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.067307s (num_starts 231; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067439s (num_starts 1; 0.0674s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06787s (num_starts 1; 0.0679s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067877s (num_starts 1; 0.0679s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.068311s (num_starts 4; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.06835s (num_starts 4; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069203s (num_starts 1; 0.0692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069214s (num_starts 1; 0.0692s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.06957s (num_starts 85; 0.0008s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.070161s (num_starts 32; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.070255s (num_starts 10; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071618s (num_starts 1; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071625s (num_starts 1; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.071635s (num_starts 1; 0.0716s/start)
compute_expr_eqclasses_at_pc.: 0.072709s (num_starts 7; 0.0104s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.072764s (num_starts 30; 0.0024s/start)
pth_collect_simplified_preds_using_atom_func.: 0.072886s (num_starts 2052; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.07289s (num_starts 30; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073146s (num_starts 1; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.073148s (num_starts 4; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073187s (num_starts 1; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.073202s (num_starts 1; 0.0732s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.073218s (num_starts 1; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073538s (num_starts 1; 0.0735s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.073551s (num_starts 1; 0.0736s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.074168s (num_starts 3; 0.0247s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074355s (num_starts 1; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074361s (num_starts 1; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.074372s (num_starts 1; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.074915s (num_starts 13; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.074937s (num_starts 13; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.075454s (num_starts 4; 0.0189s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.076308s (num_starts 15; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.076604s (num_starts 15; 0.0051s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.076964s (num_starts 9; 0.0086s/start)
cg_add_node.: 0.077293s (num_starts 9; 0.0086s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.077664s (num_starts 14; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.07795s (num_starts 14; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078612s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.078875s (num_starts 6; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.078913s (num_starts 6; 0.0132s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.079389s (num_starts 15; 0.0053s/start)
compute_new_lr_status_on_locs.: 0.0794s (num_starts 231; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.079544s (num_starts 22; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.07959s (num_starts 22; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.080147s (num_starts 6; 0.0134s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080173s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080179s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080202s (num_starts 1; 0.0802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.080208s (num_starts 6; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.080639s (num_starts 9; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.080646s (num_starts 9; 0.0090s/start)
populate_loc_liveness.: 0.081273s (num_starts 3; 0.0271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.081354s (num_starts 4; 0.0203s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.081358s (num_starts 4; 0.0203s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.081826s (num_starts 14; 0.0058s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.081902s (num_starts 1; 0.0819s/start)
predicate_canonicalized.: 0.081961s (num_starts 974; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.082047s (num_starts 22; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.082183s (num_starts 22; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.082196s (num_starts 14; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.083943s (num_starts 7; 0.0120s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.084443s (num_starts 14; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.084489s (num_starts 14; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.086472s (num_starts 2; 0.0432s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.086481s (num_starts 2; 0.0432s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.086581s (num_starts 19; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086839s (num_starts 1; 0.0868s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086855s (num_starts 1; 0.0869s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 0.086863s (num_starts 19; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08843s (num_starts 1; 0.0884s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088445s (num_starts 1; 0.0884s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.0891s (num_starts 4; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091221s (num_starts 1; 0.0912s/start)
avail_exprs_create_submap.: 0.091898s (num_starts 693; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.092073s (num_starts 22; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.092292s (num_starts 22; 0.0042s/start)
create_new_corr_graph_edge.new_node.: 0.092498s (num_starts 8; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.092603s (num_starts 1; 0.0926s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.092916s (num_starts 4; 0.0232s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.092922s (num_starts 4; 0.0232s/start)
create_new_corr_graph_edge.: 0.09305s (num_starts 13; 0.0072s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.093673s (num_starts 1; 0.0937s/start)
bv_const_ref_map2expr_map.: 0.093698s (num_starts 974; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.093713s (num_starts 1; 0.0937s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.093734s (num_starts 1; 0.0937s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.093749s (num_starts 1; 0.0937s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094082s (num_starts 1; 0.0941s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094094s (num_starts 1; 0.0941s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.094372s (num_starts 4; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.094399s (num_starts 4; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.095565s (num_starts 1; 0.0956s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.095575s (num_starts 1; 0.0956s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.095965s (num_starts 2; 0.0480s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.096003s (num_starts 2; 0.0480s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.096019s (num_starts 2; 0.0480s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096492s (num_starts 1; 0.0965s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0965s (num_starts 1; 0.0965s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097473s (num_starts 1; 0.0975s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097502s (num_starts 1; 0.0975s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.098864s (num_starts 5; 0.0198s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.09887s (num_starts 5; 0.0198s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.099846s (num_starts 3; 0.0333s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.102797s (num_starts 6; 0.0171s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.102806s (num_starts 6; 0.0171s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.104815s (num_starts 33; 0.0032s/start)
query:convert_to_z3.: 0.105945s (num_starts 1007; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.10662s (num_starts 7; 0.0152s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.106994s (num_starts 2; 0.0535s/start)
get_unrolled_paths_from.: 0.107262s (num_starts 40; 0.0027s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.107606s (num_starts 29; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.109275s (num_starts 28; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.109708s (num_starts 5; 0.0219s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.112554s (num_starts 12; 0.0094s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.113071s (num_starts 28; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.113853s (num_starts 28; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.114022s (num_starts 2; 0.0570s/start)
tfg_postprocess_after_pointsto_analysis.: 0.115336s (num_starts 2; 0.0577s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.116179s (num_starts 548; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.116874s (num_starts 10; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.11701s (num_starts 9; 0.0130s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.1176s (num_starts 18; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.119562s (num_starts 15; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.1196s (num_starts 15; 0.0080s/start)
collect_assumes_around_path_helper.: 0.120497s (num_starts 1438; 0.0001s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.123522s (num_starts 18; 0.0069s/start)
graph_with_paths::collect_assumes_around_path.: 0.126055s (num_starts 1438; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.126653s (num_starts 10; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.126688s (num_starts 10; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.127443s (num_starts 21; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.127728s (num_starts 21; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.129362s (num_starts 8; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.12944s (num_starts 8; 0.0162s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.130504s (num_starts 4; 0.0326s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.13174s (num_starts 17; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.1328s (num_starts 19; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.13654s (num_starts 40; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.138754s (num_starts 11; 0.0126s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.138787s (num_starts 11; 0.0126s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.139307s (num_starts 40; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.142901s (num_starts 12; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.142984s (num_starts 12; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.143977s (num_starts 11; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.144006s (num_starts 11; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.144724s (num_starts 5; 0.0289s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.145428s (num_starts 3; 0.0485s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.145465s (num_starts 3; 0.0485s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.145859s (num_starts 14; 0.0104s/start)
invariant_inference_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.14595s (num_starts 3; 0.0486s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.146302s (num_starts 13; 0.0113s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.146589s (num_starts 46; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147878s (num_starts 1; 0.1479s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147886s (num_starts 1; 0.1479s/start)
tfg_relax_pointsto_vals_on_edge.: 0.148076s (num_starts 102; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149251s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152304s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152332s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.15566s (num_starts 8; 0.0195s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.156233s (num_starts 6; 0.0260s/start)
counter_example_satisfies_preds.: 0.157218s (num_starts 2929; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.158066s (num_starts 13; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158798s (num_starts 2; 0.0794s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.158926s (num_starts 38; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.159705s (num_starts 4; 0.0399s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.162838s (num_starts 231; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164014s (num_starts 1; 0.1640s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164018s (num_starts 1; 0.1640s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16402s (num_starts 1; 0.1640s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.164032s (num_starts 1; 0.1640s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.164037s (num_starts 1; 0.1640s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.164045s (num_starts 1; 0.1640s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.16475s (num_starts 52; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.165072s (num_starts 2; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.165078s (num_starts 2; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 0.165357s (num_starts 52; 0.0032s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.166162s (num_starts 2; 0.0831s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166855s (num_starts 2; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16688s (num_starts 2; 0.0834s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16698s (num_starts 2; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167036s (num_starts 2; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.16728s (num_starts 3; 0.0558s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.167295s (num_starts 3; 0.0558s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169518s (num_starts 2; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.16955s (num_starts 2; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.173692s (num_starts 2; 0.0868s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.173711s (num_starts 2; 0.0869s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.173784s (num_starts 33; 0.0053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176987s (num_starts 2; 0.0885s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177038s (num_starts 2; 0.0885s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.177086s (num_starts 2; 0.0885s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.177118s (num_starts 2; 0.0886s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.177738s (num_starts 4; 0.0444s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.177753s (num_starts 4; 0.0444s/start)
check_wfconds_on_edge.L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.178418s (num_starts 2; 0.0892s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.178419s (num_starts 2; 0.0892s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.183538s (num_starts 2; 0.0918s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.183597s (num_starts 17; 0.0108s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183653s (num_starts 2; 0.0918s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183693s (num_starts 2; 0.0918s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183712s (num_starts 2; 0.0919s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.183753s (num_starts 2; 0.0919s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.183762s (num_starts 2; 0.0919s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.183784s (num_starts 2; 0.0919s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.185935s (num_starts 6; 0.0310s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.185992s (num_starts 6; 0.0310s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.187098s (num_starts 37; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.187161s (num_starts 37; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.188102s (num_starts 34; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.19541s (num_starts 6; 0.0326s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.195434s (num_starts 6; 0.0326s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.195738s (num_starts 10; 0.0196s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.199973s (num_starts 20; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.200015s (num_starts 20; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.200102s (num_starts 20; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.200137s (num_starts 20; 0.0100s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.200956s (num_starts 11; 0.0183s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.201968s (num_starts 3988; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.202142s (num_starts 8; 0.0253s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.203455s (num_starts 2; 0.1017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.203472s (num_starts 2; 0.1017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.207795s (num_starts 4; 0.0519s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.207818s (num_starts 4; 0.0520s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.209108s (num_starts 39; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.210724s (num_starts 4; 0.0527s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.210742s (num_starts 4; 0.0527s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213437s (num_starts 1; 0.2134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213439s (num_starts 1; 0.2134s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21344s (num_starts 1; 0.2134s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.21346s (num_starts 1; 0.2135s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.213478s (num_starts 1; 0.2135s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222187s (num_starts 2; 0.1111s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.222214s (num_starts 2; 0.1111s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.223876s (num_starts 3; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.226263s (num_starts 5; 0.0453s/start)
check_wfconds_on_edge.L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.226304s (num_starts 3; 0.0754s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.22922s (num_starts 12; 0.0191s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.232344s (num_starts 14; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.232365s (num_starts 14; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.232491s (num_starts 14; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.23253s (num_starts 14; 0.0166s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236268s (num_starts 1; 0.2363s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236274s (num_starts 1; 0.2363s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236278s (num_starts 1; 0.2363s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.236295s (num_starts 1; 0.2363s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.236299s (num_starts 1; 0.2363s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.236305s (num_starts 1; 0.2363s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.239497s (num_starts 3; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.240358s (num_starts 1; 0.2404s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.240359s (num_starts 1; 0.2404s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.240382s (num_starts 1; 0.2404s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.240388s (num_starts 1; 0.2404s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.245838s (num_starts 35; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.247302s (num_starts 3; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.247341s (num_starts 3; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.249414s (num_starts 24; 0.0104s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.249448s (num_starts 5; 0.0499s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.249605s (num_starts 24; 0.0104s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.250525s (num_starts 3; 0.0835s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.252352s (num_starts 3; 0.0841s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.25706s (num_starts 35; 0.0073s/start)
query:simplify-z3.: 0.257838s (num_starts 2088; 0.0001s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.258366s (num_starts 4; 0.0646s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.264961s (num_starts 59; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.265613s (num_starts 1; 0.2656s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.26562s (num_starts 1; 0.2656s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.265624s (num_starts 1; 0.2656s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.26564s (num_starts 1; 0.2656s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.265644s (num_starts 1; 0.2656s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.26565s (num_starts 1; 0.2656s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.270018s (num_starts 42; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.274218s (num_starts 38; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.274293s (num_starts 38; 0.0072s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%10%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.281306s (num_starts 22; 0.0128s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281713s (num_starts 1; 0.2817s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.28172s (num_starts 1; 0.2817s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281721s (num_starts 1; 0.2817s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.281725s (num_starts 1; 0.2817s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281725s (num_starts 1; 0.2817s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.281741s (num_starts 1; 0.2817s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.281744s (num_starts 1; 0.2817s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.282093s (num_starts 2; 0.1410s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.283573s (num_starts 551; 0.0005s/start)
gen_pred_from_coeff_row.: 0.286662s (num_starts 974; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.28866s (num_starts 3; 0.0962s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.288826s (num_starts 14; 0.0206s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.288852s (num_starts 14; 0.0206s/start)
compute_preds_for_bv_points.: 0.290611s (num_starts 76; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.290745s (num_starts 39; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.291031s (num_starts 1; 0.2910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.291035s (num_starts 1; 0.2910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.291057s (num_starts 1; 0.2911s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.29106s (num_starts 1; 0.2911s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.291115s (num_starts 116; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.291938s (num_starts 4; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.297614s (num_starts 4; 0.0744s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.299854s (num_starts 3; 0.1000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.29992s (num_starts 3; 0.1000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.301942s (num_starts 3988; 0.0001s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.301975s (num_starts 4145; 0.0001s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.302001s (num_starts 551; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.304485s (num_starts 55; 0.0055s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.305506s (num_starts 2988; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.306055s (num_starts 129; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.307657s (num_starts 14; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.307751s (num_starts 14; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.311861s (num_starts 4; 0.0780s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313934s (num_starts 1; 0.3139s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313936s (num_starts 1; 0.3139s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.313953s (num_starts 1; 0.3140s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.313957s (num_starts 1; 0.3140s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.317725s (num_starts 14; 0.0227s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.319959s (num_starts 666; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.320154s (num_starts 50; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.321083s (num_starts 50; 0.0064s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.333303s (num_starts 510; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.33537s (num_starts 81; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.344879s (num_starts 4; 0.0862s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.346519s (num_starts 4; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.346659s (num_starts 4; 0.0867s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.351997s (num_starts 51; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.352384s (num_starts 6; 0.0587s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 0.355011s (num_starts 22; 0.0161s/start)
ldr_decompose_and_linear_solve.: 0.355647s (num_starts 253; 0.0014s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.36032s (num_starts 3988; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.362153s (num_starts 4; 0.0905s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.364163s (num_starts 4; 0.0910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.36419s (num_starts 4; 0.0910s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.364248s (num_starts 4; 0.0911s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.364284s (num_starts 4; 0.0911s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.364985s (num_starts 5; 0.0730s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.36502s (num_starts 5; 0.0730s/start)
bv_linear_solve.: 0.368189s (num_starts 253; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.369642s (num_starts 7; 0.0528s/start)
query:bv_solve.: 0.3698s (num_starts 253; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.380728s (num_starts 12; 0.0317s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.385442s (num_starts 5; 0.0771s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.408039s (num_starts 5; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.408087s (num_starts 5; 0.0816s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.412226s (num_starts 5; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.412309s (num_starts 5; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.412348s (num_starts 5; 0.0825s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.412359s (num_starts 99; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.412922s (num_starts 15; 0.0275s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.416363s (num_starts 5; 0.0833s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.422584s (num_starts 101; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.426792s (num_starts 40; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.431322s (num_starts 37; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.432323s (num_starts 6; 0.0721s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.432514s (num_starts 10; 0.0433s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.43257s (num_starts 10; 0.0433s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.432658s (num_starts 10; 0.0433s/start)
bv_solve_returning_intermediate_structures.: 0.434785s (num_starts 253; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.435826s (num_starts 22; 0.0198s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436751s (num_starts 1; 0.4368s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436756s (num_starts 1; 0.4368s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.442993s (num_starts 42; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.449831s (num_starts 7; 0.0643s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.449854s (num_starts 7; 0.0643s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.464578s (num_starts 6; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.467547s (num_starts 5; 0.0935s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.475519s (num_starts 1; 0.4755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.475521s (num_starts 1; 0.4755s/start)
bvsolve_cache_query.miss1.: 0.487577s (num_starts 253; 0.0019s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.488877s (num_starts 129; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.488995s (num_starts 7; 0.0699s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.48902s (num_starts 7; 0.0699s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.490149s (num_starts 15515; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.491156s (num_starts 1; 0.4912s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.491159s (num_starts 1; 0.4912s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.491171s (num_starts 1; 0.4912s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.491176s (num_starts 1; 0.4912s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.492698s (num_starts 6; 0.0821s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.493064s (num_starts 44; 0.0112s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.494705s (num_starts 73; 0.0068s/start)
bvsolve_cache_query.: 0.496104s (num_starts 253; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.505472s (num_starts 63; 0.0080s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.515054s (num_starts 1537; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.527868s (num_starts 20; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.52794s (num_starts 20; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.530635s (num_starts 4; 0.1327s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.537764s (num_starts 6; 0.0896s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.547159s (num_starts 6; 0.0912s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.564957s (num_starts 10; 0.0565s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.57511s (num_starts 8; 0.0719s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.585373s (num_starts 36; 0.0163s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.599079s (num_starts 48; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.601307s (num_starts 5; 0.1203s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 0.604582s (num_starts 46; 0.0131s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.626098s (num_starts 5; 0.1252s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.628166s (num_starts 15; 0.0419s/start)
solve_for_bv_points.: 0.632464s (num_starts 253; 0.0025s/start)
ftmap_run_pointsto_analysis.: 0.63312s (num_starts 2; 0.3166s/start)
tfg_run_pointsto_analysis.: 0.633734s (num_starts 2; 0.3169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.635673s (num_starts 37; 0.0172s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640169s (num_starts 3; 0.2134s/start)
check_wfconds_on_edge.L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.643938s (num_starts 9; 0.0715s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.648878s (num_starts 148; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.657758s (num_starts 11; 0.0598s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.665906s (num_starts 3; 0.2220s/start)
tfg_populate_structs_after_ssa_construction.: 0.668555s (num_starts 2; 0.3343s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.668704s (num_starts 67; 0.0100s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.672816s (num_starts 2; 0.3364s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.672828s (num_starts 2; 0.3364s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.672833s (num_starts 2; 0.3364s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.676727s (num_starts 4; 0.1692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.676789s (num_starts 4; 0.1692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.677921s (num_starts 6; 0.1130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.677941s (num_starts 6; 0.1130s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.677977s (num_starts 6; 0.1130s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.682088s (num_starts 93; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682674s (num_starts 1; 0.6827s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682678s (num_starts 1; 0.6827s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.682702s (num_starts 1; 0.6827s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.682706s (num_starts 1; 0.6827s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682811s (num_starts 2; 0.3414s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682825s (num_starts 2; 0.3414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.682831s (num_starts 2; 0.3414s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.683554s (num_starts 115; 0.0059s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.68479s (num_starts 4; 0.1712s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.687883s (num_starts 5; 0.1376s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.687897s (num_starts 5; 0.1376s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.687921s (num_starts 5; 0.1376s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.692368s (num_starts 6; 0.1154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.7218s (num_starts 7; 0.1031s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.72502s (num_starts 2; 0.3625s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.734154s (num_starts 54; 0.0136s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.734492s (num_starts 2; 0.3672s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.734502s (num_starts 2; 0.3673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.734507s (num_starts 2; 0.3673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.742347s (num_starts 5; 0.1485s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.742366s (num_starts 5; 0.1485s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.742407s (num_starts 5; 0.1485s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.755905s (num_starts 10; 0.0756s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.755985s (num_starts 8; 0.0945s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.756035s (num_starts 10; 0.0756s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.757792s (num_starts 11; 0.0689s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.759059s (num_starts 1447; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.763155s (num_starts 9; 0.0848s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.773862s (num_starts 51; 0.0152s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.776668s (num_starts 13; 0.0597s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.785079s (num_starts 4; 0.1963s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.785105s (num_starts 4; 0.1963s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.796212s (num_starts 10; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 0.796806s (num_starts 42; 0.0190s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.805074s (num_starts 2; 0.4025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.805143s (num_starts 2; 0.4026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.809397s (num_starts 6; 0.1349s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.809477s (num_starts 6; 0.1349s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.809526s (num_starts 6; 0.1349s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.814163s (num_starts 8; 0.1018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.820306s (num_starts 5; 0.1641s/start)
guarded_predicate_set_and.: 0.829127s (num_starts 551; 0.0015s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.835026s (num_starts 253; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.841567s (num_starts 13; 0.0647s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.842157s (num_starts 647; 0.0013s/start)
lhs_set_sort.: 0.847884s (num_starts 551; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.849575s (num_starts 12; 0.0708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.860581s (num_starts 10; 0.0861s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.863322s (num_starts 4; 0.2158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 0.864877s (num_starts 26; 0.0333s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 0.864952s (num_starts 26; 0.0333s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.872467s (num_starts 18; 0.0485s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.874883s (num_starts 8; 0.1094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 0.882934s (num_starts 10; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.883829s (num_starts 10; 0.0884s/start)
put_smtlib_string_in_file.: 0.893505s (num_starts 688; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.894732s (num_starts 8; 0.1118s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.895228s (num_starts 14; 0.0639s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.899757s (num_starts 16; 0.0562s/start)
apply_mask_and_overlay_array_constant.: 0.906869s (num_starts 647; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.91186s (num_starts 1; 0.9119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.911866s (num_starts 1; 0.9119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.911869s (num_starts 1; 0.9119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.916418s (num_starts 5; 0.1833s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.916433s (num_starts 5; 0.1833s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.916462s (num_starts 5; 0.1833s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 0.922195s (num_starts 16; 0.0576s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.922995s (num_starts 2; 0.4615s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.923107s (num_starts 2; 0.4616s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 0.925081s (num_starts 12; 0.0771s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.940238s (num_starts 1; 0.9402s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.940242s (num_starts 1; 0.9402s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.940266s (num_starts 1; 0.9403s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.94027s (num_starts 1; 0.9403s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.940401s (num_starts 10; 0.0940s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.944927s (num_starts 7; 0.1350s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.944986s (num_starts 209; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.945185s (num_starts 7; 0.1350s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 0.98373s (num_starts 229; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.988637s (num_starts 9; 0.1098s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.00428s (num_starts 36; 0.0279s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.05826s (num_starts 88; 0.0120s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 1.08049s (num_starts 100; 0.0108s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08251s (num_starts 8; 0.1353s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08256s (num_starts 1; 1.0826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08256s (num_starts 1; 1.0826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.08256s (num_starts 1; 1.0826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.08258s (num_starts 1; 1.0826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-signed.: 1.08259s (num_starts 1; 1.0826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.08261s (num_starts 1; 1.0826s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.09166s (num_starts 18; 0.0606s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09995s (num_starts 4; 0.2750s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.10025s (num_starts 4; 0.2751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.13151s (num_starts 13; 0.0870s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.13169s (num_starts 13; 0.0871s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.14879s (num_starts 47; 0.0244s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 1.15209s (num_starts 3241; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.17089s (num_starts 14; 0.0836s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.22035s (num_starts 48; 0.0254s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 1.22692s (num_starts 175; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.23125s (num_starts 2; 0.6156s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.23134s (num_starts 2; 0.6157s/start)
graph_ec_apply_trans_funs_helper.0.: 1.23532s (num_starts 3139; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.23979s (num_starts 109; 0.0114s/start)
graph_ec_apply_trans_funs_helper.: 1.24733s (num_starts 3148; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 1.25514s (num_starts 3148; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 1.25517s (num_starts 116; 0.0108s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 1.2639s (num_starts 3137; 0.0004s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 1.27188s (num_starts 17; 0.0748s/start)
computeWP_for_pred_across_ec.: 1.2744s (num_starts 3137; 0.0004s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.27889s (num_starts 1817; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.30493s (num_starts 33; 0.0395s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.35491s (num_starts 8; 0.1694s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.35503s (num_starts 8; 0.1694s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.45779s (num_starts 114; 0.0128s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47549s (num_starts 16; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.4756s (num_starts 16; 0.0922s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47572s (num_starts 11; 0.1342s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.4984s (num_starts 20; 0.0749s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.49865s (num_starts 20; 0.0749s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.51903s (num_starts 551; 0.0028s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.53309s (num_starts 1447; 0.0011s/start)
edge_composition_apply_trans_funs_on_pred.: 1.55632s (num_starts 1333; 0.0012s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.56023s (num_starts 551; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.57144s (num_starts 12; 0.1310s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 1.6377s (num_starts 6; 0.2729s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.67434s (num_starts 13; 0.1288s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.7294s (num_starts 20; 0.0865s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 1.76038s (num_starts 46; 0.0383s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.76478s (num_starts 30; 0.0588s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 1.76499s (num_starts 30; 0.0588s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 1.76741s (num_starts 50; 0.0353s/start)
check_equivalence_proof.: 1.77418s (num_starts 1; 1.7742s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.77823s (num_starts 19; 0.0936s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.812s (num_starts 11; 0.1647s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.813s (num_starts 22; 0.0824s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.81895s (num_starts 20; 0.0909s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.82315s (num_starts 6; 0.3039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.8232s (num_starts 6; 0.3039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.82323s (num_starts 6; 0.3039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.84978s (num_starts 21; 0.0881s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 1.84982s (num_starts 21; 0.0881s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.84992s (num_starts 21; 0.0881s/start)
collect_inductive_preds_around_path.: 1.89199s (num_starts 1333; 0.0014s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.92632s (num_starts 30; 0.0642s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.94897s (num_starts 23; 0.0847s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.96313s (num_starts 9; 0.2181s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.9633s (num_starts 9; 0.2181s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.96351s (num_starts 9; 0.2182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.96361s (num_starts 9; 0.2182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.01583s (num_starts 24; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.02151s (num_starts 50; 0.0404s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.04933s (num_starts 14; 0.1464s/start)
check_wfconds_on_edge.: 2.05603s (num_starts 34; 0.0605s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.08083s (num_starts 11; 0.1892s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 2.17476s (num_starts 15; 0.1450s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.19084s (num_starts 27; 0.0811s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.20902s (num_starts 9; 0.2454s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 2.25646s (num_starts 42; 0.0537s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.30811s (num_starts 13; 0.1775s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 2.31597s (num_starts 15; 0.1544s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.35583s (num_starts 69; 0.0341s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.39254s (num_starts 65; 0.0368s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 2.42686s (num_starts 456; 0.0053s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.44096s (num_starts 13; 0.1878s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 2.46295s (num_starts 170; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.53445s (num_starts 29; 0.0874s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.55005s (num_starts 28; 0.0911s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 2.61656s (num_starts 46; 0.0569s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.65648s (num_starts 5; 0.5313s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.65657s (num_starts 5; 0.5313s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.68716s (num_starts 91; 0.0295s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.77366s (num_starts 15; 0.1849s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.81516s (num_starts 7; 0.4022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.81517s (num_starts 18; 0.1564s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.84044s (num_starts 31; 0.0916s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 2.96194s (num_starts 20; 0.1481s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.04532s (num_starts 9; 0.3384s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.04538s (num_starts 9; 0.3384s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.04541s (num_starts 9; 0.3384s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.04924s (num_starts 11; 0.2772s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 3.04928s (num_starts 11; 0.2772s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.04936s (num_starts 11; 0.2772s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.06941s (num_starts 14; 0.2192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.06945s (num_starts 14; 0.2192s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-trivial.: 3.07526s (num_starts 502; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.11724s (num_starts 8; 0.3897s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.11729s (num_starts 8; 0.3897s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.11731s (num_starts 8; 0.3897s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.12554s (num_starts 12; 0.2605s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 3.12558s (num_starts 12; 0.2605s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.13707s (num_starts 16; 0.1961s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 3.14125s (num_starts 236; 0.0133s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 3.1446s (num_starts 27; 0.1165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 3.14468s (num_starts 27; 0.1165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 3.15066s (num_starts 76; 0.0415s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.1669s (num_starts 19; 0.1667s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.24107s (num_starts 7; 0.4630s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 3.24133s (num_starts 7; 0.4630s/start)
dst_edge_composition_proves_false.: 3.30223s (num_starts 7; 0.4717s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 3.31386s (num_starts 2; 1.6569s/start)
get_next_dst_edge_composition_to_correlate.: 3.35919s (num_starts 8; 0.4199s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.38818s (num_starts 17; 0.1993s/start)
decide_hoare_triple.: 3.42083s (num_starts 10; 0.3421s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 3.42795s (num_starts 67; 0.0512s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.43419s (num_starts 19; 0.1807s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.48402s (num_starts 4; 0.8710s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.48403s (num_starts 4; 0.8710s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 3.49183s (num_starts 114; 0.0306s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 3.51462s (num_starts 34; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 3.52024s (num_starts 70; 0.0503s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 3.52193s (num_starts 258; 0.0137s/start)
check_preds_on_edge_compositions.: 3.53798s (num_starts 39; 0.0907s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.56257s (num_starts 5; 0.7125s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.56546s (num_starts 8; 0.4457s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 3.56549s (num_starts 8; 0.4457s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 3.6549s (num_starts 76; 0.0481s/start)
compute_z3_expr.: 3.66331s (num_starts 1351; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.67258s (num_starts 10; 0.3673s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 3.80126s (num_starts 2; 1.9006s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.18864s (num_starts 22; 0.1904s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 4.42703s (num_starts 18; 0.2459s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.48282s (num_starts 33; 0.1358s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 4.68572s (num_starts 95; 0.0493s/start)
parse_z3_model.: 5.04974s (num_starts 173; 0.0292s/start)
read_counter_examples_from_channel.: 5.09082s (num_starts 88; 0.0579s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 5.71818s (num_starts 208; 0.0275s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.24692s (num_starts 14; 0.4462s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.24721s (num_starts 14; 0.4462s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 6.35421s (num_starts 21; 0.3026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.39635s (num_starts 16; 0.3998s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 6.42303s (num_starts 18; 0.3568s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 6.44896s (num_starts 25; 0.2580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 6.51407s (num_starts 25; 0.2606s/start)
decide_hoare_triple_helper;-trivial.: 6.92093s (num_starts 1002; 0.0069s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.11276s (num_starts 22; 0.3233s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.11343s (num_starts 22; 0.3233s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.11777s (num_starts 27; 0.2636s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 7.19013s (num_starts 59; 0.1219s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.26959s (num_starts 58; 0.1253s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.49766s (num_starts 27; 0.2777s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 7.54111s (num_starts 62; 0.1216s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 7.5548s (num_starts 18; 0.4197s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.63418s (num_starts 45; 0.1696s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 7.84962s (num_starts 76; 0.1033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 8.00504s (num_starts 90; 0.0889s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry).: 8.05216s (num_starts 144; 0.0559s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 8.48326s (num_starts 93; 0.0912s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 8.52948s (num_starts 174; 0.0490s/start)
corr_graph::add_edge().: 8.95193s (num_starts 13; 0.6886s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 9.04868s (num_starts 13; 0.6961s/start)
corr_graph_add_correlation.: 9.04907s (num_starts 13; 0.6961s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 9.04977s (num_starts 13; 0.6961s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.19134s (num_starts 33; 0.2785s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 9.43968s (num_starts 68; 0.1388s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.68869s (num_starts 99; 0.0979s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.80537s (num_starts 23; 0.4263s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 10.4917s (num_starts 138; 0.0760s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry).: 12.7832s (num_starts 601; 0.0213s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 13.8422s (num_starts 54; 0.2563s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 14.5284s (num_starts 147; 0.0988s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 16.6253s (num_starts 92; 0.1807s/start)
ce_reconcile_sorts.: 17.1693s (num_starts 174; 0.0987s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 18.2076s (num_starts 51; 0.3570s/start)
decide_hoare_triple_helper;per-query-type;linear.: 19.0636s (num_starts 548; 0.0348s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry).: 19.6728s (num_starts 165; 0.1192s/start)
invariant_inference_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 22.651s (num_starts 17; 1.3324s/start)
propagate_nodece_across_edge.: 23.5517s (num_starts 117; 0.2013s/start)
query:smt.: 26.8483s (num_starts 344; 0.0780s/start)
check_node_stability_after_CE_addition.: 30.9074s (num_starts 337; 0.0917s/start)
spawn_smt_query.: 31.9434s (num_starts 344; 0.0929s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 33.8072s (num_starts 17; 1.9887s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 40.4262s (num_starts 301; 0.1343s/start)
src_tfg_counter_example_translate_on_edge_composition.: 40.4284s (num_starts 345; 0.1172s/start)
solver_provable.: 54.5825s (num_starts 551; 0.0991s/start)
solver_satisfiable-cache-miss.: 54.632s (num_starts 344; 0.1588s/start)
solver_satisfiable.: 54.6373s (num_starts 552; 0.0990s/start)
expr_is_provable.: 55.1788s (num_starts 551; 0.1001s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 55.1895s (num_starts 551; 0.1002s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 55.2205s (num_starts 551; 0.1002s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 55.2415s (num_starts 551; 0.1003s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 56.1695s (num_starts 551; 0.1019s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 56.2994s (num_starts 551; 0.1022s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 56.309s (num_starts 551; 0.1022s/start)
counter_example_translate_on_edge_composition_helper.: 59.3538s (num_starts 2859; 0.0208s/start)
is_expr_equal_using_lhs_set_and_precond.: 63.8914s (num_starts 551; 0.1160s/start)
prove.: 63.9005s (num_starts 551; 0.1160s/start)
prove_spawn_and_join_helper.: 63.904s (num_starts 551; 0.1160s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 64.0013s (num_starts 331; 0.1934s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 64.7804s (num_starts 63; 1.0283s/start)
counter_example_falsifies_preds.: 65.9653s (num_starts 600; 0.1099s/start)
counter_example_evaluate_preds.: 66.1146s (num_starts 3529; 0.0187s/start)
prove_spawn_and_join.: 66.7348s (num_starts 551; 0.1211s/start)
prove_wrapper.proof_query_not_trivial.: 66.8429s (num_starts 551; 0.1213s/start)
prove_wrapper.: 67.0162s (num_starts 1410; 0.0475s/start)
decide_hoare_triple_check_ub.: 68.6772s (num_starts 1333; 0.0515s/start)
decide_hoare_triple_helper.: 70.9818s (num_starts 1333; 0.0532s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%17%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 98.8604s (num_starts 42; 2.3538s/start)
add_fresh_counterexample_at_pc_and_propagate.: 100.481s (num_starts 199; 0.5049s/start)
decide_hoare_triple_with_alias_cons.ce.: 100.487s (num_starts 1216; 0.0826s/start)
update_invariant_state_for_edges.: 166.993s (num_starts 11; 15.1811s/start)
cg_check_new_cg_ec.: 166.993s (num_starts 11; 15.1812s/start)
correl_entry_apply.: 166.994s (num_starts 11; 15.1812s/start)
expandProductCFG.: 170.394s (num_starts 12; 14.1995s/start)
decide_hoare_triple_with_alias_cons.: 171.48s (num_starts 1333; 0.1286s/start)
bestFirstSearch.: 179.542s (num_starts 1; 179.5416s/start)
Time taken for equivalence check.: 181.331s (num_starts 1; 181.3309s/start)

counters:
# of Paths Prunned through CE propagation.: 5
# of assume sat failures for undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry.: 8
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 5
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 253
# of smt-solver-queries.: 344
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 12
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 11
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 8
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 19
smallest_point_cover_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 20
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 80
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 11
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 19
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 21
smallest_point_cover_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 57
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 27
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 68
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 45
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 28
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 9
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 9
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 37
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 35
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 75
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 76
smt-queries-cache-hits.: 208
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 173
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 11
dst-nodes.: 10
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%17%bbentry_Lfor.cond1%1%bbentry.: 39
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 25
final-CG-counterexamples-total-at-L3%17%bbentry_Lfor.cond1%1%bbentry.: 59
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 52
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 41
final-CG-super-edges.: 0
src-edges.: 21
src-nodes.: 18
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 156.41
final-CG-time-to-total-time-ratio.: 0.87
query-time-to-total-time-ratio.: 0.15

Context stats:
exprs: count: 283904
sorts: count: 171
num_proof_queries: 551
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	88211
	        hit ratio:	0.991894
m_simplify_solver:
	----------- total:	5222
	        hit ratio:	0.792991
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	1081
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1081
	        hit ratio:	0
m_expr_size:
	----------- total:	17769
	        hit ratio:	0.929653
m_contains_only_constants_or_sp_versions:
	----------- total:	24
	        hit ratio:	0.791667
m_expr_evaluates_to_constant_visitor:
	----------- total:	304669
	        hit ratio:	0.464665

z3_solver expr_query_cache entry size: 344
	----------- total:	552
	             hits:	208
	        hit ratio:	0.376812
histogram (time taken by solver in ms):
[ 32.2280,  42.3022) (avg.  38.7894)     : 44
[ 42.3022,  55.5256) (avg.  48.4251)     : 156
[ 55.5256,  72.8825) (avg.  60.1366)     : 39
[ 72.8825,  95.6650) (avg.  79.4265)     : 33
[ 95.6650, 125.5692) (avg. 107.0506)     : 38
[125.5692, 164.8211) (avg. 143.1753)     : 13
[164.8211, 216.3430) (avg. 189.5347)     : 3
[216.3430, 283.9702) (avg. 254.7518)     : 5
[283.9702, 372.7372) (avg. 337.8687)     : 7
[372.7372, 489.2520) (avg. 413.0697)     : 6
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 13) (avg.  0)                       : 0
[13, 17) (avg.  0)                       : 0
[17, 21) (avg. 18)                       : 34
[21, 25) (avg. 24)                       : 185
[25, 29) (avg. 26)                       : 16
[29, 33) (avg. 31)                       : 108
[33, 37) (avg.  0)                       : 0
[37, 41) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 161) (avg. 103)                    : 1
[161, 218) (avg.   0)                    : 0
[218, 275) (avg.   0)                    : 0
[275, 332) (avg.   0)                    : 0
[332, 389) (avg. 359)                    : 63
[389, 447) (avg. 415)                    : 156
[447, 504) (avg. 486)                    : 16
[504, 561) (avg. 543)                    : 12
[561, 618) (avg. 591)                    : 39
[618, 675) (avg. 637)                    : 57
Top 10 highest time taking queries:
1. [0.488s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.16
2. [0.428s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.12
3. [0.413s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-signed.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
4. [0.389s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-1-free_var_idx.44.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
5. [0.382s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.4
6. [0.378s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.52.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.0
7. [0.366s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.3
8. [0.366s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%17%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%17%b.0
9. [0.348s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.1
10. [0.337s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.2

<MSG>3:26 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 217 time spent: 0:0:0 [0.004708s total; 0.000022 per start]
tfg_computeWP: num_starts 10256 time spent: 0:0:1 [1.098373s total; 0.000107 per start]
tfg_get_simplified_to_state_for_edge: num_starts 21770 time spent: 0:0:0 [0.042411s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 13148 time spent: 0:0:0 [0.025346s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 10508 time spent: 0:0:0 [0.018447s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 208 time spent: 0:0:56 [56.852951s total; 0.273331 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 26 time spent: 0:0:8 [8.925290s total; 0.343280 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 2468 time spent: 0:0:40 [40.692955s total; 0.016488 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 692 time spent: 0:1:6 [66.075521s total; 0.095485 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 2192 time spent: 0:0:24 [24.721733s total; 0.011278 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 10132 time spent: 0:1:46 [106.430264s total; 0.010504 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 2200 time spent: 0:0:0 [0.134426s total; 0.000061 per start]
tfg_graph_get_vars_written_on_edge: num_starts 2192 time spent: 0:0:0 [0.056614s total; 0.000026 per start]
cg_with_rank_add_CE_at_pc: num_starts 339 time spent: 0:0:33 [33.297934s total; 0.098224 per start]
graph_with_ce_add_CE_at_pc: num_starts 192 time spent: 0:0:0 [0.013170s total; 0.000069 per start]
graph_with_guessing_add_CE_at_pc: num_starts 339 time spent: 0:0:33 [33.284147s total; 0.098183 per start]
point_set_add_point_using_CE: num_starts 2988 time spent: 0:0:0 [0.870218s total; 0.000291 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 2988 time spent: 0:0:0 [0.876265s total; 0.000293 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 258 time spent: 0:0:2 [2.360602s total; 0.009150 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 258 time spent: 0:0:1 [1.473317s total; 0.005711 per start]
expr_label_memlabels_using_memlabel_map: num_starts 81035 time spent: 0:0:2 [2.055418s total; 0.000025 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 14113 time spent: 0:0:0 [0.418016s total; 0.000030 per start]
expr_simplify_solver: num_starts 5346 time spent: 0:0:0 [0.460820s total; 0.000086 per start]
expr_simplify_syntactic: num_starts 5554 time spent: 0:0:0 [0.726616s total; 0.000131 per start]
expr_simplify_select_on_store: num_starts 225 time spent: 0:0:0 [0.639994s total; 0.002844 per start]
expr_simplify_using_lhs_set_helper: num_starts 1931 time spent: 0:0:1 [1.315855s total; 0.000681 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 10357 time spent: 0:0:1 [1.303245s total; 0.000126 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 5794 time spent: 0:0:0 [0.023021s total; 0.000004 per start]
expr_simplify_eq: num_starts 810 time spent: 0:0:0 [0.006332s total; 0.000008 per start]
expr_simplify_or: num_starts 84 time spent: 0:0:0 [0.000105s total; 0.000001 per start]
expr_simplify_and: num_starts 415 time spent: 0:0:0 [0.002620s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 92 time spent: 0:0:0 [0.001377s total; 0.000015 per start]
expr_simplify_andnot2: num_starts 11 time spent: 0:0:0 [0.000248s total; 0.000023 per start]
expr_simplify_not: num_starts 117 time spent: 0:0:0 [0.000356s total; 0.000003 per start]
expr_simplify_implies: num_starts 34 time spent: 0:0:0 [0.000335s total; 0.000010 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001415s total; 0.000101 per start]
canonicalize_expr_tree: num_starts 1151 time spent: 0:0:0 [0.066791s total; 0.000058 per start]
expr_simplify_memalloc_using_memlabel: num_starts 100 time spent: 0:0:0 [0.000302s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 225 time spent: 0:0:0 [0.631610s total; 0.002807 per start]
get_arithmetic_addsub_atoms: num_starts 12675 time spent: 0:0:0 [0.008685s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 1649 time spent: 0:0:0 [0.016839s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 5228 time spent: 0:0:0 [0.003269s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 88822 time spent: 0:0:1 [1.030131s total; 0.000012 per start]
expr_do_simplify_helper_cache: num_starts 88822 time spent: 0:0:0 [0.096209s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000034s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000434s total; 0.000006 per start]
evaluate_expr_and_check_bounds: num_starts 19931 time spent: 0:1:46 [106.844969s total; 0.005361 per start]
array_constant_equals: num_starts 85061 time spent: 0:0:0 [0.079110s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 129 time spent: 0:0:0 [0.488721s total; 0.003789 per start]
alias_val_xfer_and_meet: num_starts 129 time spent: 0:0:0 [0.305790s total; 0.002370 per start]
get_sprel_map_from_avail_exprs: num_starts 167 time spent: 0:0:0 [0.024052s total; 0.000144 per start]
update_memlabels_for_memslot_locs: num_starts 36 time spent: 0:0:0 [0.000191s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 462 time spent: 0:0:0 [0.074968s total; 0.000162 per start]
compute_simplified_loc_exprs_for_edge: num_starts 959 time spent: 0:0:0 [0.205417s total; 0.000214 per start]
compute_locs_definitely_written_on_edge: num_starts 462 time spent: 0:0:0 [0.000710s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 109 time spent: 0:0:0 [0.011368s total; 0.000104 per start]
edge_update_memlabel_map_for_mlvars: num_starts 231 time spent: 0:0:0 [0.060105s total; 0.000260 per start]
add_new_locs_based_on_edge: num_starts 129 time spent: 0:0:0 [0.213472s total; 0.001655 per start]
expand_locset_to_include_slots_for_memmask: num_starts 210 time spent: 0:0:0 [0.000893s total; 0.000004 per start]
total: num_starts 1 time spent: 0:3:32 [212.317185s total; 212.317185 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 183.17s.
ftmap_run_pointsto_analysis.: 0.63312s (num_starts 2; 0.3166s/start)s.
EQ Time after pointsto analysis: 182.536s.
EQ Time after pointsto analysis and smt_query: 115.52s.
EQ Time after pointsto analysis and smt_query and bv-solve: 115.024s.
Equivalence proof found. The programs are equivalent.
