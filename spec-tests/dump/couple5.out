argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=couple5.proof
argv[5] = --spec-iospecs=couple5.iospecs
argv[6] = couple5.spec
argv[7] = couple5.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2888490
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/couple5.c
argv[10] = -o
argv[11] = par_tmpdir/couple5.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/couple5.spec.etfg
argv[10] = par_tmpdir/couple5.c.bc
argv[11] = -o
argv[12] = par_tmpdir/couple5.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 184 time spent: 0:0:0 [0.000336s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 211 time spent: 0:0:0 [0.000356s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2462 time spent: 0:0:0 [0.013248s total; 0.000005 per start]
expr_simplify_solver: num_starts 152 time spent: 0:0:0 [0.019005s total; 0.000125 per start]
expr_simplify_syntactic: num_starts 152 time spent: 0:0:0 [0.024590s total; 0.000162 per start]
expr_simplify_select_on_store: num_starts 8 time spent: 0:0:0 [0.020400s total; 0.002550 per start]
expr_simplify_using_lhs_set_helper: num_starts 144 time spent: 0:0:0 [0.048028s total; 0.000334 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 432 time spent: 0:0:0 [0.047624s total; 0.000110 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 147 time spent: 0:0:0 [0.000622s total; 0.000004 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000151s total; 0.000013 per start]
expr_simplify_not: num_starts 4 time spent: 0:0:0 [0.000009s total; 0.000002 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000505s total; 0.000126 per start]
canonicalize_expr_tree: num_starts 89 time spent: 0:0:0 [0.001548s total; 0.000017 per start]
expr_simplify_memalloc_using_memlabel: num_starts 5 time spent: 0:0:0 [0.000014s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 8 time spent: 0:0:0 [0.020130s total; 0.002516 per start]
get_arithmetic_addsub_atoms: num_starts 124 time spent: 0:0:0 [0.000099s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 250 time spent: 0:0:0 [0.003149s total; 0.000013 per start]
expr_is_consts_struct_constant: num_starts 3220 time spent: 0:0:0 [0.001875s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 5446 time spent: 0:0:0 [0.053009s total; 0.000010 per start]
expr_do_simplify_helper_cache: num_starts 5446 time spent: 0:0:0 [0.003889s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000010s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000182s total; 0.000005 per start]
array_constant_equals: num_starts 19 time spent: 0:0:0 [0.000043s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 221 time spent: 0:0:0 [0.314299s total; 0.001422 per start]
alias_val_xfer_and_meet: num_starts 221 time spent: 0:0:0 [0.070062s total; 0.000317 per start]
get_sprel_map_from_avail_exprs: num_starts 268 time spent: 0:0:0 [0.036534s total; 0.000136 per start]
update_memlabels_for_memslot_locs: num_starts 46 time spent: 0:0:0 [0.000251s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 442 time spent: 0:0:0 [0.023748s total; 0.000054 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1108 time spent: 0:0:0 [0.075945s total; 0.000069 per start]
compute_locs_definitely_written_on_edge: num_starts 442 time spent: 0:0:0 [0.000187s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 98 time spent: 0:0:0 [0.008483s total; 0.000087 per start]
edge_update_memlabel_map_for_mlvars: num_starts 221 time spent: 0:0:0 [0.003339s total; 0.000015 per start]
add_new_locs_based_on_edge: num_starts 221 time spent: 0:0:0 [0.045603s total; 0.000206 per start]
expand_locset_to_include_slots_for_memmask: num_starts 141 time spent: 0:0:0 [0.000510s total; 0.000004 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 3e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 9e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 2.8e-05s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 2.9e-05s (num_starts 8; 0.0000s/start)
add_extra_node_at_start_pc.: 3.2e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 3.4e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3.8e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 4.5e-05s (num_starts 1; 0.0000s/start)
lr_status_meet.: 9e-05s (num_starts 117; 0.0000s/start)
main.3.: 9.6e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000101s (num_starts 123; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000103s (num_starts 6; 0.0000s/start)
expr_is_callee_save_const.: 0.000122s (num_starts 127; 0.0000s/start)
compute_sprel_relations.: 0.000147s (num_starts 1; 0.0001s/start)
propagate_sprels.: 0.000155s (num_starts 1; 0.0002s/start)
graph_locs_add_all_specvars.: 0.000181s (num_starts 1; 0.0002s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000208s (num_starts 2; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000266s (num_starts 73; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.00028s (num_starts 73; 0.0000s/start)
determinize_value_expr_map.: 0.000281s (num_starts 345; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000325s (num_starts 1; 0.0003s/start)
graph_locs_add_all_local_vars.: 0.000326s (num_starts 1; 0.0003s/start)
populate_locid2expr_map.: 0.000349s (num_starts 2; 0.0002s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000415s (num_starts 8; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000436s (num_starts 45; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000537s (num_starts 2; 0.0003s/start)
expr_represents_llvm_undef.: 0.000743s (num_starts 129; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000807s (num_starts 1; 0.0008s/start)
canonicalize_llvm_nextpcs.: 0.001106s (num_starts 1; 0.0011s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001236s (num_starts 221; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001266s (num_starts 1; 0.0013s/start)
def_analysis::xfer_and_meet.: 0.001376s (num_starts 146; 0.0000s/start)
populate_simplified_to_state.: 0.001567s (num_starts 3; 0.0005s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.001789s (num_starts 1; 0.0018s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001852s (num_starts 1; 0.0019s/start)
sp_version_relations_val_t::meet.: 0.002068s (num_starts 4056; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.00217s (num_starts 1; 0.0022s/start)
populate_exit_return_values_for_llvm_method.: 0.002215s (num_starts 1; 0.0022s/start)
tfg::collect_assumes_around_edge.: 0.002375s (num_starts 211; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.002541s (num_starts 129; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.00256s (num_starts 221; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.003107s (num_starts 221; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.003162s (num_starts 1; 0.0032s/start)
graph_with_locs_constructor.src.spec.foo.: 0.003211s (num_starts 1; 0.0032s/start)
compute_z3_expr.: 0.003452s (num_starts 84; 0.0000s/start)
query:convert_from_z3.: 0.003625s (num_starts 84; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.003994s (num_starts 147; 0.0000s/start)
graph_visit_exprs.: 0.004564s (num_starts 4; 0.0011s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.006175s (num_starts 1; 0.0062s/start)
compute_lr_status_for_expr.: 0.006624s (num_starts 131; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.006812s (num_starts 117; 0.0001s/start)
query:convert_to_z3.: 0.006878s (num_starts 84; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.006995s (num_starts 117; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.007417s (num_starts 1; 0.0074s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.008583s (num_starts 1; 0.0086s/start)
populate_simplified_assets.: 0.009225s (num_starts 6; 0.0015s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.010462s (num_starts 160; 0.0001s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.01087s (num_starts 1; 0.0109s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.010875s (num_starts 1; 0.0109s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.010881s (num_starts 1; 0.0109s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.010886s (num_starts 1; 0.0109s/start)
tfg_constructor.src.spec.foo.: 0.01089s (num_starts 1; 0.0109s/start)
create_closure_matrix.: 0.010998s (num_starts 267; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.011293s (num_starts 4242; 0.0000s/start)
populate_transitive_closure.: 0.011329s (num_starts 1; 0.0113s/start)
populate_dominator_and_postdominator_relations.: 0.011381s (num_starts 2; 0.0057s/start)
query:simplify-z3.: 0.01356s (num_starts 173; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.013952s (num_starts 2; 0.0070s/start)
graph_identify_back_edges.: 0.014459s (num_starts 5; 0.0029s/start)
tfg::populate_loc_definedness.before_initialize.: 0.014516s (num_starts 2; 0.0073s/start)
tfg::populate_loc_definedness.: 0.014999s (num_starts 2; 0.0075s/start)
graph_to_stream.: 0.015342s (num_starts 1; 0.0153s/start)
graph_identify_natural_loops.: 0.015418s (num_starts 5; 0.0031s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.01808s (num_starts 2462; 0.0000s/start)
compute_new_lr_status_on_locs.: 0.019177s (num_starts 221; 0.0001s/start)
populate_branch_affecting_locs.: 0.020002s (num_starts 2; 0.0100s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.020446s (num_starts 221; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.020952s (num_starts 3; 0.0070s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.023038s (num_starts 1; 0.0230s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.023315s (num_starts 1; 0.0233s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.023846s (num_starts 1; 0.0238s/start)
find_dominators.: 0.024395s (num_starts 9; 0.0027s/start)
compute_regions.: 0.024664s (num_starts 5; 0.0049s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.030193s (num_starts 3; 0.0101s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.031115s (num_starts 234; 0.0001s/start)
tfg_preprocess.dst.llvm.foo.: 0.034142s (num_starts 1; 0.0341s/start)
tfg::tfg_preprocess.: 0.034144s (num_starts 1; 0.0341s/start)
get_tfg.: 0.042596s (num_starts 1; 0.0426s/start)
get_function_tfg_map.foo.: 0.042639s (num_starts 1; 0.0426s/start)
get_function_tfg_map.: 0.042642s (num_starts 1; 0.0426s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.042752s (num_starts 221; 0.0002s/start)
create_sp_version_relations_lattice_at_pc.: 0.047569s (num_starts 267; 0.0002s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.048158s (num_starts 144; 0.0003s/start)
populate_loc_liveness.: 0.054445s (num_starts 2; 0.0272s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.067306s (num_starts 2462; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.070248s (num_starts 2462; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.070403s (num_starts 221; 0.0003s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.07631s (num_starts 221; 0.0003s/start)
main.2.: 0.077789s (num_starts 1; 0.0778s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.086825s (num_starts 2462; 0.0000s/start)
avail_exprs_create_submap.: 0.11048s (num_starts 663; 0.0002s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.134077s (num_starts 221; 0.0006s/start)
tfg_postprocess_after_pointsto_analysis.: 0.136383s (num_starts 1; 0.1364s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.17701s (num_starts 1; 0.1770s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.314566s (num_starts 221; 0.0014s/start)
ftmap_run_pointsto_analysis.: 0.532041s (num_starts 1; 0.5320s/start)
parse_consts_db.: 6.67822s (num_starts 1; 6.6782s/start)
main.: 7.40102s (num_starts 1; 7.4010s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file couple5.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: foo...</MSG>
<MSG>0:22 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:22 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:23 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:23 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:23 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%17%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%20%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%20%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:23 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht17-prove_trivial4-prove13...</MSG>
<MSG>0:26 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:26 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:31 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:31 : foo.A1 (d:1, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:31 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:31 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>0:31 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:31 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:31 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:31 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:31 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:31 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:31 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : foo.A2: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : foo.A2: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:31 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:31 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:31 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:31 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140277 : 1 { 0x1 } : BOOL                          : true
167571 : not(140277) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140274 : input.spec-%var-n-2 : BV:32               : 0
140614 : bvuge(140278, 140274) : BOOL              : true
167552 : not(140614) : BOOL                        : false
167572 : or(167571, 167552) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4 fed04af1761ec722994f5f2def17622b
=input.spec-%var-x-2
1 : Lambda296Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda297Var : BV:32
11 : Lambda298Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda299Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda331Var : BV:32
11 : Lambda332Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda333Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda313Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314Var : BV:32
11 : Lambda315Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda316Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2249326309
=counter_example_end


failcond-expr = or(not(true), not(bvuge(0, input.spec-%var-n-2))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-n-2 : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>0:31 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:31 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:31 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:31 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140277 : 1 { 0x1 } : BOOL                          : true
167571 : not(140277) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140274 : input.spec-%var-n-2 : BV:32               : 0
140614 : bvuge(140278, 140274) : BOOL              : true
167552 : not(140614) : BOOL                        : false
167572 : or(167571, 167552) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4 fed04af1761ec722994f5f2def17622b
=input.spec-%var-x-2
1 : Lambda296Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda297Var : BV:32
11 : Lambda298Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda299Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda331Var : BV:32
11 : Lambda332Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda333Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda313Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314Var : BV:32
11 : Lambda315Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda316Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2249326309
=counter_example_end


</MSG>
<MSG>0:31 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:31 : Chose (after CE propagation) product-TFG foo.A1 (d:1, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:31 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:31 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:31 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:31 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:31 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:31 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:31 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:31 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:31 : foo.A1 (d:1, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:31 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:31 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Attempting correlation of src pathset L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Considering 1 paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Attempting correlation of src pathset L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Found 1 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Considering 1 paths to src pc L3%20%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Attempting correlation of src pathset L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Found 1 feasible correlations for paths to src pc L3%20%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>0:31 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:31 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:31 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:31 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:31 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:31 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:31 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:31 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B3: Adding node L3%10%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:31 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:31 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:31 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:31 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:31 : foo.A1.B3: Propagated 8 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : foo.A1.B3: Added the 8 propagated CEs at PC L3%10%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:32 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Added correlation to the product-TFG foo.A1.B3 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%17%bbentry ending at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Adding node L3%17%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B4: Propagated 8 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : foo.A1.B4: Added the 8 propagated CEs at PC L3%17%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:32 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Added correlation to the product-TFG foo.A1.B4 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%20%bbentry ending at L3%20%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%20%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Adding node L3%20%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%20%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140710 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140413 : input.dst.llvm-%n : BV:32                 : 1073741824
140711 : bvult(140710, 140413) : BOOL              : true
140998 : not(140711) : BOOL                        : false
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 1073741824
140559 : bvuge(140556, 140557) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
169111 : bvuge(140278, 140571) : BOOL              : true
169115 : not(169111) : BOOL                        : false
169130 : andnot1(140559, 169115) : BOOL            : false
169132 : or(140998, 169130) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce462 766b5eaa9e4e86d6f9dd7c190639eed
=input.spec-%var-x-2
1 : Lambda6600Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6601Var : BV:32
18 : Lambda6602Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6603Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda6634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6635Var : BV:32
18 : Lambda6636Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6637Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 655363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 655364; 655367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 655368; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2101256; 3375103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3375104; 3375107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3375108; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 655364 { 0xa0004 +1.7812547e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3375104 { 0x338000 +1.40234375e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda6617Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6618Var : BV:32
18 : Lambda6619Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6620Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3375104 { 0x338000 +1.40234375e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3375107 { 0x338003 +1.40234410e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 655364 { 0xa0004 +1.7812547e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 655367 { 0xa0007 +1.7812583e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2333715544
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), not(bvuge(0, input.spec-%var-m-1.L3%7%bbentry)))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : not(10) : BOOL
12 : andnot1(7, 11) : BOOL
13 : or(4, 12) : BOOL
</MSG>
<MSG>0:32 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%20%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Failed correlation of src pathset L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%20%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140710 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140413 : input.dst.llvm-%n : BV:32                 : 1073741824
140711 : bvult(140710, 140413) : BOOL              : true
140998 : not(140711) : BOOL                        : false
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 1073741824
140559 : bvuge(140556, 140557) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
169111 : bvuge(140278, 140571) : BOOL              : true
169115 : not(169111) : BOOL                        : false
169130 : andnot1(140559, 169115) : BOOL            : false
169132 : or(140998, 169130) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce462 766b5eaa9e4e86d6f9dd7c190639eed
=input.spec-%var-x-2
1 : Lambda6600Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6601Var : BV:32
18 : Lambda6602Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6603Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda6634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6635Var : BV:32
18 : Lambda6636Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6637Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 655363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 655364; 655367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 655368; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2101256; 3375103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3375104; 3375107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3375108; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 655364 { 0xa0004 +1.7812547e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3375104 { 0x338000 +1.40234375e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda6617Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6618Var : BV:32
18 : Lambda6619Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6620Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3375104 { 0x338000 +1.40234375e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3375107 { 0x338003 +1.40234410e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 655364 { 0xa0004 +1.7812547e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 655367 { 0xa0007 +1.7812583e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2333715544
=counter_example_end


</MSG>
<MSG>0:32 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:1, s:0, sp: 5)...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:1, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140710 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140413 : input.dst.llvm-%n : BV:32                 : 2147483648
140711 : bvult(140710, 140413) : BOOL              : true
140998 : not(140711) : BOOL                        : false
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
140559 : bvuge(140556, 140557) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2155905028
169111 : bvuge(140278, 140571) : BOOL              : false
169139 : andnot1(140559, 169111) : BOOL            : false
169141 : or(140998, 169139) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce255 b04b1d45f931a6b47f2fb09963ac41
=input.spec-%var-x-2
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 8199 ] -> 128, [ 8200; 8203 ] -> 0, [ 8204; 2101251 ] -> 128, [ 2101252; 2101254 ] -> 0, [ 2101255; 8407039 ] -> 128, [ 8407040; 8407040 ] -> 4, [ 8407041; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8200; 8203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8204; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2101256; 8407039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8407040; 8407043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8407044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.llvm-%m
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda4015Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4016Var : BV:32
18 : Lambda4017Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4018Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : ite(55, 2, 309) : BV:32
311 : lambda(52, 310) : FUNCTION[BV:32 -> BV:32]
312 : map(51, 311) : MAP[BV:32 -> BV:32]
313 : lambda(17, 312) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
314 : map(16, 313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
315 : sym_const(314) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8203 { 0x200b +1.97787e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8407043 { 0x804803 +1.219762e130 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda3919Var : BV:32
2 : Lambda3920Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda3921Var : BV:32
2 : Lambda3922Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda3923Var : BV:32
2 : Lambda3924Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda3929Var : BV:32
2 : Lambda3930Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda3933Var : BV:32
2 : Lambda3934Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda3935Var : BV:32
2 : Lambda3936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2729452928
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), bvuge(0, input.spec-%var-m-1.L3%7%bbentry))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : andnot1(7, 10) : BOOL
12 : or(4, 11) : BOOL
</MSG>
<MSG>0:32 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140710 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140413 : input.dst.llvm-%n : BV:32                 : 2147483648
140711 : bvult(140710, 140413) : BOOL              : true
140998 : not(140711) : BOOL                        : false
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
140559 : bvuge(140556, 140557) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2155905028
169111 : bvuge(140278, 140571) : BOOL              : false
169139 : andnot1(140559, 169111) : BOOL            : false
169141 : or(140998, 169139) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce255 b04b1d45f931a6b47f2fb09963ac41
=input.spec-%var-x-2
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 8199 ] -> 128, [ 8200; 8203 ] -> 0, [ 8204; 2101251 ] -> 128, [ 2101252; 2101254 ] -> 0, [ 2101255; 8407039 ] -> 128, [ 8407040; 8407040 ] -> 4, [ 8407041; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8200; 8203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8204; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2101256; 8407039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8407040; 8407043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8407044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.llvm-%m
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda4015Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4016Var : BV:32
18 : Lambda4017Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4018Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : ite(55, 2, 309) : BV:32
311 : lambda(52, 310) : FUNCTION[BV:32 -> BV:32]
312 : map(51, 311) : MAP[BV:32 -> BV:32]
313 : lambda(17, 312) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
314 : map(16, 313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
315 : sym_const(314) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8203 { 0x200b +1.97787e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8407043 { 0x804803 +1.219762e130 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda3919Var : BV:32
2 : Lambda3920Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda3921Var : BV:32
2 : Lambda3922Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda3923Var : BV:32
2 : Lambda3924Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda3929Var : BV:32
2 : Lambda3930Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda3933Var : BV:32
2 : Lambda3934Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda3935Var : BV:32
2 : Lambda3936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2729452928
=counter_example_end


</MSG>
<MSG>0:32 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:1, s:0, sp: 5)...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B1: Propagated 8 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : foo.A1.B1: Added the 8 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:32 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Added correlation to the product-TFG foo.A1.B1 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:32 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 13 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>0:32 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:32 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:32 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:32 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:32 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:32 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:32 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 13 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht16-prove_trivial11-prove5...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:34 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:34 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:39 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>0:39 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:39 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:39 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:39 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:39 : foo.A1.B1 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:39 : foo.A1.B1 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:39 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>0:39 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:39 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>0:39 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:39 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:39 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:39 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:39 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:39 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:39 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:39 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht15-prove_trivial10-prove5...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:40 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:40 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial2-prove9...</MSG>
<MSG>0:45 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:45 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:45 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:45 : foo.A1.B3 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:45 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:45 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>0:45 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:45 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>0:45 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:45 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:45 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht21-prove_trivial15-prove6...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:45 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:45 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial3-prove9...</MSG>
<MSG>0:46 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:46 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:46 : foo.A1.B4 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:46 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:46 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>0:46 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:46 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>0:46 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:46 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:46 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:46 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:46 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:46 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:46 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:46 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht12-prove_trivial10-prove2...</MSG>
<MSG>0:46 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:46 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:46 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:46 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:46 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:47 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:47 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:47 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:47 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:47 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:47 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:47 : foo.A1.B3 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:47 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:47 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:47 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:47 : Attempting correlation of src pathset L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:47 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:47 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:47 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>0:47 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:47 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:47 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:47 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:47 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:47 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:47 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:47 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:47 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:47 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Propagated 11 out of 16 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:47 : foo.A1.B3.C1: Added the 11 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:47 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:47 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:47 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:47 : Added correlation to the product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:47 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:47 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:47 : Constructed infer_invariants_dfa with initial worklist L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:47 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:47 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:48 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:48 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:50 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:52 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:52 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:54 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:55 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:55 : foo.A1.B3.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:55 : foo.A1.B3.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:56 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Considering 2 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Found 2 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>0:56 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 44 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 27 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:56 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:56 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:56 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:56 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:56 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140712 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140411 : input.dst.llvm-%m : BV:32                 : 67108864
140713 : bvult(140712, 140411) : BOOL              : true
214311 : not(140713) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 67108864
169111 : bvuge(140278, 140571) : BOOL              : false
140286 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 8847408
140616 : bvadd(140286, 140556) : BV:32             : 8847409
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
222198 : bvuge(140616, 140557) : BOOL              : false
222901 : andnot2(169111, 222198) : BOOL            : false
222904 : or(214311, 222901) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4093 53f39c896883995e8b3ac846a9cccf
=input.spec-%var-x-2
1 : Lambda31945Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31946Var : BV:32
18 : Lambda31947Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31948Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
85 : eq(80, 84) : BOOL
86 : 254 { 0xfe -2 } : BV:8
87 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
88 : eq(80, 87) : BOOL
89 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
90 : eq(80, 89) : BOOL
91 : 0 { 0x0 } : BV:8
92 : ite(90, 83, 91) : BV:8
93 : ite(88, 83, 92) : BV:8
94 : ite(85, 86, 93) : BV:8
95 : ite(82, 83, 94) : BV:8
96 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : eq(97, 87) : BOOL
101 : eq(97, 89) : BOOL
102 : ite(101, 83, 91) : BV:8
103 : ite(100, 83, 102) : BV:8
104 : ite(99, 86, 103) : BV:8
105 : ite(98, 83, 104) : BV:8
106 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
107 : bvadd(106, 79) : BV:32
108 : eq(107, 81) : BOOL
109 : eq(107, 84) : BOOL
110 : eq(107, 87) : BOOL
111 : eq(107, 89) : BOOL
112 : ite(111, 83, 91) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : ite(109, 86, 113) : BV:8
115 : ite(108, 83, 114) : BV:8
116 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
117 : bvadd(116, 79) : BV:32
118 : eq(117, 81) : BOOL
119 : eq(117, 84) : BOOL
120 : eq(117, 87) : BOOL
121 : eq(117, 89) : BOOL
122 : ite(121, 83, 91) : BV:8
123 : ite(120, 83, 122) : BV:8
124 : ite(119, 86, 123) : BV:8
125 : ite(118, 83, 124) : BV:8
126 : bvconcat(95, 105, 115, 125) : BV:32
127 : bvadd(75, 77, 126) : BV:32
128 : eq(127, 81) : BOOL
129 : eq(127, 84) : BOOL
130 : eq(127, 87) : BOOL
131 : eq(127, 89) : BOOL
132 : ite(131, 83, 91) : BV:8
133 : ite(130, 83, 132) : BV:8
134 : ite(129, 86, 133) : BV:8
135 : ite(128, 83, 134) : BV:8
136 : 2 { 0x2 +1.23e129 } : BV:32
137 : bvadd(136, 77, 126) : BV:32
138 : eq(137, 81) : BOOL
139 : eq(137, 84) : BOOL
140 : eq(137, 87) : BOOL
141 : eq(137, 89) : BOOL
142 : ite(141, 83, 91) : BV:8
143 : ite(140, 83, 142) : BV:8
144 : ite(139, 86, 143) : BV:8
145 : ite(138, 83, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 77, 126) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 87) : BOOL
151 : eq(147, 89) : BOOL
152 : ite(151, 83, 91) : BV:8
153 : ite(150, 83, 152) : BV:8
154 : ite(149, 86, 153) : BV:8
155 : ite(148, 83, 154) : BV:8
156 : bvadd(77, 126) : BV:32
157 : eq(156, 81) : BOOL
158 : eq(156, 84) : BOOL
159 : eq(156, 87) : BOOL
160 : eq(156, 89) : BOOL
161 : ite(160, 83, 91) : BV:8
162 : ite(159, 83, 161) : BV:8
163 : ite(158, 86, 162) : BV:8
164 : ite(157, 83, 163) : BV:8
165 : bvconcat(135, 145, 155, 164) : BV:32
166 : ite(55, 2, 165) : BV:32
167 : ite(74, 165, 166) : BV:32
168 : ite(55, 2, 167) : BV:32
169 : lambda(52, 168) : FUNCTION[BV:32 -> BV:32]
170 : map(51, 169) : MAP[BV:32 -> BV:32]
171 : lambda(17, 170) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
172 : map(16, 171) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
173 : sym_const(172) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda31971Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31972Var : BV:32
18 : Lambda31973Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31974Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
63 : eq(61, 62) : BOOL
64 : 255 { 0xff -1 } : BV:8
65 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
66 : eq(61, 65) : BOOL
67 : 254 { 0xfe -2 } : BV:8
68 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
69 : eq(61, 68) : BOOL
70 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
71 : eq(61, 70) : BOOL
72 : 0 { 0x0 } : BV:8
73 : ite(71, 64, 72) : BV:8
74 : ite(69, 64, 73) : BV:8
75 : ite(66, 67, 74) : BV:8
76 : ite(63, 64, 75) : BV:8
77 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
78 : bvadd(77, 60) : BV:32
79 : eq(78, 62) : BOOL
80 : eq(78, 65) : BOOL
81 : eq(78, 68) : BOOL
82 : eq(78, 70) : BOOL
83 : ite(82, 64, 72) : BV:8
84 : ite(81, 64, 83) : BV:8
85 : ite(80, 67, 84) : BV:8
86 : ite(79, 64, 85) : BV:8
87 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
88 : bvadd(87, 60) : BV:32
89 : eq(88, 62) : BOOL
90 : eq(88, 65) : BOOL
91 : eq(88, 68) : BOOL
92 : eq(88, 70) : BOOL
93 : ite(92, 64, 72) : BV:8
94 : ite(91, 64, 93) : BV:8
95 : ite(90, 67, 94) : BV:8
96 : ite(89, 64, 95) : BV:8
97 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
98 : bvadd(97, 60) : BV:32
99 : eq(98, 62) : BOOL
100 : eq(98, 65) : BOOL
101 : eq(98, 68) : BOOL
102 : eq(98, 70) : BOOL
103 : ite(102, 64, 72) : BV:8
104 : ite(101, 64, 103) : BV:8
105 : ite(100, 67, 104) : BV:8
106 : ite(99, 64, 105) : BV:8
107 : bvconcat(76, 86, 96, 106) : BV:32
108 : bvadd(56, 58, 107) : BV:32
109 : eq(108, 62) : BOOL
110 : eq(108, 65) : BOOL
111 : eq(108, 68) : BOOL
112 : eq(108, 70) : BOOL
113 : ite(112, 64, 72) : BV:8
114 : ite(111, 64, 113) : BV:8
115 : ite(110, 67, 114) : BV:8
116 : ite(109, 64, 115) : BV:8
117 : 2 { 0x2 +1.23e129 } : BV:32
118 : bvadd(117, 58, 107) : BV:32
119 : eq(118, 62) : BOOL
120 : eq(118, 65) : BOOL
121 : eq(118, 68) : BOOL
122 : eq(118, 70) : BOOL
123 : ite(122, 64, 72) : BV:8
124 : ite(121, 64, 123) : BV:8
125 : ite(120, 67, 124) : BV:8
126 : ite(119, 64, 125) : BV:8
127 : 1 { 0x1 +1.11e129 } : BV:32
128 : bvadd(127, 58, 107) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 68) : BOOL
132 : eq(128, 70) : BOOL
133 : ite(132, 64, 72) : BV:8
134 : ite(131, 64, 133) : BV:8
135 : ite(130, 67, 134) : BV:8
136 : ite(129, 64, 135) : BV:8
137 : bvadd(58, 107) : BV:32
138 : eq(137, 62) : BOOL
139 : eq(137, 65) : BOOL
140 : eq(137, 68) : BOOL
141 : eq(137, 70) : BOOL
142 : ite(141, 64, 72) : BV:8
143 : ite(140, 64, 142) : BV:8
144 : ite(139, 67, 143) : BV:8
145 : ite(138, 64, 144) : BV:8
146 : bvconcat(116, 126, 136, 145) : BV:32
147 : ite(55, 2, 146) : BV:32
148 : lambda(52, 147) : FUNCTION[BV:32 -> BV:32]
149 : map(51, 148) : MAP[BV:32 -> BV:32]
150 : lambda(17, 149) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
151 : map(16, 150) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
152 : sym_const(151) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 246227391 ] -> 0, [ 246227392; 246227392 ] -> 254, [ 246227393; 246227395 ] -> 255, [ 246227396; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 17323135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 17323136; 17323139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 17323140; 541091075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 541091076; 541091079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 541091080; 2402828291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2402828292; 2402828295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2402828296; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2402828292 { 0x8f384004 -1892139004 -1.43945360e159 } : BV:32
=input.dst.llvm-%m
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 17323136 { 0x1085480 +1.6507873e131 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 541091076 { 0x20406504 +1.50308275e193 } : BV:32
=input.dst.llvm-%x
1 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 8847408 { 0x870030 +1.5469322e130 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda31958Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31959Var : BV:32
18 : Lambda31960Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31961Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
85 : eq(80, 84) : BOOL
86 : 254 { 0xfe -2 } : BV:8
87 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
88 : eq(80, 87) : BOOL
89 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
90 : eq(80, 89) : BOOL
91 : 0 { 0x0 } : BV:8
92 : ite(90, 83, 91) : BV:8
93 : ite(88, 83, 92) : BV:8
94 : ite(85, 86, 93) : BV:8
95 : ite(82, 83, 94) : BV:8
96 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : eq(97, 87) : BOOL
101 : eq(97, 89) : BOOL
102 : ite(101, 83, 91) : BV:8
103 : ite(100, 83, 102) : BV:8
104 : ite(99, 86, 103) : BV:8
105 : ite(98, 83, 104) : BV:8
106 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
107 : bvadd(106, 79) : BV:32
108 : eq(107, 81) : BOOL
109 : eq(107, 84) : BOOL
110 : eq(107, 87) : BOOL
111 : eq(107, 89) : BOOL
112 : ite(111, 83, 91) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : ite(109, 86, 113) : BV:8
115 : ite(108, 83, 114) : BV:8
116 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
117 : bvadd(116, 79) : BV:32
118 : eq(117, 81) : BOOL
119 : eq(117, 84) : BOOL
120 : eq(117, 87) : BOOL
121 : eq(117, 89) : BOOL
122 : ite(121, 83, 91) : BV:8
123 : ite(120, 83, 122) : BV:8
124 : ite(119, 86, 123) : BV:8
125 : ite(118, 83, 124) : BV:8
126 : bvconcat(95, 105, 115, 125) : BV:32
127 : bvadd(75, 77, 126) : BV:32
128 : eq(127, 81) : BOOL
129 : eq(127, 84) : BOOL
130 : eq(127, 87) : BOOL
131 : eq(127, 89) : BOOL
132 : ite(131, 83, 91) : BV:8
133 : ite(130, 83, 132) : BV:8
134 : ite(129, 86, 133) : BV:8
135 : ite(128, 83, 134) : BV:8
136 : 2 { 0x2 +1.23e129 } : BV:32
137 : bvadd(136, 77, 126) : BV:32
138 : eq(137, 81) : BOOL
139 : eq(137, 84) : BOOL
140 : eq(137, 87) : BOOL
141 : eq(137, 89) : BOOL
142 : ite(141, 83, 91) : BV:8
143 : ite(140, 83, 142) : BV:8
144 : ite(139, 86, 143) : BV:8
145 : ite(138, 83, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 77, 126) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 87) : BOOL
151 : eq(147, 89) : BOOL
152 : ite(151, 83, 91) : BV:8
153 : ite(150, 83, 152) : BV:8
154 : ite(149, 86, 153) : BV:8
155 : ite(148, 83, 154) : BV:8
156 : bvadd(77, 126) : BV:32
157 : eq(156, 81) : BOOL
158 : eq(156, 84) : BOOL
159 : eq(156, 87) : BOOL
160 : eq(156, 89) : BOOL
161 : ite(160, 83, 91) : BV:8
162 : ite(159, 83, 161) : BV:8
163 : ite(158, 86, 162) : BV:8
164 : ite(157, 83, 163) : BV:8
165 : bvconcat(135, 145, 155, 164) : BV:32
166 : ite(55, 2, 165) : BV:32
167 : ite(74, 165, 166) : BV:32
168 : ite(55, 2, 167) : BV:32
169 : ite(55, 2, 168) : BV:32
170 : lambda(52, 169) : FUNCTION[BV:32 -> BV:32]
171 : map(51, 170) : MAP[BV:32 -> BV:32]
172 : lambda(17, 171) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
173 : map(16, 172) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
174 : sym_const(173) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8847408 { 0x870030 +1.5469322e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 17323136 { 0x1085480 +1.6507873e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 17323139 { 0x1085483 +1.6507909e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 541091076 { 0x20406504 +1.50308275e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 541091079 { 0x20406507 +1.50308310e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2402828292 { 0x8f384004 -1892139004 -1.43945360e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2402828295 { 0x8f384007 -1892139001 -1.43945395e159 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda31804Var : BV:32
2 : Lambda31805Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 67108865 { 0x4000001 +1.11e137 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 67108864 { 0x4000000 +1.0e137 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
58 : eq(53, 57) : BOOL
59 : 254 { 0xfe -2 } : BV:8
60 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
61 : eq(53, 60) : BOOL
62 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
63 : eq(53, 62) : BOOL
64 : 0 { 0x0 } : BV:8
65 : ite(63, 56, 64) : BV:8
66 : ite(61, 56, 65) : BV:8
67 : ite(58, 59, 66) : BV:8
68 : ite(55, 56, 67) : BV:8
69 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : eq(70, 60) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 56, 64) : BV:8
76 : ite(73, 56, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 56, 77) : BV:8
79 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
80 : bvadd(79, 52) : BV:32
81 : eq(80, 54) : BOOL
82 : eq(80, 57) : BOOL
83 : eq(80, 60) : BOOL
84 : eq(80, 62) : BOOL
85 : ite(84, 56, 64) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : ite(82, 59, 86) : BV:8
88 : ite(81, 56, 87) : BV:8
89 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
90 : bvadd(89, 52) : BV:32
91 : eq(90, 54) : BOOL
92 : eq(90, 57) : BOOL
93 : eq(90, 60) : BOOL
94 : eq(90, 62) : BOOL
95 : ite(94, 56, 64) : BV:8
96 : ite(93, 56, 95) : BV:8
97 : ite(92, 59, 96) : BV:8
98 : ite(91, 56, 97) : BV:8
99 : bvconcat(68, 78, 88, 98) : BV:32
100 : bvadd(48, 50, 99) : BV:32
101 : eq(100, 54) : BOOL
102 : eq(100, 57) : BOOL
103 : eq(100, 60) : BOOL
104 : eq(100, 62) : BOOL
105 : ite(104, 56, 64) : BV:8
106 : ite(103, 56, 105) : BV:8
107 : ite(102, 59, 106) : BV:8
108 : ite(101, 56, 107) : BV:8
109 : 2 { 0x2 +1.23e129 } : BV:32
110 : bvadd(109, 50, 99) : BV:32
111 : eq(110, 54) : BOOL
112 : eq(110, 57) : BOOL
113 : eq(110, 60) : BOOL
114 : eq(110, 62) : BOOL
115 : ite(114, 56, 64) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 59, 116) : BV:8
118 : ite(111, 56, 117) : BV:8
119 : 1 { 0x1 +1.11e129 } : BV:32
120 : bvadd(119, 50, 99) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 60) : BOOL
124 : eq(120, 62) : BOOL
125 : ite(124, 56, 64) : BV:8
126 : ite(123, 56, 125) : BV:8
127 : ite(122, 59, 126) : BV:8
128 : ite(121, 56, 127) : BV:8
129 : bvadd(50, 99) : BV:32
130 : eq(129, 54) : BOOL
131 : eq(129, 57) : BOOL
132 : eq(129, 60) : BOOL
133 : eq(129, 62) : BOOL
134 : ite(133, 56, 64) : BV:8
135 : ite(132, 56, 134) : BV:8
136 : ite(131, 59, 135) : BV:8
137 : ite(130, 56, 136) : BV:8
138 : bvconcat(108, 118, 128, 137) : BV:32
139 : ite(6, 3, 138) : BV:32
140 : ite(47, 138, 139) : BV:32
141 : ite(6, 3, 140) : BV:32
142 : lambda(1, 2, 141) : FUNCTION[BV:32,BV:32 -> BV:32]
143 : sym_const(142) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda31813Var : BV:32
2 : Lambda31814Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 67108865 { 0x4000001 +1.11e137 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 67108864 { 0x4000000 +1.0e137 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
58 : eq(53, 57) : BOOL
59 : 254 { 0xfe -2 } : BV:8
60 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
61 : eq(53, 60) : BOOL
62 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
63 : eq(53, 62) : BOOL
64 : 0 { 0x0 } : BV:8
65 : ite(63, 56, 64) : BV:8
66 : ite(61, 56, 65) : BV:8
67 : ite(58, 59, 66) : BV:8
68 : ite(55, 56, 67) : BV:8
69 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : eq(70, 60) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 56, 64) : BV:8
76 : ite(73, 56, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 56, 77) : BV:8
79 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
80 : bvadd(79, 52) : BV:32
81 : eq(80, 54) : BOOL
82 : eq(80, 57) : BOOL
83 : eq(80, 60) : BOOL
84 : eq(80, 62) : BOOL
85 : ite(84, 56, 64) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : ite(82, 59, 86) : BV:8
88 : ite(81, 56, 87) : BV:8
89 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
90 : bvadd(89, 52) : BV:32
91 : eq(90, 54) : BOOL
92 : eq(90, 57) : BOOL
93 : eq(90, 60) : BOOL
94 : eq(90, 62) : BOOL
95 : ite(94, 56, 64) : BV:8
96 : ite(93, 56, 95) : BV:8
97 : ite(92, 59, 96) : BV:8
98 : ite(91, 56, 97) : BV:8
99 : bvconcat(68, 78, 88, 98) : BV:32
100 : bvadd(48, 50, 99) : BV:32
101 : eq(100, 54) : BOOL
102 : eq(100, 57) : BOOL
103 : eq(100, 60) : BOOL
104 : eq(100, 62) : BOOL
105 : ite(104, 56, 64) : BV:8
106 : ite(103, 56, 105) : BV:8
107 : ite(102, 59, 106) : BV:8
108 : ite(101, 56, 107) : BV:8
109 : 2 { 0x2 +1.23e129 } : BV:32
110 : bvadd(109, 50, 99) : BV:32
111 : eq(110, 54) : BOOL
112 : eq(110, 57) : BOOL
113 : eq(110, 60) : BOOL
114 : eq(110, 62) : BOOL
115 : ite(114, 56, 64) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 59, 116) : BV:8
118 : ite(111, 56, 117) : BV:8
119 : 1 { 0x1 +1.11e129 } : BV:32
120 : bvadd(119, 50, 99) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 60) : BOOL
124 : eq(120, 62) : BOOL
125 : ite(124, 56, 64) : BV:8
126 : ite(123, 56, 125) : BV:8
127 : ite(122, 59, 126) : BV:8
128 : ite(121, 56, 127) : BV:8
129 : bvadd(50, 99) : BV:32
130 : eq(129, 54) : BOOL
131 : eq(129, 57) : BOOL
132 : eq(129, 60) : BOOL
133 : eq(129, 62) : BOOL
134 : ite(133, 56, 64) : BV:8
135 : ite(132, 56, 134) : BV:8
136 : ite(131, 59, 135) : BV:8
137 : ite(130, 56, 136) : BV:8
138 : bvconcat(108, 118, 128, 137) : BV:32
139 : ite(6, 3, 138) : BV:32
140 : ite(47, 138, 139) : BV:32
141 : ite(6, 3, 140) : BV:32
142 : ite(6, 3, 141) : BV:32
143 : lambda(1, 2, 142) : FUNCTION[BV:32,BV:32 -> BV:32]
144 : sym_const(143) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda31815Var : BV:32
2 : Lambda31816Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda31821Var : BV:32
2 : Lambda31822Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda31811Var : BV:32
2 : Lambda31812Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
17 : eq(12, 16) : BOOL
18 : 254 { 0xfe -2 } : BV:8
19 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
20 : eq(12, 19) : BOOL
21 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
22 : eq(12, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : ite(22, 15, 23) : BV:8
25 : ite(20, 15, 24) : BV:8
26 : ite(17, 18, 25) : BV:8
27 : ite(14, 15, 26) : BV:8
28 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
29 : bvadd(28, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 16) : BOOL
32 : eq(29, 19) : BOOL
33 : eq(29, 21) : BOOL
34 : ite(33, 15, 23) : BV:8
35 : ite(32, 15, 34) : BV:8
36 : ite(31, 18, 35) : BV:8
37 : ite(30, 15, 36) : BV:8
38 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
39 : bvadd(38, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 21) : BOOL
44 : ite(43, 15, 23) : BV:8
45 : ite(42, 15, 44) : BV:8
46 : ite(41, 18, 45) : BV:8
47 : ite(40, 15, 46) : BV:8
48 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
49 : bvadd(48, 11) : BV:32
50 : eq(49, 13) : BOOL
51 : eq(49, 16) : BOOL
52 : eq(49, 19) : BOOL
53 : eq(49, 21) : BOOL
54 : ite(53, 15, 23) : BV:8
55 : ite(52, 15, 54) : BV:8
56 : ite(51, 18, 55) : BV:8
57 : ite(50, 15, 56) : BV:8
58 : bvconcat(27, 37, 47, 57) : BV:32
59 : bvadd(7, 9, 58) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 21) : BOOL
64 : ite(63, 15, 23) : BV:8
65 : ite(62, 15, 64) : BV:8
66 : ite(61, 18, 65) : BV:8
67 : ite(60, 15, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 9, 58) : BV:32
70 : eq(69, 13) : BOOL
71 : eq(69, 16) : BOOL
72 : eq(69, 19) : BOOL
73 : eq(69, 21) : BOOL
74 : ite(73, 15, 23) : BV:8
75 : ite(72, 15, 74) : BV:8
76 : ite(71, 18, 75) : BV:8
77 : ite(70, 15, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 9, 58) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 19) : BOOL
83 : eq(79, 21) : BOOL
84 : ite(83, 15, 23) : BV:8
85 : ite(82, 15, 84) : BV:8
86 : ite(81, 18, 85) : BV:8
87 : ite(80, 15, 86) : BV:8
88 : bvadd(9, 58) : BV:32
89 : eq(88, 13) : BOOL
90 : eq(88, 16) : BOOL
91 : eq(88, 19) : BOOL
92 : eq(88, 21) : BOOL
93 : ite(92, 15, 23) : BV:8
94 : ite(91, 15, 93) : BV:8
95 : ite(90, 18, 94) : BV:8
96 : ite(89, 15, 95) : BV:8
97 : bvconcat(67, 77, 87, 96) : BV:32
98 : ite(6, 3, 97) : BV:32
99 : lambda(1, 2, 98) : FUNCTION[BV:32,BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda31806Var : BV:32
2 : Lambda31807Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1486538138
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)), andnot2(bvuge(0, input.spec-%var-m-1.L3%7%bbentry), bvuge(bvadd(1, input.spec-%var-i-1.L3%7%bbentry), input.spec-%var-n-1.L3%7%bbentry))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.spec-%var-m-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : input.spec-%var-i-1.L3%7%bbentry : BV:32
10 : bvadd(8, 9) : BV:32
11 : input.spec-%var-n-1.L3%7%bbentry : BV:32
12 : bvuge(10, 11) : BOOL
13 : andnot2(7, 12) : BOOL
14 : or(4, 13) : BOOL
</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:56 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140712 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140411 : input.dst.llvm-%m : BV:32                 : 67108864
140713 : bvult(140712, 140411) : BOOL              : true
214311 : not(140713) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 67108864
169111 : bvuge(140278, 140571) : BOOL              : false
140286 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140556 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 8847408
140616 : bvadd(140286, 140556) : BV:32             : 8847409
140557 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
222198 : bvuge(140616, 140557) : BOOL              : false
222901 : andnot2(169111, 222198) : BOOL            : false
222904 : or(214311, 222901) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4093 53f39c896883995e8b3ac846a9cccf
=input.spec-%var-x-2
1 : Lambda31945Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31946Var : BV:32
18 : Lambda31947Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31948Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
85 : eq(80, 84) : BOOL
86 : 254 { 0xfe -2 } : BV:8
87 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
88 : eq(80, 87) : BOOL
89 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
90 : eq(80, 89) : BOOL
91 : 0 { 0x0 } : BV:8
92 : ite(90, 83, 91) : BV:8
93 : ite(88, 83, 92) : BV:8
94 : ite(85, 86, 93) : BV:8
95 : ite(82, 83, 94) : BV:8
96 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : eq(97, 87) : BOOL
101 : eq(97, 89) : BOOL
102 : ite(101, 83, 91) : BV:8
103 : ite(100, 83, 102) : BV:8
104 : ite(99, 86, 103) : BV:8
105 : ite(98, 83, 104) : BV:8
106 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
107 : bvadd(106, 79) : BV:32
108 : eq(107, 81) : BOOL
109 : eq(107, 84) : BOOL
110 : eq(107, 87) : BOOL
111 : eq(107, 89) : BOOL
112 : ite(111, 83, 91) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : ite(109, 86, 113) : BV:8
115 : ite(108, 83, 114) : BV:8
116 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
117 : bvadd(116, 79) : BV:32
118 : eq(117, 81) : BOOL
119 : eq(117, 84) : BOOL
120 : eq(117, 87) : BOOL
121 : eq(117, 89) : BOOL
122 : ite(121, 83, 91) : BV:8
123 : ite(120, 83, 122) : BV:8
124 : ite(119, 86, 123) : BV:8
125 : ite(118, 83, 124) : BV:8
126 : bvconcat(95, 105, 115, 125) : BV:32
127 : bvadd(75, 77, 126) : BV:32
128 : eq(127, 81) : BOOL
129 : eq(127, 84) : BOOL
130 : eq(127, 87) : BOOL
131 : eq(127, 89) : BOOL
132 : ite(131, 83, 91) : BV:8
133 : ite(130, 83, 132) : BV:8
134 : ite(129, 86, 133) : BV:8
135 : ite(128, 83, 134) : BV:8
136 : 2 { 0x2 +1.23e129 } : BV:32
137 : bvadd(136, 77, 126) : BV:32
138 : eq(137, 81) : BOOL
139 : eq(137, 84) : BOOL
140 : eq(137, 87) : BOOL
141 : eq(137, 89) : BOOL
142 : ite(141, 83, 91) : BV:8
143 : ite(140, 83, 142) : BV:8
144 : ite(139, 86, 143) : BV:8
145 : ite(138, 83, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 77, 126) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 87) : BOOL
151 : eq(147, 89) : BOOL
152 : ite(151, 83, 91) : BV:8
153 : ite(150, 83, 152) : BV:8
154 : ite(149, 86, 153) : BV:8
155 : ite(148, 83, 154) : BV:8
156 : bvadd(77, 126) : BV:32
157 : eq(156, 81) : BOOL
158 : eq(156, 84) : BOOL
159 : eq(156, 87) : BOOL
160 : eq(156, 89) : BOOL
161 : ite(160, 83, 91) : BV:8
162 : ite(159, 83, 161) : BV:8
163 : ite(158, 86, 162) : BV:8
164 : ite(157, 83, 163) : BV:8
165 : bvconcat(135, 145, 155, 164) : BV:32
166 : ite(55, 2, 165) : BV:32
167 : ite(74, 165, 166) : BV:32
168 : ite(55, 2, 167) : BV:32
169 : lambda(52, 168) : FUNCTION[BV:32 -> BV:32]
170 : map(51, 169) : MAP[BV:32 -> BV:32]
171 : lambda(17, 170) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
172 : map(16, 171) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
173 : sym_const(172) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda31971Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31972Var : BV:32
18 : Lambda31973Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31974Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
63 : eq(61, 62) : BOOL
64 : 255 { 0xff -1 } : BV:8
65 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
66 : eq(61, 65) : BOOL
67 : 254 { 0xfe -2 } : BV:8
68 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
69 : eq(61, 68) : BOOL
70 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
71 : eq(61, 70) : BOOL
72 : 0 { 0x0 } : BV:8
73 : ite(71, 64, 72) : BV:8
74 : ite(69, 64, 73) : BV:8
75 : ite(66, 67, 74) : BV:8
76 : ite(63, 64, 75) : BV:8
77 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
78 : bvadd(77, 60) : BV:32
79 : eq(78, 62) : BOOL
80 : eq(78, 65) : BOOL
81 : eq(78, 68) : BOOL
82 : eq(78, 70) : BOOL
83 : ite(82, 64, 72) : BV:8
84 : ite(81, 64, 83) : BV:8
85 : ite(80, 67, 84) : BV:8
86 : ite(79, 64, 85) : BV:8
87 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
88 : bvadd(87, 60) : BV:32
89 : eq(88, 62) : BOOL
90 : eq(88, 65) : BOOL
91 : eq(88, 68) : BOOL
92 : eq(88, 70) : BOOL
93 : ite(92, 64, 72) : BV:8
94 : ite(91, 64, 93) : BV:8
95 : ite(90, 67, 94) : BV:8
96 : ite(89, 64, 95) : BV:8
97 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
98 : bvadd(97, 60) : BV:32
99 : eq(98, 62) : BOOL
100 : eq(98, 65) : BOOL
101 : eq(98, 68) : BOOL
102 : eq(98, 70) : BOOL
103 : ite(102, 64, 72) : BV:8
104 : ite(101, 64, 103) : BV:8
105 : ite(100, 67, 104) : BV:8
106 : ite(99, 64, 105) : BV:8
107 : bvconcat(76, 86, 96, 106) : BV:32
108 : bvadd(56, 58, 107) : BV:32
109 : eq(108, 62) : BOOL
110 : eq(108, 65) : BOOL
111 : eq(108, 68) : BOOL
112 : eq(108, 70) : BOOL
113 : ite(112, 64, 72) : BV:8
114 : ite(111, 64, 113) : BV:8
115 : ite(110, 67, 114) : BV:8
116 : ite(109, 64, 115) : BV:8
117 : 2 { 0x2 +1.23e129 } : BV:32
118 : bvadd(117, 58, 107) : BV:32
119 : eq(118, 62) : BOOL
120 : eq(118, 65) : BOOL
121 : eq(118, 68) : BOOL
122 : eq(118, 70) : BOOL
123 : ite(122, 64, 72) : BV:8
124 : ite(121, 64, 123) : BV:8
125 : ite(120, 67, 124) : BV:8
126 : ite(119, 64, 125) : BV:8
127 : 1 { 0x1 +1.11e129 } : BV:32
128 : bvadd(127, 58, 107) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 68) : BOOL
132 : eq(128, 70) : BOOL
133 : ite(132, 64, 72) : BV:8
134 : ite(131, 64, 133) : BV:8
135 : ite(130, 67, 134) : BV:8
136 : ite(129, 64, 135) : BV:8
137 : bvadd(58, 107) : BV:32
138 : eq(137, 62) : BOOL
139 : eq(137, 65) : BOOL
140 : eq(137, 68) : BOOL
141 : eq(137, 70) : BOOL
142 : ite(141, 64, 72) : BV:8
143 : ite(140, 64, 142) : BV:8
144 : ite(139, 67, 143) : BV:8
145 : ite(138, 64, 144) : BV:8
146 : bvconcat(116, 126, 136, 145) : BV:32
147 : ite(55, 2, 146) : BV:32
148 : lambda(52, 147) : FUNCTION[BV:32 -> BV:32]
149 : map(51, 148) : MAP[BV:32 -> BV:32]
150 : lambda(17, 149) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
151 : map(16, 150) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
152 : sym_const(151) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 246227391 ] -> 0, [ 246227392; 246227392 ] -> 254, [ 246227393; 246227395 ] -> 255, [ 246227396; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 17323135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 17323136; 17323139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 17323140; 541091075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 541091076; 541091079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 541091080; 2402828291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2402828292; 2402828295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2402828296; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2402828292 { 0x8f384004 -1892139004 -1.43945360e159 } : BV:32
=input.dst.llvm-%m
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 17323136 { 0x1085480 +1.6507873e131 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 541091076 { 0x20406504 +1.50308275e193 } : BV:32
=input.dst.llvm-%x
1 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 8847408 { 0x870030 +1.5469322e130 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda31958Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31959Var : BV:32
18 : Lambda31960Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31961Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
85 : eq(80, 84) : BOOL
86 : 254 { 0xfe -2 } : BV:8
87 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
88 : eq(80, 87) : BOOL
89 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
90 : eq(80, 89) : BOOL
91 : 0 { 0x0 } : BV:8
92 : ite(90, 83, 91) : BV:8
93 : ite(88, 83, 92) : BV:8
94 : ite(85, 86, 93) : BV:8
95 : ite(82, 83, 94) : BV:8
96 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
97 : bvadd(96, 79) : BV:32
98 : eq(97, 81) : BOOL
99 : eq(97, 84) : BOOL
100 : eq(97, 87) : BOOL
101 : eq(97, 89) : BOOL
102 : ite(101, 83, 91) : BV:8
103 : ite(100, 83, 102) : BV:8
104 : ite(99, 86, 103) : BV:8
105 : ite(98, 83, 104) : BV:8
106 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
107 : bvadd(106, 79) : BV:32
108 : eq(107, 81) : BOOL
109 : eq(107, 84) : BOOL
110 : eq(107, 87) : BOOL
111 : eq(107, 89) : BOOL
112 : ite(111, 83, 91) : BV:8
113 : ite(110, 83, 112) : BV:8
114 : ite(109, 86, 113) : BV:8
115 : ite(108, 83, 114) : BV:8
116 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
117 : bvadd(116, 79) : BV:32
118 : eq(117, 81) : BOOL
119 : eq(117, 84) : BOOL
120 : eq(117, 87) : BOOL
121 : eq(117, 89) : BOOL
122 : ite(121, 83, 91) : BV:8
123 : ite(120, 83, 122) : BV:8
124 : ite(119, 86, 123) : BV:8
125 : ite(118, 83, 124) : BV:8
126 : bvconcat(95, 105, 115, 125) : BV:32
127 : bvadd(75, 77, 126) : BV:32
128 : eq(127, 81) : BOOL
129 : eq(127, 84) : BOOL
130 : eq(127, 87) : BOOL
131 : eq(127, 89) : BOOL
132 : ite(131, 83, 91) : BV:8
133 : ite(130, 83, 132) : BV:8
134 : ite(129, 86, 133) : BV:8
135 : ite(128, 83, 134) : BV:8
136 : 2 { 0x2 +1.23e129 } : BV:32
137 : bvadd(136, 77, 126) : BV:32
138 : eq(137, 81) : BOOL
139 : eq(137, 84) : BOOL
140 : eq(137, 87) : BOOL
141 : eq(137, 89) : BOOL
142 : ite(141, 83, 91) : BV:8
143 : ite(140, 83, 142) : BV:8
144 : ite(139, 86, 143) : BV:8
145 : ite(138, 83, 144) : BV:8
146 : 1 { 0x1 +1.11e129 } : BV:32
147 : bvadd(146, 77, 126) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 87) : BOOL
151 : eq(147, 89) : BOOL
152 : ite(151, 83, 91) : BV:8
153 : ite(150, 83, 152) : BV:8
154 : ite(149, 86, 153) : BV:8
155 : ite(148, 83, 154) : BV:8
156 : bvadd(77, 126) : BV:32
157 : eq(156, 81) : BOOL
158 : eq(156, 84) : BOOL
159 : eq(156, 87) : BOOL
160 : eq(156, 89) : BOOL
161 : ite(160, 83, 91) : BV:8
162 : ite(159, 83, 161) : BV:8
163 : ite(158, 86, 162) : BV:8
164 : ite(157, 83, 163) : BV:8
165 : bvconcat(135, 145, 155, 164) : BV:32
166 : ite(55, 2, 165) : BV:32
167 : ite(74, 165, 166) : BV:32
168 : ite(55, 2, 167) : BV:32
169 : ite(55, 2, 168) : BV:32
170 : lambda(52, 169) : FUNCTION[BV:32 -> BV:32]
171 : map(51, 170) : MAP[BV:32 -> BV:32]
172 : lambda(17, 171) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
173 : map(16, 172) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
174 : sym_const(173) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-m-0.L3%17%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-17.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8847408 { 0x870030 +1.5469322e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 17323136 { 0x1085480 +1.6507873e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 17323139 { 0x1085483 +1.6507909e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 541091076 { 0x20406504 +1.50308275e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 541091079 { 0x20406507 +1.50308310e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2402828292 { 0x8f384004 -1892139004 -1.43945360e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2402828295 { 0x8f384007 -1892139001 -1.43945395e159 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda31804Var : BV:32
2 : Lambda31805Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 67108865 { 0x4000001 +1.11e137 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 67108864 { 0x4000000 +1.0e137 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
58 : eq(53, 57) : BOOL
59 : 254 { 0xfe -2 } : BV:8
60 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
61 : eq(53, 60) : BOOL
62 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
63 : eq(53, 62) : BOOL
64 : 0 { 0x0 } : BV:8
65 : ite(63, 56, 64) : BV:8
66 : ite(61, 56, 65) : BV:8
67 : ite(58, 59, 66) : BV:8
68 : ite(55, 56, 67) : BV:8
69 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : eq(70, 60) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 56, 64) : BV:8
76 : ite(73, 56, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 56, 77) : BV:8
79 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
80 : bvadd(79, 52) : BV:32
81 : eq(80, 54) : BOOL
82 : eq(80, 57) : BOOL
83 : eq(80, 60) : BOOL
84 : eq(80, 62) : BOOL
85 : ite(84, 56, 64) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : ite(82, 59, 86) : BV:8
88 : ite(81, 56, 87) : BV:8
89 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
90 : bvadd(89, 52) : BV:32
91 : eq(90, 54) : BOOL
92 : eq(90, 57) : BOOL
93 : eq(90, 60) : BOOL
94 : eq(90, 62) : BOOL
95 : ite(94, 56, 64) : BV:8
96 : ite(93, 56, 95) : BV:8
97 : ite(92, 59, 96) : BV:8
98 : ite(91, 56, 97) : BV:8
99 : bvconcat(68, 78, 88, 98) : BV:32
100 : bvadd(48, 50, 99) : BV:32
101 : eq(100, 54) : BOOL
102 : eq(100, 57) : BOOL
103 : eq(100, 60) : BOOL
104 : eq(100, 62) : BOOL
105 : ite(104, 56, 64) : BV:8
106 : ite(103, 56, 105) : BV:8
107 : ite(102, 59, 106) : BV:8
108 : ite(101, 56, 107) : BV:8
109 : 2 { 0x2 +1.23e129 } : BV:32
110 : bvadd(109, 50, 99) : BV:32
111 : eq(110, 54) : BOOL
112 : eq(110, 57) : BOOL
113 : eq(110, 60) : BOOL
114 : eq(110, 62) : BOOL
115 : ite(114, 56, 64) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 59, 116) : BV:8
118 : ite(111, 56, 117) : BV:8
119 : 1 { 0x1 +1.11e129 } : BV:32
120 : bvadd(119, 50, 99) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 60) : BOOL
124 : eq(120, 62) : BOOL
125 : ite(124, 56, 64) : BV:8
126 : ite(123, 56, 125) : BV:8
127 : ite(122, 59, 126) : BV:8
128 : ite(121, 56, 127) : BV:8
129 : bvadd(50, 99) : BV:32
130 : eq(129, 54) : BOOL
131 : eq(129, 57) : BOOL
132 : eq(129, 60) : BOOL
133 : eq(129, 62) : BOOL
134 : ite(133, 56, 64) : BV:8
135 : ite(132, 56, 134) : BV:8
136 : ite(131, 59, 135) : BV:8
137 : ite(130, 56, 136) : BV:8
138 : bvconcat(108, 118, 128, 137) : BV:32
139 : ite(6, 3, 138) : BV:32
140 : ite(47, 138, 139) : BV:32
141 : ite(6, 3, 140) : BV:32
142 : lambda(1, 2, 141) : FUNCTION[BV:32,BV:32 -> BV:32]
143 : sym_const(142) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda31813Var : BV:32
2 : Lambda31814Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 67108865 { 0x4000001 +1.11e137 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 67108864 { 0x4000000 +1.0e137 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
58 : eq(53, 57) : BOOL
59 : 254 { 0xfe -2 } : BV:8
60 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
61 : eq(53, 60) : BOOL
62 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
63 : eq(53, 62) : BOOL
64 : 0 { 0x0 } : BV:8
65 : ite(63, 56, 64) : BV:8
66 : ite(61, 56, 65) : BV:8
67 : ite(58, 59, 66) : BV:8
68 : ite(55, 56, 67) : BV:8
69 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
70 : bvadd(69, 52) : BV:32
71 : eq(70, 54) : BOOL
72 : eq(70, 57) : BOOL
73 : eq(70, 60) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 56, 64) : BV:8
76 : ite(73, 56, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 56, 77) : BV:8
79 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
80 : bvadd(79, 52) : BV:32
81 : eq(80, 54) : BOOL
82 : eq(80, 57) : BOOL
83 : eq(80, 60) : BOOL
84 : eq(80, 62) : BOOL
85 : ite(84, 56, 64) : BV:8
86 : ite(83, 56, 85) : BV:8
87 : ite(82, 59, 86) : BV:8
88 : ite(81, 56, 87) : BV:8
89 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
90 : bvadd(89, 52) : BV:32
91 : eq(90, 54) : BOOL
92 : eq(90, 57) : BOOL
93 : eq(90, 60) : BOOL
94 : eq(90, 62) : BOOL
95 : ite(94, 56, 64) : BV:8
96 : ite(93, 56, 95) : BV:8
97 : ite(92, 59, 96) : BV:8
98 : ite(91, 56, 97) : BV:8
99 : bvconcat(68, 78, 88, 98) : BV:32
100 : bvadd(48, 50, 99) : BV:32
101 : eq(100, 54) : BOOL
102 : eq(100, 57) : BOOL
103 : eq(100, 60) : BOOL
104 : eq(100, 62) : BOOL
105 : ite(104, 56, 64) : BV:8
106 : ite(103, 56, 105) : BV:8
107 : ite(102, 59, 106) : BV:8
108 : ite(101, 56, 107) : BV:8
109 : 2 { 0x2 +1.23e129 } : BV:32
110 : bvadd(109, 50, 99) : BV:32
111 : eq(110, 54) : BOOL
112 : eq(110, 57) : BOOL
113 : eq(110, 60) : BOOL
114 : eq(110, 62) : BOOL
115 : ite(114, 56, 64) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 59, 116) : BV:8
118 : ite(111, 56, 117) : BV:8
119 : 1 { 0x1 +1.11e129 } : BV:32
120 : bvadd(119, 50, 99) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 60) : BOOL
124 : eq(120, 62) : BOOL
125 : ite(124, 56, 64) : BV:8
126 : ite(123, 56, 125) : BV:8
127 : ite(122, 59, 126) : BV:8
128 : ite(121, 56, 127) : BV:8
129 : bvadd(50, 99) : BV:32
130 : eq(129, 54) : BOOL
131 : eq(129, 57) : BOOL
132 : eq(129, 60) : BOOL
133 : eq(129, 62) : BOOL
134 : ite(133, 56, 64) : BV:8
135 : ite(132, 56, 134) : BV:8
136 : ite(131, 59, 135) : BV:8
137 : ite(130, 56, 136) : BV:8
138 : bvconcat(108, 118, 128, 137) : BV:32
139 : ite(6, 3, 138) : BV:32
140 : ite(47, 138, 139) : BV:32
141 : ite(6, 3, 140) : BV:32
142 : ite(6, 3, 141) : BV:32
143 : lambda(1, 2, 142) : FUNCTION[BV:32,BV:32 -> BV:32]
144 : sym_const(143) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda31815Var : BV:32
2 : Lambda31816Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda31821Var : BV:32
2 : Lambda31822Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda31811Var : BV:32
2 : Lambda31812Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 210837763 { 0xc912103 +1.13381993e154 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 246227395 { 0xead21c3 +1.35259282e158 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 246227392 { 0xead21c0 +1.35259246e158 } : BV:32
17 : eq(12, 16) : BOOL
18 : 254 { 0xfe -2 } : BV:8
19 : 246227393 { 0xead21c1 +1.35259258e158 } : BV:32
20 : eq(12, 19) : BOOL
21 : 246227394 { 0xead21c2 +1.35259270e158 } : BV:32
22 : eq(12, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : ite(22, 15, 23) : BV:8
25 : ite(20, 15, 24) : BV:8
26 : ite(17, 18, 25) : BV:8
27 : ite(14, 15, 26) : BV:8
28 : 210837762 { 0xc912102 +1.13381981e154 } : BV:32
29 : bvadd(28, 11) : BV:32
30 : eq(29, 13) : BOOL
31 : eq(29, 16) : BOOL
32 : eq(29, 19) : BOOL
33 : eq(29, 21) : BOOL
34 : ite(33, 15, 23) : BV:8
35 : ite(32, 15, 34) : BV:8
36 : ite(31, 18, 35) : BV:8
37 : ite(30, 15, 36) : BV:8
38 : 210837761 { 0xc912101 +1.13381969e154 } : BV:32
39 : bvadd(38, 11) : BV:32
40 : eq(39, 13) : BOOL
41 : eq(39, 16) : BOOL
42 : eq(39, 19) : BOOL
43 : eq(39, 21) : BOOL
44 : ite(43, 15, 23) : BV:8
45 : ite(42, 15, 44) : BV:8
46 : ite(41, 18, 45) : BV:8
47 : ite(40, 15, 46) : BV:8
48 : 210837760 { 0xc912100 +1.13381958e154 } : BV:32
49 : bvadd(48, 11) : BV:32
50 : eq(49, 13) : BOOL
51 : eq(49, 16) : BOOL
52 : eq(49, 19) : BOOL
53 : eq(49, 21) : BOOL
54 : ite(53, 15, 23) : BV:8
55 : ite(52, 15, 54) : BV:8
56 : ite(51, 18, 55) : BV:8
57 : ite(50, 15, 56) : BV:8
58 : bvconcat(27, 37, 47, 57) : BV:32
59 : bvadd(7, 9, 58) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : eq(59, 21) : BOOL
64 : ite(63, 15, 23) : BV:8
65 : ite(62, 15, 64) : BV:8
66 : ite(61, 18, 65) : BV:8
67 : ite(60, 15, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 9, 58) : BV:32
70 : eq(69, 13) : BOOL
71 : eq(69, 16) : BOOL
72 : eq(69, 19) : BOOL
73 : eq(69, 21) : BOOL
74 : ite(73, 15, 23) : BV:8
75 : ite(72, 15, 74) : BV:8
76 : ite(71, 18, 75) : BV:8
77 : ite(70, 15, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 9, 58) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 19) : BOOL
83 : eq(79, 21) : BOOL
84 : ite(83, 15, 23) : BV:8
85 : ite(82, 15, 84) : BV:8
86 : ite(81, 18, 85) : BV:8
87 : ite(80, 15, 86) : BV:8
88 : bvadd(9, 58) : BV:32
89 : eq(88, 13) : BOOL
90 : eq(88, 16) : BOOL
91 : eq(88, 19) : BOOL
92 : eq(88, 21) : BOOL
93 : ite(92, 15, 23) : BV:8
94 : ite(91, 15, 93) : BV:8
95 : ite(90, 18, 94) : BV:8
96 : ite(89, 15, 95) : BV:8
97 : bvconcat(67, 77, 87, 96) : BV:32
98 : ite(6, 3, 97) : BV:32
99 : lambda(1, 2, 98) : FUNCTION[BV:32,BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda31806Var : BV:32
2 : Lambda31807Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1486538138
=counter_example_end


</MSG>
<MSG>0:56 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14)...</MSG>
<MSG>0:56 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 44 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 27 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:56 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:56 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:56 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:56 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:56 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: Propagated 1 out of 27 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140712 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 2
140411 : input.dst.llvm-%m : BV:32                 : 2
140713 : bvult(140712, 140411) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2
169111 : bvuge(140278, 140571) : BOOL              : false
214525 : or(140713, 169111) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4200 f96aa016a570b1bd408240755436113b
=input.spec-%var-x-2
1 : Lambda14662Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14663Var : BV:32
18 : Lambda14664Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda14665Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-m-2
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda14690Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14691Var : BV:32
18 : Lambda14692Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda14693Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 3087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3088; 3091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3092; 5251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 5252; 5255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 5256; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 5252 { 0x1484 +1.62608e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3088 { 0xc10 +1.36811e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-m-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3088 { 0xc10 +1.36811e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3091 { 0xc13 +1.36847e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 5252 { 0x1484 +1.62608e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 5255 { 0x1487 +1.62644e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda14521Var : BV:32
2 : Lambda14522Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda14530Var : BV:32
2 : Lambda14531Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : ite(6, 3, 50) : BV:32
52 : lambda(1, 2, 51) : FUNCTION[BV:32,BV:32 -> BV:32]
53 : sym_const(52) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda14532Var : BV:32
2 : Lambda14533Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda14538Var : BV:32
2 : Lambda14539Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda14523Var : BV:32
2 : Lambda14524Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2899499663
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m), bvuge(0, input.spec-%var-m-1.L3%7%bbentry)):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : input.spec-%var-m-1.L3%7%bbentry : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:56 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140712 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 2
140411 : input.dst.llvm-%m : BV:32                 : 2
140713 : bvult(140712, 140411) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140571 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2
169111 : bvuge(140278, 140571) : BOOL              : false
214525 : or(140713, 169111) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4200 f96aa016a570b1bd408240755436113b
=input.spec-%var-x-2
1 : Lambda14662Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14663Var : BV:32
18 : Lambda14664Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda14665Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-m-2
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda14690Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14691Var : BV:32
18 : Lambda14692Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda14693Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 3087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3088; 3091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3092; 5251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 5252; 5255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 5256; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 5252 { 0x1484 +1.62608e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3088 { 0xc10 +1.36811e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-m-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3088 { 0xc10 +1.36811e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3091 { 0xc13 +1.36847e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 5252 { 0x1484 +1.62608e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 5255 { 0x1487 +1.62644e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda14521Var : BV:32
2 : Lambda14522Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda14530Var : BV:32
2 : Lambda14531Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : ite(6, 3, 50) : BV:32
52 : lambda(1, 2, 51) : FUNCTION[BV:32,BV:32 -> BV:32]
53 : sym_const(52) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda14532Var : BV:32
2 : Lambda14533Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda14538Var : BV:32
2 : Lambda14539Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda14523Var : BV:32
2 : Lambda14524Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2899499663
=counter_example_end


</MSG>
<MSG>0:56 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D1 (d:3, s:0, sp: 14)...</MSG>
<MSG>0:56 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>0:56 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:56 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:56 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht18-prove_trivial15-prove3...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:56 : foo.A1.B4 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:56 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:57 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:57 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:57 : Attempting correlation of src pathset L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:57 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:57 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:57 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>0:57 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:57 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:57 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:57 : Creating ssa-path for the src-tfg path L3%17%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:57 : Adding a CG edge composition using the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:57 : Identifying common alloc-deallocs in the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:57 : Identified no common alloc-deallocs in the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:57 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Adding edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:57 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Propagated 11 out of 16 counter-examples across edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:57 : foo.A1.B4.C1: Added the 11 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:57 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : Done adding a CG edge composition using the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:57 : Added correlation to the product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:57 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:57 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:57 : Constructed infer_invariants_dfa with initial worklist L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:57 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:59 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:00 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:03 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:04 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:07 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:08 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:11 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:12 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:14 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:15 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:17 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:18 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:18 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:19 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:19 : foo.A1.B4.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>1:19 : foo.A1.B4.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:19 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:19 : Considering 2 paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:19 : Attempting correlation of src pathset L3%17%bbentry=>L3%17%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:19 : Attempting correlation of src pathset L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:19 : Found 2 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:19 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:19 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>1:19 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 32 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:19 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:19 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:19 : Creating ssa-path for the src-tfg path L3%17%bbentry --> L3%17%bbentry ending at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:19 : Adding a CG edge composition using the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:19 : Identifying common alloc-deallocs in the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>1:19 : Identified no common alloc-deallocs in the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:19 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Adding edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Propagated 1 out of 32 counter-examples across edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Added the 1 propagated CEs at PC L3%17%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:23 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:23 : Done adding a CG edge composition using the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:23 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>1:23 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 48 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>1:23 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:23 : Constructed infer_invariants_dfa with initial worklist L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht18-prove_trivial15-prove14...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial2-prove7...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:30 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 15 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht15-prove_trivial15-prove11...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:43 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:44 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 15 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht15-prove_trivial15-prove11...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 15 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht15-prove_trivial15-prove11...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial6-prove2...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 15 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 16 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial10-prove4...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:56 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:56 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:56 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:56 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 16 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove10...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 15 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 15 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:58 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:58 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:58 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:58 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:58 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:58 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>2:58 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 52 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:58 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>2:58 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>2:58 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:58 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:58 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>2:58 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:58 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Propagated 17 out of 40 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Added the 17 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>2:58 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:58 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>2:58 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 52 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 20 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 12 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>2:58 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>2:58 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:59 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:59 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>2:59 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:59 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>2:59 : Checking equivalence proof...</MSG>
<MSG>3:01 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [11]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-ret-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%m ; 9-->input.dst.llvm-%n ; 10-->input.dst.llvm-%x ; 11-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-ret-1.L3%7%bbentry))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      4.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      5.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      6.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
     is_assumed_eqclass : 0
    15 visited ces:
      0.:z3.ce3      1.:z3v487.ce31      2.:z3v487.ce45      3.:z3.ce172      4.:z3v487.ce59      5.:z3.ce60      6.:z3.ce88      7.:z3v487.ce87      8.:z3.ce116      9.:z3v487.ce115      10.:z3v487.ce143      11.:z3v487.ce171      12.:z3v487.ce199      13.:z3.ce7105      14.:z3v487.ce4243
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-i-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce3      1.:z3v487.ce4927      2.:z3v487.ce4243      3.:z3v487.ce4698      4.:z3v487.ce4877      5.:z3v487.ce5145      6.:z3.ce5328      7.:z3v487.ce5440      8.:z3.ce5571      9.:z3v487.ce5741
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce227      2.:z3v487.ce31      3.:z3v487.ce255
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce283      2.:z3v487.ce87      3.:z3v487.ce255
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce227      2.:z3v487.ce31      3.:z3v487.ce255
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce283      2.:z3v487.ce87      3.:z3v487.ce255
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce3      1.:z3v487.ce4927      2.:z3v487.ce4243      3.:z3v487.ce4698      4.:z3v487.ce4877      5.:z3v487.ce5145      6.:z3.ce5328      7.:z3v487.ce5440      8.:z3.ce5571      9.:z3v487.ce5741
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 13-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 18-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 19-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 20-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 21-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 33-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce3      1.:z3.ce227      2.:z3v487.ce31      3.:z3v487.ce87      4.:z3v487.ce255      5.:z3v487.ce4243
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 37-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141166](input.spec-%var-x-2, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141945](input.spec-%var-x-1.L3%7%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 39-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141952](input.spec-%var-x-1.L3%7%bbentry, map[141951](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141950](Lambda0Var, map[141949](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 40-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141959](input.spec-%var-x-1.L3%7%bbentry, map[141958](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141957](Lambda0Var, map[141956](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 41-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141966](input.spec-%var-x-1.L3%7%bbentry, map[141965](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141964](Lambda0Var, map[141963](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 42-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141973](input.spec-%var-x-1.L3%7%bbentry, map[141972](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141971](Lambda0Var, map[141970](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141945](input.spec-%var-x-1.L3%7%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141166](input.spec-%var-x-2, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L3%17%bbentry_Lfor.cond1%1%bbentry: (d:1, s:0, sp: 9)
  Invariant state (15 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [20]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-ret-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%m ; 9-->input.dst.llvm-%n ; 10-->input.dst.llvm-%x ; 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 43-->input.spec-%tmpvar-14.L3%8%d ; 44-->input.spec-%var-j-0.L3%17%bbentry ; 45-->input.spec-%var-m-0.L3%17%bbentry ; 46-->input.spec-%var-i-0.L3%17%bbentry ; 47-->input.spec-%var-ret-0.L3%17%bbentry ; 48-->input.spec-%tmpvar-16.L3%17%bbentry ; 49-->input.spec-%var-n-0.L3%17%bbentry ; 50-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 51-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 52-->input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry ; 
    14 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-ret-0.L3%17%bbentry))  ==  input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  bvzero_ext(bool_to_bv(input.spec-%tmpvar-14.L3%8%d), 31)
      4.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.spec-%var-i-0.L3%17%bbentry
      5.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      6.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-0.L3%17%bbentry
      7.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      8.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-0.L3%17%bbentry
      9.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      10.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%17%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
      11.: bvadd(1, bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry)))  ==  input.spec-%tmpvar-16.L3%17%bbentry
      12.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      13.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
     is_assumed_eqclass : 0
    16 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce45      2.:z3v487.ce59      3.:z3.ce60      4.:z3v487.ce255      5.:z3.ce461      6.:z3.ce2118      7.:z3.ce2166      8.:z3.ce2214      9.:z3v487.ce4353      10.:z3v487.ce5980      11.:z3.ce6043      12.:z3v487.ce6044      13.:z3v487.ce6277      14.:z3.ce6175      15.:z3.ce7138
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1.L3%7%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce227      1.:z3v487.ce31      2.:z3v487.ce45      3.:z3v487.ce255      4.:z3.ce2262
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 44-->input.spec-%var-j-0.L3%17%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%17%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%17%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce5980      2.:z3.ce6379      3.:z3.ce6481      4.:z3.ce6175      5.:z3.ce6595      6.:z3.ce6697      7.:z3.ce6799
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 45-->input.spec-%var-m-0.L3%17%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2310      3.:z3.ce2358      4.:z3v487.ce2215      5.:z3.ce2214
    eqclass 5:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 46-->input.spec-%var-i-0.L3%17%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%17%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce4808      2.:z3v487.ce4392      3.:z3v487.ce4353      4.:z3v487.ce4960      5.:z3v487.ce5178      6.:z3v487.ce5076      7.:z3.ce5388      8.:z3.ce5361      9.:z3.ce5604
    eqclass 6:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2310      3.:z3.ce2358      4.:z3v487.ce2215      5.:z3.ce2214
    eqclass 7:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 48-->input.spec-%tmpvar-16.L3%17%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%tmpvar-16.L3%17%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce5039      2.:z3v487.ce4808      3.:z3v487.ce4353      4.:z3v487.ce4771      5.:z3v487.ce5076      6.:z3v487.ce5257      7.:z3v487.ce5513      8.:z3.ce5361      9.:z3.ce5683
    eqclass 8:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce227      1.:z3v487.ce31      2.:z3v487.ce45      3.:z3v487.ce255      4.:z3.ce2262
    eqclass 9:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2310      3.:z3.ce2358      4.:z3v487.ce2215      5.:z3.ce2214
    eqclass 10:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce4808      2.:z3v487.ce4392      3.:z3v487.ce4353      4.:z3v487.ce4960      5.:z3v487.ce5178      6.:z3v487.ce5076      7.:z3.ce5388      8.:z3.ce5361      9.:z3.ce5604
    eqclass 11:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 51-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce5980      2.:z3.ce6379      3.:z3.ce6481      4.:z3.ce6175      5.:z3.ce6595      6.:z3.ce6697      7.:z3.ce6799
    eqclass 12:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 13-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 18-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 19-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 20-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 21-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 33-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 53-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 54-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 55-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 56-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 57-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 58-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 59-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 60-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 61-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 62-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 63-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 64-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 65-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 66-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 67-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 68-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 69-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 70-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 71-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 72-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 73-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 74-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 75-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 76-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce227      1.:z3v487.ce31      2.:z3.ce6901      3.:z3v487.ce255      4.:z3.ce2214      5.:z3v487.ce4353      6.:z3.ce5604      7.:z3v487.ce5980      8.:z3.ce7003
    eqclass 13:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 37-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141166](input.spec-%var-x-2, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141945](input.spec-%var-x-1.L3%7%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 77-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[156023](input.spec-%var-x-2, map[141958](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141957](Lambda0Var, map[141956](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 78-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[160407](input.spec-%var-x-2, map[141951](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141950](Lambda0Var, map[141949](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 79-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169008](input.spec-%var-x-2, map[141972](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141971](Lambda0Var, map[141970](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 80-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169009](input.spec-%var-x-2, map[169006](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[169005](Lambda0Var, map[169004](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 81-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169079](input.spec-%var-x-0.L3%17%bbentry, map[141951](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141950](Lambda0Var, map[141949](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 82-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169080](input.spec-%var-x-0.L3%17%bbentry, map[141958](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141957](Lambda0Var, map[141956](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 83-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169081](input.spec-%var-x-0.L3%17%bbentry, map[141972](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141971](Lambda0Var, map[141970](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 84-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169082](input.spec-%var-x-0.L3%17%bbentry, map[169006](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[169005](Lambda0Var, map[169004](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 85-->141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169083](input.spec-%var-x-0.L3%17%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    3 preds:
      0.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141945](input.spec-%var-x-1.L3%7%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141166](input.spec-%var-x-2, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      2.: 141093 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169083](input.spec-%var-x-0.L3%17%bbentry, map[141165](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141164](Lambda0Var, map[141163](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141162](Lambda1Var, select[141161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd[141160](bvmul(Lambda1Var, 4), select[141159](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141093, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31
    eqclass 14:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 52 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 56 counterexamples (for correlating 20 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 12 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 159.58s, query:smt.: 31.0492s (num_starts 420; 0.0739s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 77.4621s (num_starts 1611; 0.0481s/start)ftmap_run_pointsto_analysis.: 0.557856s (num_starts 2; 0.2789s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 6e-06s (num_starts 8; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.4e-05s (num_starts 7; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 1.4e-05s (num_starts 2; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.4e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 1.7e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.7e-05s (num_starts 2; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.2e-05s (num_starts 13; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.4e-05s (num_starts 13; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 3.8e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 4.9e-05s (num_starts 5; 0.0000s/start)
prune_dst_memslots.: 5.2e-05s (num_starts 7; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 5.4e-05s (num_starts 8; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 5.5e-05s (num_starts 5; 0.0000s/start)
get_intersected_lr_status.: 5.7e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 5.7e-05s (num_starts 5; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 6.2e-05s (num_starts 71; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 8.7e-05s (num_starts 119; 0.0000s/start)
determinize_value_expr_map.: 9.7e-05s (num_starts 43; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000114s (num_starts 3; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.00012s (num_starts 7; 0.0000s/start)
remove_complex_bv_exprs.: 0.000129s (num_starts 7; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000133s (num_starts 41; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000158s (num_starts 135; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000165s (num_starts 203; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000193s (num_starts 13; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000194s (num_starts 72; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.000222s (num_starts 21; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000253s (num_starts 3; 0.0001s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000263s (num_starts 22; 0.0000s/start)
compute_sprel_relations.: 0.000277s (num_starts 2; 0.0001s/start)
populate_locid2expr_map.: 0.000278s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000289s (num_starts 3; 0.0001s/start)
propagate_sprels.: 0.000291s (num_starts 2; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.000292s (num_starts 21; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000299s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000343s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000344s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000345s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000345s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000347s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000353s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000362s (num_starts 1; 0.0004s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000388s (num_starts 7; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000432s (num_starts 32; 0.0000s/start)
lr_status_meet.: 0.000446s (num_starts 686; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000453s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000474s (num_starts 1; 0.0005s/start)
graph_locs_add_local_vars_for_edge.: 0.000481s (num_starts 32; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000499s (num_starts 22; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000501s (num_starts 2; 0.0003s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000536s (num_starts 16; 0.0000s/start)
expr_is_hidden_reg.: 0.000544s (num_starts 752; 0.0000s/start)
expr_is_callee_save_const.: 0.000672s (num_starts 764; 0.0000s/start)
get_sprel_map_pair.: 0.000779s (num_starts 78; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000788s (num_starts 45; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000802s (num_starts 75; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000826s (num_starts 1756; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000932s (num_starts 157; 0.0000s/start)
parse_yices_model.: 0.001005s (num_starts 1; 0.0010s/start)
populate_dominator_and_postdominator_relations.: 0.001008s (num_starts 2; 0.0005s/start)
prove_trivial.: 0.001062s (num_starts 1032; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001175s (num_starts 1; 0.0012s/start)
graph_locs_add_all_llvmvars.: 0.001236s (num_starts 2; 0.0006s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001265s (num_starts 9; 0.0001s/start)
populate_simplified_to_state.: 0.001316s (num_starts 3; 0.0004s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001499s (num_starts 9; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001539s (num_starts 9; 0.0002s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001606s (num_starts 23; 0.0001s/start)
parse_cvc4_model.: 0.001623s (num_starts 1; 0.0016s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.001698s (num_starts 196; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001745s (num_starts 11; 0.0002s/start)
graph_locs_add_all_specvars.: 0.001754s (num_starts 2; 0.0009s/start)
identify_address_taken_local_variables.: 0.001777s (num_starts 1; 0.0018s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002015s (num_starts 7; 0.0003s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.002199s (num_starts 399; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002241s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002244s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002245s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00225s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002252s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002258s (num_starts 1; 0.0023s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002354s (num_starts 11; 0.0002s/start)
sort_exprs_and_compute_bv_eqclass.: 0.002456s (num_starts 7; 0.0004s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.00252s (num_starts 1; 0.0025s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.002528s (num_starts 1705; 0.0000s/start)
compute_bv_bool_eqclass.: 0.002532s (num_starts 7; 0.0004s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002649s (num_starts 1; 0.0026s/start)
pth_collect_preds_using_atom_func.: 0.002666s (num_starts 106; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002728s (num_starts 1; 0.0027s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002852s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.00297s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.002976s (num_starts 2; 0.0015s/start)
collect_assumes_around_edge.: 0.002983s (num_starts 13; 0.0002s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.003012s (num_starts 5; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003022s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003026s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.003028s (num_starts 4; 0.0008s/start)
tfg::populate_loc_definedness.before_solve.: 0.00305s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003118s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003121s (num_starts 1; 0.0031s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.003216s (num_starts 673; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.003221s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.00323s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.003233s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003245s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.003258s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003275s (num_starts 4; 0.0008s/start)
tfg_edge_composition_get_assumes.: 0.003354s (num_starts 106; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.003383s (num_starts 129; 0.0000s/start)
collect_dst_to_src_submap_preds.: 0.003435s (num_starts 1611; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.003484s (num_starts 3; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003489s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.003493s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003496s (num_starts 2; 0.0017s/start)
create_closure_matrix.: 0.003609s (num_starts 282; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003641s (num_starts 4; 0.0009s/start)
tfg::populate_loc_definedness.: 0.003649s (num_starts 3; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.003651s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003656s (num_starts 4; 0.0009s/start)
graph_visit_exprs.: 0.003831s (num_starts 3; 0.0013s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.003913s (num_starts 261; 0.0000s/start)
populate_simplified_assets.: 0.003956s (num_starts 6; 0.0007s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.00397s (num_starts 78; 0.0001s/start)
expr_represents_llvm_undef.: 0.003978s (num_starts 768; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004003s (num_starts 7; 0.0006s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.004031s (num_starts 60; 0.0001s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.004192s (num_starts 406; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.004233s (num_starts 246; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004337s (num_starts 2; 0.0022s/start)
removeMostPromising.: 0.004435s (num_starts 36; 0.0001s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.00479s (num_starts 60; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.00485s (num_starts 2; 0.0024s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.004938s (num_starts 7; 0.0007s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.004965s (num_starts 157; 0.0000s/start)
graph_visit_exprs_and_keys.: 0.005068s (num_starts 2; 0.0025s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.005222s (num_starts 60; 0.0001s/start)
graph_identify_back_edges.: 0.005606s (num_starts 44; 0.0001s/start)
find_dominators.: 0.005694s (num_starts 48; 0.0001s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.005729s (num_starts 127; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.006167s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.00617s (num_starts 3; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.006179s (num_starts 3; 0.0021s/start)
graph_identify_natural_loops.: 0.006274s (num_starts 44; 0.0001s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.006408s (num_starts 2832; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.006471s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.006485s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.00649s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.006509s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.006522s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.006541s (num_starts 3; 0.0022s/start)
corr_graph_enumerate_correlations.: 0.006559s (num_starts 13; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006586s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006589s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006597s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.006603s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.006638s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.006649s (num_starts 3; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.006653s (num_starts 3; 0.0022s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006713s (num_starts 6; 0.0011s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.006747s (num_starts 673; 0.0000s/start)
populate_locs_potentially_modified_on_edge.: 0.006757s (num_starts 3; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.006836s (num_starts 3; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.006846s (num_starts 3; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.006852s (num_starts 3; 0.0023s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.007043s (num_starts 40; 0.0002s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.007089s (num_starts 157; 0.0000s/start)
compute_ssa_vars_renaming_map.: 0.007201s (num_starts 2; 0.0036s/start)
proof_query_is_trivial_helper.: 0.007622s (num_starts 1779; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.007731s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.007737s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007877s (num_starts 1; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.007888s (num_starts 1; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.007948s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.007954s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.008021s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.00804s (num_starts 2; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008154s (num_starts 1; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.008161s (num_starts 1; 0.0082s/start)
tfg_suffixpath_get_expr_helper.: 0.008489s (num_starts 28; 0.0003s/start)
set_result_and_counter_example.: 0.008769s (num_starts 420; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008966s (num_starts 1; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.008969s (num_starts 1; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.009161s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.009165s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.009189s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.009207s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.009229s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.00924s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.009675s (num_starts 2; 0.0048s/start)
populate_branch_affecting_locs.: 0.009719s (num_starts 3; 0.0032s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.00994s (num_starts 1726; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010462s (num_starts 2; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010465s (num_starts 2; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01048s (num_starts 2; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.010494s (num_starts 2; 0.0052s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.010726s (num_starts 3; 0.0036s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.011204s (num_starts 143; 0.0001s/start)
aliasing_constraints.convert_to_expr.: 0.011338s (num_starts 673; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.011869s (num_starts 7; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.012182s (num_starts 6; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.012193s (num_starts 6; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.012661s (num_starts 6; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.012674s (num_starts 6; 0.0021s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.012872s (num_starts 1726; 0.0000s/start)
generate_aliasing_constraints_from_expr.: 0.012961s (num_starts 3231; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.013823s (num_starts 768; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.014373s (num_starts 8; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.015729s (num_starts 11; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.015759s (num_starts 11; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.015771s (num_starts 11; 0.0014s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.015924s (num_starts 1; 0.0159s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015925s (num_starts 1; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015928s (num_starts 1; 0.0159s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016241s (num_starts 1; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016244s (num_starts 1; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016248s (num_starts 1; 0.0162s/start)
populate_transitive_closure.: 0.016451s (num_starts 59; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.016666s (num_starts 1; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.01667s (num_starts 1; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.01723s (num_starts 1; 0.0172s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.017232s (num_starts 1; 0.0172s/start)
proof_query_is_trivial.: 0.017329s (num_starts 1705; 0.0000s/start)
compute_regions.: 0.017395s (num_starts 44; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.017494s (num_starts 1; 0.0175s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.017495s (num_starts 1; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.017497s (num_starts 1; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.017498s (num_starts 1; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.01751s (num_starts 1; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.017514s (num_starts 1; 0.0175s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.01752s (num_starts 1; 0.0175s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.017751s (num_starts 84; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.018557s (num_starts 3; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.01858s (num_starts 3; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.019145s (num_starts 3; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.01985s (num_starts 5; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.019891s (num_starts 5; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019918s (num_starts 5; 0.0040s/start)
construct_linear_combination_exprs.: 0.020044s (num_starts 974; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.02022s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.020245s (num_starts 4; 0.0051s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.020687s (num_starts 673; 0.0000s/start)
compute_vars_reaching_definitions.: 0.021076s (num_starts 2; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.021367s (num_starts 8; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.021401s (num_starts 8; 0.0027s/start)
expr_substitute_using_available_exprs_submap.: 0.021948s (num_starts 650; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022588s (num_starts 3; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.022604s (num_starts 3; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.02278s (num_starts 1; 0.0228s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.022782s (num_starts 1; 0.0228s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.024159s (num_starts 2; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.024165s (num_starts 10; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.024166s (num_starts 2; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.02417s (num_starts 2; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.024322s (num_starts 10; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.024322s (num_starts 4; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.024349s (num_starts 4; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.024385s (num_starts 10; 0.0024s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.024824s (num_starts 311; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.024976s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.025035s (num_starts 8; 0.0031s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.025454s (num_starts 853; 0.0000s/start)
graph_with_guessing_sync_preds.: 0.025494s (num_starts 1611; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.027711s (num_starts 853; 0.0000s/start)
ldr_decomposition.: 0.028037s (num_starts 261; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.028341s (num_starts 1; 0.0283s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.029065s (num_starts 12; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.030478s (num_starts 9; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.030492s (num_starts 9; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.03066s (num_starts 6; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.030826s (num_starts 6; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.031115s (num_starts 2; 0.0156s/start)
graph_to_stream.: 0.031715s (num_starts 4; 0.0079s/start)
create_sp_version_relations_lattice_at_pc.: 0.032448s (num_starts 282; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.033396s (num_starts 16; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.033668s (num_starts 5; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.033682s (num_starts 5; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.033724s (num_starts 5; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.033734s (num_starts 16; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.033799s (num_starts 5; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.035287s (num_starts 2; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.035293s (num_starts 2; 0.0176s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.035357s (num_starts 4; 0.0088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.035371s (num_starts 4; 0.0088s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.035817s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.03582s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.035829s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.035838s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-trivial.: 0.036392s (num_starts 2; 0.0182s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.036396s (num_starts 2; 0.0182s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.037683s (num_starts 21; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.037926s (num_starts 1; 0.0379s/start)
tfg::get_aliasing_constraints_for_edge.: 0.03793s (num_starts 794; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.037936s (num_starts 1; 0.0379s/start)
get_next_potential_correlations.: 0.038442s (num_starts 7; 0.0055s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.038826s (num_starts 5; 0.0078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.039051s (num_starts 10; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.039089s (num_starts 10; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.039156s (num_starts 10; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.039267s (num_starts 10; 0.0039s/start)
do_ssa_transformation.: 0.040327s (num_starts 2; 0.0202s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.041185s (num_starts 3756; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.041549s (num_starts 3; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.041568s (num_starts 3; 0.0139s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.041588s (num_starts 2; 0.0208s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.0416s (num_starts 2; 0.0208s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.041774s (num_starts 2; 0.0209s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.041784s (num_starts 2; 0.0209s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.041813s (num_starts 2; 0.0209s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.041826s (num_starts 2; 0.0209s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.042987s (num_starts 5; 0.0086s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.043958s (num_starts 686; 0.0001s/start)
gen_pred_from_coeff_row.simplify.: 0.04463s (num_starts 974; 0.0000s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.044913s (num_starts 686; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.044985s (num_starts 6; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.04515s (num_starts 5; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.045187s (num_starts 5; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.046569s (num_starts 6; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.048424s (num_starts 10; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.048435s (num_starts 10; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.048678s (num_starts 3; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.048688s (num_starts 3; 0.0162s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.048726s (num_starts 246; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.04957s (num_starts 10; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.049584s (num_starts 10; 0.0050s/start)
compute_lr_status_for_expr.: 0.050273s (num_starts 842; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.051832s (num_starts 3; 0.0173s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.051838s (num_starts 85; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.051859s (num_starts 3; 0.0173s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.053285s (num_starts 6; 0.0089s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.053421s (num_starts 6; 0.0089s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.053424s (num_starts 246; 0.0002s/start)
query:convert_from_z3.: 0.053479s (num_starts 1011; 0.0001s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.053605s (num_starts 246; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.053892s (num_starts 9; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.054022s (num_starts 9; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.057118s (num_starts 12; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.057314s (num_starts 7; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.057383s (num_starts 7; 0.0082s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.059167s (num_starts 12; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.059484s (num_starts 2; 0.0297s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.059501s (num_starts 2; 0.0298s/start)
populate_loc_liveness.: 0.05986s (num_starts 3; 0.0200s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.060434s (num_starts 18; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.060624s (num_starts 18; 0.0034s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.061181s (num_starts 28; 0.0022s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.06241s (num_starts 94; 0.0007s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.062732s (num_starts 94; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064399s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.064428s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.064436s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.064449s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.064544s (num_starts 3; 0.0215s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.064563s (num_starts 3; 0.0215s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.066112s (num_starts 12; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067145s (num_starts 1; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067153s (num_starts 1; 0.0672s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.067196s (num_starts 2554; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.067462s (num_starts 13; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.067484s (num_starts 13; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.06801s (num_starts 2; 0.0340s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.068068s (num_starts 246; 0.0003s/start)
compute_expr_eqclasses_at_pc.: 0.0698s (num_starts 7; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.07103s (num_starts 3; 0.0237s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.071584s (num_starts 1; 0.0716s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.07166s (num_starts 4; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.071734s (num_starts 12; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.071738s (num_starts 15; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07175s (num_starts 1; 0.0717s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071756s (num_starts 1; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.071791s (num_starts 12; 0.0060s/start)
predicate_canonicalized.: 0.07277s (num_starts 974; 0.0001s/start)
collect_aliasing_constraints_around_path_helper.: 0.07325s (num_starts 505; 0.0001s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.073845s (num_starts 9; 0.0082s/start)
cg_add_node.: 0.074195s (num_starts 9; 0.0082s/start)
get_sprel_map_pair_at_pc.: 0.074339s (num_starts 673; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07437s (num_starts 1; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.07438s (num_starts 1; 0.0744s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.074673s (num_starts 22; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.074715s (num_starts 22; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07505s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075056s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.075065s (num_starts 1; 0.0751s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.075145s (num_starts 85; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.07592s (num_starts 4; 0.0190s/start)
pth_collect_simplified_preds_using_atom_func.: 0.076199s (num_starts 2448; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.076996s (num_starts 10; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.078146s (num_starts 11; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.078163s (num_starts 11; 0.0071s/start)
collect_aliasing_constraints_around_path.: 0.078234s (num_starts 317; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.078441s (num_starts 10; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.078556s (num_starts 15; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.078563s (num_starts 10; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.078652s (num_starts 15; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07894s (num_starts 1; 0.0789s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.081036s (num_starts 12; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.081143s (num_starts 12; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.081606s (num_starts 14; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.081651s (num_starts 14; 0.0058s/start)
bv_const_ref_map2expr_map.: 0.081731s (num_starts 974; 0.0001s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.082242s (num_starts 3; 0.0274s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.082249s (num_starts 3; 0.0274s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082401s (num_starts 1; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082412s (num_starts 1; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.082723s (num_starts 2; 0.0414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.082737s (num_starts 2; 0.0414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08304s (num_starts 1; 0.0830s/start)
compute_new_lr_status_on_locs.: 0.083815s (num_starts 246; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084056s (num_starts 1; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084061s (num_starts 1; 0.0841s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084204s (num_starts 1; 0.0842s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084206s (num_starts 1; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084223s (num_starts 1; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.08423s (num_starts 4; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.084234s (num_starts 4; 0.0211s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.085129s (num_starts 3; 0.0284s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.085686s (num_starts 4; 0.0214s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.085726s (num_starts 4; 0.0214s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.086579s (num_starts 8; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086985s (num_starts 1; 0.0870s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086997s (num_starts 1; 0.0870s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.088335s (num_starts 8; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088546s (num_starts 1; 0.0885s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088554s (num_starts 1; 0.0886s/start)
create_new_corr_graph_edge.new_node.: 0.088668s (num_starts 8; 0.0111s/start)
tfg_postprocess_after_pointsto_analysis.: 0.088901s (num_starts 2; 0.0445s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.089008s (num_starts 2; 0.0445s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.089017s (num_starts 2; 0.0445s/start)
create_new_corr_graph_edge.: 0.089178s (num_starts 13; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090259s (num_starts 1; 0.0903s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090268s (num_starts 1; 0.0903s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.090416s (num_starts 16; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.090594s (num_starts 4; 0.0226s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.090742s (num_starts 16; 0.0057s/start)
avail_exprs_create_submap.: 0.092246s (num_starts 738; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.094264s (num_starts 4; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094317s (num_starts 1; 0.0943s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094325s (num_starts 1; 0.0943s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.094336s (num_starts 1; 0.0943s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096214s (num_starts 1; 0.0962s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.097022s (num_starts 18; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.097382s (num_starts 18; 0.0054s/start)
query:convert_to_z3.: 0.097906s (num_starts 1011; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098284s (num_starts 1; 0.0983s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098309s (num_starts 1; 0.0983s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.098331s (num_starts 1; 0.0983s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.09835s (num_starts 1; 0.0984s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.099308s (num_starts 9; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.099357s (num_starts 9; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.099523s (num_starts 26; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.100165s (num_starts 2; 0.0501s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.100197s (num_starts 2; 0.0501s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.100214s (num_starts 2; 0.0501s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.100499s (num_starts 6; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.10057s (num_starts 6; 0.0168s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.100805s (num_starts 6; 0.0168s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.100807s (num_starts 6; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.102048s (num_starts 7; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.102267s (num_starts 36; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.102431s (num_starts 36; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.103198s (num_starts 24; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.10347s (num_starts 24; 0.0043s/start)
get_unrolled_paths_from.: 0.105357s (num_starts 40; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.10769s (num_starts 4; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.10773s (num_starts 4; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.111393s (num_starts 2; 0.0557s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.112552s (num_starts 5; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.112654s (num_starts 26; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 0.113006s (num_starts 26; 0.0043s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.113255s (num_starts 17; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.113309s (num_starts 8; 0.0142s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.113646s (num_starts 17; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.113685s (num_starts 15; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.113728s (num_starts 15; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.115193s (num_starts 3; 0.0384s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.116328s (num_starts 574; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.116796s (num_starts 11; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.116829s (num_starts 11; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.117573s (num_starts 6; 0.0196s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.117577s (num_starts 6; 0.0196s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.117887s (num_starts 13; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.120815s (num_starts 10; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.120844s (num_starts 10; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.12296s (num_starts 10; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.128904s (num_starts 12; 0.0107s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.129934s (num_starts 14; 0.0093s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.131182s (num_starts 34; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.132491s (num_starts 37; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.132716s (num_starts 37; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.133056s (num_starts 38; 0.0035s/start)
collect_assumes_around_path_helper.: 0.133252s (num_starts 1726; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.135496s (num_starts 11; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.135526s (num_starts 11; 0.0123s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.135959s (num_starts 34; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.136958s (num_starts 34; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138508s (num_starts 1; 0.1385s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138512s (num_starts 1; 0.1385s/start)
graph_with_paths::collect_assumes_around_path.: 0.139964s (num_starts 1726; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.140079s (num_starts 2; 0.0700s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.1401s (num_starts 2; 0.0701s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.142406s (num_starts 22; 0.0065s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.142962s (num_starts 22; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.143031s (num_starts 8; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.143125s (num_starts 8; 0.0179s/start)
counter_example_satisfies_preds.: 0.150139s (num_starts 3005; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.15071s (num_starts 4; 0.0377s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.152804s (num_starts 24; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.15309s (num_starts 24; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.154771s (num_starts 2; 0.0774s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.154777s (num_starts 2; 0.0774s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154956s (num_starts 1; 0.1550s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15496s (num_starts 1; 0.1550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.154963s (num_starts 1; 0.1550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.154974s (num_starts 1; 0.1550s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.154978s (num_starts 1; 0.1550s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.154986s (num_starts 1; 0.1550s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.155868s (num_starts 2; 0.0779s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.157579s (num_starts 15; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.157634s (num_starts 15; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.158116s (num_starts 6; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.161387s (num_starts 45; 0.0036s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162699s (num_starts 2; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162718s (num_starts 2; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162758s (num_starts 2; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.163132s (num_starts 3; 0.0544s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.163147s (num_starts 3; 0.0544s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.164254s (num_starts 246; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.164293s (num_starts 4; 0.0411s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.164303s (num_starts 4; 0.0411s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.164807s (num_starts 2; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.167248s (num_starts 2; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.16729s (num_starts 4; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.168229s (num_starts 35; 0.0048s/start)
tfg_relax_pointsto_vals_on_edge.: 0.16919s (num_starts 117; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.170342s (num_starts 15; 0.0114s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.170645s (num_starts 21; 0.0081s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.172477s (num_starts 4; 0.0431s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.174716s (num_starts 5; 0.0349s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181439s (num_starts 2; 0.0907s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181469s (num_starts 2; 0.0907s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181485s (num_starts 2; 0.0907s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.181517s (num_starts 2; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.181527s (num_starts 2; 0.0908s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.181546s (num_starts 2; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.182401s (num_starts 16; 0.0114s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.183073s (num_starts 9; 0.0203s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.18506s (num_starts 4214; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.192545s (num_starts 2; 0.0963s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.192579s (num_starts 2; 0.0963s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.194474s (num_starts 38; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.194541s (num_starts 38; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.196492s (num_starts 8; 0.0246s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198754s (num_starts 2; 0.0994s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198814s (num_starts 2; 0.0994s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.200982s (num_starts 20; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.201022s (num_starts 20; 0.0101s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.201105s (num_starts 20; 0.0101s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.201145s (num_starts 20; 0.0101s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.202549s (num_starts 58; 0.0035s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.202611s (num_starts 2; 0.1013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.205342s (num_starts 60; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.206054s (num_starts 17; 0.0121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 0.206123s (num_starts 60; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.206186s (num_starts 7; 0.0295s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.206219s (num_starts 7; 0.0295s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.207358s (num_starts 60; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21352s (num_starts 2; 0.1068s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213543s (num_starts 2; 0.1068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.214958s (num_starts 14; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.214958s (num_starts 14; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.215076s (num_starts 14; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.215131s (num_starts 14; 0.0154s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.216451s (num_starts 45; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217452s (num_starts 1; 0.2175s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217456s (num_starts 1; 0.2175s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.217478s (num_starts 1; 0.2175s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.217481s (num_starts 1; 0.2175s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.220929s (num_starts 12; 0.0184s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.223837s (num_starts 21; 0.0107s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.225719s (num_starts 1; 0.2257s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.225725s (num_starts 1; 0.2257s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.225729s (num_starts 1; 0.2257s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.225745s (num_starts 1; 0.2257s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.225749s (num_starts 1; 0.2257s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.225755s (num_starts 1; 0.2258s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.226701s (num_starts 32; 0.0071s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.229885s (num_starts 3; 0.0766s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.231395s (num_starts 28; 0.0083s/start)
query:simplify-z3.: 0.233318s (num_starts 2095; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.23423s (num_starts 4; 0.0586s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.234277s (num_starts 4; 0.0586s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.234353s (num_starts 3; 0.0781s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.234497s (num_starts 35; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.234526s (num_starts 8; 0.0293s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.234585s (num_starts 8; 0.0293s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.244416s (num_starts 12; 0.0204s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.244733s (num_starts 3; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.244794s (num_starts 3; 0.0816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.244856s (num_starts 3; 0.0816s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.244897s (num_starts 3; 0.0816s/start)
check_wfconds_on_edge.L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.246643s (num_starts 3; 0.0822s/start)
gen_pred_from_coeff_row.: 0.252601s (num_starts 974; 0.0003s/start)
compute_preds_for_bv_points.: 0.256401s (num_starts 75; 0.0034s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.256886s (num_starts 125; 0.0021s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%10%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.257448s (num_starts 22; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257614s (num_starts 1; 0.2576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257615s (num_starts 1; 0.2576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.257636s (num_starts 1; 0.2576s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.25764s (num_starts 1; 0.2576s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.258701s (num_starts 5; 0.0517s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.259809s (num_starts 3; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.25985s (num_starts 3; 0.0866s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.259899s (num_starts 1; 0.2599s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.259901s (num_starts 1; 0.2599s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.259902s (num_starts 1; 0.2599s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.259917s (num_starts 1; 0.2599s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.259924s (num_starts 1; 0.2599s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.259935s (num_starts 1; 0.2599s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.263323s (num_starts 4371; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.263446s (num_starts 5; 0.0527s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.263502s (num_starts 5; 0.0527s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.263725s (num_starts 4214; 0.0001s/start)
invariant_inference_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.264246s (num_starts 5; 0.0528s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.265584s (num_starts 75; 0.0035s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.266253s (num_starts 1; 0.2663s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.266254s (num_starts 1; 0.2663s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.266258s (num_starts 1; 0.2663s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.266259s (num_starts 1; 0.2663s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.266268s (num_starts 1; 0.2663s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.266271s (num_starts 1; 0.2663s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.266276s (num_starts 1; 0.2663s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.266656s (num_starts 2; 0.1333s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.266999s (num_starts 10; 0.0267s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.267466s (num_starts 44; 0.0061s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.269569s (num_starts 129; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.269624s (num_starts 3; 0.0899s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.26966s (num_starts 3; 0.0899s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.276906s (num_starts 3; 0.0923s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.276973s (num_starts 3; 0.0923s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.277147s (num_starts 39; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.277219s (num_starts 39; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.285982s (num_starts 46; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.295697s (num_starts 1; 0.2957s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.295701s (num_starts 1; 0.2957s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.295717s (num_starts 1; 0.2957s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.29572s (num_starts 1; 0.2957s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.303997s (num_starts 3081; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304717s (num_starts 4; 0.0762s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.305458s (num_starts 536; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.307916s (num_starts 14; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.308006s (num_starts 14; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.308759s (num_starts 86; 0.0036s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.322372s (num_starts 4214; 0.0001s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.328026s (num_starts 673; 0.0005s/start)
check_wfconds_on_edge.L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.328763s (num_starts 4; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.328971s (num_starts 14; 0.0235s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.332381s (num_starts 56; 0.0059s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.333456s (num_starts 56; 0.0060s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.339801s (num_starts 52; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.349443s (num_starts 17; 0.0206s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.349499s (num_starts 17; 0.0206s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.351509s (num_starts 5; 0.0703s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.36127s (num_starts 4; 0.0903s/start)
ldr_decompose_and_linear_solve.: 0.369105s (num_starts 261; 0.0014s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.374219s (num_starts 788; 0.0005s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.377711s (num_starts 673; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.380345s (num_starts 62; 0.0061s/start)
bv_linear_solve.: 0.3821s (num_starts 261; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.382838s (num_starts 1; 0.3828s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.382842s (num_starts 1; 0.3828s/start)
query:bv_solve.: 0.383662s (num_starts 261; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.384758s (num_starts 5; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.384803s (num_starts 5; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.389204s (num_starts 7; 0.0556s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.394795s (num_starts 61; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.395084s (num_starts 7; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.395108s (num_starts 7; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.3959s (num_starts 53; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.401367s (num_starts 3; 0.1338s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.40139s (num_starts 3; 0.1338s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.403138s (num_starts 5; 0.0806s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.403182s (num_starts 5; 0.0806s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.405421s (num_starts 5; 0.0811s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.405497s (num_starts 5; 0.0811s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.405534s (num_starts 5; 0.0811s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.406333s (num_starts 10; 0.0406s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.408761s (num_starts 4; 0.1022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.408839s (num_starts 4; 0.1022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.410003s (num_starts 40; 0.0103s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.410318s (num_starts 40; 0.0103s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.413512s (num_starts 3; 0.1378s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.413546s (num_starts 3; 0.1378s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.413564s (num_starts 3; 0.1379s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.414359s (num_starts 5; 0.0829s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.424226s (num_starts 75; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.425596s (num_starts 10; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.425647s (num_starts 10; 0.0426s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.425741s (num_starts 10; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.43238s (num_starts 6; 0.0721s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.436747s (num_starts 5; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.436767s (num_starts 5; 0.0874s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.443535s (num_starts 61; 0.0073s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.444265s (num_starts 129; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447875s (num_starts 1; 0.4479s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.447876s (num_starts 1; 0.4479s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.451103s (num_starts 37; 0.0122s/start)
bv_solve_returning_intermediate_structures.: 0.452565s (num_starts 261; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.454147s (num_starts 1; 0.4541s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.454153s (num_starts 1; 0.4542s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.454158s (num_starts 1; 0.4542s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.455483s (num_starts 5; 0.0911s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.455547s (num_starts 5; 0.0911s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.460604s (num_starts 7; 0.0658s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.460634s (num_starts 7; 0.0658s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.460845s (num_starts 4; 0.1152s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.460859s (num_starts 4; 0.1152s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.460897s (num_starts 4; 0.1152s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.464796s (num_starts 119; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.470288s (num_starts 5; 0.0941s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.479932s (num_starts 15; 0.0320s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.486815s (num_starts 1; 0.4868s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.486818s (num_starts 1; 0.4868s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.486831s (num_starts 1; 0.4868s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.486835s (num_starts 1; 0.4868s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.487185s (num_starts 15; 0.0325s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.493197s (num_starts 6; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.50456s (num_starts 6; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.504732s (num_starts 6; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.507005s (num_starts 6; 0.0845s/start)
bvsolve_cache_query.miss1.: 0.507746s (num_starts 261; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.515564s (num_starts 26; 0.0198s/start)
bvsolve_cache_query.: 0.516917s (num_starts 261; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.51708s (num_starts 20; 0.0259s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.517143s (num_starts 20; 0.0259s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.523778s (num_starts 7; 0.0748s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.528731s (num_starts 47; 0.0112s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.539297s (num_starts 18; 0.0300s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.541188s (num_starts 4; 0.1353s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.541263s (num_starts 4; 0.1353s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.543221s (num_starts 6; 0.0905s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.543264s (num_starts 6; 0.0905s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.544604s (num_starts 6; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.553813s (num_starts 6; 0.0923s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.554334s (num_starts 54; 0.0103s/start)
ftmap_run_pointsto_analysis.: 0.557856s (num_starts 2; 0.2789s/start)
tfg_run_pointsto_analysis.: 0.558288s (num_starts 2; 0.2791s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 0.565744s (num_starts 44; 0.0129s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.567618s (num_starts 7; 0.0811s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.570837s (num_starts 6; 0.0951s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.571026s (num_starts 6; 0.0952s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.579753s (num_starts 8; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.579806s (num_starts 8; 0.0725s/start)
tfg_populate_structs_after_ssa_construction.: 0.582993s (num_starts 2; 0.2915s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.599159s (num_starts 19384; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.600025s (num_starts 5; 0.1200s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.611317s (num_starts 52; 0.0118s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.628466s (num_starts 2; 0.3142s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.6291s (num_starts 1838; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.633398s (num_starts 2; 0.3167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.633409s (num_starts 2; 0.3167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.633416s (num_starts 2; 0.3167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.637107s (num_starts 6; 0.1062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.637125s (num_starts 6; 0.1062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.637157s (num_starts 6; 0.1062s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.640579s (num_starts 3; 0.2135s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.640639s (num_starts 14; 0.0458s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.640847s (num_starts 13; 0.0493s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.641016s (num_starts 13; 0.0493s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.652182s (num_starts 83; 0.0079s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.655979s (num_starts 11; 0.0596s/start)
solve_for_bv_points.: 0.65799s (num_starts 261; 0.0025s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.658181s (num_starts 4; 0.1645s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.666315s (num_starts 2; 0.3332s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.666326s (num_starts 2; 0.3332s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.666331s (num_starts 2; 0.3332s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.672791s (num_starts 95; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.673239s (num_starts 5; 0.1346s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.67326s (num_starts 5; 0.1347s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.673297s (num_starts 5; 0.1347s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.678416s (num_starts 7; 0.0969s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.705597s (num_starts 5; 0.1411s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.707222s (num_starts 3; 0.2357s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.709273s (num_starts 9; 0.0788s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.717225s (num_starts 44; 0.0163s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.719441s (num_starts 150; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.728718s (num_starts 6; 0.1215s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.744035s (num_starts 5; 0.1488s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.756954s (num_starts 18; 0.0421s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.765628s (num_starts 138; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.769247s (num_starts 58; 0.0133s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.779451s (num_starts 7; 0.1114s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.782496s (num_starts 2; 0.3912s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.782567s (num_starts 2; 0.3913s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.795681s (num_starts 6; 0.1326s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.80162s (num_starts 17; 0.0472s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.803614s (num_starts 650; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.806972s (num_starts 29; 0.0278s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.810071s (num_starts 1; 0.8101s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.810073s (num_starts 1; 0.8101s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.810092s (num_starts 1; 0.8101s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.810097s (num_starts 1; 0.8101s/start)
check_wfconds_on_edge.L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.823892s (num_starts 10; 0.0824s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.824747s (num_starts 7; 0.1178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.82615s (num_starts 13; 0.0636s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.834772s (num_starts 178; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.836186s (num_starts 61; 0.0137s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 0.836383s (num_starts 42; 0.0199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.840455s (num_starts 77; 0.0109s/start)
apply_mask_and_overlay_array_constant.: 0.864591s (num_starts 650; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.867334s (num_starts 50; 0.0173s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.870416s (num_starts 110; 0.0079s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.875745s (num_starts 1; 0.8757s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.875752s (num_starts 1; 0.8758s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.875756s (num_starts 1; 0.8758s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.877561s (num_starts 261; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.878804s (num_starts 5; 0.1758s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.878827s (num_starts 5; 0.1758s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.878851s (num_starts 5; 0.1758s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.887132s (num_starts 12; 0.0739s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.910645s (num_starts 1; 0.9106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.910648s (num_starts 1; 0.9106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.910673s (num_starts 1; 0.9107s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.910677s (num_starts 1; 0.9107s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.944474s (num_starts 9; 0.1049s/start)
guarded_predicate_set_and.: 0.949883s (num_starts 673; 0.0014s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.958636s (num_starts 1730; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.967226s (num_starts 1; 0.9672s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.967236s (num_starts 1; 0.9672s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.96724s (num_starts 1; 0.9672s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.967252s (num_starts 1; 0.9673s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-signed.: 0.967275s (num_starts 1; 0.9673s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.967286s (num_starts 1; 0.9673s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 0.97601s (num_starts 84; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.984482s (num_starts 10; 0.0984s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.991691s (num_starts 10; 0.0992s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.996684s (num_starts 12; 0.0831s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.999884s (num_starts 64; 0.0156s/start)
lhs_set_sort.: 1.00188s (num_starts 673; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.00795s (num_starts 5; 0.2016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.00799s (num_starts 5; 0.2016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.01669s (num_starts 13; 0.0782s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02749s (num_starts 2; 0.5137s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.02759s (num_starts 2; 0.5138s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.04082s (num_starts 11; 0.0946s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07771s (num_starts 12; 0.0898s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07839s (num_starts 11; 0.0980s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.08289s (num_starts 27; 0.0401s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 1.08296s (num_starts 27; 0.0401s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 1.0926s (num_starts 17; 0.0643s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09288s (num_starts 8; 0.1366s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.093s (num_starts 8; 0.1366s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09307s (num_starts 8; 0.1366s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 1.09487s (num_starts 13; 0.0842s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09593s (num_starts 9; 0.1218s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09615s (num_starts 9; 0.1218s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 1.09828s (num_starts 18; 0.0610s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 1.1195s (num_starts 107; 0.0105s/start)
put_smtlib_string_in_file.: 1.12235s (num_starts 840; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 1.12393s (num_starts 14; 0.0803s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 1.13354s (num_starts 240; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 1.14291s (num_starts 264; 0.0043s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 1.15599s (num_starts 5; 0.2312s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.16027s (num_starts 45; 0.0258s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.16128s (num_starts 10; 0.1161s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.16823s (num_starts 2; 0.5841s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.16833s (num_starts 2; 0.5842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 1.16933s (num_starts 12; 0.0974s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1736s (num_starts 14; 0.0838s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 1.1931s (num_starts 3342; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.22719s (num_starts 8; 0.1534s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.24107s (num_starts 2070; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.24424s (num_starts 12; 0.1037s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27219s (num_starts 5; 0.2544s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.27251s (num_starts 5; 0.2545s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.28702s (num_starts 20; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.29176s (num_starts 27; 0.0478s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.29442s (num_starts 96; 0.0135s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.29648s (num_starts 56; 0.0232s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.32502s (num_starts 22; 0.0602s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.33114s (num_starts 17; 0.0783s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.33139s (num_starts 17; 0.0783s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.36364s (num_starts 22; 0.0620s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.37226s (num_starts 16; 0.0858s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.42143s (num_starts 5; 0.2843s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.42147s (num_starts 5; 0.2843s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.42149s (num_starts 5; 0.2843s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.43738s (num_starts 16; 0.0898s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 1.43742s (num_starts 16; 0.0898s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.4375s (num_starts 16; 0.0898s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.44013s (num_starts 11; 0.1309s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 1.472s (num_starts 212; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.53286s (num_starts 14; 0.1095s/start)
graph_ec_apply_trans_funs_helper.0.: 1.54154s (num_starts 3759; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 1.55534s (num_starts 32; 0.0486s/start)
graph_ec_apply_trans_funs_helper.: 1.55588s (num_starts 3768; 0.0004s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 1.55595s (num_starts 6; 0.2593s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 1.56544s (num_starts 3768; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.57633s (num_starts 19; 0.0830s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 1.57666s (num_starts 3757; 0.0004s/start)
computeWP_for_pred_across_ec.: 1.58947s (num_starts 3757; 0.0004s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 1.60903s (num_starts 21; 0.0766s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 1.61808s (num_starts 140; 0.0116s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.64928s (num_starts 71; 0.0232s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.65808s (num_starts 130; 0.0128s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.69135s (num_starts 13; 0.1301s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.79617s (num_starts 673; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.79983s (num_starts 19; 0.0947s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80003s (num_starts 19; 0.0947s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 1.8014s (num_starts 58; 0.0311s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80161s (num_starts 14; 0.1287s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.80936s (num_starts 47; 0.0385s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.84153s (num_starts 673; 0.0027s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.84349s (num_starts 15; 0.1229s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.89336s (num_starts 11; 0.1721s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.89355s (num_starts 11; 0.1721s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.91627s (num_starts 1730; 0.0011s/start)
check_equivalence_proof.: 1.94158s (num_starts 1; 1.9416s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.94543s (num_starts 21; 0.0926s/start)
edge_composition_apply_trans_funs_on_pred.: 1.94602s (num_starts 1611; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.05165s (num_starts 26; 0.0789s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.05173s (num_starts 11; 0.1865s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.0519s (num_starts 11; 0.1865s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.05195s (num_starts 26; 0.0789s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.09392s (num_starts 13; 0.1611s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.09406s (num_starts 13; 0.1611s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 2.14994s (num_starts 36; 0.0597s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 2.15013s (num_starts 36; 0.0597s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.15757s (num_starts 23; 0.0938s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 2.15986s (num_starts 132; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 2.19879s (num_starts 67; 0.0328s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.25625s (num_starts 26; 0.0868s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.28246s (num_starts 26; 0.0878s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.30722s (num_starts 14; 0.1648s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.36006s (num_starts 13; 0.1815s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.36009s (num_starts 13; 0.1815s/start)
collect_inductive_preds_around_path.: 2.37261s (num_starts 1611; 0.0015s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 2.39072s (num_starts 17; 0.1406s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 2.42774s (num_starts 26; 0.0934s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 2.42781s (num_starts 26; 0.0934s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.44497s (num_starts 15; 0.1630s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 2.46696s (num_starts 35; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.54014s (num_starts 15; 0.1693s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 2.56593s (num_starts 2; 1.2830s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.57362s (num_starts 6; 0.4289s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.57371s (num_starts 6; 0.4290s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.60835s (num_starts 29; 0.0899s/start)
check_wfconds_on_edge.: 2.61034s (num_starts 39; 0.0669s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.64222s (num_starts 31; 0.0852s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 2.67522s (num_starts 49; 0.0546s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.68647s (num_starts 30; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.70288s (num_starts 18; 0.1502s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.74464s (num_starts 18; 0.1525s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.74471s (num_starts 21; 0.1307s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.74879s (num_starts 8; 0.3436s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.76959s (num_starts 18; 0.1539s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 2.81726s (num_starts 33; 0.0854s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.82664s (num_starts 61; 0.0463s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.83125s (num_starts 18; 0.1573s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 2.86284s (num_starts 543; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 2.92019s (num_starts 26; 0.1123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 2.95541s (num_starts 25; 0.1182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.96348s (num_starts 8; 0.3704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.96355s (num_starts 8; 0.3704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.96357s (num_starts 8; 0.3704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.97145s (num_starts 12; 0.2476s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 2.97149s (num_starts 12; 0.2476s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.99306s (num_starts 20; 0.1497s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 3.09238s (num_starts 204; 0.0152s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.13332s (num_starts 21; 0.1492s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 3.15234s (num_starts 80; 0.0394s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 3.22044s (num_starts 81; 0.0398s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.24029s (num_starts 36; 0.0900s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.24449s (num_starts 7; 0.4635s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 3.24475s (num_starts 7; 0.4635s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.24848s (num_starts 9; 0.3609s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.24854s (num_starts 9; 0.3609s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.24856s (num_starts 9; 0.3610s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.25221s (num_starts 11; 0.2957s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 3.25227s (num_starts 11; 0.2957s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.25234s (num_starts 11; 0.2957s/start)
dst_edge_composition_proves_false.: 3.3025s (num_starts 7; 0.4718s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.32984s (num_starts 4; 0.8325s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.32984s (num_starts 4; 0.8325s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.33673s (num_starts 35; 0.0953s/start)
get_next_dst_edge_composition_to_correlate.: 3.35843s (num_starts 8; 0.4198s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.41282s (num_starts 5; 0.6826s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.41413s (num_starts 8; 0.4268s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 3.41418s (num_starts 8; 0.4268s/start)
decide_hoare_triple.: 3.42158s (num_starts 10; 0.3422s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.52355s (num_starts 23; 0.1532s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.52566s (num_starts 10; 0.3526s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 3.53038s (num_starts 107; 0.0330s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 3.53107s (num_starts 82; 0.0431s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 3.63874s (num_starts 2; 1.8194s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.69251s (num_starts 38; 0.0972s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-trivial.: 3.72824s (num_starts 581; 0.0064s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 3.7824s (num_starts 271; 0.0140s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 3.95009s (num_starts 98; 0.0403s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 4.10797s (num_starts 93; 0.0442s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 4.18626s (num_starts 119; 0.0352s/start)
check_preds_on_edge_compositions.: 4.2418s (num_starts 44; 0.0964s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 4.38769s (num_starts 300; 0.0146s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 4.41236s (num_starts 82; 0.0538s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.43348s (num_starts 26; 0.1705s/start)
corr_graph::add_edge().: 4.43936s (num_starts 13; 0.3415s/start)
compute_z3_expr.: 4.49392s (num_starts 1431; 0.0031s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 4.53204s (num_starts 13; 0.3486s/start)
corr_graph_add_correlation.: 4.53242s (num_starts 13; 0.3486s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 4.53305s (num_starts 13; 0.3487s/start)
parse_z3_model.: 4.66764s (num_starts 172; 0.0271s/start)
read_counter_examples_from_channel.: 4.70975s (num_starts 88; 0.0535s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.72809s (num_starts 28; 0.1689s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 4.8787s (num_starts 87; 0.0561s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 5.40404s (num_starts 123; 0.0439s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.61048s (num_starts 16; 0.3507s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.61086s (num_starts 16; 0.3507s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 5.72462s (num_starts 24; 0.2385s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 5.76944s (num_starts 22; 0.2622s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.77346s (num_starts 18; 0.3207s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 5.83274s (num_starts 28; 0.2083s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 5.89726s (num_starts 28; 0.2106s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.04622s (num_starts 44; 0.1374s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.63701s (num_starts 25; 0.2655s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 6.70025s (num_starts 53; 0.1264s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.07734s (num_starts 30; 0.2359s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.07812s (num_starts 30; 0.2359s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 7.09203s (num_starts 22; 0.3224s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 7.52834s (num_starts 256; 0.0294s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 7.60217s (num_starts 22; 0.3456s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 7.608s (num_starts 77; 0.0988s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 7.91696s (num_starts 91; 0.0870s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.08971s (num_starts 37; 0.2186s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.26926s (num_starts 32; 0.2584s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.50017s (num_starts 72; 0.1181s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 8.506s (num_starts 67; 0.1270s/start)
decide_hoare_triple_helper;-trivial.: 8.52602s (num_starts 1208; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 8.7444s (num_starts 120; 0.0729s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.12096s (num_starts 61; 0.1495s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.70909s (num_starts 23; 0.4221s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry).: 9.84813s (num_starts 211; 0.0467s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 10.1242s (num_starts 212; 0.0478s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 10.1327s (num_starts 111; 0.0913s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 10.4778s (num_starts 161; 0.0651s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.1287s (num_starts 119; 0.1019s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 14.8524s (num_starts 68; 0.2184s/start)
ce_reconcile_sorts.: 14.9098s (num_starts 174; 0.0857s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 15.7279s (num_starts 178; 0.0884s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry).: 15.881s (num_starts 700; 0.0227s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 17.2948s (num_starts 111; 0.1558s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 17.7298s (num_starts 65; 0.2728s/start)
invariant_inference_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 19.0852s (num_starts 21; 0.9088s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry).: 19.3968s (num_starts 195; 0.0995s/start)
propagate_nodece_across_edge.: 20.0942s (num_starts 117; 0.1717s/start)
decide_hoare_triple_helper;per-query-type;linear.: 20.1717s (num_starts 654; 0.0308s/start)
check_node_stability_after_CE_addition.: 21.6262s (num_starts 348; 0.0621s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 25.6528s (num_starts 21; 1.2216s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 30.0816s (num_starts 312; 0.0964s/start)
src_tfg_counter_example_translate_on_edge_composition.: 30.0837s (num_starts 353; 0.0852s/start)
query:smt.: 31.0492s (num_starts 420; 0.0739s/start)
spawn_smt_query.: 35.7634s (num_starts 420; 0.0852s/start)
counter_example_translate_on_edge_composition_helper.: 43.3965s (num_starts 2958; 0.0147s/start)
counter_example_falsifies_preds.: 46.4825s (num_starts 619; 0.0751s/start)
counter_example_evaluate_preds.: 46.6248s (num_starts 3624; 0.0129s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 51.8803s (num_starts 78; 0.6651s/start)
solver_provable.: 57.4583s (num_starts 673; 0.0854s/start)
solver_satisfiable-cache-miss.: 57.4925s (num_starts 420; 0.1369s/start)
solver_satisfiable.: 57.4987s (num_starts 674; 0.0853s/start)
expr_is_provable.: 58.1756s (num_starts 673; 0.0864s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 58.1879s (num_starts 673; 0.0865s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 58.2262s (num_starts 673; 0.0865s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 58.252s (num_starts 673; 0.0866s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 59.3209s (num_starts 673; 0.0881s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 59.4784s (num_starts 673; 0.0884s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 59.4904s (num_starts 673; 0.0884s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 68.8629s (num_starts 403; 0.1709s/start)
is_expr_equal_using_lhs_set_and_precond.: 68.8785s (num_starts 673; 0.1023s/start)
prove.: 68.8897s (num_starts 673; 0.1024s/start)
prove_spawn_and_join_helper.: 68.8939s (num_starts 673; 0.1024s/start)
prove_spawn_and_join.: 72.2148s (num_starts 673; 0.1073s/start)
prove_wrapper.proof_query_not_trivial.: 72.3469s (num_starts 673; 0.1075s/start)
prove_wrapper.: 72.5218s (num_starts 1705; 0.0425s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%17%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 73.5039s (num_starts 42; 1.7501s/start)
decide_hoare_triple_check_ub.: 74.5953s (num_starts 1611; 0.0463s/start)
add_fresh_counterexample_at_pc_and_propagate.: 75.1091s (num_starts 203; 0.3700s/start)
decide_hoare_triple_with_alias_cons.ce.: 75.1161s (num_starts 1489; 0.0504s/start)
decide_hoare_triple_helper.: 77.4621s (num_starts 1611; 0.0481s/start)
update_invariant_state_for_edges.: 148.026s (num_starts 11; 13.4569s/start)
cg_check_new_cg_ec.: 148.026s (num_starts 11; 13.4569s/start)
correl_entry_apply.: 148.027s (num_starts 11; 13.4570s/start)
expandProductCFG.: 151.426s (num_starts 12; 12.6188s/start)
decide_hoare_triple_with_alias_cons.: 152.591s (num_starts 1611; 0.0947s/start)
bestFirstSearch.: 156.04s (num_starts 1; 156.0403s/start)
Time taken for equivalence check.: 157.998s (num_starts 1; 157.9980s/start)

counters:
# of Paths Prunned through CE propagation.: 5
# of assume sat failures for undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry.: 15
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 5
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 261
# of smt-solver-queries.: 420
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 21
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 22
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 15
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 24
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 22
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 19
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 22
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 22
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 22
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 23
smallest_point_cover_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 24
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 22
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 102
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 10
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 18
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 25
smallest_point_cover_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 74
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 32
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 81
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 21
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 49
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 28
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 15
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 43
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 41
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 89
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 96
smt-queries-cache-hits.: 254
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 172
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 11
dst-nodes.: 10
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%17%bbentry_Lfor.cond1%1%bbentry.: 35
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 28
final-CG-counterexamples-total-at-L3%17%bbentry_Lfor.cond1%1%bbentry.: 56
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 52
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 41
final-CG-super-edges.: 0
src-edges.: 21
src-nodes.: 18
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 130.50
final-CG-time-to-total-time-ratio.: 0.84
query-time-to-total-time-ratio.: 0.20

Context stats:
exprs: count: 280198
sorts: count: 170
num_proof_queries: 673
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	106644
	        hit ratio:	0.993211
m_simplify_solver:
	----------- total:	5502
	        hit ratio:	0.802981
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	1084
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1084
	        hit ratio:	0
m_expr_size:
	----------- total:	18329
	        hit ratio:	0.931857
m_contains_only_constants_or_sp_versions:
	----------- total:	24
	        hit ratio:	0.791667
m_expr_evaluates_to_constant_visitor:
	----------- total:	284695
	        hit ratio:	0.46861

z3_solver expr_query_cache entry size: 420
	----------- total:	674
	             hits:	254
	        hit ratio:	0.376855
histogram (time taken by solver in ms):
[ 33.4320,  43.7950) (avg.  40.4433)     : 62
[ 43.7950,  57.3702) (avg.  50.9949)     : 218
[ 57.3702,  75.1534) (avg.  66.8247)     : 42
[ 75.1534,  98.4488) (avg.  85.1277)     : 38
[ 98.4488, 128.9652) (avg. 110.1624)     : 24
[128.9652, 168.9408) (avg. 143.8006)     : 15
[168.9408, 221.3077) (avg. 190.1103)     : 3
[221.3077, 289.9069) (avg. 254.7342)     : 5
[289.9069, 379.7699) (avg. 337.0558)     : 9
[379.7699, 497.4880) (avg. 424.6463)     : 4
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 13) (avg.  0)                       : 0
[13, 17) (avg.  0)                       : 0
[17, 21) (avg. 18)                       : 33
[21, 25) (avg. 24)                       : 230
[25, 29) (avg. 26)                       : 16
[29, 33) (avg. 31)                       : 140
[33, 37) (avg.  0)                       : 0
[37, 41) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 161) (avg. 103)                    : 1
[161, 218) (avg.   0)                    : 0
[218, 275) (avg.   0)                    : 0
[275, 332) (avg.   0)                    : 0
[332, 389) (avg. 360)                    : 62
[389, 447) (avg. 415)                    : 192
[447, 504) (avg. 489)                    : 25
[504, 561) (avg. 538)                    : 12
[561, 618) (avg. 589)                    : 53
[618, 675) (avg. 637)                    : 75
Top 10 highest time taking queries:
1. [0.496s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.15
2. [0.409s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.3
3. [0.398s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%17%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%17%b.0
4. [0.395s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
5. [0.375s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.2
6. [0.366s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-signed.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
7. [0.350s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.1
8. [0.343s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.17
9. [0.341s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-10-free_var_idx.47.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_4.0
10. [0.335s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.1

<MSG>3:02 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 217 time spent: 0:0:0 [0.004474s total; 0.000021 per start]
tfg_computeWP: num_starts 12455 time spent: 0:0:1 [1.369554s total; 0.000110 per start]
tfg_get_simplified_to_state_for_edge: num_starts 25916 time spent: 0:0:0 [0.051906s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 15337 time spent: 0:0:0 [0.029744s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 12596 time spent: 0:0:0 [0.022101s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 212 time spent: 0:0:44 [44.098743s total; 0.208013 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 26 time spent: 0:0:4 [4.413596s total; 0.169754 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 2517 time spent: 0:0:30 [30.322099s total; 0.012047 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 712 time spent: 0:0:46 [46.586529s total; 0.065431 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 2238 time spent: 0:0:18 [18.416025s total; 0.008229 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 10203 time spent: 0:1:16 [76.582236s total; 0.007506 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 2253 time spent: 0:0:0 [0.127316s total; 0.000057 per start]
tfg_graph_get_vars_written_on_edge: num_starts 2238 time spent: 0:0:0 [0.052538s total; 0.000023 per start]
cg_with_rank_add_CE_at_pc: num_starts 348 time spent: 0:0:24 [24.001324s total; 0.068969 per start]
graph_with_ce_add_CE_at_pc: num_starts 196 time spent: 0:0:0 [0.012923s total; 0.000066 per start]
graph_with_guessing_add_CE_at_pc: num_starts 348 time spent: 0:0:23 [23.988011s total; 0.068931 per start]
point_set_add_point_using_CE: num_starts 3081 time spent: 0:0:0 [0.846888s total; 0.000275 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 3081 time spent: 0:0:0 [0.852900s total; 0.000277 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 266 time spent: 0:0:2 [2.345941s total; 0.008819 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 266 time spent: 0:0:1 [1.482310s total; 0.005573 per start]
expr_label_memlabels_using_memlabel_map: num_starts 96604 time spent: 0:0:2 [2.506510s total; 0.000026 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 14610 time spent: 0:0:0 [0.397394s total; 0.000027 per start]
expr_simplify_solver: num_starts 5626 time spent: 0:0:0 [0.418820s total; 0.000074 per start]
expr_simplify_syntactic: num_starts 5834 time spent: 0:0:0 [0.717732s total; 0.000123 per start]
expr_simplify_select_on_store: num_starts 231 time spent: 0:0:0 [0.633834s total; 0.002744 per start]
expr_simplify_using_lhs_set_helper: num_starts 2184 time spent: 0:0:1 [1.264313s total; 0.000579 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 11123 time spent: 0:0:1 [1.251157s total; 0.000112 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 5883 time spent: 0:0:0 [0.021588s total; 0.000004 per start]
expr_simplify_eq: num_starts 812 time spent: 0:0:0 [0.006034s total; 0.000007 per start]
expr_simplify_or: num_starts 92 time spent: 0:0:0 [0.000121s total; 0.000001 per start]
expr_simplify_and: num_starts 417 time spent: 0:0:0 [0.002480s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 93 time spent: 0:0:0 [0.001113s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 12 time spent: 0:0:0 [0.000263s total; 0.000022 per start]
expr_simplify_not: num_starts 122 time spent: 0:0:0 [0.000350s total; 0.000003 per start]
expr_simplify_implies: num_starts 34 time spent: 0:0:0 [0.000296s total; 0.000009 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001284s total; 0.000092 per start]
canonicalize_expr_tree: num_starts 1154 time spent: 0:0:0 [0.064343s total; 0.000056 per start]
expr_simplify_memalloc_using_memlabel: num_starts 106 time spent: 0:0:0 [0.000325s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 231 time spent: 0:0:0 [0.625338s total; 0.002707 per start]
get_arithmetic_addsub_atoms: num_starts 13764 time spent: 0:0:0 [0.008695s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 1864 time spent: 0:0:0 [0.018076s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 5228 time spent: 0:0:0 [0.003066s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 107255 time spent: 0:0:0 [0.950249s total; 0.000009 per start]
expr_do_simplify_helper_cache: num_starts 107255 time spent: 0:0:0 [0.116170s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000012s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000395s total; 0.000005 per start]
evaluate_expr_and_check_bounds: num_starts 20414 time spent: 0:1:16 [76.976860s total; 0.003771 per start]
array_constant_equals: num_starts 79818 time spent: 0:0:0 [0.076793s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 129 time spent: 0:0:0 [0.444105s total; 0.003443 per start]
alias_val_xfer_and_meet: num_starts 129 time spent: 0:0:0 [0.269326s total; 0.002088 per start]
get_sprel_map_from_avail_exprs: num_starts 167 time spent: 0:0:0 [0.022535s total; 0.000135 per start]
update_memlabels_for_memslot_locs: num_starts 36 time spent: 0:0:0 [0.000176s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 492 time spent: 0:0:0 [0.077480s total; 0.000157 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1004 time spent: 0:0:0 [0.184214s total; 0.000183 per start]
compute_locs_definitely_written_on_edge: num_starts 492 time spent: 0:0:0 [0.000759s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 109 time spent: 0:0:0 [0.008432s total; 0.000077 per start]
edge_update_memlabel_map_for_mlvars: num_starts 246 time spent: 0:0:0 [0.053956s total; 0.000219 per start]
add_new_locs_based_on_edge: num_starts 129 time spent: 0:0:0 [0.187827s total; 0.001456 per start]
expand_locset_to_include_slots_for_memmask: num_starts 210 time spent: 0:0:0 [0.000641s total; 0.000003 per start]
total: num_starts 1 time spent: 0:3:7 [187.809102s total; 187.809102 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 159.61s.
ftmap_run_pointsto_analysis.: 0.557856s (num_starts 2; 0.2789s/start)s.
EQ Time after pointsto analysis: 159.055s.
EQ Time after pointsto analysis and smt_query: 86.5333s.
EQ Time after pointsto analysis and smt_query and bv-solve: 86.0164s.
Equivalence proof found. The programs are equivalent.
