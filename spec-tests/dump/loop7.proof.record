==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (= true false)))
 (let (($x146 (= $x145 true)))
 (let (($x138 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x124 false)))
 ))
 (let (($x139 (and $x128 $x138)))
 (let (($x140 (= $x139 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x113 (concat ?x110 (concat ?x107 ?x105)))))
 (let (($x116 (= ?x114 input.dst.llvm-%m)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x57)))))
 (let (($x100 (= ?x99 input.dst.llvm-%n)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (= $x13 true)))
 (let (($x74 (= $x64 true)))
 (let (($x87 (= $x74 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x65)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x12)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x78 $x71)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x50 $x32)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x81 $x67)))
 (let (($x49 (not $x46)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x85 $x22)))
 (let (($x41 (and (not $x68) $x49)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x52 $x15)))
 (let (($x60 (not $x63)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x37 $x51)))
 (let (($x76 (and (not $x38) $x60)))
 (let (($x20 (and (and (and (and (and (and $x76 $x41) $x11) $x72) $x39) $x84) $x28)))
 (let (($x16 (and $x20 $x66)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x27 (or false (or false (and (and true (or $x21 $x5)) (or $x86 $x44))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x26 (and $x19 $x16)))
 (let (($x8 (= $x26 true)))
 (let (($x75 (= $x8 true)))
 (let (($x83 (= $x75 true)))
 (let (($x88 (and $x83 $x87)))
 (let (($x103 (and $x88 $x102)))
 (let (($x119 (and $x103 $x118)))
 (let (($x141 (and $x119 $x140)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x34 $x141)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x14 $x142)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x29 $x143)))
 (let (($x147 (=> $x144 $x146)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (= true false)))
 (let (($x146 (= $x145 true)))
 (let (($x138 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x124 false)))
 ))
 (let (($x139 (and $x128 $x138)))
 (let (($x140 (= $x139 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x113 (concat ?x110 (concat ?x107 ?x105)))))
 (let (($x116 (= ?x114 input.dst.llvm-%m)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x57)))))
 (let (($x100 (= ?x99 input.dst.llvm-%n)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (= $x13 true)))
 (let (($x74 (= $x64 true)))
 (let (($x87 (= $x74 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x65)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x12)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x78 $x71)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x50 $x32)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x81 $x67)))
 (let (($x49 (not $x46)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x85 $x22)))
 (let (($x41 (and (not $x68) $x49)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x52 $x15)))
 (let (($x60 (not $x63)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x37 $x51)))
 (let (($x76 (and (not $x38) $x60)))
 (let (($x20 (and (and (and (and (and (and $x76 $x41) $x11) $x72) $x39) $x84) $x28)))
 (let (($x16 (and $x20 $x66)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x27 (or false (or false (and (and true (or $x21 $x5)) (or $x86 $x44))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x26 (and $x19 $x16)))
 (let (($x8 (= $x26 true)))
 (let (($x75 (= $x8 true)))
 (let (($x83 (= $x75 true)))
 (let (($x88 (and $x83 $x87)))
 (let (($x103 (and $x88 $x102)))
 (let (($x119 (and $x103 $x118)))
 (let (($x141 (and $x119 $x140)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x34 $x141)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x14 $x142)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x29 $x143)))
 (let (($x147 (=> $x144 $x146)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1be5ee7c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1303f310)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1303f313)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1be5ee7f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1303f310)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1be5ee7c)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x47)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x84)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x13 $x91)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x81 $x83)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x18 (not $x72)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x8 $x86)))
 (let (($x85 (and (not $x89) $x18)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x9 (not $x15)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x99)))
 (let (($x63 (and (not $x45) $x9)))
 (let (($x26 (and (and (and (and (and (and $x63 $x85) $x33) $x19) $x65) $x64) $x16)))
 (let (($x68 (and $x26 $x71)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x79 (or false (or false (and (and true (or $x27 $x60)) (or $x90 $x56))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x120 (and $x75 $x68)))
 (let (($x122 (= $x120 true)))
 (let (($x126 (= $x122 true)))
 (let (($x148 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x128 false)))
 ))
 (let (($x10 (and $x138 $x148)))
 (let (($x104 (= $x10 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x113 (concat ?x102 ?x100)))))
 (let (($x105 (= input.dst.llvm-%m ?x107)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x38 (concat ?x28 (concat ?x42 ?x31)))))
 (let (($x80 (= input.dst.llvm-%n ?x95)))
 (let (($x108 (and $x80 $x105)))
 (let (($x32 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x111 (and $x32 $x108)))
 (let (($x116 (and (and (and $x75 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x68) $x111)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x119 (= $x118 true)))
 (let (($x58 (and $x119 $x104)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x55 $x58)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x35 $x125)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x6 $x133)))
 (let (($x134 (=> $x131 $x126)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x47)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x84)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x13 $x91)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x81 $x83)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x18 (not $x72)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x8 $x86)))
 (let (($x85 (and (not $x89) $x18)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x9 (not $x15)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x99)))
 (let (($x63 (and (not $x45) $x9)))
 (let (($x26 (and (and (and (and (and (and $x63 $x85) $x33) $x19) $x65) $x64) $x16)))
 (let (($x68 (and $x26 $x71)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x79 (or false (or false (and (and true (or $x27 $x60)) (or $x90 $x56))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x120 (and $x75 $x68)))
 (let (($x122 (= $x120 true)))
 (let (($x126 (= $x122 true)))
 (let (($x148 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x128 false)))
 ))
 (let (($x10 (and $x138 $x148)))
 (let (($x104 (= $x10 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x113 (concat ?x102 ?x100)))))
 (let (($x105 (= input.dst.llvm-%m ?x107)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x38 (concat ?x28 (concat ?x42 ?x31)))))
 (let (($x80 (= input.dst.llvm-%n ?x95)))
 (let (($x108 (and $x80 $x105)))
 (let (($x32 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x111 (and $x32 $x108)))
 (let (($x116 (and (and (and $x75 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x68) $x111)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x119 (= $x118 true)))
 (let (($x58 (and $x119 $x104)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x55 $x58)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x35 $x125)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x6 $x133)))
 (let (($x134 (=> $x131 $x126)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x144 (= $x136 true)))
 (let (($x20 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x147 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x147 false)))
 ))
 (let (($x88 (and $x58 $x20)))
 (let (($x132 (= $x88 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x107 (concat ?x100 (concat ?x113 ?x106)))))
 (let (($x108 (= input.dst.llvm-%m ?x105)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x97 (concat ?x42 (concat ?x39 ?x67)))))
 (let (($x80 (= input.dst.llvm-%n ?x95)))
 (let (($x111 (and $x80 $x108)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x116 (and $x78 $x111)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x94)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x65)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x19 $x13)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x87 $x73)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x8 $x86)))
 (let (($x85 (and (not $x89) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x99)))
 (let (($x63 (and (not $x45) $x15)))
 (let (($x71 (and (and (and (and (and (and $x63 $x85) $x22) $x12) $x74) $x83) $x17)))
 (let (($x68 (and $x71 $x64)))
 (let (($x51 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x54 (or false (or false (and (and true (or $x77 $x76)) (or $x93 $x21))))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x119 (and (and (and $x114 $x51) $x68) $x116)))
 (let (($x127 (= $x119 true)))
 (let (($x128 (= $x127 true)))
 (let (($x137 (= $x128 true)))
 (let (($x143 (and $x137 $x132)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (and $x43 $x143)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x25 $x141)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x124 (and $x48 $x123)))
 (let (($x140 (=> $x124 $x144)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x144 (= $x136 true)))
 (let (($x20 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x147 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x147 false)))
 ))
 (let (($x88 (and $x58 $x20)))
 (let (($x132 (= $x88 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x107 (concat ?x100 (concat ?x113 ?x106)))))
 (let (($x108 (= input.dst.llvm-%m ?x105)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x97 (concat ?x42 (concat ?x39 ?x67)))))
 (let (($x80 (= input.dst.llvm-%n ?x95)))
 (let (($x111 (and $x80 $x108)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x116 (and $x78 $x111)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x94)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x65)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x19 $x13)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x87 $x73)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x8 $x86)))
 (let (($x85 (and (not $x89) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x99)))
 (let (($x63 (and (not $x45) $x15)))
 (let (($x71 (and (and (and (and (and (and $x63 $x85) $x22) $x12) $x74) $x83) $x17)))
 (let (($x68 (and $x71 $x64)))
 (let (($x51 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x54 (or false (or false (and (and true (or $x77 $x76)) (or $x93 $x21))))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x119 (and (and (and $x114 $x51) $x68) $x116)))
 (let (($x127 (= $x119 true)))
 (let (($x128 (= $x127 true)))
 (let (($x137 (= $x128 true)))
 (let (($x143 (and $x137 $x132)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (and $x43 $x143)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x25 $x141)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x124 (and $x48 $x123)))
 (let (($x140 (=> $x124 $x144)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00044d0c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00020d88)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00044d0f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00020d8b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00044d0c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00020d88)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00020d88) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6d14fefc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffef8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffefb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6d14feff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffef8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6d14fefc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffef9) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x133)))
 (let (($x139 (= ?x134 input.dst.llvm-%n)))
 (let (($x129 (= $x139 true)))
 (let (($x92 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x20 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x20 false)))
 ))
 (let (($x148 (and $x141 $x92)))
 (let (($x122 (= $x148 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x108 (concat ?x101 (concat ?x112 ?x102)))))
 (let (($x116 (= input.dst.llvm-%m ?x111)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x95 (concat ?x67 (concat ?x66 ?x97)))))
 (let (($x109 (= input.dst.llvm-%n ?x80)))
 (let (($x119 (and $x109 $x116)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x127 (and $x78 $x119)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x83)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x26)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x16 $x53)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x12 $x81)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x68 (and (and (and (and (and (and $x8 $x98) $x22) $x33) $x13) $x74) $x91)))
 (let (($x118 (and $x68 $x47)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x51 (or false (or false (and (and true (or $x90 $x46)) (or $x79 $x75))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x146 (and (and (and $x44 $x27) $x118) $x127)))
 (let (($x147 (= $x146 true)))
 (let (($x104 (= $x147 true)))
 (let (($x58 (= $x104 true)))
 (let (($x131 (and $x58 $x122)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and $x43 $x131)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x61 $x138)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x35 $x142)))
 (let (($x135 (=> $x10 $x129)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x133)))
 (let (($x139 (= ?x134 input.dst.llvm-%n)))
 (let (($x129 (= $x139 true)))
 (let (($x92 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x20 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x20 false)))
 ))
 (let (($x148 (and $x141 $x92)))
 (let (($x122 (= $x148 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x108 (concat ?x101 (concat ?x112 ?x102)))))
 (let (($x116 (= input.dst.llvm-%m ?x111)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x95 (concat ?x67 (concat ?x66 ?x97)))))
 (let (($x109 (= input.dst.llvm-%n ?x80)))
 (let (($x119 (and $x109 $x116)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x127 (and $x78 $x119)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x83)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x26)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x16 $x53)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x12 $x81)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x68 (and (and (and (and (and (and $x8 $x98) $x22) $x33) $x13) $x74) $x91)))
 (let (($x118 (and $x68 $x47)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x51 (or false (or false (and (and true (or $x90 $x46)) (or $x79 $x75))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x146 (and (and (and $x44 $x27) $x118) $x127)))
 (let (($x147 (= $x146 true)))
 (let (($x104 (= $x147 true)))
 (let (($x58 (= $x104 true)))
 (let (($x131 (and $x58 $x122)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and $x43 $x131)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x61 $x138)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x35 $x142)))
 (let (($x135 (=> $x10 $x129)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x120 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x132 (bvmul ?x120 (_ bv256 16))))
 (let (($x124 (= ?x132 ?x145)))
 (let (($x55 (= $x124 true)))
 (let (($x121 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x110 false)))
 ))
 (let (($x37 (and $x131 $x121)))
 (let (($x107 (= $x37 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x111 (concat ?x102 (concat ?x101 ?x108)))))
 (let (($x119 (= input.dst.llvm-%m ?x116)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x59 (concat ?x66 (concat ?x38 ?x31)))))
 (let (($x109 (= input.dst.llvm-%n ?x80)))
 (let (($x127 (and $x109 $x119)))
 (let (($x24 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x146 (and $x24 $x127)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x73)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x13)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x33 $x16)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x84 $x87)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x47 (and (and (and (and (and (and $x8 $x98) $x49) $x17) $x19) $x81) $x94)))
 (let (($x118 (and $x47 $x74)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x30 (or false (or false (and (and true (or $x93 $x56)) (or $x54 $x114))))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x30)))
 (let (($x58 (and (and (and $x128 $x117) $x118) $x146)))
 (let (($x34 (= $x58 true)))
 (let (($x20 (= $x34 true)))
 (let (($x143 (= $x20 true)))
 (let (($x70 (and $x143 $x107)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (and $x29 $x70)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x14 $x88)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x136 (and $x48 $x140)))
 (let (($x125 (=> $x136 $x55)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x120 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x132 (bvmul ?x120 (_ bv256 16))))
 (let (($x124 (= ?x132 ?x145)))
 (let (($x55 (= $x124 true)))
 (let (($x121 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x110 false)))
 ))
 (let (($x37 (and $x131 $x121)))
 (let (($x107 (= $x37 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x111 (concat ?x102 (concat ?x101 ?x108)))))
 (let (($x119 (= input.dst.llvm-%m ?x116)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x59 (concat ?x66 (concat ?x38 ?x31)))))
 (let (($x109 (= input.dst.llvm-%n ?x80)))
 (let (($x127 (and $x109 $x119)))
 (let (($x24 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x146 (and $x24 $x127)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x73)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x13)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x33 $x16)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x84 $x87)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x47 (and (and (and (and (and (and $x8 $x98) $x49) $x17) $x19) $x81) $x94)))
 (let (($x118 (and $x47 $x74)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x30 (or false (or false (and (and true (or $x93 $x56)) (or $x54 $x114))))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x30)))
 (let (($x58 (and (and (and $x128 $x117) $x118) $x146)))
 (let (($x34 (= $x58 true)))
 (let (($x20 (= $x34 true)))
 (let (($x143 (= $x20 true)))
 (let (($x70 (and $x143 $x107)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (and $x29 $x70)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x14 $x88)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x136 (and $x48 $x140)))
 (let (($x125 (=> $x136 $x55)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x144 (= (_ bv0 2) ?x141)))
 (let (($x148 (= $x144 true)))
 (let (($x149 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var107X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var107X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var106X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var106X)))
 (= $x121 false)))
 ))
 (let (($x43 (and $x88 $x149)))
 (let (($x60 (= $x43 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x119 (concat ?x100 (concat ?x106 ?x112)))))
 (let (($x146 (= input.dst.llvm-%m ?x127)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x80 (concat ?x31 (concat ?x28 ?x59)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x58 (and $x103 $x146)))
 (let (($x24 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x34 (and $x24 $x58)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x53)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x19)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x17 $x33)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x22 $x71)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x74 (and (and (and (and (and (and $x8 $x98) $x65) $x26) $x12) $x87) $x68)))
 (let (($x118 (and $x74 $x81)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x77 (or false (or false (and (and true (or $x21 $x79)) (or $x41 $x51))))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x69 (and (and (and $x147 $x27) $x118) $x34)))
 (let (($x110 (= $x69 true)))
 (let (($x122 (= $x110 true)))
 (let (($x131 (= $x122 true)))
 (let (($x105 (and $x131 $x60)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x25 $x105)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x6 $x32)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x137 $x92)))
 (let (($x134 (=> $x133 $x148)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x144 (= (_ bv0 2) ?x141)))
 (let (($x148 (= $x144 true)))
 (let (($x149 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var107X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var107X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var106X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var106X)))
 (= $x121 false)))
 ))
 (let (($x43 (and $x88 $x149)))
 (let (($x60 (= $x43 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x119 (concat ?x100 (concat ?x106 ?x112)))))
 (let (($x146 (= input.dst.llvm-%m ?x127)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x80 (concat ?x31 (concat ?x28 ?x59)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x58 (and $x103 $x146)))
 (let (($x24 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x34 (and $x24 $x58)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x53)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x19)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x17 $x33)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x22 $x71)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x74 (and (and (and (and (and (and $x8 $x98) $x65) $x26) $x12) $x87) $x68)))
 (let (($x118 (and $x74 $x81)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x77 (or false (or false (and (and true (or $x21 $x79)) (or $x41 $x51))))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x69 (and (and (and $x147 $x27) $x118) $x34)))
 (let (($x110 (= $x69 true)))
 (let (($x122 (= $x110 true)))
 (let (($x131 (= $x122 true)))
 (let (($x105 (and $x131 $x60)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x25 $x105)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x6 $x32)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x137 $x92)))
 (let (($x134 (=> $x133 $x148)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x107)))
 (let (($x136 (= ?x145 input.spec-%var-n-1)))
 (let (($x124 (= $x136 true)))
 (let (($x5 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x125 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x125 false)))
 ))
 (let (($x111 (and $x105 $x5)))
 (let (($x42 (= $x111 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x127 (concat ?x112 (concat ?x100 ?x119)))))
 (let (($x58 (= input.dst.llvm-%m ?x146)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x39 (concat ?x28 (concat ?x95 ?x97)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x34 (and $x103 $x58)))
 (let (($x23 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x69 (and $x23 $x34)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x16)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x12)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x26 $x17)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x49 $x91)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x81 (and (and (and (and (and (and $x8 $x98) $x64) $x13) $x84) $x71) $x47)))
 (let (($x118 (and $x81 $x87)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x52 (or false (or false (and (and true (or $x40 $x54)) (or $x44 $x30))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x52)))
 (let (($x131 (and (and (and $x20 $x117) $x118) $x69)))
 (let (($x135 (= $x131 true)))
 (let (($x121 (= $x135 true)))
 (let (($x70 (= $x121 true)))
 (let (($x37 (and $x70 $x42)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x61 $x37)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x82 $x132)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x48 $x120)))
 (let (($x138 (=> $x126 $x124)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x107)))
 (let (($x136 (= ?x145 input.spec-%var-n-1)))
 (let (($x124 (= $x136 true)))
 (let (($x5 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x125 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x125 false)))
 ))
 (let (($x111 (and $x105 $x5)))
 (let (($x42 (= $x111 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x127 (concat ?x112 (concat ?x100 ?x119)))))
 (let (($x58 (= input.dst.llvm-%m ?x146)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x39 (concat ?x28 (concat ?x95 ?x97)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x34 (and $x103 $x58)))
 (let (($x23 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x69 (and $x23 $x34)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x16)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x12)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x26 $x17)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x49 $x91)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x81 (and (and (and (and (and (and $x8 $x98) $x64) $x13) $x84) $x71) $x47)))
 (let (($x118 (and $x81 $x87)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x52 (or false (or false (and (and true (or $x40 $x54)) (or $x44 $x30))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x52)))
 (let (($x131 (and (and (and $x20 $x117) $x118) $x69)))
 (let (($x135 (= $x131 true)))
 (let (($x121 (= $x135 true)))
 (let (($x70 (= $x121 true)))
 (let (($x37 (and $x70 $x42)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x61 $x37)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x82 $x132)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x48 $x120)))
 (let (($x138 (=> $x126 $x124)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x43 (= $x130 true)))
 (let (($x144 (= $x43 true)))
 (let (($x139 (forall ((input.ind-%var119X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var119X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var119X) (_ bv0 32)))))
 ))
 (let (($x37 (forall ((input.ind-%var118X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var118X)))
 (= $x142 false)))
 ))
 (let (($x90 (and $x37 $x139)))
 (let (($x116 (= $x90 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x146 (concat ?x119 (concat ?x112 ?x127)))))
 (let (($x34 (= input.dst.llvm-%m ?x58)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x59 (concat ?x95 (concat ?x31 ?x66)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x69 (and $x103 $x34)))
 (let (($x115 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x131 (and $x115 $x69)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x33)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x84)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x13 $x26)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x65 $x94)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x85)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x63 (not $x15)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x63)))
 (let (($x87 (and (and (and (and (and (and $x8 $x98) $x83) $x19) $x22) $x91) $x74)))
 (let (($x118 (and $x87 $x71)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x46 (or false (or false (and (and true (or $x75 $x41)) (or $x128 $x77))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x70 (and (and (and $x110 $x27) $x118) $x131)))
 (let (($x55 (= $x70 true)))
 (let (($x125 (= $x55 true)))
 (let (($x60 (= $x125 true)))
 (let (($x78 (and $x60 $x116)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x14 $x78)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x36 $x149)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x25 $x141)))
 (let (($x92 (=> $x133 $x144)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x43 (= $x130 true)))
 (let (($x144 (= $x43 true)))
 (let (($x139 (forall ((input.ind-%var119X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var119X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var119X) (_ bv0 32)))))
 ))
 (let (($x37 (forall ((input.ind-%var118X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var118X)))
 (= $x142 false)))
 ))
 (let (($x90 (and $x37 $x139)))
 (let (($x116 (= $x90 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x146 (concat ?x119 (concat ?x112 ?x127)))))
 (let (($x34 (= input.dst.llvm-%m ?x58)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x59 (concat ?x95 (concat ?x31 ?x66)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x69 (and $x103 $x34)))
 (let (($x115 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x131 (and $x115 $x69)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x33)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x84)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x13 $x26)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x65 $x94)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x85)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x63 (not $x15)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x63)))
 (let (($x87 (and (and (and (and (and (and $x8 $x98) $x83) $x19) $x22) $x91) $x74)))
 (let (($x118 (and $x87 $x71)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x46 (or false (or false (and (and true (or $x75 $x41)) (or $x128 $x77))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x70 (and (and (and $x110 $x27) $x118) $x131)))
 (let (($x55 (= $x70 true)))
 (let (($x125 (= $x55 true)))
 (let (($x60 (= $x125 true)))
 (let (($x78 (and $x60 $x116)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x14 $x78)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x36 $x149)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x25 $x141)))
 (let (($x92 (=> $x133 $x144)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000020) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x488370ac)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffff8a8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffff8ab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x488370af)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffff8a8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x488370ac)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x488370ac) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x111 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x145 (= $x111 true)))
 (let (($x120 (= $x145 true)))
 (let (($x93 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var133X)))
 (=> $x138 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var133X) (_ bv0 32)))))
 ))
 (let (($x78 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var132X)))
 (= $x138 false)))
 ))
 (let (($x113 (and $x78 $x93)))
 (let (($x24 (= $x113 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x34 (concat ?x58 (concat ?x127 (concat ?x119 ?x146)))))
 (let (($x69 (= input.dst.llvm-%m ?x34)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x97 (concat ?x31 (concat ?x28 ?x38)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x131 (and $x103 $x69)))
 (let (($x104 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x70 (and $x104 $x131)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x17)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x22)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x19 $x13)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x64 $x68)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x71 (and (and (and (and (and (and $x8 $x98) $x73) $x12) $x49) $x94) $x81)))
 (let (($x118 (and $x71 $x91)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x56 (or false (or false (and (and true (or $x114 $x44)) (or $x147 $x52))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x56)))
 (let (($x60 (and (and (and $x135 $x117) $x118) $x70)))
 (let (($x134 (= $x60 true)))
 (let (($x142 (= $x134 true)))
 (let (($x42 (= $x142 true)))
 (let (($x5 (and $x42 $x24)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x6 $x5)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x29 $x107)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x61 $x126)))
 (let (($x136 (=> $x105 $x120)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x111 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x145 (= $x111 true)))
 (let (($x120 (= $x145 true)))
 (let (($x93 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var133X)))
 (=> $x138 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var133X) (_ bv0 32)))))
 ))
 (let (($x78 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var132X)))
 (= $x138 false)))
 ))
 (let (($x113 (and $x78 $x93)))
 (let (($x24 (= $x113 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x34 (concat ?x58 (concat ?x127 (concat ?x119 ?x146)))))
 (let (($x69 (= input.dst.llvm-%m ?x34)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x97 (concat ?x31 (concat ?x28 ?x38)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x131 (and $x103 $x69)))
 (let (($x104 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x70 (and $x104 $x131)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x17)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x22)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x19 $x13)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x64 $x68)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x71 (and (and (and (and (and (and $x8 $x98) $x73) $x12) $x49) $x94) $x81)))
 (let (($x118 (and $x71 $x91)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x56 (or false (or false (and (and true (or $x114 $x44)) (or $x147 $x52))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x56)))
 (let (($x60 (and (and (and $x135 $x117) $x118) $x70)))
 (let (($x134 (= $x60 true)))
 (let (($x142 (= $x134 true)))
 (let (($x42 (= $x142 true)))
 (let (($x5 (and $x42 $x24)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x6 $x5)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x29 $x107)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x61 $x126)))
 (let (($x136 (=> $x105 $x120)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000010)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x78cc74d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x78cc74d3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x78cc74d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x90 (= $x129 true)))
 (let (($x43 (= $x90 true)))
 (let (($x21 (forall ((input.ind-%var147X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var147X)))
 (=> $x148 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var147X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var146X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var146X)))
 (= $x148 false)))
 ))
 (let (($x101 (and $x5 $x21)))
 (let (($x23 (= $x101 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x34 (concat ?x146 (concat ?x127 ?x58)))))
 (let (($x131 (= input.dst.llvm-%m ?x69)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x66 (concat ?x28 (concat ?x95 ?x67)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x70 (and $x103 $x131)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x60 (and $x143 $x70)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x26)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x49)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x12 $x19)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x83 $x47)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x91 (and (and (and (and (and (and $x8 $x98) $x53) $x84) $x65) $x68) $x87)))
 (let (($x118 (and $x91 $x94)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x79 (or false (or false (and (and true (or $x51 $x128)) (or $x20 $x46))))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x42 (and (and (and $x55 $x27) $x118) $x60)))
 (let (($x124 (= $x42 true)))
 (let (($x138 (= $x124 true)))
 (let (($x116 (= $x138 true)))
 (let (($x139 (and $x116 $x23)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x82 $x139)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x137 $x130)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x14 $x133)))
 (let (($x141 (=> $x37 $x43)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x90 (= $x129 true)))
 (let (($x43 (= $x90 true)))
 (let (($x21 (forall ((input.ind-%var147X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var147X)))
 (=> $x148 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var147X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var146X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var146X)))
 (= $x148 false)))
 ))
 (let (($x101 (and $x5 $x21)))
 (let (($x23 (= $x101 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x34 (concat ?x146 (concat ?x127 ?x58)))))
 (let (($x131 (= input.dst.llvm-%m ?x69)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x66 (concat ?x28 (concat ?x95 ?x67)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x70 (and $x103 $x131)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x60 (and $x143 $x70)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x26)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x49)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x12 $x19)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x83 $x47)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x91 (and (and (and (and (and (and $x8 $x98) $x53) $x84) $x65) $x68) $x87)))
 (let (($x118 (and $x91 $x94)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x79 (or false (or false (and (and true (or $x51 $x128)) (or $x20 $x46))))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x42 (and (and (and $x55 $x27) $x118) $x60)))
 (let (($x124 (= $x42 true)))
 (let (($x138 (= $x124 true)))
 (let (($x116 (= $x138 true)))
 (let (($x139 (and $x116 $x23)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x82 $x139)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x137 $x130)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x14 $x133)))
 (let (($x141 (=> $x37 $x43)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (forall ((input.ind-%var161X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var161X))))
 ))
 (let (($x123 (forall ((input.ind-%var160X (_ BitVec 32)) )(let (($x120 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var160X)))
 (= false $x120)))
 ))
 (let (($x159 (and $x123 $x158)))
 (let (($x113 (= true true)))
 (let (($x160 (and $x113 $x159)))
 (let (($x161 (= $x160 true)))
 (let (($x102 (forall ((input.ind-%var153X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var153X)))
 (=> $x32 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var153X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var152X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var152X)))
 (= $x32 false)))
 ))
 (let (($x115 (and $x139 $x102)))
 (let (($x93 (= $x115 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x69 (concat ?x58 (concat ?x146 ?x34)))))
 (let (($x70 (= input.dst.llvm-%m ?x131)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x38 (concat ?x95 (concat ?x31 ?x80)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x60 (and $x103 $x70)))
 (let (($x122 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x42 (and $x122 $x60)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x13)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x65)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x84 $x12)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x73 $x74)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x94 (and (and (and (and (and (and $x8 $x98) $x16) $x22) $x64) $x47) $x71)))
 (let (($x118 (and $x94 $x68)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x54 (or false (or false (and (and true (or $x30 $x147)) (or $x110 $x56))))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x116 (and (and (and $x134 $x117) $x118) $x42)))
 (let (($x92 (= $x116 true)))
 (let (($x148 (= $x92 true)))
 (let (($x24 (= $x148 true)))
 (let (($x111 (and $x24 $x93)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x36 $x111)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x48 $x105)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x61 $x78)))
 (let (($x162 (=> $x88 $x161)))
 (not $x162)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (forall ((input.ind-%var161X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var161X))))
 ))
 (let (($x123 (forall ((input.ind-%var160X (_ BitVec 32)) )(let (($x120 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var160X)))
 (= false $x120)))
 ))
 (let (($x159 (and $x123 $x158)))
 (let (($x113 (= true true)))
 (let (($x160 (and $x113 $x159)))
 (let (($x161 (= $x160 true)))
 (let (($x102 (forall ((input.ind-%var153X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var153X)))
 (=> $x32 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var153X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var152X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var152X)))
 (= $x32 false)))
 ))
 (let (($x115 (and $x139 $x102)))
 (let (($x93 (= $x115 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x69 (concat ?x58 (concat ?x146 ?x34)))))
 (let (($x70 (= input.dst.llvm-%m ?x131)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x38 (concat ?x95 (concat ?x31 ?x80)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x60 (and $x103 $x70)))
 (let (($x122 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x42 (and $x122 $x60)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x13)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x65)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x84 $x12)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x73 $x74)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x94 (and (and (and (and (and (and $x8 $x98) $x16) $x22) $x64) $x47) $x71)))
 (let (($x118 (and $x94 $x68)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x54 (or false (or false (and (and true (or $x30 $x147)) (or $x110 $x56))))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x116 (and (and (and $x134 $x117) $x118) $x42)))
 (let (($x92 (= $x116 true)))
 (let (($x148 (= $x92 true)))
 (let (($x24 (= $x148 true)))
 (let (($x111 (and $x24 $x93)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x36 $x111)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x48 $x105)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x61 $x78)))
 (let (($x162 (=> $x88 $x161)))
 (not $x162)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.ind-%var160X!3 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var160X!3 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7e506f68)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc870cd18)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc870cd1b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7e506f6b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc870cd18)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7e506f68)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (forall ((input.ind-%var191X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var191X))))
 ))
 (let (($x149 (forall ((input.ind-%var190X (_ BitVec 32)) )(let (($x21 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var190X)))
 (= false $x21)))
 ))
 (let (($x133 (and $x149 $x132)))
 (let (($x75 (= true true)))
 (let (($x141 (and $x75 $x133)))
 (let (($x154 (= $x141 true)))
 (let (($x157 (forall ((input.ind-%var183X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var183X)))
 (=> $x40 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var183X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var182X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var182X)))
 (= $x40 false)))
 ))
 (let (($x158 (and $x111 $x157)))
 (let (($x159 (= $x158 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x131 (concat ?x34 (concat ?x58 ?x69)))))
 (let (($x60 (= input.dst.llvm-%m ?x70)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x67 (concat ?x31 (concat ?x28 ?x39)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x42 (and $x103 $x60)))
 (let (($x121 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x116 (and $x121 $x42)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x19)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x64)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x22 $x84)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x53 $x81)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x68 (and (and (and (and (and (and $x8 $x98) $x33) $x49) $x83) $x74) $x91)))
 (let (($x118 (and $x68 $x47)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x41 (or false (or false (and (and true (or $x77 $x20)) (or $x135 $x79))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x41)))
 (let (($x24 (and (and (and $x124 $x27) $x118) $x116)))
 (let (($x136 (= $x24 true)))
 (let (($x32 (= $x136 true)))
 (let (($x23 (= $x32 true)))
 (let (($x160 (and $x23 $x159)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (and $x29 $x160)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x162 (and $x25 $x161)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x163 (and $x14 $x162)))
 (let (($x155 (=> $x163 $x154)))
 (not $x155)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (forall ((input.ind-%var191X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var191X))))
 ))
 (let (($x149 (forall ((input.ind-%var190X (_ BitVec 32)) )(let (($x21 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var190X)))
 (= false $x21)))
 ))
 (let (($x133 (and $x149 $x132)))
 (let (($x75 (= true true)))
 (let (($x141 (and $x75 $x133)))
 (let (($x154 (= $x141 true)))
 (let (($x157 (forall ((input.ind-%var183X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var183X)))
 (=> $x40 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var183X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var182X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var182X)))
 (= $x40 false)))
 ))
 (let (($x158 (and $x111 $x157)))
 (let (($x159 (= $x158 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x131 (concat ?x34 (concat ?x58 ?x69)))))
 (let (($x60 (= input.dst.llvm-%m ?x70)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x67 (concat ?x31 (concat ?x28 ?x39)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x42 (and $x103 $x60)))
 (let (($x121 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x116 (and $x121 $x42)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x19)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x64)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x22 $x84)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x53 $x81)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x68 (and (and (and (and (and (and $x8 $x98) $x33) $x49) $x83) $x74) $x91)))
 (let (($x118 (and $x68 $x47)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x41 (or false (or false (and (and true (or $x77 $x20)) (or $x135 $x79))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x41)))
 (let (($x24 (and (and (and $x124 $x27) $x118) $x116)))
 (let (($x136 (= $x24 true)))
 (let (($x32 (= $x136 true)))
 (let (($x23 (= $x32 true)))
 (let (($x160 (and $x23 $x159)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (and $x29 $x160)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x162 (and $x25 $x161)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x163 (and $x14 $x162)))
 (let (($x155 (=> $x163 $x154)))
 (not $x155)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.ind-%var190X!3 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7e506f68)
  (define-fun input.ind-%var190X!3 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc870cd18)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc870cd1b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7e506f6b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc870cd18)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7e506f68)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x191 (forall ((input.ind-%var225X (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul input.ind-%var225X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x182))))
 (let ((?x78 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var225X)))
 (let (($x102 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var225X)))
 (=> $x102 (= ?x78 ?x188))))))))
 ))
 (let (($x10 (forall ((input.ind-%var224X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var224X)))
 (= $x102 (and (bvule (_ bv0 32) input.ind-%var224X) (bvult input.ind-%var224X input.dst.llvm-%n)))))
 ))
 (let (($x192 (and $x10 $x191)))
 (let (($x114 (= true true)))
 (let (($x193 (and $x114 $x192)))
 (let (($x194 (= $x193 true)))
 (let (($x43 (forall ((input.ind-%var217X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var217X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var217X) (_ bv0 32)))))
 ))
 (let (($x160 (forall ((input.ind-%var216X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var216X)))
 (= $x156 false)))
 ))
 (let (($x132 (and $x160 $x43)))
 (let (($x133 (= $x132 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x70 (concat ?x69 (concat ?x34 ?x131)))))
 (let (($x42 (= input.dst.llvm-%m ?x60)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x80 (concat ?x28 (concat ?x95 ?x59)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x116 (and $x103 $x42)))
 (let (($x125 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x24 (and $x125 $x116)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x12)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x83)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x49 $x22)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x16 $x87)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x85)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x63 (not $x15)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x63)))
 (let (($x47 (and (and (and (and (and (and $x8 $x98) $x17) $x65) $x73) $x81) $x94)))
 (let (($x118 (and $x47 $x74)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x44 (or false (or false (and (and true (or $x52 $x110)) (or $x55 $x54))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x23 (and (and (and $x92 $x117) $x118) $x24)))
 (let (($x144 (= $x23 true)))
 (let (($x40 (= $x144 true)))
 (let (($x93 (= $x40 true)))
 (let (($x141 (and $x93 $x133)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x137 $x141)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x6 $x154)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x36 $x155)))
 (let (($x195 (=> $x107 $x194)))
 (not $x195)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x191 (forall ((input.ind-%var225X (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul input.ind-%var225X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x182))))
 (let ((?x78 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var225X)))
 (let (($x102 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var225X)))
 (=> $x102 (= ?x78 ?x188))))))))
 ))
 (let (($x10 (forall ((input.ind-%var224X (_ BitVec 32)) )(let (($x102 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var224X)))
 (= $x102 (and (bvule (_ bv0 32) input.ind-%var224X) (bvult input.ind-%var224X input.dst.llvm-%n)))))
 ))
 (let (($x192 (and $x10 $x191)))
 (let (($x114 (= true true)))
 (let (($x193 (and $x114 $x192)))
 (let (($x194 (= $x193 true)))
 (let (($x43 (forall ((input.ind-%var217X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var217X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var217X) (_ bv0 32)))))
 ))
 (let (($x160 (forall ((input.ind-%var216X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var216X)))
 (= $x156 false)))
 ))
 (let (($x132 (and $x160 $x43)))
 (let (($x133 (= $x132 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x70 (concat ?x69 (concat ?x34 ?x131)))))
 (let (($x42 (= input.dst.llvm-%m ?x60)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x80 (concat ?x28 (concat ?x95 ?x59)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x116 (and $x103 $x42)))
 (let (($x125 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x24 (and $x125 $x116)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x12)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x83)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x49 $x22)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x16 $x87)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x85)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x63 (not $x15)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x63)))
 (let (($x47 (and (and (and (and (and (and $x8 $x98) $x17) $x65) $x73) $x81) $x94)))
 (let (($x118 (and $x47 $x74)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x44 (or false (or false (and (and true (or $x52 $x110)) (or $x55 $x54))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x23 (and (and (and $x92 $x117) $x118) $x24)))
 (let (($x144 (= $x23 true)))
 (let (($x40 (= $x144 true)))
 (let (($x93 (= $x40 true)))
 (let (($x141 (and $x93 $x133)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x137 $x141)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x6 $x154)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x36 $x155)))
 (let (($x195 (=> $x107 $x194)))
 (not $x195)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var225X!1 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00004003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var225X!1 () (_ BitVec 32)
    #x3fffffc0)
  (define-fun input.ind-%var224X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #xf8
    (ite (= x!0 #xfffffff0) #x01
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x171 (forall ((input.ind-%var257X (_ BitVec 32)) )(let ((?x106 (bvadd (bvmul input.ind-%var257X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x164))))
 (=> false (= (_ bv0 32) ?x167))))))
 ))
 (let (($x191 (forall ((input.ind-%var256X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var256X) (bvult input.ind-%var256X (_ bv0 32)))))
 ))
 (let (($x174 (and $x191 $x171)))
 (let (($x183 (= true true)))
 (let (($x158 (and $x183 $x174)))
 (let (($x37 (= $x158 true)))
 (let (($x10 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var251X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var251X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var250X)))
 (= $x101 false)))
 ))
 (let (($x78 (and $x141 $x10)))
 (let (($x151 (= $x78 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x60 (concat ?x131 (concat ?x69 ?x70)))))
 (let (($x116 (= input.dst.llvm-%m ?x42)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x39 (concat ?x95 (concat ?x31 ?x97)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x24 (and $x103 $x116)))
 (let (($x142 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x23 (and $x142 $x24)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x84)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x73)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x65 $x49)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x33 $x71)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x74 (and (and (and (and (and (and $x8 $x98) $x26) $x64) $x53) $x87) $x68)))
 (let (($x118 (and $x74 $x81)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x128 (or false (or false (and (and true (or $x46 $x135)) (or $x134 $x41))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x93 (and (and (and $x136 $x27) $x118) $x23)))
 (let (($x152 (= $x93 true)))
 (let (($x156 (= $x152 true)))
 (let (($x159 (= $x156 true)))
 (let (($x177 (and $x159 $x151)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (and $x48 $x177)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x186 (and $x82 $x178)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x14 $x186)))
 (let (($x143 (=> $x187 $x37)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x171 (forall ((input.ind-%var257X (_ BitVec 32)) )(let ((?x106 (bvadd (bvmul input.ind-%var257X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x164))))
 (=> false (= (_ bv0 32) ?x167))))))
 ))
 (let (($x191 (forall ((input.ind-%var256X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var256X) (bvult input.ind-%var256X (_ bv0 32)))))
 ))
 (let (($x174 (and $x191 $x171)))
 (let (($x183 (= true true)))
 (let (($x158 (and $x183 $x174)))
 (let (($x37 (= $x158 true)))
 (let (($x10 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var251X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var251X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var250X)))
 (= $x101 false)))
 ))
 (let (($x78 (and $x141 $x10)))
 (let (($x151 (= $x78 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x60 (concat ?x131 (concat ?x69 ?x70)))))
 (let (($x116 (= input.dst.llvm-%m ?x42)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x39 (concat ?x95 (concat ?x31 ?x97)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x24 (and $x103 $x116)))
 (let (($x142 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x23 (and $x142 $x24)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x84)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x73)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x65 $x49)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x33 $x71)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x74 (and (and (and (and (and (and $x8 $x98) $x26) $x64) $x53) $x87) $x68)))
 (let (($x118 (and $x74 $x81)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x128 (or false (or false (and (and true (or $x46 $x135)) (or $x134 $x41))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x93 (and (and (and $x136 $x27) $x118) $x23)))
 (let (($x152 (= $x93 true)))
 (let (($x156 (= $x152 true)))
 (let (($x159 (= $x156 true)))
 (let (($x177 (and $x159 $x151)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (and $x48 $x177)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x186 (and $x82 $x178)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x14 $x186)))
 (let (($x143 (=> $x187 $x37)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (forall ((input.ind-%var273X (_ BitVec 32)) )(let ((?x120 (bvadd (bvmul input.ind-%var273X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x100))))
 (=> false (= (_ bv0 32) ?x145))))))
 ))
 (let (($x158 (forall ((input.ind-%var272X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var272X) (bvult input.ind-%var272X input.dst.llvm-%m))))
 ))
 (let (($x155 (and $x158 $x182)))
 (let (($x88 (= true true)))
 (let (($x129 (and $x88 $x155)))
 (let (($x113 (= $x129 true)))
 (let (($x194 (forall ((input.ind-%var267X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var267X)))
 (=> $x104 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var267X) (_ bv0 32)))))
 ))
 (let (($x177 (forall ((input.ind-%var266X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var266X)))
 (= $x104 false)))
 ))
 (let (($x130 (and $x177 $x194)))
 (let (($x106 (= $x130 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x42 (concat ?x70 (concat ?x131 ?x60)))))
 (let (($x24 (= input.dst.llvm-%m ?x116)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x59 (concat ?x31 (concat ?x28 ?x66)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x23 (and $x103 $x24)))
 (let (($x138 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x93 (and $x138 $x23)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x22)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x53)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x33)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x64 $x65)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x17 $x91)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x81 (and (and (and (and (and (and $x8 $x98) $x13) $x83) $x16) $x71) $x47)))
 (let (($x118 (and $x81 $x87)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x147 (or false (or false (and (and true (or $x56 $x55)) (or $x124 $x44))))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x159 (and (and (and $x144 $x117) $x118) $x93)))
 (let (($x153 (= $x159 true)))
 (let (($x101 (= $x153 true)))
 (let (($x133 (= $x101 true)))
 (let (($x170 (and $x133 $x106)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x25 $x170)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x172 (and $x61 $x166)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x35 $x172)))
 (let (($x123 (=> $x173 $x113)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (forall ((input.ind-%var273X (_ BitVec 32)) )(let ((?x120 (bvadd (bvmul input.ind-%var273X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x100))))
 (=> false (= (_ bv0 32) ?x145))))))
 ))
 (let (($x158 (forall ((input.ind-%var272X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var272X) (bvult input.ind-%var272X input.dst.llvm-%m))))
 ))
 (let (($x155 (and $x158 $x182)))
 (let (($x88 (= true true)))
 (let (($x129 (and $x88 $x155)))
 (let (($x113 (= $x129 true)))
 (let (($x194 (forall ((input.ind-%var267X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var267X)))
 (=> $x104 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var267X) (_ bv0 32)))))
 ))
 (let (($x177 (forall ((input.ind-%var266X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var266X)))
 (= $x104 false)))
 ))
 (let (($x130 (and $x177 $x194)))
 (let (($x106 (= $x130 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x42 (concat ?x70 (concat ?x131 ?x60)))))
 (let (($x24 (= input.dst.llvm-%m ?x116)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x59 (concat ?x31 (concat ?x28 ?x66)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x23 (and $x103 $x24)))
 (let (($x138 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x93 (and $x138 $x23)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x22)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x53)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x33)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x64 $x65)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x17 $x91)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x81 (and (and (and (and (and (and $x8 $x98) $x13) $x83) $x16) $x71) $x47)))
 (let (($x118 (and $x81 $x87)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x147 (or false (or false (and (and true (or $x56 $x55)) (or $x124 $x44))))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x159 (and (and (and $x144 $x117) $x118) $x93)))
 (let (($x153 (= $x159 true)))
 (let (($x101 (= $x153 true)))
 (let (($x133 (= $x101 true)))
 (let (($x170 (and $x133 $x106)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x25 $x170)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x172 (and $x61 $x166)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x35 $x172)))
 (let (($x123 (=> $x173 $x113)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002184)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var272X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002508)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002187)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000250b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002184)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002508)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002508) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfefffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xeafffffc)
  (define-fun input.ind-%var272X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xeaffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfefffffb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xeafffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfefffff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfefffff8) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x167 (forall ((input.ind-%var293X (_ BitVec 32)) )(let ((?x195 (bvadd (bvmul input.ind-%var293X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x43))))
 (=> false (= (_ bv0 32) ?x185))))))
 ))
 (let (($x129 (forall ((input.ind-%var292X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var292X) (bvult input.ind-%var292X input.dst.llvm-%n))))
 ))
 (let (($x186 (and $x129 $x167)))
 (let (($x21 (= true true)))
 (let (($x189 (and $x21 $x186)))
 (let (($x160 (= $x189 true)))
 (let (($x90 (forall ((input.ind-%var287X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var287X)))
 (=> $x191 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var287X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var286X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var286X)))
 (= $x191 false)))
 ))
 (let (($x163 (and $x170 $x90)))
 (let (($x120 (= $x163 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x116 (concat ?x60 (concat ?x70 ?x42)))))
 (let (($x23 (= input.dst.llvm-%m ?x24)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x97 (concat ?x28 (concat ?x95 ?x38)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x93 (and $x103 $x23)))
 (let (($x148 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x159 (and $x148 $x93)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x49)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x16)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x83 $x64)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x26 $x94)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x87 (and (and (and (and (and (and $x8 $x98) $x19) $x73) $x33) $x91) $x74)))
 (let (($x118 (and $x87 $x71)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x55)))
 (let (($x20 (or false (or false (and (and true (or $x79 $x134)) (or $x92 $x128))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x133 (and (and (and $x152 $x27) $x118) $x159)))
 (let (($x108 (= $x133 true)))
 (let (($x104 (= $x108 true)))
 (let (($x151 (= $x104 true)))
 (let (($x111 (and $x151 $x120)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x6 $x111)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x29 (and $x36 $x132)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x122 (and $x126 $x29)))
 (let (($x75 (=> $x122 $x160)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x167 (forall ((input.ind-%var293X (_ BitVec 32)) )(let ((?x195 (bvadd (bvmul input.ind-%var293X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x43))))
 (=> false (= (_ bv0 32) ?x185))))))
 ))
 (let (($x129 (forall ((input.ind-%var292X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var292X) (bvult input.ind-%var292X input.dst.llvm-%n))))
 ))
 (let (($x186 (and $x129 $x167)))
 (let (($x21 (= true true)))
 (let (($x189 (and $x21 $x186)))
 (let (($x160 (= $x189 true)))
 (let (($x90 (forall ((input.ind-%var287X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var287X)))
 (=> $x191 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var287X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var286X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var286X)))
 (= $x191 false)))
 ))
 (let (($x163 (and $x170 $x90)))
 (let (($x120 (= $x163 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x116 (concat ?x60 (concat ?x70 ?x42)))))
 (let (($x23 (= input.dst.llvm-%m ?x24)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x97 (concat ?x28 (concat ?x95 ?x38)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x93 (and $x103 $x23)))
 (let (($x148 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x159 (and $x148 $x93)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x49)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x16)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x83 $x64)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x26 $x94)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x87 (and (and (and (and (and (and $x8 $x98) $x19) $x73) $x33) $x91) $x74)))
 (let (($x118 (and $x87 $x71)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x55)))
 (let (($x20 (or false (or false (and (and true (or $x79 $x134)) (or $x92 $x128))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x133 (and (and (and $x152 $x27) $x118) $x159)))
 (let (($x108 (= $x133 true)))
 (let (($x104 (= $x108 true)))
 (let (($x151 (= $x104 true)))
 (let (($x111 (and $x151 $x120)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x6 $x111)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x29 (and $x36 $x132)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x122 (and $x126 $x29)))
 (let (($x75 (=> $x122 $x160)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var292X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x36bffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffbffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffbffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x36bfffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffbffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x36bffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffbffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var292X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= false true)))
 (let (($x121 (= $x107 true)))
 (let (($x115 (forall ((input.ind-%var307X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var307X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var307X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var306X)))
 (= $x158 false)))
 ))
 (let (($x180 (and $x111 $x115)))
 (let (($x195 (= $x180 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x24 (concat ?x42 (concat ?x60 ?x116)))))
 (let (($x93 (= input.dst.llvm-%m ?x23)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x66 (concat ?x95 (concat ?x31 ?x67)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x159 (and $x103 $x93)))
 (let (($x32 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x133 (and $x32 $x159)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x65)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x33)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x73 $x83)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x13 $x68)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x71 (and (and (and (and (and (and $x8 $x98) $x12) $x53) $x17) $x94) $x81)))
 (let (($x118 (and $x71 $x91)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x110 (or false (or false (and (and true (or $x54 $x124)) (or $x136 $x147))))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x110)))
 (let (($x151 (and (and (and $x153 $x117) $x118) $x133)))
 (let (($x190 (= $x151 true)))
 (let (($x191 (= $x190 true)))
 (let (($x106 (= $x191 true)))
 (let (($x196 (and $x106 $x195)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x82 $x196)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x14 $x78)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x102 (and $x35 $x112)))
 (let (($x154 (=> $x102 $x121)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= false true)))
 (let (($x121 (= $x107 true)))
 (let (($x115 (forall ((input.ind-%var307X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var307X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var307X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var306X)))
 (= $x158 false)))
 ))
 (let (($x180 (and $x111 $x115)))
 (let (($x195 (= $x180 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x24 (concat ?x42 (concat ?x60 ?x116)))))
 (let (($x93 (= input.dst.llvm-%m ?x23)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x66 (concat ?x95 (concat ?x31 ?x67)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x159 (and $x103 $x93)))
 (let (($x32 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x133 (and $x32 $x159)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x65)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x33)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x73 $x83)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x13 $x68)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x71 (and (and (and (and (and (and $x8 $x98) $x12) $x53) $x17) $x94) $x81)))
 (let (($x118 (and $x71 $x91)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x110 (or false (or false (and (and true (or $x54 $x124)) (or $x136 $x147))))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x110)))
 (let (($x151 (and (and (and $x153 $x117) $x118) $x133)))
 (let (($x190 (= $x151 true)))
 (let (($x191 (= $x190 true)))
 (let (($x106 (= $x191 true)))
 (let (($x196 (and $x106 $x195)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x82 $x196)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x14 $x78)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x102 (and $x35 $x112)))
 (let (($x154 (=> $x102 $x121)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10000013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x08000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10000010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xae7c5810)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbf6a1814)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbf6a1817)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xae7c5813)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbf6a1814)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xae7c5810)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x64)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x17)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x53 $x73)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x19 $x47)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x85)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x63 (not $x15)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x63)))
 (let (($x91 (and (and (and (and (and (and $x8 $x98) $x84) $x16) $x26) $x68) $x87)))
 (let (($x118 (and $x91 $x94)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x135 (or false (or false (and (and true (or $x41 $x92)) (or $x144 $x20))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x181 (and $x108 $x118)))
 (let (($x29 (= $x181 true)))
 (let (($x182 (= $x29 true)))
 (let (($x138 (forall ((input.ind-%var321X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var321X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var321X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var320X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var320X)))
 (= $x129 false)))
 ))
 (let (($x90 (and $x196 $x138)))
 (let (($x179 (= $x90 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x23 (concat ?x116 (concat ?x42 ?x24)))))
 (let (($x159 (= input.dst.llvm-%m ?x93)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x38 (concat ?x31 (concat ?x28 ?x80)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x133 (and $x103 $x159)))
 (let (($x40 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x151 (and $x40 $x133)))
 (let (($x106 (and (and (and $x108 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x118) $x151)))
 (let (($x174 (= $x106 true)))
 (let (($x158 (= $x174 true)))
 (let (($x120 (= $x158 true)))
 (let (($x122 (and $x120 $x179)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x61 $x122)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x143 $x170)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x163 (and $x126 $x88)))
 (let (($x113 (=> $x163 $x182)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x64)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x17)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x53 $x73)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x19 $x47)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x85)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x63 (not $x15)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x63)))
 (let (($x91 (and (and (and (and (and (and $x8 $x98) $x84) $x16) $x26) $x68) $x87)))
 (let (($x118 (and $x91 $x94)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x135 (or false (or false (and (and true (or $x41 $x92)) (or $x144 $x20))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x181 (and $x108 $x118)))
 (let (($x29 (= $x181 true)))
 (let (($x182 (= $x29 true)))
 (let (($x138 (forall ((input.ind-%var321X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var321X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var321X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var320X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var320X)))
 (= $x129 false)))
 ))
 (let (($x90 (and $x196 $x138)))
 (let (($x179 (= $x90 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x23 (concat ?x116 (concat ?x42 ?x24)))))
 (let (($x159 (= input.dst.llvm-%m ?x93)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x38 (concat ?x31 (concat ?x28 ?x80)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x133 (and $x103 $x159)))
 (let (($x40 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x151 (and $x40 $x133)))
 (let (($x106 (and (and (and $x108 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x118) $x151)))
 (let (($x174 (= $x106 true)))
 (let (($x158 (= $x174 true)))
 (let (($x120 (= $x158 true)))
 (let (($x122 (and $x120 $x179)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x61 $x122)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x143 $x170)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x163 (and $x126 $x88)))
 (let (($x113 (=> $x163 $x182)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x154 (= $x180 true)))
 (let (($x58 (forall ((input.ind-%var327X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var327X)))
 (=> $x146 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var327X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var326X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var326X)))
 (= $x146 false)))
 ))
 (let (($x148 (and $x122 $x58)))
 (let (($x115 (= $x148 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x93 (concat ?x24 (concat ?x116 ?x23)))))
 (let (($x133 (= input.dst.llvm-%m ?x159)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x67 (concat ?x28 (concat ?x95 ?x39)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x151 (and $x103 $x133)))
 (let (($x156 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x106 (and $x156 $x151)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x83)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x26)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x16 $x53)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x12 $x74)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x94 (and (and (and (and (and (and $x8 $x98) $x22) $x33) $x13) $x47) $x71)))
 (let (($x118 (and $x94 $x68)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x55 (or false (or false (and (and true (or $x44 $x136)) (or $x152 $x110))))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x55)))
 (let (($x120 (and (and (and $x190 $x117) $x118) $x106)))
 (let (($x155 (= $x120 true)))
 (let (($x129 (= $x155 true)))
 (let (($x195 (= $x129 true)))
 (let (($x121 (and $x195 $x115)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (and $x36 $x121)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x123 $x102)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x35 $x111)))
 (let (($x112 (=> $x21 $x154)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x154 (= $x180 true)))
 (let (($x58 (forall ((input.ind-%var327X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var327X)))
 (=> $x146 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var327X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var326X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var326X)))
 (= $x146 false)))
 ))
 (let (($x148 (and $x122 $x58)))
 (let (($x115 (= $x148 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x93 (concat ?x24 (concat ?x116 ?x23)))))
 (let (($x133 (= input.dst.llvm-%m ?x159)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x67 (concat ?x28 (concat ?x95 ?x39)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x151 (and $x103 $x133)))
 (let (($x156 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x106 (and $x156 $x151)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x83)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x26)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x16 $x53)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x12 $x74)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x94 (and (and (and (and (and (and $x8 $x98) $x22) $x33) $x13) $x47) $x71)))
 (let (($x118 (and $x94 $x68)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x55 (or false (or false (and (and true (or $x44 $x136)) (or $x152 $x110))))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x55)))
 (let (($x120 (and (and (and $x190 $x117) $x118) $x106)))
 (let (($x155 (= $x120 true)))
 (let (($x129 (= $x155 true)))
 (let (($x195 (= $x129 true)))
 (let (($x121 (and $x195 $x115)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (and $x36 $x121)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x123 $x102)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x35 $x111)))
 (let (($x112 (=> $x21 $x154)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00044d0c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00020d88)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00044d0f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00020d8b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00044d0c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00020d88)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00020d88) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6d14fefc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffef8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffefb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6d14feff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffef8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6d14fefc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffef9) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x88)))
 (let (($x78 (= ?x113 input.dst.llvm-%n)))
 (let (($x132 (= $x78 true)))
 (let (($x32 (forall ((input.ind-%var341X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var341X)))
 (=> $x56 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var341X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var340X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var340X)))
 (= $x56 false)))
 ))
 (let (($x138 (and $x121 $x32)))
 (let (($x29 (= $x138 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x159 (concat ?x23 (concat ?x24 ?x93)))))
 (let (($x151 (= input.dst.llvm-%m ?x133)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x80 (concat ?x95 (concat ?x31 ?x59)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x106 (and $x103 $x151)))
 (let (($x101 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x120 (and $x101 $x106)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x73)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x13)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x33 $x16)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x84 $x81)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x68 (and (and (and (and (and (and $x8 $x98) $x49) $x17) $x19) $x74) $x91)))
 (let (($x118 (and $x68 $x47)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x134 (or false (or false (and (and true (or $x128 $x144)) (or $x153 $x135))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x195 (and (and (and $x174 $x27) $x118) $x120)))
 (let (($x46 (= $x195 true)))
 (let (($x146 (= $x46 true)))
 (let (($x179 (= $x146 true)))
 (let (($x163 (and $x179 $x29)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (and $x14 $x163)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x6 $x196)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x126 $x107)))
 (let (($x185 (=> $x90 $x132)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x88)))
 (let (($x78 (= ?x113 input.dst.llvm-%n)))
 (let (($x132 (= $x78 true)))
 (let (($x32 (forall ((input.ind-%var341X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var341X)))
 (=> $x56 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var341X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var340X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var340X)))
 (= $x56 false)))
 ))
 (let (($x138 (and $x121 $x32)))
 (let (($x29 (= $x138 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x159 (concat ?x23 (concat ?x24 ?x93)))))
 (let (($x151 (= input.dst.llvm-%m ?x133)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x80 (concat ?x95 (concat ?x31 ?x59)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x106 (and $x103 $x151)))
 (let (($x101 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x120 (and $x101 $x106)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x73)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x13)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x33 $x16)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x84 $x81)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x68 (and (and (and (and (and (and $x8 $x98) $x49) $x17) $x19) $x74) $x91)))
 (let (($x118 (and $x68 $x47)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x134 (or false (or false (and (and true (or $x128 $x144)) (or $x153 $x135))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x195 (and (and (and $x174 $x27) $x118) $x120)))
 (let (($x46 (= $x195 true)))
 (let (($x146 (= $x46 true)))
 (let (($x179 (= $x146 true)))
 (let (($x163 (and $x179 $x29)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (and $x14 $x163)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x6 $x196)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x126 $x107)))
 (let (($x185 (=> $x90 $x132)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x122 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x148 (bvmul ?x122 (_ bv256 16))))
 (let (($x111 (= ?x148 ?x112)))
 (let (($x43 (= $x111 true)))
 (let (($x164 (forall ((input.ind-%var347X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var347X)))
 (=> $x34 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var347X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var346X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var346X)))
 (= $x34 false)))
 ))
 (let (($x54 (and $x163 $x164)))
 (let (($x69 (= $x54 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x133 (concat ?x93 (concat ?x23 ?x159)))))
 (let (($x106 (= input.dst.llvm-%m ?x151)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x39 (concat ?x31 (concat ?x28 ?x97)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x120 (and $x103 $x106)))
 (let (($x104 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x195 (and $x104 $x120)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x53)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x19)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x17 $x33)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x22 $x87)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x47 (and (and (and (and (and (and $x8 $x98) $x65) $x26) $x12) $x81) $x94)))
 (let (($x118 (and $x47 $x74)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x124 (or false (or false (and (and true (or $x147 $x152)) (or $x108 $x55))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x179 (and (and (and $x155 $x117) $x118) $x195)))
 (let (($x184 (= $x179 true)))
 (let (($x56 (= $x184 true)))
 (let (($x115 (= $x56 true)))
 (let (($x40 (and $x115 $x69)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x143 $x40)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x82 $x58)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x35 $x154)))
 (let (($x170 (=> $x21 $x43)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x122 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x148 (bvmul ?x122 (_ bv256 16))))
 (let (($x111 (= ?x148 ?x112)))
 (let (($x43 (= $x111 true)))
 (let (($x164 (forall ((input.ind-%var347X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var347X)))
 (=> $x34 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var347X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var346X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var346X)))
 (= $x34 false)))
 ))
 (let (($x54 (and $x163 $x164)))
 (let (($x69 (= $x54 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x133 (concat ?x93 (concat ?x23 ?x159)))))
 (let (($x106 (= input.dst.llvm-%m ?x151)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x39 (concat ?x31 (concat ?x28 ?x97)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x120 (and $x103 $x106)))
 (let (($x104 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x195 (and $x104 $x120)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x53)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x19)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x17 $x33)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x22 $x87)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x47 (and (and (and (and (and (and $x8 $x98) $x65) $x26) $x12) $x81) $x94)))
 (let (($x118 (and $x47 $x74)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x124 (or false (or false (and (and true (or $x147 $x152)) (or $x108 $x55))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x179 (and (and (and $x155 $x117) $x118) $x195)))
 (let (($x184 (= $x179 true)))
 (let (($x56 (= $x184 true)))
 (let (($x115 (= $x56 true)))
 (let (($x40 (and $x115 $x69)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x143 $x40)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x82 $x58)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x35 $x154)))
 (let (($x170 (=> $x21 $x43)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x180 (= (_ bv0 2) ?x121)))
 (let (($x138 (= $x180 true)))
 (let (($x170 (forall ((input.ind-%var361X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var361X)))
 (=> $x185 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var361X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var360X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var360X)))
 (= $x185 false)))
 ))
 (let (($x169 (and $x40 $x170)))
 (let (($x41 (= $x169 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x151 (concat ?x159 (concat ?x93 ?x133)))))
 (let (($x120 (= input.dst.llvm-%m ?x106)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x59 (concat ?x28 (concat ?x95 ?x66)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x195 (and $x103 $x120)))
 (let (($x191 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x179 (and $x191 $x195)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x16)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x12)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x26 $x17)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x49 $x71)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x74 (and (and (and (and (and (and $x8 $x98) $x64) $x13) $x84) $x87) $x68)))
 (let (($x118 (and $x74 $x81)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x92 (or false (or false (and (and true (or $x20 $x153)) (or $x190 $x134))))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x92)))
 (let (($x115 (and (and (and $x46 $x27) $x118) $x179)))
 (let (($x79 (= $x115 true)))
 (let (($x34 (= $x79 true)))
 (let (($x29 (= $x34 true)))
 (let (($x131 (and $x29 $x41)))
 (let (($x123 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x123 $x131)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x32 (and $x61 $x156)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x126 $x32)))
 (let (($x113 (=> $x88 $x138)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x180 (= (_ bv0 2) ?x121)))
 (let (($x138 (= $x180 true)))
 (let (($x170 (forall ((input.ind-%var361X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var361X)))
 (=> $x185 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var361X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var360X (_ BitVec 32)) )(let (($x185 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var360X)))
 (= $x185 false)))
 ))
 (let (($x169 (and $x40 $x170)))
 (let (($x41 (= $x169 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x151 (concat ?x159 (concat ?x93 ?x133)))))
 (let (($x120 (= input.dst.llvm-%m ?x106)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x59 (concat ?x28 (concat ?x95 ?x66)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x195 (and $x103 $x120)))
 (let (($x191 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x179 (and $x191 $x195)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x16)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x12)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x26 $x17)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x49 $x71)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x74 (and (and (and (and (and (and $x8 $x98) $x64) $x13) $x84) $x87) $x68)))
 (let (($x118 (and $x74 $x81)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x92 (or false (or false (and (and true (or $x20 $x153)) (or $x190 $x134))))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x92)))
 (let (($x115 (and (and (and $x46 $x27) $x118) $x179)))
 (let (($x79 (= $x115 true)))
 (let (($x34 (= $x79 true)))
 (let (($x29 (= $x34 true)))
 (let (($x131 (and $x29 $x41)))
 (let (($x123 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x123 $x131)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x32 (and $x61 $x156)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x126 $x32)))
 (let (($x113 (=> $x88 $x138)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x148 (= $x54 true)))
 (let (($x154 (= $x148 true)))
 (let (($x44 (forall ((input.ind-%var367X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var367X)))
 (=> $x43 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var367X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var366X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var366X)))
 (= $x43 false)))
 ))
 (let (($x70 (and $x131 $x44)))
 (let (($x101 (= $x70 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x106 (concat ?x133 (concat ?x159 ?x151)))))
 (let (($x195 (= input.dst.llvm-%m ?x120)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x97 (concat ?x95 (concat ?x31 ?x38)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x179 (and $x103 $x195)))
 (let (($x158 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x115 (and $x158 $x179)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x33)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x84)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x13 $x26)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x65 $x91)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x85)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x63 (not $x15)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x63)))
 (let (($x81 (and (and (and (and (and (and $x8 $x98) $x83) $x19) $x22) $x71) $x47)))
 (let (($x118 (and $x81 $x87)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x153 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x153)))
 (let (($x136 (or false (or false (and (and true (or $x110 $x108)) (or $x174 $x124))))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x29 (and (and (and $x184 $x117) $x118) $x115)))
 (let (($x132 (= $x29 true)))
 (let (($x185 (= $x132 true)))
 (let (($x69 (= $x185 true)))
 (let (($x164 (and $x69 $x101)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x6 $x164)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x21 (and $x36 $x181)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x163 (and $x35 $x21)))
 (let (($x112 (=> $x163 $x154)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x148 (= $x54 true)))
 (let (($x154 (= $x148 true)))
 (let (($x44 (forall ((input.ind-%var367X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var367X)))
 (=> $x43 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var367X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var366X (_ BitVec 32)) )(let (($x43 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var366X)))
 (= $x43 false)))
 ))
 (let (($x70 (and $x131 $x44)))
 (let (($x101 (= $x70 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x106 (concat ?x133 (concat ?x159 ?x151)))))
 (let (($x195 (= input.dst.llvm-%m ?x120)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x97 (concat ?x95 (concat ?x31 ?x38)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x179 (and $x103 $x195)))
 (let (($x158 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x115 (and $x158 $x179)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x33)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x84)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x13 $x26)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x65 $x91)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x96 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x85)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x11 $x50)))
 (let (($x63 (not $x15)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x63)))
 (let (($x81 (and (and (and (and (and (and $x8 $x98) $x83) $x19) $x22) $x71) $x47)))
 (let (($x118 (and $x81 $x87)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x153 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x153)))
 (let (($x136 (or false (or false (and (and true (or $x110 $x108)) (or $x174 $x124))))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x29 (and (and (and $x184 $x117) $x118) $x115)))
 (let (($x132 (= $x29 true)))
 (let (($x185 (= $x132 true)))
 (let (($x69 (= $x185 true)))
 (let (($x164 (and $x69 $x101)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x6 $x164)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x21 (and $x36 $x181)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x163 (and $x35 $x21)))
 (let (($x112 (=> $x163 $x154)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x488370ac)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffff8a8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffff8ab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x488370af)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffff8a8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x488370ac)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x488370ac) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000020) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x169 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x180 (= $x169 true)))
 (let (($x32 (= $x180 true)))
 (let (($x128 (forall ((input.ind-%var381X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var381X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var381X) (_ bv0 32)))))
 ))
 (let (($x164 (forall ((input.ind-%var380X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var380X)))
 (= $x107 false)))
 ))
 (let (($x60 (and $x164 $x128)))
 (let (($x104 (= $x60 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x120 (concat ?x151 (concat ?x133 ?x106)))))
 (let (($x179 (= input.dst.llvm-%m ?x195)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x66 (concat ?x31 (concat ?x28 ?x67)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x115 (and $x103 $x179)))
 (let (($x129 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x29 (and $x129 $x115)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x17)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x22)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x19 $x13)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x64 $x94)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x87 (and (and (and (and (and (and $x8 $x98) $x73) $x12) $x49) $x91) $x74)))
 (let (($x118 (and $x87 $x71)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x144 (or false (or false (and (and true (or $x135 $x190)) (or $x155 $x92))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x69 (and (and (and $x79 $x27) $x118) $x29)))
 (let (($x111 (= $x69 true)))
 (let (($x43 (= $x111 true)))
 (let (($x41 (= $x43 true)))
 (let (($x170 (and $x41 $x104)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x82 $x170)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x14 $x121)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x40 (and $x126 $x88)))
 (let (($x138 (=> $x40 $x32)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x169 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x180 (= $x169 true)))
 (let (($x32 (= $x180 true)))
 (let (($x128 (forall ((input.ind-%var381X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var381X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var381X) (_ bv0 32)))))
 ))
 (let (($x164 (forall ((input.ind-%var380X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var380X)))
 (= $x107 false)))
 ))
 (let (($x60 (and $x164 $x128)))
 (let (($x104 (= $x60 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x120 (concat ?x151 (concat ?x133 ?x106)))))
 (let (($x179 (= input.dst.llvm-%m ?x195)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x66 (concat ?x31 (concat ?x28 ?x67)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x115 (and $x103 $x179)))
 (let (($x129 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x29 (and $x129 $x115)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x17)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x22)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x19 $x13)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x64 $x94)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x57 $x96)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x72)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x11)))
 (let (($x15 (not $x50)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x15)))
 (let (($x87 (and (and (and (and (and (and $x8 $x98) $x73) $x12) $x49) $x91) $x74)))
 (let (($x118 (and $x87 $x71)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x144 (or false (or false (and (and true (or $x135 $x190)) (or $x155 $x92))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x69 (and (and (and $x79 $x27) $x118) $x29)))
 (let (($x111 (= $x69 true)))
 (let (($x43 (= $x111 true)))
 (let (($x41 (= $x43 true)))
 (let (($x170 (and $x41 $x104)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x82 $x170)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x14 $x121)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x40 (and $x126 $x88)))
 (let (($x138 (=> $x40 $x32)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000010)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x78cc74d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x78cc74d3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x78cc74d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x90 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x70 (= $x90 true)))
 (let (($x148 (= $x70 true)))
 (let (($x147 (forall ((input.ind-%var395X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var395X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var395X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var394X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var394X)))
 (= $x196 false)))
 ))
 (let (($x42 (and $x170 $x147)))
 (let (($x191 (= $x42 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x195 (concat ?x106 (concat ?x151 ?x120)))))
 (let (($x115 (= input.dst.llvm-%m ?x179)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x38 (concat ?x28 (concat ?x95 ?x80)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x29 (and $x103 $x115)))
 (let (($x146 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x69 (and $x146 $x29)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x26)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x49)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x12 $x19)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x83 $x68)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x71 (and (and (and (and (and (and $x8 $x98) $x53) $x84) $x65) $x94) $x81)))
 (let (($x118 (and $x71 $x91)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x152 (or false (or false (and (and true (or $x55 $x174)) (or $x46 $x136))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x152)))
 (let (($x41 (and (and (and $x132 $x117) $x118) $x69)))
 (let (($x113 (= $x41 true)))
 (let (($x107 (= $x113 true)))
 (let (($x101 (= $x107 true)))
 (let (($x44 (and $x101 $x191)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and $x61 $x44)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x163 (and $x143 $x54)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x35 $x163)))
 (let (($x21 (=> $x131 $x148)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x90 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x70 (= $x90 true)))
 (let (($x148 (= $x70 true)))
 (let (($x147 (forall ((input.ind-%var395X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var395X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var395X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var394X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var394X)))
 (= $x196 false)))
 ))
 (let (($x42 (and $x170 $x147)))
 (let (($x191 (= $x42 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x195 (concat ?x106 (concat ?x151 ?x120)))))
 (let (($x115 (= input.dst.llvm-%m ?x179)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x38 (concat ?x28 (concat ?x95 ?x80)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x29 (and $x103 $x115)))
 (let (($x146 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x69 (and $x146 $x29)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x26)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x49)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x12 $x19)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x83 $x68)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x85 $x57)))
 (let (($x62 (not $x96)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x62)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x63 $x7)))
 (let (($x50 (not $x11)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x50)))
 (let (($x71 (and (and (and (and (and (and $x8 $x98) $x53) $x84) $x65) $x94) $x81)))
 (let (($x118 (and $x71 $x91)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x152 (or false (or false (and (and true (or $x55 $x174)) (or $x46 $x136))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x152)))
 (let (($x41 (and (and (and $x132 $x117) $x118) $x69)))
 (let (($x113 (= $x41 true)))
 (let (($x107 (= $x113 true)))
 (let (($x101 (= $x107 true)))
 (let (($x44 (and $x101 $x191)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and $x61 $x44)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x163 (and $x143 $x54)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x35 $x163)))
 (let (($x21 (=> $x131 $x148)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x162 (forall ((input.ind-%var407X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var407X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x100))))
 (let ((?x142 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var407X)))
 (let (($x32 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var407X)))
 (=> $x32 (= ?x142 ?x114))))))))
 ))
 (let (($x192 (forall ((input.ind-%var406X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var406X)))
 (= $x32 (and (bvule (_ bv0 32) input.ind-%var406X) (bvult input.ind-%var406X input.dst.llvm-%n)))))
 ))
 (let (($x149 (and $x192 $x162)))
 (let (($x60 (= true true)))
 (let (($x175 (and $x60 $x149)))
 (let (($x140 (= $x175 true)))
 (let (($x116 (forall ((input.ind-%var401X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var401X)))
 (=> $x58 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var401X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var400X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var400X)))
 (= $x58 false)))
 ))
 (let (($x158 (and $x44 $x116)))
 (let (($x128 (= $x158 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x179 (concat ?x120 (concat ?x106 ?x195)))))
 (let (($x29 (= input.dst.llvm-%m ?x115)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x67 (concat ?x95 (concat ?x31 ?x39)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x69 (and $x103 $x29)))
 (let (($x56 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x41 (and $x56 $x69)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x13)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x65)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x84 $x12)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x73 $x47)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x91 (and (and (and (and (and (and $x8 $x98) $x16) $x22) $x64) $x68) $x87)))
 (let (($x118 (and $x91 $x94)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x153 (or false (or false (and (and true (or $x134 $x155)) (or $x184 $x144))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x153)))
 (let (($x101 (and (and (and $x111 $x27) $x118) $x41)))
 (let (($x112 (= $x101 true)))
 (let (($x196 (= $x112 true)))
 (let (($x104 (= $x196 true)))
 (let (($x169 (and $x104 $x128)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (and $x36 $x169)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x123 $x40)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x126 $x164)))
 (let (($x176 (=> $x182 $x140)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x162 (forall ((input.ind-%var407X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var407X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x100))))
 (let ((?x142 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var407X)))
 (let (($x32 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var407X)))
 (=> $x32 (= ?x142 ?x114))))))))
 ))
 (let (($x192 (forall ((input.ind-%var406X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var406X)))
 (= $x32 (and (bvule (_ bv0 32) input.ind-%var406X) (bvult input.ind-%var406X input.dst.llvm-%n)))))
 ))
 (let (($x149 (and $x192 $x162)))
 (let (($x60 (= true true)))
 (let (($x175 (and $x60 $x149)))
 (let (($x140 (= $x175 true)))
 (let (($x116 (forall ((input.ind-%var401X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var401X)))
 (=> $x58 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var401X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var400X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var400X)))
 (= $x58 false)))
 ))
 (let (($x158 (and $x44 $x116)))
 (let (($x128 (= $x158 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x179 (concat ?x120 (concat ?x106 ?x195)))))
 (let (($x29 (= input.dst.llvm-%m ?x115)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x67 (concat ?x95 (concat ?x31 ?x39)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x69 (and $x103 $x29)))
 (let (($x56 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x41 (and $x56 $x69)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x13)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x65)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x83)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x84 $x12)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x73 $x47)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x72 $x85)))
 (let (($x96 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x15 $x63)))
 (let (($x11 (not $x7)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x11)))
 (let (($x91 (and (and (and (and (and (and $x8 $x98) $x16) $x22) $x64) $x68) $x87)))
 (let (($x118 (and $x91 $x94)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x153 (or false (or false (and (and true (or $x134 $x155)) (or $x184 $x144))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x153)))
 (let (($x101 (and (and (and $x111 $x27) $x118) $x41)))
 (let (($x112 (= $x101 true)))
 (let (($x196 (= $x112 true)))
 (let (($x104 (= $x196 true)))
 (let (($x169 (and $x104 $x128)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (and $x36 $x169)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x123 $x40)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x126 $x164)))
 (let (($x176 (=> $x182 $x140)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var407X!1 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00004003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var407X!1 () (_ BitVec 32)
    #x3fffffc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.ind-%var406X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #xf8
    (ite (= x!0 #xfffffff0) #x01
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (= false true)))
 (let (($x145 (= $x161 true)))
 (let (($x192 (forall ((input.ind-%var429X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var429X)))
 (=> $x20 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var429X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var428X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var428X)))
 (= $x20 false)))
 ))
 (let (($x142 (and $x169 $x192)))
 (let (($x166 (= $x142 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x115 (concat ?x195 (concat ?x120 ?x179)))))
 (let (($x69 (= input.dst.llvm-%m ?x29)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x80 (concat ?x31 (concat ?x28 ?x59)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x41 (and $x103 $x69)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x101 (and $x34 $x41)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x19)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x64)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x22 $x84)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x53 $x74)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x94 (and (and (and (and (and (and $x8 $x98) $x33) $x49) $x83) $x47) $x71)))
 (let (($x118 (and $x94 $x68)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x108 (or false (or false (and (and true (or $x124 $x46)) (or $x79 $x152))))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x104 (and (and (and $x113 $x117) $x118) $x101)))
 (let (($x138 (= $x104 true)))
 (let (($x58 (= $x138 true)))
 (let (($x191 (= $x58 true)))
 (let (($x188 (and $x191 $x166)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and $x14 $x188)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x6 $x150)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x35 $x171)))
 (let (($x130 (=> $x141 $x145)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (= false true)))
 (let (($x145 (= $x161 true)))
 (let (($x192 (forall ((input.ind-%var429X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var429X)))
 (=> $x20 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var429X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var428X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var428X)))
 (= $x20 false)))
 ))
 (let (($x142 (and $x169 $x192)))
 (let (($x166 (= $x142 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x115 (concat ?x195 (concat ?x120 ?x179)))))
 (let (($x69 (= input.dst.llvm-%m ?x29)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x80 (concat ?x31 (concat ?x28 ?x59)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x41 (and $x103 $x69)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x101 (and $x34 $x41)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x19)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x64)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x22 $x84)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x53 $x74)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x57 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x86 $x89)))
 (let (($x98 (and (not $x18) $x57)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x50 $x15)))
 (let (($x7 (not $x63)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x45)))
 (let (($x8 (and (not $x9) $x7)))
 (let (($x94 (and (and (and (and (and (and $x8 $x98) $x33) $x49) $x83) $x47) $x71)))
 (let (($x118 (and $x94 $x68)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x108 (or false (or false (and (and true (or $x124 $x46)) (or $x79 $x152))))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x104 (and (and (and $x113 $x117) $x118) $x101)))
 (let (($x138 (= $x104 true)))
 (let (($x58 (= $x138 true)))
 (let (($x191 (= $x58 true)))
 (let (($x188 (and $x191 $x166)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and $x14 $x188)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x6 $x150)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x35 $x171)))
 (let (($x130 (=> $x141 $x145)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10000013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x08000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10000010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xae7c5810)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbf6a1814)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbf6a1817)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xae7c5813)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbf6a1814)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xae7c5810)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x67 false)))
 (let (($x170 (= $x78 true)))
 (let (($x181 (forall ((input.ind-%var443X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var443X)))
 (=> $x37 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var443X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var442X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var442X)))
 (= $x37 false)))
 ))
 (let (($x194 (and $x175 $x181)))
 (let (($x54 (= $x194 true)))
 (let ((?x158 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x158)))
 (let (($x164 (= ?x189 input.dst.llvm-%n)))
 (let (($x186 (= $x164 true)))
 (let (($x25 (= $x186 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x116 true)))
 (let (($x182 (= $x32 true)))
 (let (($x130 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x165 (= $x130 true)))
 (let (($x135 (= $x165 true)))
 (let (($x23 (= $x135 true)))
 (let (($x150 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x150 true)))
 (let (($x141 (= $x171 true)))
 (let (($x161 (= $x141 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (= $x75 true)))
 (let (($x142 (= $x192 true)))
 (let (($x166 (= $x142 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (= $x20 true)))
 (let (($x169 (= $x128 true)))
 (let (($x60 (= $x169 true)))
 (let ((?x59 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x66 (bvadd input.dst.llvm-%m ?x59)))
 (let (($x159 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x66 (_ bv3 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x151 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x101 (or false (or false (and (and true (or $x195 $x151)) (or $x133 $x159))))))
 (let (($x138 (=> (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32))) $x101)))
 (let (($x109 (=> (and $x67 (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32)))) $x101)))
 (let (($x103 (= $x109 true)))
 (let (($x58 (= $x103 true)))
 (let (($x191 (= $x58 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x71)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x13)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x81 $x74)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x22 $x83)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x57 $x98)))
 (let (($x17 (not $x26)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x65 (and (not $x85) $x17)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x7 $x8)))
 (let (($x89 (not $x86)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x46 $x92)))
 (let (($x96 (and (not $x63) $x89)))
 (let (($x43 (and (and (and (and (and (and $x96 $x65) $x49) $x53) $x91) $x47) $x64)))
 (let (($x185 (and $x43 $x94)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x11 (or false (or false (and (and true (or $x132 $x153)) (or $x117 $x112))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x34 (and $x15 $x185)))
 (let (($x56 (= $x34 true)))
 (let (($x97 (= $x56 true)))
 (let (($x80 (= $x97 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x27 (= (_ bv0 2) ?x174)))
 (let (($x134 (= $x27 true)))
 (let (($x155 (= $x134 true)))
 (let (($x95 (and $x155 $x80)))
 (let (($x154 (and $x95 $x191)))
 (let (($x160 (and $x154 $x60)))
 (let (($x188 (and $x160 $x166)))
 (let (($x145 (and $x188 $x161)))
 (let (($x146 (and $x145 $x23)))
 (let (($x44 (and $x146 $x182)))
 (let (($x30 (and $x44 $x25)))
 (let (($x131 (and $x30 $x54)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (and $x6 $x131)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x180 (and $x82 $x127)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x36 $x180)))
 (let (($x122 (=> $x156 $x170)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x67 false)))
 (let (($x170 (= $x78 true)))
 (let (($x181 (forall ((input.ind-%var443X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var443X)))
 (=> $x37 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var443X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var442X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var442X)))
 (= $x37 false)))
 ))
 (let (($x194 (and $x175 $x181)))
 (let (($x54 (= $x194 true)))
 (let ((?x158 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x158)))
 (let (($x164 (= ?x189 input.dst.llvm-%n)))
 (let (($x186 (= $x164 true)))
 (let (($x25 (= $x186 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x116 true)))
 (let (($x182 (= $x32 true)))
 (let (($x130 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x165 (= $x130 true)))
 (let (($x135 (= $x165 true)))
 (let (($x23 (= $x135 true)))
 (let (($x150 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x150 true)))
 (let (($x141 (= $x171 true)))
 (let (($x161 (= $x141 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (= $x75 true)))
 (let (($x142 (= $x192 true)))
 (let (($x166 (= $x142 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (= $x20 true)))
 (let (($x169 (= $x128 true)))
 (let (($x60 (= $x169 true)))
 (let ((?x59 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x66 (bvadd input.dst.llvm-%m ?x59)))
 (let (($x159 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x66 (_ bv3 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x151 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x101 (or false (or false (and (and true (or $x195 $x151)) (or $x133 $x159))))))
 (let (($x138 (=> (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32))) $x101)))
 (let (($x109 (=> (and $x67 (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32)))) $x101)))
 (let (($x103 (= $x109 true)))
 (let (($x58 (= $x103 true)))
 (let (($x191 (= $x58 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x71)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x13)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x81 $x74)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x22 $x83)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x57 $x98)))
 (let (($x17 (not $x26)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x65 (and (not $x85) $x17)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x7 $x8)))
 (let (($x89 (not $x86)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x46 $x92)))
 (let (($x96 (and (not $x63) $x89)))
 (let (($x43 (and (and (and (and (and (and $x96 $x65) $x49) $x53) $x91) $x47) $x64)))
 (let (($x185 (and $x43 $x94)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x11 (or false (or false (and (and true (or $x132 $x153)) (or $x117 $x112))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x34 (and $x15 $x185)))
 (let (($x56 (= $x34 true)))
 (let (($x97 (= $x56 true)))
 (let (($x80 (= $x97 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x27 (= (_ bv0 2) ?x174)))
 (let (($x134 (= $x27 true)))
 (let (($x155 (= $x134 true)))
 (let (($x95 (and $x155 $x80)))
 (let (($x154 (and $x95 $x191)))
 (let (($x160 (and $x154 $x60)))
 (let (($x188 (and $x160 $x166)))
 (let (($x145 (and $x188 $x161)))
 (let (($x146 (and $x145 $x23)))
 (let (($x44 (and $x146 $x182)))
 (let (($x30 (and $x44 $x25)))
 (let (($x131 (and $x30 $x54)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (and $x6 $x131)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x180 (and $x82 $x127)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x36 $x180)))
 (let (($x122 (=> $x156 $x170)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff0d9c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfff81000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff0d9f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff0d9c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfff7fff0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x83)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (and $x49 $x53)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x16 $x118)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x33 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x33)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x46 $x92)))
 (let (($x18 (not $x63)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x18)))
 (let (($x64 (and (and (and (and (and (and $x8 $x98) $x17) $x19) $x22) $x73) $x74)))
 (let (($x43 (and $x64 $x91)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x112 (or false (or false (and (and true (or $x50 $x79)) (or $x111 $x108))))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x112)))
 (let (($x186 (and $x45 $x43)))
 (let (($x25 (= $x186 true)))
 (let (($x30 (= $x25 true)))
 (let (($x32 (forall ((input.ind-%var456X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var456X)))
 (= $x142 false)))
 ))
 (let (($x165 (forall ((input.ind-%var457X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var457X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var457X) (_ bv0 32)))))
 ))
 (let (($x182 (and $x165 $x32)))
 (let (($x44 (= $x182 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x101 (concat ?x29 (concat ?x179 ?x151)))))
 (let (($x109 (= input.dst.llvm-%m ?x138)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x115 (concat ?x59 (concat ?x38 ?x80)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x103 (and $x106 $x109)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x58 (and $x34 $x103)))
 (let (($x20 (and (and (and $x45 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x43) $x58)))
 (let (($x128 (= $x20 true)))
 (let (($x169 (= $x128 true)))
 (let (($x60 (= $x169 true)))
 (let (($x90 (and $x60 $x44)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and $x35 $x90)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x126 $x158)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x164 (and $x14 $x189)))
 (let (($x114 (=> $x164 $x30)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x83)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x84)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (and $x49 $x53)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x16 $x118)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x33 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x33)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x46 $x92)))
 (let (($x18 (not $x63)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x18)))
 (let (($x64 (and (and (and (and (and (and $x8 $x98) $x17) $x19) $x22) $x73) $x74)))
 (let (($x43 (and $x64 $x91)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x112 (or false (or false (and (and true (or $x50 $x79)) (or $x111 $x108))))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x112)))
 (let (($x186 (and $x45 $x43)))
 (let (($x25 (= $x186 true)))
 (let (($x30 (= $x25 true)))
 (let (($x32 (forall ((input.ind-%var456X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var456X)))
 (= $x142 false)))
 ))
 (let (($x165 (forall ((input.ind-%var457X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var457X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var457X) (_ bv0 32)))))
 ))
 (let (($x182 (and $x165 $x32)))
 (let (($x44 (= $x182 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x101 (concat ?x29 (concat ?x179 ?x151)))))
 (let (($x109 (= input.dst.llvm-%m ?x138)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x115 (concat ?x59 (concat ?x38 ?x80)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x103 (and $x106 $x109)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x58 (and $x34 $x103)))
 (let (($x20 (and (and (and $x45 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x43) $x58)))
 (let (($x128 (= $x20 true)))
 (let (($x169 (= $x128 true)))
 (let (($x60 (= $x169 true)))
 (let (($x90 (and $x60 $x44)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and $x35 $x90)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x126 $x158)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x164 (and $x14 $x189)))
 (let (($x114 (=> $x164 $x30)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x141)))
 (let (($x161 (= ?x75 input.dst.llvm-%n)))
 (let (($x140 (= $x161 true)))
 (let (($x195 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var462X)))
 (= $x116 false)))
 ))
 (let (($x25 (forall ((input.ind-%var463X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var463X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var463X) (_ bv0 32)))))
 ))
 (let (($x97 (and $x25 $x195)))
 (let (($x166 (= $x97 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x138 (concat ?x151 (concat ?x29 ?x101)))))
 (let (($x103 (= input.dst.llvm-%m ?x109)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x66 (concat ?x38 (concat ?x67 ?x93)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x58 (and $x106 $x103)))
 (let (($x185 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x20 (and $x185 $x58)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x81)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x22)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x19 $x49)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x65 $x68)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x57 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x85)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x7 $x46)))
 (let (($x63 (not $x92)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x63)))
 (let (($x91 (and (and (and (and (and (and $x8 $x98) $x26) $x12) $x87) $x118) $x107)))
 (let (($x43 (and $x91 $x73)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x55 (or false (or false (and (and true (or $x152 $x132)) (or $x113 $x117))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x55)))
 (let (($x60 (and (and (and $x191 $x99) $x43) $x20)))
 (let (($x192 (= $x60 true)))
 (let (($x142 (= $x192 true)))
 (let (($x150 (= $x142 true)))
 (let (($x171 (and $x150 $x166)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x160 (and $x193 $x171)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x143 $x160)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x36 $x188)))
 (let (($x149 (=> $x23 $x140)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x141)))
 (let (($x161 (= ?x75 input.dst.llvm-%n)))
 (let (($x140 (= $x161 true)))
 (let (($x195 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var462X)))
 (= $x116 false)))
 ))
 (let (($x25 (forall ((input.ind-%var463X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var463X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var463X) (_ bv0 32)))))
 ))
 (let (($x97 (and $x25 $x195)))
 (let (($x166 (= $x97 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x138 (concat ?x151 (concat ?x29 ?x101)))))
 (let (($x103 (= input.dst.llvm-%m ?x109)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x66 (concat ?x38 (concat ?x67 ?x93)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x58 (and $x106 $x103)))
 (let (($x185 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x20 (and $x185 $x58)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x81)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x22)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x19 $x49)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x65 $x68)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x57 $x62)))
 (let (($x85 (not $x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x85)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x7 $x46)))
 (let (($x63 (not $x92)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x63)))
 (let (($x91 (and (and (and (and (and (and $x8 $x98) $x26) $x12) $x87) $x118) $x107)))
 (let (($x43 (and $x91 $x73)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x55 (or false (or false (and (and true (or $x152 $x132)) (or $x113 $x117))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x55)))
 (let (($x60 (and (and (and $x191 $x99) $x43) $x20)))
 (let (($x192 (= $x60 true)))
 (let (($x142 (= $x192 true)))
 (let (($x150 (= $x142 true)))
 (let (($x171 (and $x150 $x166)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x160 (and $x193 $x171)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x143 $x160)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x36 $x188)))
 (let (($x149 (=> $x23 $x140)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x114)))
 (let (($x158 (= ?x37 input.spec-%var-n-1)))
 (let (($x130 (= $x158 true)))
 (let (($x175 (forall ((input.ind-%var469X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var469X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var469X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var468X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var468X)))
 (= $x123 false)))
 ))
 (let (($x27 (and $x171 $x175)))
 (let (($x41 (= $x27 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x109 (concat ?x101 (concat ?x151 ?x138)))))
 (let (($x58 (= input.dst.llvm-%m ?x103)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x80 (concat ?x67 (concat ?x59 ?x31)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x20 (and $x106 $x58)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x60 (and $x94 $x20)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x53)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x87)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x12 $x19)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x17 $x47)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x33 $x57)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x72)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x18 $x7)))
 (let (($x92 (not $x46)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x92)))
 (let (($x73 (and (and (and (and (and (and $x8 $x98) $x196) $x84) $x16) $x68) $x64)))
 (let (($x43 (and $x73 $x118)))
 (let (($x174 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x134 (or false (or false (and (and true (or $x144 $x111)) (or $x190 $x112))))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x150 (and (and (and $x128 $x174) $x43) $x60)))
 (let (($x165 (= $x150 true)))
 (let (($x116 (= $x165 true)))
 (let (($x44 (= $x116 true)))
 (let (($x56 (and $x44 $x41)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x82 $x56)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x90 (and $x124 $x32)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x145 (and $x14 $x90)))
 (let (($x189 (=> $x145 $x130)))
 (not $x189)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x114)))
 (let (($x158 (= ?x37 input.spec-%var-n-1)))
 (let (($x130 (= $x158 true)))
 (let (($x175 (forall ((input.ind-%var469X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var469X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var469X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var468X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var468X)))
 (= $x123 false)))
 ))
 (let (($x27 (and $x171 $x175)))
 (let (($x41 (= $x27 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x109 (concat ?x101 (concat ?x151 ?x138)))))
 (let (($x58 (= input.dst.llvm-%m ?x103)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x80 (concat ?x67 (concat ?x59 ?x31)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x20 (and $x106 $x58)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x60 (and $x94 $x20)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x53)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x87)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x12 $x19)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x17 $x47)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x33 $x57)))
 (let (($x72 (not $x62)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x72)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x18 $x7)))
 (let (($x92 (not $x46)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x92)))
 (let (($x73 (and (and (and (and (and (and $x8 $x98) $x196) $x84) $x16) $x68) $x64)))
 (let (($x43 (and $x73 $x118)))
 (let (($x174 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x134 (or false (or false (and (and true (or $x144 $x111)) (or $x190 $x112))))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x150 (and (and (and $x128 $x174) $x43) $x60)))
 (let (($x165 (= $x150 true)))
 (let (($x116 (= $x165 true)))
 (let (($x44 (= $x116 true)))
 (let (($x56 (and $x44 $x41)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x82 $x56)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x90 (and $x124 $x32)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x145 (and $x14 $x90)))
 (let (($x189 (=> $x145 $x130)))
 (not $x189)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x186 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x97 (= (_ bv0 2) ?x186)))
 (let (($x75 (= $x97 true)))
 (let (($x135 (forall ((input.ind-%var475X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var475X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var475X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var474X)))
 (= $x149 false)))
 ))
 (let (($x155 (and $x56 $x135)))
 (let (($x69 (= $x155 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x103 (concat ?x138 (concat ?x101 ?x109)))))
 (let (($x20 (= input.dst.llvm-%m ?x58)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x93 (concat ?x59 (concat ?x38 ?x28)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x60 (and $x106 $x20)))
 (let (($x71 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x150 (and $x71 $x60)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x49)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x16)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x84 $x12)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x26 $x74)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x85 $x33)))
 (let (($x62 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x62)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x63 $x18)))
 (let (($x46 (not $x7)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x46)))
 (let (($x118 (and (and (and (and (and (and $x8 $x98) $x13) $x22) $x65) $x47) $x91)))
 (let (($x43 (and $x118 $x68)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x136 (or false (or false (and (and true (or $x153 $x113)) (or $x45 $x55))))))
 (let (($x192 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x44 (and (and (and $x192 $x99) $x43) $x150)))
 (let (($x25 (= $x44 true)))
 (let (($x123 (= $x25 true)))
 (let (($x166 (= $x123 true)))
 (let (($x34 (and $x166 $x69)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (and $x126 $x34)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x6 $x195)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x36 $x141)))
 (let (($x188 (=> $x23 $x75)))
 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x186 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x97 (= (_ bv0 2) ?x186)))
 (let (($x75 (= $x97 true)))
 (let (($x135 (forall ((input.ind-%var475X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var475X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var475X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var474X)))
 (= $x149 false)))
 ))
 (let (($x155 (and $x56 $x135)))
 (let (($x69 (= $x155 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x103 (concat ?x138 (concat ?x101 ?x109)))))
 (let (($x20 (= input.dst.llvm-%m ?x58)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x93 (concat ?x59 (concat ?x38 ?x28)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x60 (and $x106 $x20)))
 (let (($x71 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x150 (and $x71 $x60)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x49)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x16)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x84 $x12)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x26 $x74)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x85 $x33)))
 (let (($x62 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x62)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x63 $x18)))
 (let (($x46 (not $x7)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x46)))
 (let (($x118 (and (and (and (and (and (and $x8 $x98) $x13) $x22) $x65) $x47) $x91)))
 (let (($x43 (and $x118 $x68)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x136 (or false (or false (and (and true (or $x153 $x113)) (or $x45 $x55))))))
 (let (($x192 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x44 (and (and (and $x192 $x99) $x43) $x150)))
 (let (($x25 (= $x44 true)))
 (let (($x123 (= $x25 true)))
 (let (($x166 (= $x123 true)))
 (let (($x34 (and $x166 $x69)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (and $x126 $x34)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x6 $x195)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x36 $x141)))
 (let (($x188 (=> $x23 $x75)))
 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x27 (= $x146 true)))
 (let (($x37 (= $x27 true)))
 (let (($x50 (forall ((input.ind-%var481X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var481X)))
 (=> $x189 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var481X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var480X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var480X)))
 (= $x189 false)))
 ))
 (let (($x133 (and $x34 $x50)))
 (let (($x185 (= $x133 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x58 (concat ?x109 (concat ?x138 ?x103)))))
 (let (($x60 (= input.dst.llvm-%m ?x20)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x31 (concat ?x38 (concat ?x67 ?x95)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x150 (and $x106 $x60)))
 (let (($x154 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x44 (and $x154 $x150)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x19)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x65)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x22 $x84)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x196 $x107)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x72 $x85)))
 (let (($x57 (not $x33)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x57)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x92 $x63)))
 (let (($x7 (not $x18)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x7)))
 (let (($x68 (and (and (and (and (and (and $x8 $x98) $x83) $x87) $x17) $x74) $x73)))
 (let (($x43 (and $x68 $x47)))
 (let (($x174 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x79 (or false (or false (and (and true (or $x108 $x190)) (or $x191 $x134))))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x166 (and (and (and $x165 $x174) $x43) $x44)))
 (let (($x140 (= $x166 true)))
 (let (($x149 (= $x140 true)))
 (let (($x41 (= $x149 true)))
 (let (($x175 (and $x41 $x185)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x143 $x175)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x35 $x114)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x171 (and $x14 $x145)))
 (let (($x90 (=> $x171 $x37)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x27 (= $x146 true)))
 (let (($x37 (= $x27 true)))
 (let (($x50 (forall ((input.ind-%var481X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var481X)))
 (=> $x189 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var481X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var480X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var480X)))
 (= $x189 false)))
 ))
 (let (($x133 (and $x34 $x50)))
 (let (($x185 (= $x133 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x58 (concat ?x109 (concat ?x138 ?x103)))))
 (let (($x60 (= input.dst.llvm-%m ?x20)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x31 (concat ?x38 (concat ?x67 ?x95)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x150 (and $x106 $x60)))
 (let (($x154 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x44 (and $x154 $x150)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x19)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x65)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x22 $x84)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x196 $x107)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x72 $x85)))
 (let (($x57 (not $x33)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x57)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x92 $x63)))
 (let (($x7 (not $x18)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x7)))
 (let (($x68 (and (and (and (and (and (and $x8 $x98) $x83) $x87) $x17) $x74) $x73)))
 (let (($x43 (and $x68 $x47)))
 (let (($x174 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x79 (or false (or false (and (and true (or $x108 $x190)) (or $x191 $x134))))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x166 (and (and (and $x165 $x174) $x43) $x44)))
 (let (($x140 (= $x166 true)))
 (let (($x149 (= $x140 true)))
 (let (($x41 (= $x149 true)))
 (let (($x175 (and $x41 $x185)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x143 $x175)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x35 $x114)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x171 (and $x14 $x145)))
 (let (($x90 (=> $x171 $x37)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (forall ((input.ind-%var493X (_ BitVec 32)) )(let ((?x24 (bvadd (bvmul input.ind-%var493X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x51))))
 (=> false (= (_ bv0 32) ?x77))))))
 ))
 (let (($x181 (forall ((input.ind-%var492X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var492X) (bvult input.ind-%var492X (_ bv0 32)))))
 ))
 (let (($x125 (and $x181 $x137)))
 (let (($x155 (= true true)))
 (let (($x42 (and $x155 $x125)))
 (let (($x148 (= $x42 true)))
 (let (($x120 (forall ((input.ind-%var487X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var487X)))
 (=> $x161 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var487X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var486X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var486X)))
 (= $x161 false)))
 ))
 (let (($x94 (and $x175 $x120)))
 (let (($x135 (= $x94 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x20 (concat ?x103 (concat ?x109 ?x58)))))
 (let (($x150 (= input.dst.llvm-%m ?x60)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x28 (concat ?x67 (concat ?x59 ?x115)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x44 (and $x106 $x150)))
 (let (($x169 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x166 (and $x169 $x44)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x12)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x17)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x196 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x196)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x87 $x22)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x13 $x64)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x33 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x33)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x46 $x92)))
 (let (($x18 (not $x63)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x18)))
 (let (($x47 (and (and (and (and (and (and $x8 $x98) $x81) $x16) $x26) $x107) $x118)))
 (let (($x43 (and $x47 $x74)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x132 (or false (or false (and (and true (or $x117 $x45)) (or $x128 $x136))))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x41 (and (and (and $x25 $x99) $x43) $x166)))
 (let (($x130 (= $x41 true)))
 (let (($x189 (= $x130 true)))
 (let (($x69 (= $x189 true)))
 (let (($x186 (and $x69 $x135)))
 (let (($x124 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x124 $x186)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x56 (and $x193 $x23)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x36 $x56)))
 (let (($x88 (=> $x182 $x148)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (forall ((input.ind-%var493X (_ BitVec 32)) )(let ((?x24 (bvadd (bvmul input.ind-%var493X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x51))))
 (=> false (= (_ bv0 32) ?x77))))))
 ))
 (let (($x181 (forall ((input.ind-%var492X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var492X) (bvult input.ind-%var492X (_ bv0 32)))))
 ))
 (let (($x125 (and $x181 $x137)))
 (let (($x155 (= true true)))
 (let (($x42 (and $x155 $x125)))
 (let (($x148 (= $x42 true)))
 (let (($x120 (forall ((input.ind-%var487X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var487X)))
 (=> $x161 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var487X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var486X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var486X)))
 (= $x161 false)))
 ))
 (let (($x94 (and $x175 $x120)))
 (let (($x135 (= $x94 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x20 (concat ?x103 (concat ?x109 ?x58)))))
 (let (($x150 (= input.dst.llvm-%m ?x60)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x28 (concat ?x67 (concat ?x59 ?x115)))))
 (let (($x106 (= input.dst.llvm-%n ?x104)))
 (let (($x44 (and $x106 $x150)))
 (let (($x169 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x166 (and $x169 $x44)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x12)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x17)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x196 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x196)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x87 $x22)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x13 $x64)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x62 $x72)))
 (let (($x33 (not $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x86 $x89)))
 (let (($x98 (and (not $x96) $x33)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x46 $x92)))
 (let (($x18 (not $x63)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x9 $x11)))
 (let (($x8 (and (not $x15) $x18)))
 (let (($x47 (and (and (and (and (and (and $x8 $x98) $x81) $x16) $x26) $x107) $x118)))
 (let (($x43 (and $x47 $x74)))
 (let (($x99 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x132 (or false (or false (and (and true (or $x117 $x45)) (or $x128 $x136))))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x41 (and (and (and $x25 $x99) $x43) $x166)))
 (let (($x130 (= $x41 true)))
 (let (($x189 (= $x130 true)))
 (let (($x69 (= $x189 true)))
 (let (($x186 (and $x69 $x135)))
 (let (($x124 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x124 $x186)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x56 (and $x193 $x23)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x36 $x56)))
 (let (($x88 (=> $x182 $x148)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (= $x175 false)))
 (let (($x248 (= $x247 true)))
 (let (($x240 (forall ((input.ind-%var511X (_ BitVec 32)) )(let (($x226 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var511X)))
 (=> $x226 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var511X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var510X (_ BitVec 32)) )(let (($x226 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var510X)))
 (= $x226 false)))
 ))
 (let (($x241 (and $x230 $x240)))
 (let (($x242 (= $x241 true)))
 (let (($x220 (forall ((input.ind-%var505X (_ BitVec 32)) )(let ((?x207 (bvadd (bvmul input.ind-%var505X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x207))))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x207 (_ bv2 32))) ?x211)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x207 (_ bv3 32))) ?x214)))
 (let ((?x172 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var505X)))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var505X)))
 (=> $x78 (= ?x172 ?x217)))))))))
 ))
 (let (($x160 (forall ((input.ind-%var504X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var504X) (bvult input.ind-%var504X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var504X)))
 (= $x78 $x75))))
 ))
 (let (($x221 (and $x160 $x220)))
 (let (($x222 (= $x221 true)))
 (let ((?x153 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x153)))
 (let (($x180 (= ?x113 input.dst.llvm-%n)))
 (let (($x34 (= $x180 true)))
 (let (($x164 (= $x34 true)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x171 true)))
 (let (($x141 (= $x97 true)))
 (let (($x159 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (= $x159 true)))
 (let (($x50 (= $x71 true)))
 (let (($x27 (= $x50 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x88 (= $x148 true)))
 (let (($x102 (= $x88 true)))
 (let (($x143 (= $x102 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x177 (= $x157 true)))
 (let (($x137 (= $x177 true)))
 (let (($x125 (= $x137 true)))
 (let (($x40 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x176 (= $x40 true)))
 (let (($x51 (= $x176 true)))
 (let (($x183 (= $x51 true)))
 (let ((?x158 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvadd input.dst.llvm-%m ?x158)))
 (let (($x70 (bvugt ?x152 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x152 (_ bv3 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x155 (bvugt ?x152 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x24 (or false (or false (and (and true (or $x182 $x155)) (or $x147 $x70))))))
 (let (($x48 (=> (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32))) $x24)))
 (let (($x94 (=> (and $x175 (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32)))) $x24)))
 (let (($x135 (= $x94 true)))
 (let (($x178 (= $x135 true)))
 (let (($x187 (= $x178 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x101)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x138)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x59 $x95)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x31 $x104)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x123 $x116)))
 (let (($x169 (not $x142)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x74 $x43)))
 (let (($x66 (and (not $x149) $x169)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x107 $x19)))
 (let (($x118 (not $x17)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x57 $x62)))
 (let (($x12 (and (not $x84) $x118)))
 (let (($x44 (and (and (and (and (and (and $x12 $x66) $x38) $x67) $x106) $x20) $x103)))
 (let (($x166 (and $x44 $x109)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x64 (or false (or false (and (and true (or $x53 $x81)) (or $x13 $x87))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x64)))
 (let (($x41 (and $x68 $x166)))
 (let (($x130 (= $x41 true)))
 (let (($x189 (= $x130 true)))
 (let (($x69 (= $x189 true)))
 (let (($x63 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x18 (= $x63 true)))
 (let (($x8 (= $x18 true)))
 (let (($x11 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x15 (= $x11 true)))
 (let (($x7 (= $x15 true)))
 (let (($x46 (= $x7 true)))
 (let (($x25 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x111 (= $x25 true)))
 (let (($x99 (= $x111 true)))
 (let (($x140 (= $x99 true)))
 (let (($x136 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x192 (= $x136 true)))
 (let (($x79 (= $x192 true)))
 (let (($x165 (= $x79 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x112 (= (_ bv0 2) ?x45)))
 (let (($x191 (= $x112 true)))
 (let (($x55 (= $x191 true)))
 (let (($x174 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x174 true)))
 (let (($x190 (= $x108 true)))
 (let (($x128 (and $x190 $x55)))
 (let (($x132 (and $x128 $x165)))
 (let (($x9 (and $x132 $x140)))
 (let (($x92 (and $x9 $x46)))
 (let (($x86 (and $x92 $x8)))
 (let (($x188 (and $x86 $x69)))
 (let (($x129 (and $x188 $x187)))
 (let (($x77 (and $x129 $x183)))
 (let (($x42 (and $x77 $x125)))
 (let (($x144 (and $x42 $x143)))
 (let (($x114 (and $x144 $x27)))
 (let (($x127 (and $x114 $x141)))
 (let (($x110 (and $x127 $x164)))
 (let (($x223 (and $x110 $x222)))
 (let (($x243 (and $x223 $x242)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x193 $x243)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x6 $x244)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x246 (and $x14 $x245)))
 (let (($x249 (=> $x246 $x248)))
 (not $x249)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (= $x175 false)))
 (let (($x248 (= $x247 true)))
 (let (($x240 (forall ((input.ind-%var511X (_ BitVec 32)) )(let (($x226 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var511X)))
 (=> $x226 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var511X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var510X (_ BitVec 32)) )(let (($x226 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var510X)))
 (= $x226 false)))
 ))
 (let (($x241 (and $x230 $x240)))
 (let (($x242 (= $x241 true)))
 (let (($x220 (forall ((input.ind-%var505X (_ BitVec 32)) )(let ((?x207 (bvadd (bvmul input.ind-%var505X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x207))))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x207 (_ bv2 32))) ?x211)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x207 (_ bv3 32))) ?x214)))
 (let ((?x172 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var505X)))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var505X)))
 (=> $x78 (= ?x172 ?x217)))))))))
 ))
 (let (($x160 (forall ((input.ind-%var504X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var504X) (bvult input.ind-%var504X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var504X)))
 (= $x78 $x75))))
 ))
 (let (($x221 (and $x160 $x220)))
 (let (($x222 (= $x221 true)))
 (let ((?x153 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x153)))
 (let (($x180 (= ?x113 input.dst.llvm-%n)))
 (let (($x34 (= $x180 true)))
 (let (($x164 (= $x34 true)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x171 true)))
 (let (($x141 (= $x97 true)))
 (let (($x159 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (= $x159 true)))
 (let (($x50 (= $x71 true)))
 (let (($x27 (= $x50 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x88 (= $x148 true)))
 (let (($x102 (= $x88 true)))
 (let (($x143 (= $x102 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x177 (= $x157 true)))
 (let (($x137 (= $x177 true)))
 (let (($x125 (= $x137 true)))
 (let (($x40 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x176 (= $x40 true)))
 (let (($x51 (= $x176 true)))
 (let (($x183 (= $x51 true)))
 (let ((?x158 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvadd input.dst.llvm-%m ?x158)))
 (let (($x70 (bvugt ?x152 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x152 (_ bv3 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x155 (bvugt ?x152 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x24 (or false (or false (and (and true (or $x182 $x155)) (or $x147 $x70))))))
 (let (($x48 (=> (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32))) $x24)))
 (let (($x94 (=> (and $x175 (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32)))) $x24)))
 (let (($x135 (= $x94 true)))
 (let (($x178 (= $x135 true)))
 (let (($x187 (= $x178 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x101)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x138)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x59 $x95)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x31 $x104)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x123 $x116)))
 (let (($x169 (not $x142)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x74 $x43)))
 (let (($x66 (and (not $x149) $x169)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x107 $x19)))
 (let (($x118 (not $x17)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x57 $x62)))
 (let (($x12 (and (not $x84) $x118)))
 (let (($x44 (and (and (and (and (and (and $x12 $x66) $x38) $x67) $x106) $x20) $x103)))
 (let (($x166 (and $x44 $x109)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x64 (or false (or false (and (and true (or $x53 $x81)) (or $x13 $x87))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x64)))
 (let (($x41 (and $x68 $x166)))
 (let (($x130 (= $x41 true)))
 (let (($x189 (= $x130 true)))
 (let (($x69 (= $x189 true)))
 (let (($x63 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x18 (= $x63 true)))
 (let (($x8 (= $x18 true)))
 (let (($x11 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x15 (= $x11 true)))
 (let (($x7 (= $x15 true)))
 (let (($x46 (= $x7 true)))
 (let (($x25 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x111 (= $x25 true)))
 (let (($x99 (= $x111 true)))
 (let (($x140 (= $x99 true)))
 (let (($x136 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x192 (= $x136 true)))
 (let (($x79 (= $x192 true)))
 (let (($x165 (= $x79 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x112 (= (_ bv0 2) ?x45)))
 (let (($x191 (= $x112 true)))
 (let (($x55 (= $x191 true)))
 (let (($x174 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x174 true)))
 (let (($x190 (= $x108 true)))
 (let (($x128 (and $x190 $x55)))
 (let (($x132 (and $x128 $x165)))
 (let (($x9 (and $x132 $x140)))
 (let (($x92 (and $x9 $x46)))
 (let (($x86 (and $x92 $x8)))
 (let (($x188 (and $x86 $x69)))
 (let (($x129 (and $x188 $x187)))
 (let (($x77 (and $x129 $x183)))
 (let (($x42 (and $x77 $x125)))
 (let (($x144 (and $x42 $x143)))
 (let (($x114 (and $x144 $x27)))
 (let (($x127 (and $x114 $x141)))
 (let (($x110 (and $x127 $x164)))
 (let (($x223 (and $x110 $x222)))
 (let (($x243 (and $x223 $x242)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x193 $x243)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x6 $x244)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x246 (and $x14 $x245)))
 (let (($x249 (=> $x246 $x248)))
 (not $x249)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4300000c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x18000004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4a00001c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4300000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4a00001f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4300000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4a00001c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x18000007 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x18000006 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x18000005 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x18000004 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x24010800)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc44b24b8)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x824b29ec)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc44b24bb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x24010803)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc44b24b8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x24010800)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x824b29ef (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x824b29ee (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x824b29ed (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x824b29ec (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (not $x124)))
 (let (($x224 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (not $x224)))
 (let (($x90 (or $x225 $x228)))
 (let (($x205 (= $x90 true)))
 (let (($x236 (= $x205 true)))
 (let (($x121 (forall ((input.ind-%var619X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var619X)))
 (=> $x145 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var619X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var618X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var618X)))
 (= $x145 false)))
 ))
 (let (($x200 (and $x122 $x121)))
 (let (($x203 (= $x200 true)))
 (let (($x89 (forall ((input.ind-%var612X (_ BitVec 32)) )(let (($x249 (and (bvule (_ bv0 32) input.ind-%var612X) (bvult input.ind-%var612X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var612X)))
 (= $x110 $x249))))
 ))
 (let (($x240 (forall ((input.ind-%var613X (_ BitVec 32)) )(let ((?x217 (bvadd (bvmul input.ind-%var613X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x217))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv2 32))) ?x221)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv3 32))) ?x226)))
 (let ((?x37 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var613X)))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var613X)))
 (=> $x110 (= ?x37 ?x234)))))))))
 ))
 (let (($x96 (and $x240 $x89)))
 (let (($x170 (= $x96 true)))
 (let ((?x27 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x27)))
 (let (($x171 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x171 true)))
 (let (($x141 (= $x97 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x125)))
 (let (($x144 (= ?x42 input.dst.llvm-%n)))
 (let (($x159 (= $x144 true)))
 (let (($x71 (= $x159 true)))
 (let (($x148 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x148 true)))
 (let (($x102 (= $x88 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x183 (= $x51 true)))
 (let (($x77 (= $x183 true)))
 (let (($x157 (= $x77 true)))
 (let (($x178 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (= $x178 true)))
 (let (($x129 (= $x187 true)))
 (let (($x40 (= $x129 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (= $x162 true)))
 (let (($x48 (= $x24 true)))
 (let (($x94 (= $x48 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x147 (= $x30 true)))
 (let (($x70 (= $x147 true)))
 (let (($x181 (= $x70 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x56 (= $x105 true)))
 (let (($x182 (= $x56 true)))
 (let (($x155 (= $x182 true)))
 (let (($x146 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x158 (= $x146 true)))
 (let (($x152 (= $x158 true)))
 (let (($x186 (= $x152 true)))
 (let (($x69 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x188 (= $x69 true)))
 (let (($x161 (= $x188 true)))
 (let (($x185 (= $x161 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x104)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x80)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (and $x151 $x67)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x38 $x29)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x43 $x149)))
 (let (($x123 (not $x154)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x118 $x12)))
 (let (($x142 (and (not $x74) $x123)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x62 $x84)))
 (let (($x107 (not $x47)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x26 $x33)))
 (let (($x17 (and (not $x57) $x107)))
 (let (($x103 (and (and (and (and (and (and $x17 $x142) $x66) $x28) $x31) $x115) $x95)))
 (let (($x44 (and $x103 $x106)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x22 (or false (or false (and (and true (or $x81 $x65)) (or $x13 $x73))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x101 (and $x68 $x44)))
 (let (($x109 (= $x101 true)))
 (let (($x166 (= $x109 true)))
 (let (($x41 (= $x166 true)))
 (let ((?x18 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x8 (= (_ bv0 2) ?x18)))
 (let (($x86 (= $x8 true)))
 (let (($x72 (= $x86 true)))
 (let (($x130 (and $x72 $x41)))
 (let (($x175 (and $x130 $x185)))
 (let (($x23 (and $x175 $x186)))
 (let (($x61 (and $x23 $x155)))
 (let (($x131 (and $x61 $x181)))
 (let (($x135 (and $x131 $x94)))
 (let (($x176 (and $x135 $x40)))
 (let (($x177 (and $x176 $x157)))
 (let (($x143 (and $x177 $x102)))
 (let (($x50 (and $x143 $x71)))
 (let (($x127 (and $x50 $x141)))
 (let (($x195 (and $x127 $x170)))
 (let (($x233 (and $x195 $x203)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x92 $x233)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x15 $x173)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x140 $x139)))
 (let ((?x6 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x54 (bvadd input.dst.llvm-%m ?x6)))
 (let (($x192 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd ?x54 (_ bv3 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x112 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x25 (or false (or false (and (and true (or $x45 $x112)) (or $x136 $x192))))))
 (let (($x99 (=> (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x126 (=> (and $x124 (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x204 (and $x126 $x5)))
 (let (($x232 (=> $x204 $x236)))
 (not $x232))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (not $x124)))
 (let (($x224 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (not $x224)))
 (let (($x90 (or $x225 $x228)))
 (let (($x205 (= $x90 true)))
 (let (($x236 (= $x205 true)))
 (let (($x121 (forall ((input.ind-%var619X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var619X)))
 (=> $x145 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var619X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var618X (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var618X)))
 (= $x145 false)))
 ))
 (let (($x200 (and $x122 $x121)))
 (let (($x203 (= $x200 true)))
 (let (($x89 (forall ((input.ind-%var612X (_ BitVec 32)) )(let (($x249 (and (bvule (_ bv0 32) input.ind-%var612X) (bvult input.ind-%var612X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var612X)))
 (= $x110 $x249))))
 ))
 (let (($x240 (forall ((input.ind-%var613X (_ BitVec 32)) )(let ((?x217 (bvadd (bvmul input.ind-%var613X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x217))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv2 32))) ?x221)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv3 32))) ?x226)))
 (let ((?x37 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var613X)))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var613X)))
 (=> $x110 (= ?x37 ?x234)))))))))
 ))
 (let (($x96 (and $x240 $x89)))
 (let (($x170 (= $x96 true)))
 (let ((?x27 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x27)))
 (let (($x171 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x171 true)))
 (let (($x141 (= $x97 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x125)))
 (let (($x144 (= ?x42 input.dst.llvm-%n)))
 (let (($x159 (= $x144 true)))
 (let (($x71 (= $x159 true)))
 (let (($x148 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x148 true)))
 (let (($x102 (= $x88 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x183 (= $x51 true)))
 (let (($x77 (= $x183 true)))
 (let (($x157 (= $x77 true)))
 (let (($x178 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (= $x178 true)))
 (let (($x129 (= $x187 true)))
 (let (($x40 (= $x129 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (= $x162 true)))
 (let (($x48 (= $x24 true)))
 (let (($x94 (= $x48 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x147 (= $x30 true)))
 (let (($x70 (= $x147 true)))
 (let (($x181 (= $x70 true)))
 (let (($x105 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x56 (= $x105 true)))
 (let (($x182 (= $x56 true)))
 (let (($x155 (= $x182 true)))
 (let (($x146 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x158 (= $x146 true)))
 (let (($x152 (= $x158 true)))
 (let (($x186 (= $x152 true)))
 (let (($x69 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x188 (= $x69 true)))
 (let (($x161 (= $x188 true)))
 (let (($x185 (= $x161 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x104)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x80)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (and $x151 $x67)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x38 $x29)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x43 $x149)))
 (let (($x123 (not $x154)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x118 $x12)))
 (let (($x142 (and (not $x74) $x123)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x62 $x84)))
 (let (($x107 (not $x47)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x26 $x33)))
 (let (($x17 (and (not $x57) $x107)))
 (let (($x103 (and (and (and (and (and (and $x17 $x142) $x66) $x28) $x31) $x115) $x95)))
 (let (($x44 (and $x103 $x106)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x22 (or false (or false (and (and true (or $x81 $x65)) (or $x13 $x73))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x101 (and $x68 $x44)))
 (let (($x109 (= $x101 true)))
 (let (($x166 (= $x109 true)))
 (let (($x41 (= $x166 true)))
 (let ((?x18 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x8 (= (_ bv0 2) ?x18)))
 (let (($x86 (= $x8 true)))
 (let (($x72 (= $x86 true)))
 (let (($x130 (and $x72 $x41)))
 (let (($x175 (and $x130 $x185)))
 (let (($x23 (and $x175 $x186)))
 (let (($x61 (and $x23 $x155)))
 (let (($x131 (and $x61 $x181)))
 (let (($x135 (and $x131 $x94)))
 (let (($x176 (and $x135 $x40)))
 (let (($x177 (and $x176 $x157)))
 (let (($x143 (and $x177 $x102)))
 (let (($x50 (and $x143 $x71)))
 (let (($x127 (and $x50 $x141)))
 (let (($x195 (and $x127 $x170)))
 (let (($x233 (and $x195 $x203)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x92 $x233)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x15 $x173)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x140 $x139)))
 (let ((?x6 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x54 (bvadd input.dst.llvm-%m ?x6)))
 (let (($x192 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd ?x54 (_ bv3 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x112 (bvugt ?x54 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x25 (or false (or false (and (and true (or $x45 $x112)) (or $x136 $x192))))))
 (let (($x99 (=> (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x126 (=> (and $x124 (bvule ?x54 (bvsub (bvadd ?x54 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x204 (and $x126 $x5)))
 (let (($x232 (=> $x204 $x236)))
 (not $x232))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x275 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x272 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x273 (bvmul (_ bv4294967295 32) ?x272)))
 (let ((?x274 (bvneg ?x273)))
 (let (($x276 (= ?x274 ?x275)))
 (let (($x277 (= $x276 true)))
 (let (($x262 (forall ((input.ind-%var631X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var631X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var631X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var630X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var630X)))
 (= $x52 false)))
 ))
 (let (($x263 (and $x252 $x262)))
 (let (($x264 (= $x263 true)))
 (let (($x235 (forall ((input.ind-%var625X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var625X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x197))))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv2 32))) ?x207)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv3 32))) ?x201)))
 (let ((?x232 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var625X)))
 (let (($x121 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var625X)))
 (=> $x121 (= ?x232 ?x246)))))))))
 ))
 (let (($x228 (forall ((input.ind-%var624X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var624X) (bvult input.ind-%var624X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x121 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var624X)))
 (= $x121 $x224))))
 ))
 (let (($x39 (and $x228 $x235)))
 (let (($x34 (= $x39 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x96)))
 (let (($x195 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x195 true)))
 (let (($x156 (= $x145 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x229 (= $x217 true)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x164 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x110 (= $x164 true)))
 (let (($x37 (= $x110 true)))
 (let (($x75 (= $x37 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x88 (bvsub ?x174 ?x113)))
 (let (($x159 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x88) (bvult ?x174 ?x88))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x42 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x157 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvmul (_ bv4 64) ?x157)))
 (let ((?x137 ((_ extract 63 32) ?x177)))
 (let (($x148 (= ?x137 ?x42)))
 (let (($x71 (and $x148 $x159)))
 (let (($x183 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x50 (and $x183 $x71)))
 (let (($x27 (= true $x50)))
 (let (($x6 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (=> $x6 $x27)))
 (let (($x171 (= $x114 true)))
 (let (($x97 (= $x171 true)))
 (let (($x141 (= $x97 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x178 (= $x135 true)))
 (let (($x187 (= $x178 true)))
 (let (($x129 (= $x187 true)))
 (let (($x131 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x162 (= $x131 true)))
 (let (($x24 (= $x162 true)))
 (let (($x48 (= $x24 true)))
 (let (($x30 (= $x6 true)))
 (let (($x147 (= $x30 true)))
 (let (($x70 (= $x147 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x188)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x189)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x106 $x101)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x104 $x109)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x67 $x29)))
 (let (($x150 (not $x31)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x38 $x151)))
 (let (($x115 (and (not $x93) $x150)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x169 $x66)))
 (let (($x58 (not $x179)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x33 $x57)))
 (let (($x20 (and (not $x60) $x58)))
 (let (($x186 (and (and (and (and (and (and $x20 $x115) $x80) $x103) $x166) $x130) $x69)))
 (let (($x23 (and $x186 $x161)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x154 (or false (or false (and (and true (or $x47 $x107)) (or $x12 $x74))))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x154)))
 (let (($x105 (and $x142 $x23)))
 (let (($x56 (= $x105 true)))
 (let (($x182 (= $x56 true)))
 (let (($x155 (= $x182 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x87)))
 (let (($x196 (= $x91 true)))
 (let (($x22 (= $x196 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x65 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x65 true)))
 (let (($x16 (= $x83 true)))
 (let (($x64 (= ?x53 input.dst.llvm-%n)))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x13 (and $x81 $x16)))
 (let (($x68 (and $x13 $x22)))
 (let (($x61 (and $x68 $x155)))
 (let (($x181 (and $x61 $x70)))
 (let (($x94 (and $x181 $x48)))
 (let (($x40 (and $x94 $x129)))
 (let (($x127 (and $x40 $x141)))
 (let (($x214 (and $x127 $x75)))
 (let (($x222 (and $x214 $x215)))
 (let (($x221 (and $x222 $x218)))
 (let (($x240 (and $x221 $x239)))
 (let (($x89 (and $x240 $x250)))
 (let (($x122 (and $x89 $x156)))
 (let (($x211 (and $x122 $x34)))
 (let (($x265 (and $x211 $x264)))
 (let (($x86 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x267 (and (not $x86) $x265)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x268 (and $x18 $x267)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x46 $x268)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x270 (and $x11 $x269)))
 (let (($x132 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd ?x174 (_ bv3 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x128 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x191)))
 (let (($x35 (or false (or false (and (and true (or $x55 $x128)) (or $x165 $x132))))))
 (let (($x9 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x54 (=> (and $x6 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x271 (and $x54 $x270)))
 (let (($x278 (=> $x271 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x275 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x272 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x273 (bvmul (_ bv4294967295 32) ?x272)))
 (let ((?x274 (bvneg ?x273)))
 (let (($x276 (= ?x274 ?x275)))
 (let (($x277 (= $x276 true)))
 (let (($x262 (forall ((input.ind-%var631X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var631X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var631X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var630X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var630X)))
 (= $x52 false)))
 ))
 (let (($x263 (and $x252 $x262)))
 (let (($x264 (= $x263 true)))
 (let (($x235 (forall ((input.ind-%var625X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var625X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x197))))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv2 32))) ?x207)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv3 32))) ?x201)))
 (let ((?x232 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var625X)))
 (let (($x121 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var625X)))
 (=> $x121 (= ?x232 ?x246)))))))))
 ))
 (let (($x228 (forall ((input.ind-%var624X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var624X) (bvult input.ind-%var624X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x121 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var624X)))
 (= $x121 $x224))))
 ))
 (let (($x39 (and $x228 $x235)))
 (let (($x34 (= $x39 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x96)))
 (let (($x195 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x195 true)))
 (let (($x156 (= $x145 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x229 (= $x217 true)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x164 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x110 (= $x164 true)))
 (let (($x37 (= $x110 true)))
 (let (($x75 (= $x37 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x88 (bvsub ?x174 ?x113)))
 (let (($x159 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x88) (bvult ?x174 ?x88))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x42 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x157 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvmul (_ bv4 64) ?x157)))
 (let ((?x137 ((_ extract 63 32) ?x177)))
 (let (($x148 (= ?x137 ?x42)))
 (let (($x71 (and $x148 $x159)))
 (let (($x183 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x50 (and $x183 $x71)))
 (let (($x27 (= true $x50)))
 (let (($x6 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (=> $x6 $x27)))
 (let (($x171 (= $x114 true)))
 (let (($x97 (= $x171 true)))
 (let (($x141 (= $x97 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x178 (= $x135 true)))
 (let (($x187 (= $x178 true)))
 (let (($x129 (= $x187 true)))
 (let (($x131 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x162 (= $x131 true)))
 (let (($x24 (= $x162 true)))
 (let (($x48 (= $x24 true)))
 (let (($x30 (= $x6 true)))
 (let (($x147 (= $x30 true)))
 (let (($x70 (= $x147 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x188)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x189)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x106 $x101)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x104 $x109)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x67 $x29)))
 (let (($x150 (not $x31)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x38 $x151)))
 (let (($x115 (and (not $x93) $x150)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x169 $x66)))
 (let (($x58 (not $x179)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x33 $x57)))
 (let (($x20 (and (not $x60) $x58)))
 (let (($x186 (and (and (and (and (and (and $x20 $x115) $x80) $x103) $x166) $x130) $x69)))
 (let (($x23 (and $x186 $x161)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x154 (or false (or false (and (and true (or $x47 $x107)) (or $x12 $x74))))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x154)))
 (let (($x105 (and $x142 $x23)))
 (let (($x56 (= $x105 true)))
 (let (($x182 (= $x56 true)))
 (let (($x155 (= $x182 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x87)))
 (let (($x196 (= $x91 true)))
 (let (($x22 (= $x196 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x65 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x65 true)))
 (let (($x16 (= $x83 true)))
 (let (($x64 (= ?x53 input.dst.llvm-%n)))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x13 (and $x81 $x16)))
 (let (($x68 (and $x13 $x22)))
 (let (($x61 (and $x68 $x155)))
 (let (($x181 (and $x61 $x70)))
 (let (($x94 (and $x181 $x48)))
 (let (($x40 (and $x94 $x129)))
 (let (($x127 (and $x40 $x141)))
 (let (($x214 (and $x127 $x75)))
 (let (($x222 (and $x214 $x215)))
 (let (($x221 (and $x222 $x218)))
 (let (($x240 (and $x221 $x239)))
 (let (($x89 (and $x240 $x250)))
 (let (($x122 (and $x89 $x156)))
 (let (($x211 (and $x122 $x34)))
 (let (($x265 (and $x211 $x264)))
 (let (($x86 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x267 (and (not $x86) $x265)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x268 (and $x18 $x267)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x46 $x268)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x270 (and $x11 $x269)))
 (let (($x132 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd ?x174 (_ bv3 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x128 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x191)))
 (let (($x35 (or false (or false (and (and true (or $x55 $x128)) (or $x165 $x132))))))
 (let (($x9 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x54 (=> (and $x6 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x271 (and $x54 $x270)))
 (let (($x278 (=> $x271 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x194 (bvule ?x21 (_ bv3 32))))
 (let (($x205 (= $x194 true)))
 (let (($x209 (= $x205 true)))
 (let (($x76 (forall ((input.ind-%var643X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var643X)))
 (=> $x257 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var643X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var642X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var642X)))
 (= $x257 false)))
 ))
 (let (($x198 (and $x203 $x76)))
 (let (($x243 (= $x198 true)))
 (let (($x279 (forall ((input.ind-%var637X (_ BitVec 32)) )(let ((?x265 (bvadd (bvmul input.ind-%var637X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x270)))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x273)))
 (let ((?x167 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var637X)))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var637X)))
 (=> $x224 (= ?x167 ?x276)))))))))
 ))
 (let (($x212 (forall ((input.ind-%var636X (_ BitVec 32)) )(let (($x245 (and (bvule (_ bv0 32) input.ind-%var636X) (bvult input.ind-%var636X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var636X)))
 (= $x224 $x245))))
 ))
 (let (($x153 (and $x212 $x279)))
 (let (($x26 (= $x153 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x170)))
 (let (($x145 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x156 (= $x145 true)))
 (let (($x122 (= $x156 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x219 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x97)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x114)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x88 $x144)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x102 $x159)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x176 $x51)))
 (let (($x77 (not $x183)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x187 $x129)))
 (let (($x177 (and (not $x40) $x77)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x162 $x24)))
 (let (($x94 (not $x48)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x130 $x152)))
 (let (($x178 (and (not $x131) $x94)))
 (let (($x214 (and (and (and (and (and (and $x178 $x177) $x125) $x148) $x71) $x27) $x171)))
 (let (($x217 (and $x214 $x141)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x147 (or false (or false (and (and true (or $x188 $x161)) (or $x56 $x182))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x229 (and $x181 $x217)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x222 (= $x215 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x44 true)))
 (let (($x109 (= $x101 true)))
 (let (($x166 (= $x109 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x95 true)))
 (let (($x146 (= $x103 true)))
 (let (($x104 (= $x146 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x185 (= $x115 true)))
 (let (($x138 (= $x185 true)))
 (let (($x80 (= $x138 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x67 (= (_ bv0 2) ?x59)))
 (let (($x29 (= $x67 true)))
 (let (($x31 (= $x29 true)))
 (let ((?x57 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x60 (bvneg ?x57)))
 (let (($x58 (= ?x60 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (= $x58 true)))
 (let (($x38 (= $x20 true)))
 (let (($x28 (= ?x60 input.dst.llvm-%n)))
 (let (($x169 (= $x28 true)))
 (let (($x66 (= $x169 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x149 (= $x43 true)))
 (let (($x154 (= $x149 true)))
 (let (($x142 (= $x154 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x22 (bvsub ?x174 ?x113)))
 (let (($x123 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x22) (bvult ?x174 ?x22))))
 (let (($x73 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x91 (ite $x73 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x83 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x16 (bvmul (_ bv4 64) ?x83)))
 (let ((?x13 ((_ extract 63 32) ?x16)))
 (let (($x196 (= ?x13 ?x91)))
 (let (($x84 (and $x196 $x123)))
 (let (($x81 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x47 (and $x81 $x84)))
 (let (($x107 (= true $x47)))
 (let (($x6 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (=> $x6 $x107)))
 (let (($x118 (= $x17 true)))
 (let (($x12 (= $x118 true)))
 (let (($x74 (= $x12 true)))
 (let (($x72 (= $x6 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x116 (and $x53 $x74)))
 (let (($x33 (and $x116 $x142)))
 (let (($x179 (and $x33 $x66)))
 (let (($x151 (and $x179 $x38)))
 (let (($x150 (and $x151 $x31)))
 (let (($x175 (and $x150 $x80)))
 (let (($x106 (and $x175 $x104)))
 (let (($x158 (and $x106 $x166)))
 (let (($x223 (and $x158 $x222)))
 (let (($x226 (and $x223 $x221)))
 (let (($x248 (and $x226 $x240)))
 (let (($x96 (and $x248 $x89)))
 (let (($x10 (and $x96 $x122)))
 (let (($x200 (and $x10 $x26)))
 (let (($x160 (and $x200 $x243)))
 (let (($x266 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and (not $x266) $x160)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x8 $x119)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x92 $x173)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x15 $x139)))
 (let (($x99 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd ?x174 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x134 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x54 (or false (or false (and (and true (or $x136 $x134)) (or $x25 $x99))))))
 (let (($x11 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x54)))
 (let (($x184 (=> (and $x6 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x54)))
 (let (($x199 (and $x184 $x213)))
 (let (($x258 (=> $x199 $x209)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x194 (bvule ?x21 (_ bv3 32))))
 (let (($x205 (= $x194 true)))
 (let (($x209 (= $x205 true)))
 (let (($x76 (forall ((input.ind-%var643X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var643X)))
 (=> $x257 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var643X) (_ bv0 32)))))
 ))
 (let (($x203 (forall ((input.ind-%var642X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var642X)))
 (= $x257 false)))
 ))
 (let (($x198 (and $x203 $x76)))
 (let (($x243 (= $x198 true)))
 (let (($x279 (forall ((input.ind-%var637X (_ BitVec 32)) )(let ((?x265 (bvadd (bvmul input.ind-%var637X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x270)))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x273)))
 (let ((?x167 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var637X)))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var637X)))
 (=> $x224 (= ?x167 ?x276)))))))))
 ))
 (let (($x212 (forall ((input.ind-%var636X (_ BitVec 32)) )(let (($x245 (and (bvule (_ bv0 32) input.ind-%var636X) (bvult input.ind-%var636X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var636X)))
 (= $x224 $x245))))
 ))
 (let (($x153 (and $x212 $x279)))
 (let (($x26 (= $x153 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x170)))
 (let (($x145 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x156 (= $x145 true)))
 (let (($x122 (= $x156 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x219 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x97)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x114)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x88 $x144)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x102 $x159)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x176 $x51)))
 (let (($x77 (not $x183)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x187 $x129)))
 (let (($x177 (and (not $x40) $x77)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x162 $x24)))
 (let (($x94 (not $x48)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x130 $x152)))
 (let (($x178 (and (not $x131) $x94)))
 (let (($x214 (and (and (and (and (and (and $x178 $x177) $x125) $x148) $x71) $x27) $x171)))
 (let (($x217 (and $x214 $x141)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x147 (or false (or false (and (and true (or $x188 $x161)) (or $x56 $x182))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x229 (and $x181 $x217)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x222 (= $x215 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x44 true)))
 (let (($x109 (= $x101 true)))
 (let (($x166 (= $x109 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x95 true)))
 (let (($x146 (= $x103 true)))
 (let (($x104 (= $x146 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x185 (= $x115 true)))
 (let (($x138 (= $x185 true)))
 (let (($x80 (= $x138 true)))
 (let ((?x59 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x67 (= (_ bv0 2) ?x59)))
 (let (($x29 (= $x67 true)))
 (let (($x31 (= $x29 true)))
 (let ((?x57 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x60 (bvneg ?x57)))
 (let (($x58 (= ?x60 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (= $x58 true)))
 (let (($x38 (= $x20 true)))
 (let (($x28 (= ?x60 input.dst.llvm-%n)))
 (let (($x169 (= $x28 true)))
 (let (($x66 (= $x169 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x149 (= $x43 true)))
 (let (($x154 (= $x149 true)))
 (let (($x142 (= $x154 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x22 (bvsub ?x174 ?x113)))
 (let (($x123 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x22) (bvult ?x174 ?x22))))
 (let (($x73 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x91 (ite $x73 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x83 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x16 (bvmul (_ bv4 64) ?x83)))
 (let ((?x13 ((_ extract 63 32) ?x16)))
 (let (($x196 (= ?x13 ?x91)))
 (let (($x84 (and $x196 $x123)))
 (let (($x81 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x47 (and $x81 $x84)))
 (let (($x107 (= true $x47)))
 (let (($x6 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (=> $x6 $x107)))
 (let (($x118 (= $x17 true)))
 (let (($x12 (= $x118 true)))
 (let (($x74 (= $x12 true)))
 (let (($x72 (= $x6 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x116 (and $x53 $x74)))
 (let (($x33 (and $x116 $x142)))
 (let (($x179 (and $x33 $x66)))
 (let (($x151 (and $x179 $x38)))
 (let (($x150 (and $x151 $x31)))
 (let (($x175 (and $x150 $x80)))
 (let (($x106 (and $x175 $x104)))
 (let (($x158 (and $x106 $x166)))
 (let (($x223 (and $x158 $x222)))
 (let (($x226 (and $x223 $x221)))
 (let (($x248 (and $x226 $x240)))
 (let (($x96 (and $x248 $x89)))
 (let (($x10 (and $x96 $x122)))
 (let (($x200 (and $x10 $x26)))
 (let (($x160 (and $x200 $x243)))
 (let (($x266 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and (not $x266) $x160)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x8 $x119)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x92 $x173)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x15 $x139)))
 (let (($x99 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd ?x174 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x134 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x54 (or false (or false (and (and true (or $x136 $x134)) (or $x25 $x99))))))
 (let (($x11 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x54)))
 (let (($x184 (=> (and $x6 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x54)))
 (let (($x199 (and $x184 $x213)))
 (let (($x258 (=> $x199 $x209)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000014)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000017)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000014)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfa5c64a8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf1943510)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x061d3058)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf1943513)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfa5c64ab)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf1943510)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfa5c64a8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x061d305b (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x061d305a (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x061d3059 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x061d3058 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!8 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x263 (bvule ?x206 (_ bv4 32))))
 (let (($x78 (= $x263 true)))
 (let (($x82 (= $x78 true)))
 (let (($x252 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var701X)))
 (=> $x172 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x246 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var700X)))
 (= $x172 false)))
 ))
 (let (($x261 (and $x246 $x252)))
 (let (($x85 (= $x261 true)))
 (let (($x41 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var694X) (bvult input.ind-%var694X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x245 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var694X)))
 (= $x245 $x254))))
 ))
 (let (($x173 (forall ((input.ind-%var695X (_ BitVec 32)) )(let ((?x26 (bvadd (bvmul input.ind-%var695X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x26))))
 (let ((?x100 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv2 32))) ?x203)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv3 32))) ?x100)))
 (let ((?x167 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var695X)))
 (let (($x245 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var695X)))
 (=> $x245 (= ?x167 ?x243)))))))))
 ))
 (let (($x225 (and $x173 $x41)))
 (let (($x207 (= $x225 true)))
 (let ((?x195 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x195)))
 (let (($x156 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x156 true)))
 (let (($x10 (= $x122 true)))
 (let (($x249 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x96 (= $x89 true)))
 (let (($x238 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x248 (= $x240 true)))
 (let (($x220 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x27)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x37)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x102)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x110 $x88)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x148 $x143)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x176 $x51)))
 (let (($x77 (not $x183)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x129 $x40)))
 (let (($x127 (and (not $x157) $x77)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x162 $x24)))
 (let (($x94 (not $x48)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x69 $x70)))
 (let (($x187 (and (not $x135) $x94)))
 (let (($x217 (and (and (and (and (and (and $x187 $x127) $x125) $x42) $x144) $x71) $x50)))
 (let (($x229 (and $x217 $x75)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x130 (or false (or false (and (and true (or $x23 $x105)) (or $x155 $x61))))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x230 (and $x131 $x229)))
 (let (($x215 (= $x230 true)))
 (let (($x222 (= $x215 true)))
 (let (($x223 (= $x222 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x44 true)))
 (let (($x109 (= $x101 true)))
 (let (($x166 (= $x109 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x95 true)))
 (let (($x146 (= $x103 true)))
 (let (($x104 (= $x146 true)))
 (let ((?x115 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x115)))
 (let (($x138 (= $x185 true)))
 (let (($x80 (= $x138 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x179)))
 (let (($x59 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x59 true)))
 (let (($x29 (= $x67 true)))
 (let (($x20 (= ?x58 input.dst.llvm-%n)))
 (let (($x38 (= $x20 true)))
 (let (($x151 (= $x38 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x12 (bvsub ?x174 ?x113)))
 (let (($x149 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x12) (bvult ?x174 ?x12))))
 (let (($x47 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x17 (ite $x47 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x62 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvmul (_ bv4 64) ?x62)))
 (let ((?x84 ((_ extract 63 32) ?x123)))
 (let (($x118 (= ?x84 ?x17)))
 (let (($x154 (and $x118 $x149)))
 (let (($x22 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x142 (and $x22 $x154)))
 (let (($x33 (= true $x142)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (=> $x193 $x33)))
 (let (($x60 (= $x57 true)))
 (let (($x28 (= $x60 true)))
 (let (($x169 (= $x28 true)))
 (let (($x16 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x13 (= $x16 true)))
 (let (($x73 (= $x13 true)))
 (let (($x87 (= $x73 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x72 (= $x193 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x83 (and $x53 $x65)))
 (let (($x91 (and $x83 $x87)))
 (let (($x66 (and $x91 $x169)))
 (let (($x93 (and $x66 $x151)))
 (let (($x31 (and $x93 $x29)))
 (let (($x175 (and $x31 $x80)))
 (let (($x106 (and $x175 $x104)))
 (let (($x158 (and $x106 $x166)))
 (let (($x219 (and $x158 $x223)))
 (let (($x234 (and $x219 $x226)))
 (let (($x247 (and $x234 $x248)))
 (let (($x170 (and $x247 $x96)))
 (let (($x5 (and $x170 $x10)))
 (let (($x90 (and $x5 $x207)))
 (let (($x204 (and $x90 $x85)))
 (let (($x255 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (and (not $x255) $x204)))
 (let (($x86 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and $x86 $x216)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x237 (and $x63 $x262)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x7 $x237)))
 (let (($x35 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x174 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x165 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x184 (or false (or false (and (and true (or $x192 $x165)) (or $x126 $x35))))))
 (let (($x15 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x45 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x236 (and $x45 $x231)))
 (let (($x241 (=> $x236 $x82)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x263 (bvule ?x206 (_ bv4 32))))
 (let (($x78 (= $x263 true)))
 (let (($x82 (= $x78 true)))
 (let (($x252 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var701X)))
 (=> $x172 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x246 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x172 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var700X)))
 (= $x172 false)))
 ))
 (let (($x261 (and $x246 $x252)))
 (let (($x85 (= $x261 true)))
 (let (($x41 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var694X) (bvult input.ind-%var694X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x245 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var694X)))
 (= $x245 $x254))))
 ))
 (let (($x173 (forall ((input.ind-%var695X (_ BitVec 32)) )(let ((?x26 (bvadd (bvmul input.ind-%var695X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x26))))
 (let ((?x100 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv2 32))) ?x203)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x26 (_ bv3 32))) ?x100)))
 (let ((?x167 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var695X)))
 (let (($x245 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var695X)))
 (=> $x245 (= ?x167 ?x243)))))))))
 ))
 (let (($x225 (and $x173 $x41)))
 (let (($x207 (= $x225 true)))
 (let ((?x195 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x195)))
 (let (($x156 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x156 true)))
 (let (($x10 (= $x122 true)))
 (let (($x249 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x96 (= $x89 true)))
 (let (($x238 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x248 (= $x240 true)))
 (let (($x220 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x27)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x37)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x102)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (and $x110 $x88)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x148 $x143)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x176 $x51)))
 (let (($x77 (not $x183)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x129 $x40)))
 (let (($x127 (and (not $x157) $x77)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x162 $x24)))
 (let (($x94 (not $x48)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x69 $x70)))
 (let (($x187 (and (not $x135) $x94)))
 (let (($x217 (and (and (and (and (and (and $x187 $x127) $x125) $x42) $x144) $x71) $x50)))
 (let (($x229 (and $x217 $x75)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x130 (or false (or false (and (and true (or $x23 $x105)) (or $x155 $x61))))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x230 (and $x131 $x229)))
 (let (($x215 (= $x230 true)))
 (let (($x222 (= $x215 true)))
 (let (($x223 (= $x222 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x44 true)))
 (let (($x109 (= $x101 true)))
 (let (($x166 (= $x109 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x95 true)))
 (let (($x146 (= $x103 true)))
 (let (($x104 (= $x146 true)))
 (let ((?x115 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x115)))
 (let (($x138 (= $x185 true)))
 (let (($x80 (= $x138 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x179)))
 (let (($x59 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x59 true)))
 (let (($x29 (= $x67 true)))
 (let (($x20 (= ?x58 input.dst.llvm-%n)))
 (let (($x38 (= $x20 true)))
 (let (($x151 (= $x38 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x12 (bvsub ?x174 ?x113)))
 (let (($x149 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x12) (bvult ?x174 ?x12))))
 (let (($x47 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x17 (ite $x47 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x62 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvmul (_ bv4 64) ?x62)))
 (let ((?x84 ((_ extract 63 32) ?x123)))
 (let (($x118 (= ?x84 ?x17)))
 (let (($x154 (and $x118 $x149)))
 (let (($x22 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x142 (and $x22 $x154)))
 (let (($x33 (= true $x142)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (=> $x193 $x33)))
 (let (($x60 (= $x57 true)))
 (let (($x28 (= $x60 true)))
 (let (($x169 (= $x28 true)))
 (let (($x16 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x13 (= $x16 true)))
 (let (($x73 (= $x13 true)))
 (let (($x87 (= $x73 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x72 (= $x193 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x83 (and $x53 $x65)))
 (let (($x91 (and $x83 $x87)))
 (let (($x66 (and $x91 $x169)))
 (let (($x93 (and $x66 $x151)))
 (let (($x31 (and $x93 $x29)))
 (let (($x175 (and $x31 $x80)))
 (let (($x106 (and $x175 $x104)))
 (let (($x158 (and $x106 $x166)))
 (let (($x219 (and $x158 $x223)))
 (let (($x234 (and $x219 $x226)))
 (let (($x247 (and $x234 $x248)))
 (let (($x170 (and $x247 $x96)))
 (let (($x5 (and $x170 $x10)))
 (let (($x90 (and $x5 $x207)))
 (let (($x204 (and $x90 $x85)))
 (let (($x255 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (and (not $x255) $x204)))
 (let (($x86 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and $x86 $x216)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x237 (and $x63 $x262)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x7 $x237)))
 (let (($x35 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x174 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x165 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x184 (or false (or false (and (and true (or $x192 $x165)) (or $x126 $x35))))))
 (let (($x15 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x45 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x236 (and $x45 $x231)))
 (let (($x241 (=> $x236 $x82)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000401)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000401)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000401)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x47cedf78)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xabd7b7f4)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xabd7b7f7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x47cedf7b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xabd7b7f4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x47cedf78)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!8 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x260 (bvule ?x277 (_ bv4294967294 32))))
 (let (($x213 (= $x260 true)))
 (let (($x194 (= $x213 true)))
 (let (($x274 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var749X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var748X)))
 (= $x241 false)))
 ))
 (let (($x273 (and $x180 $x274)))
 (let (($x276 (= $x273 true)))
 (let (($x231 (forall ((input.ind-%var743X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var743X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x172))))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv2 32))) ?x227)))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv3 32))) ?x261)))
 (let ((?x244 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var743X)))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var743X)))
 (=> $x145 (= ?x244 ?x216)))))))))
 ))
 (let (($x26 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var742X) (bvult input.ind-%var742X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var742X)))
 (= $x145 $x264))))
 ))
 (let (($x236 (and $x26 $x231)))
 (let (($x206 (= $x236 true)))
 (let ((?x240 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x240)))
 (let (($x247 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x222 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x223 (= $x222 true)))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x143)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x102)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x171)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (and $x125 $x164)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x137 $x42)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x129 $x40)))
 (let (($x177 (not $x157)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x48 $x94)))
 (let (($x51 (and (not $x187) $x177)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x69 $x70)))
 (let (($x178 (not $x135)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x109 $x166)))
 (let (($x24 (and (not $x131) $x178)))
 (let (($x50 (and (and (and (and (and (and $x24 $x51) $x77) $x114) $x214) $x110) $x88)))
 (let (($x217 (and $x50 $x144)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x147 (or false (or false (and (and true (or $x152 $x161)) (or $x56 $x182))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x27 (and $x130 $x217)))
 (let (($x75 (= $x27 true)))
 (let (($x229 (= $x75 true)))
 (let (($x230 (= $x229 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x103 true)))
 (let (($x104 (= $x146 true)))
 (let (($x106 (= $x104 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x185 true)))
 (let (($x80 (= $x138 true)))
 (let (($x175 (= $x80 true)))
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x29 (= (_ bv0 2) ?x67)))
 (let (($x31 (= $x29 true)))
 (let (($x150 (= $x31 true)))
 (let ((?x60 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x60)))
 (let (($x20 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (= $x20 true)))
 (let (($x151 (= $x38 true)))
 (let (($x169 (= ?x28 input.dst.llvm-%n)))
 (let (($x66 (= $x169 true)))
 (let (($x179 (= $x66 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x47 (bvsub ?x174 ?x113)))
 (let (($x74 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x47) (bvult ?x174 ?x47))))
 (let (($x19 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x123 (ite $x19 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x196 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x196)))
 (let ((?x22 ((_ extract 63 32) ?x68)))
 (let (($x84 (= ?x22 ?x123)))
 (let (($x12 (and $x84 $x74)))
 (let (($x87 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x116 (and $x87 $x12)))
 (let (($x43 (= true $x116)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x193 $x43)))
 (let (($x154 (= $x149 true)))
 (let (($x142 (= $x154 true)))
 (let (($x33 (= $x142 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x83 (= $x65 true)))
 (let (($x72 (= $x193 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x16 (and $x53 $x83)))
 (let (($x57 (and $x16 $x33)))
 (let (($x58 (and $x57 $x179)))
 (let (($x93 (and $x58 $x151)))
 (let (($x115 (and $x93 $x150)))
 (let (($x95 (and $x115 $x175)))
 (let (($x44 (and $x95 $x106)))
 (let (($x215 (and $x44 $x230)))
 (let (($x218 (and $x215 $x220)))
 (let (($x239 (and $x218 $x238)))
 (let (($x89 (and $x239 $x250)))
 (let (($x263 (and $x89 $x206)))
 (let (($x269 (and $x263 $x276)))
 (let (($x14 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (and (not $x14) $x269)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x271 (and $x266 $x211)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x18 $x271)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x272 (and $x46 $x275)))
 (let (($x54 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd ?x174 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x25 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x45 (or false (or false (and (and true (or $x79 $x25)) (or $x9 $x54))))))
 (let (($x7 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x45)))
 (let (($x191 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x45)))
 (let (($x270 (and $x191 $x272)))
 (let (($x205 (=> $x270 $x194)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x260 (bvule ?x277 (_ bv4294967294 32))))
 (let (($x213 (= $x260 true)))
 (let (($x194 (= $x213 true)))
 (let (($x274 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var749X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var748X)))
 (= $x241 false)))
 ))
 (let (($x273 (and $x180 $x274)))
 (let (($x276 (= $x273 true)))
 (let (($x231 (forall ((input.ind-%var743X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var743X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x172))))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv2 32))) ?x227)))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv3 32))) ?x261)))
 (let ((?x244 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var743X)))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var743X)))
 (=> $x145 (= ?x244 ?x216)))))))))
 ))
 (let (($x26 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var742X) (bvult input.ind-%var742X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var742X)))
 (= $x145 $x264))))
 ))
 (let (($x236 (and $x26 $x231)))
 (let (($x206 (= $x236 true)))
 (let ((?x240 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x240)))
 (let (($x247 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x222 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x223 (= $x222 true)))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x143)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x102)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x171)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (and $x125 $x164)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x137 $x42)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x129 $x40)))
 (let (($x177 (not $x157)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x48 $x94)))
 (let (($x51 (and (not $x187) $x177)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x69 $x70)))
 (let (($x178 (not $x135)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x109 $x166)))
 (let (($x24 (and (not $x131) $x178)))
 (let (($x50 (and (and (and (and (and (and $x24 $x51) $x77) $x114) $x214) $x110) $x88)))
 (let (($x217 (and $x50 $x144)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x147 (or false (or false (and (and true (or $x152 $x161)) (or $x56 $x182))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x27 (and $x130 $x217)))
 (let (($x75 (= $x27 true)))
 (let (($x229 (= $x75 true)))
 (let (($x230 (= $x229 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x103 true)))
 (let (($x104 (= $x146 true)))
 (let (($x106 (= $x104 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x185 true)))
 (let (($x80 (= $x138 true)))
 (let (($x175 (= $x80 true)))
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x29 (= (_ bv0 2) ?x67)))
 (let (($x31 (= $x29 true)))
 (let (($x150 (= $x31 true)))
 (let ((?x60 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x60)))
 (let (($x20 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (= $x20 true)))
 (let (($x151 (= $x38 true)))
 (let (($x169 (= ?x28 input.dst.llvm-%n)))
 (let (($x66 (= $x169 true)))
 (let (($x179 (= $x66 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x47 (bvsub ?x174 ?x113)))
 (let (($x74 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x47) (bvult ?x174 ?x47))))
 (let (($x19 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x123 (ite $x19 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x196 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x196)))
 (let ((?x22 ((_ extract 63 32) ?x68)))
 (let (($x84 (= ?x22 ?x123)))
 (let (($x12 (and $x84 $x74)))
 (let (($x87 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x116 (and $x87 $x12)))
 (let (($x43 (= true $x116)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x193 $x43)))
 (let (($x154 (= $x149 true)))
 (let (($x142 (= $x154 true)))
 (let (($x33 (= $x142 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x83 (= $x65 true)))
 (let (($x72 (= $x193 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x16 (and $x53 $x83)))
 (let (($x57 (and $x16 $x33)))
 (let (($x58 (and $x57 $x179)))
 (let (($x93 (and $x58 $x151)))
 (let (($x115 (and $x93 $x150)))
 (let (($x95 (and $x115 $x175)))
 (let (($x44 (and $x95 $x106)))
 (let (($x215 (and $x44 $x230)))
 (let (($x218 (and $x215 $x220)))
 (let (($x239 (and $x218 $x238)))
 (let (($x89 (and $x239 $x250)))
 (let (($x263 (and $x89 $x206)))
 (let (($x269 (and $x263 $x276)))
 (let (($x14 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (and (not $x14) $x269)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x271 (and $x266 $x211)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x18 $x271)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x272 (and $x46 $x275)))
 (let (($x54 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd ?x174 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x25 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x45 (or false (or false (and (and true (or $x79 $x25)) (or $x9 $x54))))))
 (let (($x7 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x45)))
 (let (($x191 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x45)))
 (let (($x270 (and $x191 $x272)))
 (let (($x205 (=> $x270 $x194)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (bvsge ?x198 (_ bv0 32))))
 (let (($x139 (= $x207 true)))
 (let (($x121 (= $x139 true)))
 (let (($x209 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var761X)))
 (=> $x268 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var760X)))
 (= $x268 false)))
 ))
 (let (($x41 (and $x202 $x209)))
 (let (($x251 (= $x41 true)))
 (let (($x101 (forall ((input.ind-%var755X (_ BitVec 32)) )(let ((?x269 (bvadd (bvmul input.ind-%var755X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x269))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv2 32))) ?x272)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv3 32))) ?x260)))
 (let ((?x232 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var755X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var755X)))
 (=> $x264 (= ?x232 ?x205)))))))))
 ))
 (let (($x34 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x204 (and (bvule (_ bv0 32) input.ind-%var754X) (bvult input.ind-%var754X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var754X)))
 (= $x264 $x204))))
 ))
 (let (($x156 (and $x34 $x101)))
 (let (($x133 (= $x156 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x248)))
 (let (($x249 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x226 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x223 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x110)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x141)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (and $x71 $x125)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x114 $x171)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x129 $x40)))
 (let (($x177 (not $x157)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x94 $x187)))
 (let (($x97 (and (not $x176) $x177)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x69 $x70)))
 (let (($x178 (not $x135)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x186 $x181)))
 (let (($x48 (and (not $x162) $x178)))
 (let (($x217 (and (and (and (and (and (and $x48 $x97) $x77) $x127) $x164) $x214) $x148)))
 (let (($x27 (and $x217 $x37)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x109 (or false (or false (and (and true (or $x23 $x105)) (or $x155 $x61))))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x75 (and $x131 $x27)))
 (let (($x229 (= $x75 true)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x103 true)))
 (let (($x104 (= $x146 true)))
 (let (($x106 (= $x104 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x185 true)))
 (let (($x80 (= $x138 true)))
 (let (($x175 (= $x80 true)))
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x29 (= (_ bv0 2) ?x67)))
 (let (($x31 (= $x29 true)))
 (let (($x150 (= $x31 true)))
 (let ((?x60 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x60)))
 (let (($x20 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (= $x20 true)))
 (let (($x151 (= $x38 true)))
 (let (($x169 (= ?x28 input.dst.llvm-%n)))
 (let (($x66 (= $x169 true)))
 (let (($x179 (= $x66 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x107 (bvsub ?x174 ?x113)))
 (let (($x74 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x107) (bvult ?x174 ?x107))))
 (let (($x19 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x123 (ite $x19 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x196 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x196)))
 (let ((?x22 ((_ extract 63 32) ?x68)))
 (let (($x84 (= ?x22 ?x123)))
 (let (($x12 (and $x84 $x74)))
 (let (($x87 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x116 (and $x87 $x12)))
 (let (($x43 (= true $x116)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x193 $x43)))
 (let (($x154 (= $x149 true)))
 (let (($x142 (= $x154 true)))
 (let (($x33 (= $x142 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x83 (= $x65 true)))
 (let (($x72 (= $x193 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x16 (and $x53 $x83)))
 (let (($x57 (and $x16 $x33)))
 (let (($x58 (and $x57 $x179)))
 (let (($x93 (and $x58 $x151)))
 (let (($x115 (and $x93 $x150)))
 (let (($x95 (and $x115 $x175)))
 (let (($x44 (and $x95 $x106)))
 (let (($x222 (and $x44 $x215)))
 (let (($x221 (and $x222 $x218)))
 (let (($x240 (and $x221 $x239)))
 (let (($x195 (and $x240 $x89)))
 (let (($x253 (and $x195 $x133)))
 (let (($x170 (and $x253 $x251)))
 (let (($x267 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x197 (and (not $x267) $x170)))
 (let (($x255 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x255 $x197)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x8 $x225)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x92 $x78)))
 (let (($x184 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x174 (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x126 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x25)))
 (let (($x191 (or false (or false (and (and true (or $x132 $x126)) (or $x11 $x184))))))
 (let (($x46 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x191)))
 (let (($x128 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x191)))
 (let (($x120 (and $x128 $x82)))
 (let (($x199 (=> $x120 $x121)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (bvsge ?x198 (_ bv0 32))))
 (let (($x139 (= $x207 true)))
 (let (($x121 (= $x139 true)))
 (let (($x209 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var761X)))
 (=> $x268 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var760X)))
 (= $x268 false)))
 ))
 (let (($x41 (and $x202 $x209)))
 (let (($x251 (= $x41 true)))
 (let (($x101 (forall ((input.ind-%var755X (_ BitVec 32)) )(let ((?x269 (bvadd (bvmul input.ind-%var755X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x269))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv2 32))) ?x272)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv3 32))) ?x260)))
 (let ((?x232 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var755X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var755X)))
 (=> $x264 (= ?x232 ?x205)))))))))
 ))
 (let (($x34 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x204 (and (bvule (_ bv0 32) input.ind-%var754X) (bvult input.ind-%var754X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var754X)))
 (= $x264 $x204))))
 ))
 (let (($x156 (and $x34 $x101)))
 (let (($x133 (= $x156 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x248)))
 (let (($x249 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x226 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x223 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x110)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x141)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (and $x71 $x125)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x114 $x171)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x129 $x40)))
 (let (($x177 (not $x157)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x94 $x187)))
 (let (($x97 (and (not $x176) $x177)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x69 $x70)))
 (let (($x178 (not $x135)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x186 $x181)))
 (let (($x48 (and (not $x162) $x178)))
 (let (($x217 (and (and (and (and (and (and $x48 $x97) $x77) $x127) $x164) $x214) $x148)))
 (let (($x27 (and $x217 $x37)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x109 (or false (or false (and (and true (or $x23 $x105)) (or $x155 $x61))))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x75 (and $x131 $x27)))
 (let (($x229 (= $x75 true)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x103 true)))
 (let (($x104 (= $x146 true)))
 (let (($x106 (= $x104 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x185 true)))
 (let (($x80 (= $x138 true)))
 (let (($x175 (= $x80 true)))
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x29 (= (_ bv0 2) ?x67)))
 (let (($x31 (= $x29 true)))
 (let (($x150 (= $x31 true)))
 (let ((?x60 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x60)))
 (let (($x20 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (= $x20 true)))
 (let (($x151 (= $x38 true)))
 (let (($x169 (= ?x28 input.dst.llvm-%n)))
 (let (($x66 (= $x169 true)))
 (let (($x179 (= $x66 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x107 (bvsub ?x174 ?x113)))
 (let (($x74 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x107) (bvult ?x174 ?x107))))
 (let (($x19 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x123 (ite $x19 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x196 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x196)))
 (let ((?x22 ((_ extract 63 32) ?x68)))
 (let (($x84 (= ?x22 ?x123)))
 (let (($x12 (and $x84 $x74)))
 (let (($x87 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x116 (and $x87 $x12)))
 (let (($x43 (= true $x116)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x193 $x43)))
 (let (($x154 (= $x149 true)))
 (let (($x142 (= $x154 true)))
 (let (($x33 (= $x142 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x83 (= $x65 true)))
 (let (($x72 (= $x193 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x16 (and $x53 $x83)))
 (let (($x57 (and $x16 $x33)))
 (let (($x58 (and $x57 $x179)))
 (let (($x93 (and $x58 $x151)))
 (let (($x115 (and $x93 $x150)))
 (let (($x95 (and $x115 $x175)))
 (let (($x44 (and $x95 $x106)))
 (let (($x222 (and $x44 $x215)))
 (let (($x221 (and $x222 $x218)))
 (let (($x240 (and $x221 $x239)))
 (let (($x195 (and $x240 $x89)))
 (let (($x253 (and $x195 $x133)))
 (let (($x170 (and $x253 $x251)))
 (let (($x267 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x197 (and (not $x267) $x170)))
 (let (($x255 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x255 $x197)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x8 $x225)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x92 $x78)))
 (let (($x184 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x174 (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x126 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x25)))
 (let (($x191 (or false (or false (and (and true (or $x132 $x126)) (or $x11 $x184))))))
 (let (($x46 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x191)))
 (let (($x128 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x191)))
 (let (($x120 (and $x128 $x82)))
 (let (($x199 (=> $x120 $x121)))
 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 185 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x246 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (bvule ?x246 (_ bv4294967294 32))))
 (let (($x100 (= $x273 true)))
 (let (($x254 (= $x100 true)))
 (let (($x180 (forall ((input.ind-%var773X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var773X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var773X) (_ bv0 32)))))
 ))
 (let (($x216 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var772X)))
 (= $x52 false)))
 ))
 (let (($x265 (and $x216 $x180)))
 (let (($x36 (= $x265 true)))
 (let (($x158 (forall ((input.ind-%var767X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var767X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x170))))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x170 (_ bv2 32))) ?x82)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x170 (_ bv3 32))) ?x207)))
 (let ((?x211 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var767X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var767X)))
 (=> $x204 (= ?x211 ?x199)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var766X) (bvult input.ind-%var766X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var766X)))
 (= $x204 $x194))))
 ))
 (let (($x153 (and $x270 $x158)))
 (let (($x227 (= $x153 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x249 (bvneg ?x247)))
 (let (($x250 (= ?x249 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x250 true)))
 (let (($x195 (= $x89 true)))
 (let (($x234 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x144 (bvsub ?x174 ?x113)))
 (let (($x110 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x144) (bvult ?x174 ?x144))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x42 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x125 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x171 (bvmul (_ bv4 64) ?x125)))
 (let ((?x164 ((_ extract 63 32) ?x171)))
 (let (($x214 (= ?x164 ?x42)))
 (let (($x37 (and $x214 $x110)))
 (let (($x71 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x27 (and $x71 $x37)))
 (let (($x75 (= true $x27)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (=> $x193 $x75)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x222 (= $x215 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x77 (= $x183 true)))
 (let (($x88 (= $x77 true)))
 (let (($x159 (= $x88 true)))
 (let (($x157 (= $x193 true)))
 (let (($x177 (= $x157 true)))
 (let (($x97 (= $x177 true)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x181)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x131)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (and $x182 $x61)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x56 $x30)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x146 $x104)))
 (let (($x44 (not $x106)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x175 $x95)))
 (let (($x152 (and (not $x103) $x44)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x31 $x150)))
 (let (($x185 (not $x115)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x149 $x154)))
 (let (($x80 (and (not $x29) $x185)))
 (let (($x48 (and (and (and (and (and (and $x80 $x152) $x161) $x105) $x147) $x109) $x186)))
 (let (($x94 (and $x48 $x162)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x93 (or false (or false (and (and true (or $x60 $x28)) (or $x179 $x58))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x187 (and $x67 $x94)))
 (let (($x176 (= $x187 true)))
 (let (($x51 (= $x176 true)))
 (let (($x129 (= $x51 true)))
 (let (($x17 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x118 (= $x17 true)))
 (let (($x74 (= $x118 true)))
 (let (($x12 (= $x74 true)))
 (let ((?x62 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x123 (= (_ bv0 2) ?x62)))
 (let (($x84 (= $x123 true)))
 (let (($x47 (= $x84 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x91 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (= $x91 true)))
 (let (($x68 (= $x196 true)))
 (let (($x16 (= ?x83 input.dst.llvm-%n)))
 (let (($x13 (= $x16 true)))
 (let (($x73 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x87 (and $x98 $x73)))
 (let (($x22 (and $x87 $x68)))
 (let (($x107 (and $x22 $x47)))
 (let (($x116 (and $x107 $x12)))
 (let (($x40 (and $x116 $x129)))
 (let (($x102 (and $x40 $x97)))
 (let (($x127 (and $x102 $x159)))
 (let (($x223 (and $x127 $x222)))
 (let (($x226 (and $x223 $x221)))
 (let (($x248 (and $x226 $x240)))
 (let (($x245 (and $x248 $x195)))
 (let (($x96 (and $x245 $x227)))
 (let (($x167 (and $x96 $x36)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and (not $x5) $x167)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x274 (and $x14 $x90)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x212 (and $x86 $x274)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x76 (and $x63 $x212)))
 (let (($x45 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd ?x174 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x9 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x128 (or false (or false (and (and true (or $x99 $x9)) (or $x15 $x45))))))
 (let (($x92 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x128)))
 (let (($x134 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x128)))
 (let (($x122 (and $x134 $x76)))
 (let (($x243 (=> $x122 $x254)))
 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x246 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (bvule ?x246 (_ bv4294967294 32))))
 (let (($x100 (= $x273 true)))
 (let (($x254 (= $x100 true)))
 (let (($x180 (forall ((input.ind-%var773X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var773X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var773X) (_ bv0 32)))))
 ))
 (let (($x216 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var772X)))
 (= $x52 false)))
 ))
 (let (($x265 (and $x216 $x180)))
 (let (($x36 (= $x265 true)))
 (let (($x158 (forall ((input.ind-%var767X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var767X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x170))))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x170 (_ bv2 32))) ?x82)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x170 (_ bv3 32))) ?x207)))
 (let ((?x211 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var767X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var767X)))
 (=> $x204 (= ?x211 ?x199)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var766X) (bvult input.ind-%var766X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var766X)))
 (= $x204 $x194))))
 ))
 (let (($x153 (and $x270 $x158)))
 (let (($x227 (= $x153 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x249 (bvneg ?x247)))
 (let (($x250 (= ?x249 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x250 true)))
 (let (($x195 (= $x89 true)))
 (let (($x234 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x144 (bvsub ?x174 ?x113)))
 (let (($x110 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x144) (bvult ?x174 ?x144))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x42 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x125 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x171 (bvmul (_ bv4 64) ?x125)))
 (let ((?x164 ((_ extract 63 32) ?x171)))
 (let (($x214 (= ?x164 ?x42)))
 (let (($x37 (and $x214 $x110)))
 (let (($x71 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x27 (and $x71 $x37)))
 (let (($x75 (= true $x27)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (=> $x193 $x75)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x222 (= $x215 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x77 (= $x183 true)))
 (let (($x88 (= $x77 true)))
 (let (($x159 (= $x88 true)))
 (let (($x157 (= $x193 true)))
 (let (($x177 (= $x157 true)))
 (let (($x97 (= $x177 true)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x181)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x131)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (and $x182 $x61)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x56 $x30)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x146 $x104)))
 (let (($x44 (not $x106)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x175 $x95)))
 (let (($x152 (and (not $x103) $x44)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x31 $x150)))
 (let (($x185 (not $x115)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x149 $x154)))
 (let (($x80 (and (not $x29) $x185)))
 (let (($x48 (and (and (and (and (and (and $x80 $x152) $x161) $x105) $x147) $x109) $x186)))
 (let (($x94 (and $x48 $x162)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x93 (or false (or false (and (and true (or $x60 $x28)) (or $x179 $x58))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x187 (and $x67 $x94)))
 (let (($x176 (= $x187 true)))
 (let (($x51 (= $x176 true)))
 (let (($x129 (= $x51 true)))
 (let (($x17 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x118 (= $x17 true)))
 (let (($x74 (= $x118 true)))
 (let (($x12 (= $x74 true)))
 (let ((?x62 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x123 (= (_ bv0 2) ?x62)))
 (let (($x84 (= $x123 true)))
 (let (($x47 (= $x84 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x91 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (= $x91 true)))
 (let (($x68 (= $x196 true)))
 (let (($x16 (= ?x83 input.dst.llvm-%n)))
 (let (($x13 (= $x16 true)))
 (let (($x73 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x87 (and $x98 $x73)))
 (let (($x22 (and $x87 $x68)))
 (let (($x107 (and $x22 $x47)))
 (let (($x116 (and $x107 $x12)))
 (let (($x40 (and $x116 $x129)))
 (let (($x102 (and $x40 $x97)))
 (let (($x127 (and $x102 $x159)))
 (let (($x223 (and $x127 $x222)))
 (let (($x226 (and $x223 $x221)))
 (let (($x248 (and $x226 $x240)))
 (let (($x245 (and $x248 $x195)))
 (let (($x96 (and $x245 $x227)))
 (let (($x167 (and $x96 $x36)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and (not $x5) $x167)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x274 (and $x14 $x90)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x212 (and $x86 $x274)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x76 (and $x63 $x212)))
 (let (($x45 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd ?x174 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x9 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x128 (or false (or false (and (and true (or $x99 $x9)) (or $x15 $x45))))))
 (let (($x92 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x128)))
 (let (($x134 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x128)))
 (let (($x122 (and $x134 $x76)))
 (let (($x243 (=> $x122 $x254)))
 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x41 (bvsge ?x271 (_ bv0 32))))
 (let (($x231 (= $x41 true)))
 (let (($x224 (= $x231 true)))
 (let (($x202 (forall ((input.ind-%var785X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var785X)))
 (=> $x275 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var785X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var784X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var784X)))
 (= $x275 false)))
 ))
 (let (($x160 (and $x205 $x202)))
 (let (($x21 (= $x160 true)))
 (let (($x43 (forall ((input.ind-%var779X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var779X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x167))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv2 32))) ?x76)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv3 32))) ?x273)))
 (let ((?x197 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var779X)))
 (let (($x194 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var779X)))
 (=> $x194 (= ?x197 ?x243)))))))))
 ))
 (let (($x120 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var778X) (bvult input.ind-%var778X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x194 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var778X)))
 (= $x194 $x121))))
 ))
 (let (($x119 (and $x120 $x43)))
 (let (($x272 (= $x119 true)))
 (let ((?x249 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x249)))
 (let (($x89 (= ?x250 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x89 true)))
 (let (($x245 (= $x195 true)))
 (let (($x238 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x248 (= $x240 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x144 (bvsub ?x174 ?x113)))
 (let (($x37 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x144) (bvult ?x174 ?x144))))
 (let (($x42 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x42 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x171 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvmul (_ bv4 64) ?x171)))
 (let ((?x143 ((_ extract 63 32) ?x164)))
 (let (($x141 (= ?x143 ?x214)))
 (let (($x27 (and $x141 $x37)))
 (let (($x137 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x75 (and $x137 $x27)))
 (let (($x229 (= true $x75)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x230 (=> $x193 $x229)))
 (let (($x215 (= $x230 true)))
 (let (($x222 (= $x215 true)))
 (let (($x223 (= $x222 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x88 (= $x77 true)))
 (let (($x159 (= $x88 true)))
 (let (($x127 (= $x159 true)))
 (let (($x177 (= $x193 true)))
 (let (($x97 (= $x177 true)))
 (let (($x102 (= $x97 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x109)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x135)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (and $x70 $x182)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x105 $x155)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x146 $x104)))
 (let (($x44 (not $x106)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x95 $x103)))
 (let (($x24 (and (not $x188) $x44)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x31 $x150)))
 (let (($x185 (not $x115)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x33 $x59)))
 (let (($x175 (and (not $x138) $x185)))
 (let (($x94 (and (and (and (and (and (and $x175 $x24) $x161) $x23) $x61) $x147) $x130)))
 (let (($x187 (and $x94 $x178)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x149 (or false (or false (and (and true (or $x169 $x66)) (or $x20 $x38))))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x149)))
 (let (($x176 (and $x29 $x187)))
 (let (($x51 (= $x176 true)))
 (let (($x129 (= $x51 true)))
 (let (($x40 (= $x129 true)))
 (let (($x17 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x118 (= $x17 true)))
 (let (($x74 (= $x118 true)))
 (let (($x12 (= $x74 true)))
 (let ((?x62 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x123 (= (_ bv0 2) ?x62)))
 (let (($x84 (= $x123 true)))
 (let (($x47 (= $x84 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x91 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (= $x91 true)))
 (let (($x68 (= $x196 true)))
 (let (($x16 (= ?x83 input.dst.llvm-%n)))
 (let (($x13 (= $x16 true)))
 (let (($x73 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x87 (and $x98 $x73)))
 (let (($x22 (and $x87 $x68)))
 (let (($x107 (and $x22 $x47)))
 (let (($x116 (and $x107 $x12)))
 (let (($x157 (and $x116 $x40)))
 (let (($x183 (and $x157 $x102)))
 (let (($x50 (and $x183 $x127)))
 (let (($x219 (and $x50 $x223)))
 (let (($x234 (and $x219 $x226)))
 (let (($x247 (and $x234 $x248)))
 (let (($x172 (and $x247 $x245)))
 (let (($x145 (and $x172 $x272)))
 (let (($x85 (and $x145 $x21)))
 (let (($x257 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and (not $x257) $x85)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and $x267 $x276)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x258 (and $x266 $x209)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x252 (and $x18 $x258)))
 (let (($x191 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd ?x174 (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x11 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x134 (or false (or false (and (and true (or $x35 $x11)) (or $x7 $x191))))))
 (let (($x63 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x134)))
 (let (($x165 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x134)))
 (let (($x26 (and $x165 $x252)))
 (let (($x236 (=> $x26 $x224)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x41 (bvsge ?x271 (_ bv0 32))))
 (let (($x231 (= $x41 true)))
 (let (($x224 (= $x231 true)))
 (let (($x202 (forall ((input.ind-%var785X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var785X)))
 (=> $x275 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var785X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var784X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var784X)))
 (= $x275 false)))
 ))
 (let (($x160 (and $x205 $x202)))
 (let (($x21 (= $x160 true)))
 (let (($x43 (forall ((input.ind-%var779X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var779X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x167))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv2 32))) ?x76)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv3 32))) ?x273)))
 (let ((?x197 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var779X)))
 (let (($x194 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var779X)))
 (=> $x194 (= ?x197 ?x243)))))))))
 ))
 (let (($x120 (forall ((input.ind-%var778X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var778X) (bvult input.ind-%var778X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x194 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var778X)))
 (= $x194 $x121))))
 ))
 (let (($x119 (and $x120 $x43)))
 (let (($x272 (= $x119 true)))
 (let ((?x249 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x249)))
 (let (($x89 (= ?x250 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x89 true)))
 (let (($x245 (= $x195 true)))
 (let (($x238 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x248 (= $x240 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x144 (bvsub ?x174 ?x113)))
 (let (($x37 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x144) (bvult ?x174 ?x144))))
 (let (($x42 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x42 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x171 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvmul (_ bv4 64) ?x171)))
 (let ((?x143 ((_ extract 63 32) ?x164)))
 (let (($x141 (= ?x143 ?x214)))
 (let (($x27 (and $x141 $x37)))
 (let (($x137 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x75 (and $x137 $x27)))
 (let (($x229 (= true $x75)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x230 (=> $x193 $x229)))
 (let (($x215 (= $x230 true)))
 (let (($x222 (= $x215 true)))
 (let (($x223 (= $x222 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x88 (= $x77 true)))
 (let (($x159 (= $x88 true)))
 (let (($x127 (= $x159 true)))
 (let (($x177 (= $x193 true)))
 (let (($x97 (= $x177 true)))
 (let (($x102 (= $x97 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x109)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x135)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (and $x70 $x182)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x105 $x155)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x146 $x104)))
 (let (($x44 (not $x106)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x95 $x103)))
 (let (($x24 (and (not $x188) $x44)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x31 $x150)))
 (let (($x185 (not $x115)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x33 $x59)))
 (let (($x175 (and (not $x138) $x185)))
 (let (($x94 (and (and (and (and (and (and $x175 $x24) $x161) $x23) $x61) $x147) $x130)))
 (let (($x187 (and $x94 $x178)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x149 (or false (or false (and (and true (or $x169 $x66)) (or $x20 $x38))))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x149)))
 (let (($x176 (and $x29 $x187)))
 (let (($x51 (= $x176 true)))
 (let (($x129 (= $x51 true)))
 (let (($x40 (= $x129 true)))
 (let (($x17 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x118 (= $x17 true)))
 (let (($x74 (= $x118 true)))
 (let (($x12 (= $x74 true)))
 (let ((?x62 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x123 (= (_ bv0 2) ?x62)))
 (let (($x84 (= $x123 true)))
 (let (($x47 (= $x84 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x91 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (= $x91 true)))
 (let (($x68 (= $x196 true)))
 (let (($x16 (= ?x83 input.dst.llvm-%n)))
 (let (($x13 (= $x16 true)))
 (let (($x73 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x87 (and $x98 $x73)))
 (let (($x22 (and $x87 $x68)))
 (let (($x107 (and $x22 $x47)))
 (let (($x116 (and $x107 $x12)))
 (let (($x157 (and $x116 $x40)))
 (let (($x183 (and $x157 $x102)))
 (let (($x50 (and $x183 $x127)))
 (let (($x219 (and $x50 $x223)))
 (let (($x234 (and $x219 $x226)))
 (let (($x247 (and $x234 $x248)))
 (let (($x172 (and $x247 $x245)))
 (let (($x145 (and $x172 $x272)))
 (let (($x85 (and $x145 $x21)))
 (let (($x257 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and (not $x257) $x85)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and $x267 $x276)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x258 (and $x266 $x209)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x252 (and $x18 $x258)))
 (let (($x191 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd ?x174 (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x11 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x134 (or false (or false (and (and true (or $x35 $x11)) (or $x7 $x191))))))
 (let (($x63 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x134)))
 (let (($x165 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x134)))
 (let (($x26 (and $x165 $x252)))
 (let (($x236 (=> $x26 $x224)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x265 (bvule ?x225 input.dst.llvm-%n)))
 (let (($x101 (= $x265 true)))
 (let (($x173 (= $x101 true)))
 (let (($x216 (forall ((input.ind-%var797X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x78 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var797X) (_ bv0 32)))))
 ))
 (let (($x199 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x78 false)))
 ))
 (let (($x206 (and $x199 $x216)))
 (let (($x203 (= $x206 true)))
 (let (($x142 (forall ((input.ind-%var791X (_ BitVec 32)) )(let ((?x85 (bvadd (bvmul input.ind-%var791X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x85))))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv2 32))) ?x252)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv3 32))) ?x41)))
 (let ((?x90 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var791X)))
 (let (($x121 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var791X)))
 (=> $x121 (= ?x90 ?x236)))))))))
 ))
 (let (($x122 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var790X) (bvult input.ind-%var790X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x121 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var790X)))
 (= $x121 $x254))))
 ))
 (let (($x263 (and $x122 $x142)))
 (let (($x82 (= $x263 true)))
 (let ((?x250 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x250)))
 (let (($x195 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x195 true)))
 (let (($x172 (= $x245 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x240 (= ?x83 input.dst.llvm-%n)))
 (let (($x248 (= $x240 true)))
 (let (($x247 (= $x248 true)))
 (let (($x221 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (= $x222 true)))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x42 (bvsub ?x174 ?x113)))
 (let (($x144 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x42) (bvult ?x174 ?x42))))
 (let (($x171 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x164 (ite $x171 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x71 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x137 (bvmul (_ bv4 64) ?x71)))
 (let ((?x125 ((_ extract 63 32) ?x137)))
 (let (($x143 (= ?x125 ?x164)))
 (let (($x217 (and $x143 $x144)))
 (let (($x50 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x110 (and $x50 $x217)))
 (let (($x37 (= true $x110)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (=> $x193 $x37)))
 (let (($x75 (= $x27 true)))
 (let (($x229 (= $x75 true)))
 (let (($x230 (= $x229 true)))
 (let (($x97 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x102 (= $x97 true)))
 (let (($x183 (= $x102 true)))
 (let (($x77 (= $x183 true)))
 (let (($x129 (= $x193 true)))
 (let (($x40 (= $x129 true)))
 (let (($x157 (= $x40 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x155)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x56)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x186)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x161 $x69)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x166 $x23)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x95 $x103)))
 (let (($x152 (not $x188)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x115 $x185)))
 (let (($x104 (and (not $x175) $x152)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x33 $x59)))
 (let (($x80 (not $x138)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x74 $x12)))
 (let (($x150 (and (not $x29) $x80)))
 (let (($x130 (and (and (and (and (and (and $x150 $x104) $x44) $x131) $x48) $x70) $x182)))
 (let (($x94 (and $x130 $x61)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x93 (or false (or false (and (and true (or $x154 $x28)) (or $x179 $x58))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x109 (and $x149 $x94)))
 (let (($x178 (= $x109 true)))
 (let (($x187 (= $x178 true)))
 (let (($x176 (= $x187 true)))
 (let (($x123 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x84 (= $x123 true)))
 (let (($x47 (= $x84 true)))
 (let (($x107 (= $x47 true)))
 (let ((?x196 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x196)))
 (let (($x22 (= $x68 true)))
 (let (($x19 (= $x22 true)))
 (let (($x16 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x16 true)))
 (let (($x73 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x87 (and $x98 $x73)))
 (let (($x62 (and $x87 $x19)))
 (let (($x17 (and $x62 $x107)))
 (let (($x51 (and $x17 $x176)))
 (let (($x177 (and $x51 $x157)))
 (let (($x88 (and $x177 $x77)))
 (let (($x215 (and $x88 $x230)))
 (let (($x218 (and $x215 $x220)))
 (let (($x239 (and $x218 $x238)))
 (let (($x249 (and $x239 $x247)))
 (let (($x269 (and $x249 $x172)))
 (let (($x264 (and $x269 $x82)))
 (let (($x213 (and $x264 $x203)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (and (not $x261) $x213)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (and $x5 $x251)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x255 $x180)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x8 $x189)))
 (let (($x128 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd ?x174 (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x15 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x11)))
 (let (($x165 (or false (or false (and (and true (or $x54 $x15)) (or $x46 $x128))))))
 (let (($x18 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x165)))
 (let (($x25 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x165)))
 (let (($x34 (and $x25 $x277)))
 (let (($x156 (=> $x34 $x173)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x265 (bvule ?x225 input.dst.llvm-%n)))
 (let (($x101 (= $x265 true)))
 (let (($x173 (= $x101 true)))
 (let (($x216 (forall ((input.ind-%var797X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x78 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var797X) (_ bv0 32)))))
 ))
 (let (($x199 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x78 false)))
 ))
 (let (($x206 (and $x199 $x216)))
 (let (($x203 (= $x206 true)))
 (let (($x142 (forall ((input.ind-%var791X (_ BitVec 32)) )(let ((?x85 (bvadd (bvmul input.ind-%var791X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x85))))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv2 32))) ?x252)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv3 32))) ?x41)))
 (let ((?x90 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var791X)))
 (let (($x121 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var791X)))
 (=> $x121 (= ?x90 ?x236)))))))))
 ))
 (let (($x122 (forall ((input.ind-%var790X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var790X) (bvult input.ind-%var790X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x121 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var790X)))
 (= $x121 $x254))))
 ))
 (let (($x263 (and $x122 $x142)))
 (let (($x82 (= $x263 true)))
 (let ((?x250 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x250)))
 (let (($x195 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x195 true)))
 (let (($x172 (= $x245 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x240 (= ?x83 input.dst.llvm-%n)))
 (let (($x248 (= $x240 true)))
 (let (($x247 (= $x248 true)))
 (let (($x221 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (= $x222 true)))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x42 (bvsub ?x174 ?x113)))
 (let (($x144 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x42) (bvult ?x174 ?x42))))
 (let (($x171 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x164 (ite $x171 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x71 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x137 (bvmul (_ bv4 64) ?x71)))
 (let ((?x125 ((_ extract 63 32) ?x137)))
 (let (($x143 (= ?x125 ?x164)))
 (let (($x217 (and $x143 $x144)))
 (let (($x50 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x110 (and $x50 $x217)))
 (let (($x37 (= true $x110)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (=> $x193 $x37)))
 (let (($x75 (= $x27 true)))
 (let (($x229 (= $x75 true)))
 (let (($x230 (= $x229 true)))
 (let (($x97 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x102 (= $x97 true)))
 (let (($x183 (= $x102 true)))
 (let (($x77 (= $x183 true)))
 (let (($x129 (= $x193 true)))
 (let (($x40 (= $x129 true)))
 (let (($x157 (= $x40 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x155)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x56)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x186)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x161 $x69)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x166 $x23)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x95 $x103)))
 (let (($x152 (not $x188)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x115 $x185)))
 (let (($x104 (and (not $x175) $x152)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x33 $x59)))
 (let (($x80 (not $x138)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x74 $x12)))
 (let (($x150 (and (not $x29) $x80)))
 (let (($x130 (and (and (and (and (and (and $x150 $x104) $x44) $x131) $x48) $x70) $x182)))
 (let (($x94 (and $x130 $x61)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x93 (or false (or false (and (and true (or $x154 $x28)) (or $x179 $x58))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x109 (and $x149 $x94)))
 (let (($x178 (= $x109 true)))
 (let (($x187 (= $x178 true)))
 (let (($x176 (= $x187 true)))
 (let (($x123 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x84 (= $x123 true)))
 (let (($x47 (= $x84 true)))
 (let (($x107 (= $x47 true)))
 (let ((?x196 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x196)))
 (let (($x22 (= $x68 true)))
 (let (($x19 (= $x22 true)))
 (let (($x16 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x16 true)))
 (let (($x73 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x87 (and $x98 $x73)))
 (let (($x62 (and $x87 $x19)))
 (let (($x17 (and $x62 $x107)))
 (let (($x51 (and $x17 $x176)))
 (let (($x177 (and $x51 $x157)))
 (let (($x88 (and $x177 $x77)))
 (let (($x215 (and $x88 $x230)))
 (let (($x218 (and $x215 $x220)))
 (let (($x239 (and $x218 $x238)))
 (let (($x249 (and $x239 $x247)))
 (let (($x269 (and $x249 $x172)))
 (let (($x264 (and $x269 $x82)))
 (let (($x213 (and $x264 $x203)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (and (not $x261) $x213)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (and $x5 $x251)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x255 $x180)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x8 $x189)))
 (let (($x128 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd ?x174 (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x15 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x11)))
 (let (($x165 (or false (or false (and (and true (or $x54 $x15)) (or $x46 $x128))))))
 (let (($x18 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x165)))
 (let (($x25 (=> (and $x193 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x165)))
 (let (($x34 (and $x25 $x277)))
 (let (($x156 (=> $x34 $x173)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x320 (forall ((input.ind-%var825X (_ BitVec 32)) )(let ((?x213 (bvadd (bvmul input.ind-%var825X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x15 (bvadd ?x174 (_ bv3 32))))
 (let ((?x287 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x174 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x290 (store ?x287 (bvadd ?x174 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x293 (store ?x290 (bvadd ?x174 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x295 (store ?x293 ?x15 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x314 (concat (select ?x295 (bvadd ?x213 (_ bv2 32))) (concat (select ?x295 (bvadd ?x213 (_ bv1 32))) (select ?x295 ?x213)))))
 (let ((?x276 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var825X)))
 (let (($x256 (= input.ind-%var825X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x318 (= (ite $x256 input.spec-%var-i-0.L3%6%bbentry ?x276) (concat (select ?x295 (bvadd ?x213 (_ bv3 32))) ?x314))))
 (let (($x254 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var825X)))
 (let (($x39 (or $x254 $x256)))
 (=> $x39 $x318))))))))))))))))
 ))
 (let (($x259 (forall ((input.ind-%var824X (_ BitVec 32)) )(let (($x231 (bvule (_ bv0 32) input.ind-%var824X)))
 (let (($x235 (and $x231 (bvult input.ind-%var824X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x256 (= input.ind-%var824X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x254 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var824X)))
 (let (($x39 (or $x254 $x256)))
 (= $x39 $x235)))))))
 ))
 (let (($x321 (and $x259 $x320)))
 (let (($x274 (= true true)))
 (let (($x322 (and $x274 $x321)))
 (let (($x323 (= $x322 true)))
 (let (($x205 (forall ((input.ind-%var813X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var813X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var813X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var812X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var812X)))
 (= $x212 false)))
 ))
 (let (($x133 (and $x243 $x205)))
 (let (($x237 (= $x133 true)))
 (let (($x118 (forall ((input.ind-%var807X (_ BitVec 32)) )(let ((?x213 (bvadd (bvmul input.ind-%var807X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x213))))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv2 32))) ?x277)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv3 32))) ?x265)))
 (let ((?x276 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var807X)))
 (let (($x254 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var807X)))
 (=> $x254 (= ?x276 ?x156)))))))))
 ))
 (let (($x26 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x231 (bvule (_ bv0 32) input.ind-%var806X)))
 (let (($x254 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var806X)))
 (= $x254 (and $x231 (bvult input.ind-%var806X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x253 (and $x26 $x118)))
 (let (($x76 (= $x253 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x89)))
 (let (($x245 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x245 true)))
 (let (($x269 (= $x172 true)))
 (let ((?x240 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x248 (= (_ bv0 2) ?x240)))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x215 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x215 true)))
 (let (($x223 (= $x222 true)))
 (let (($x219 (= $x223 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (= $x37 true)))
 (let (($x75 (= $x27 true)))
 (let (($x229 (= $x75 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x71 (bvsub ?x174 ?x113)))
 (let (($x164 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x71) (bvult ?x174 ?x71))))
 (let (($x127 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x50 (ite $x127 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x77 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvmul (_ bv4 64) ?x77)))
 (let ((?x159 ((_ extract 63 32) ?x88)))
 (let (($x114 (= ?x159 ?x50)))
 (let (($x143 (and $x114 $x164)))
 (let (($x102 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x214 (and $x102 $x143)))
 (let (($x42 (= true $x214)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (=> $x190 $x42)))
 (let (($x148 (= $x141 true)))
 (let (($x144 (= $x148 true)))
 (let (($x217 (= $x144 true)))
 (let (($x176 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x176 true)))
 (let (($x129 (= $x51 true)))
 (let (($x40 (= $x129 true)))
 (let (($x61 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x94 (= $x61 true)))
 (let (($x109 (= $x94 true)))
 (let (($x178 (= $x109 true)))
 (let (($x135 (= $x190 true)))
 (let (($x56 (= $x135 true)))
 (let (($x182 (= $x56 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x44)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x181)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x146)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x175 $x95)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x185 $x103)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x74 $x12)))
 (let (($x31 (not $x29)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x151 $x93)))
 (let (($x59 (and (not $x149) $x31)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x169 $x66)))
 (let (($x58 (not $x179)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x87 $x91)))
 (let (($x38 (and (not $x28) $x58)))
 (let (($x186 (and (and (and (and (and (and $x38 $x59) $x80) $x115) $x188) $x104) $x106)))
 (let (($x69 (and $x186 $x30)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x67 (or false (or false (and (and true (or $x19 $x62)) (or $x47 $x107))))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x23 (and $x154 $x69)))
 (let (($x48 (= $x23 true)))
 (let (($x162 (= $x48 true)))
 (let (($x105 (= $x162 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x65 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x65 true)))
 (let (($x16 (= $x83 true)))
 (let (($x64 (= ?x53 input.dst.llvm-%n)))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x13 (and $x81 $x16)))
 (let (($x70 (and $x13 $x105)))
 (let (($x130 (and $x70 $x182)))
 (let (($x187 (and $x130 $x178)))
 (let (($x157 (and $x187 $x40)))
 (let (($x110 (and $x157 $x217)))
 (let (($x230 (and $x110 $x229)))
 (let (($x220 (and $x230 $x219)))
 (let (($x238 (and $x220 $x234)))
 (let (($x250 (and $x238 $x249)))
 (let (($x170 (and $x250 $x269)))
 (let (($x204 (and $x170 $x76)))
 (let (($x139 (and $x204 $x237)))
 (let (($x260 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (and (not $x260) $x139)))
 (let (($x257 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x202 (and $x257 $x36)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x14 $x202)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x198 (and $x86 $x10)))
 (let (($x134 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd ?x174 (_ bv3 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x7 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x25 (or false (or false (and (and true (or $x184 $x7)) (or $x92 $x134))))))
 (let (($x8 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x126 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x270 (and $x126 $x198)))
 (let (($x324 (=> $x270 $x323)))
 (not $x324)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x320 (forall ((input.ind-%var825X (_ BitVec 32)) )(let ((?x213 (bvadd (bvmul input.ind-%var825X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x15 (bvadd ?x174 (_ bv3 32))))
 (let ((?x287 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x174 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x290 (store ?x287 (bvadd ?x174 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x293 (store ?x290 (bvadd ?x174 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x295 (store ?x293 ?x15 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x314 (concat (select ?x295 (bvadd ?x213 (_ bv2 32))) (concat (select ?x295 (bvadd ?x213 (_ bv1 32))) (select ?x295 ?x213)))))
 (let ((?x276 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var825X)))
 (let (($x256 (= input.ind-%var825X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x318 (= (ite $x256 input.spec-%var-i-0.L3%6%bbentry ?x276) (concat (select ?x295 (bvadd ?x213 (_ bv3 32))) ?x314))))
 (let (($x254 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var825X)))
 (let (($x39 (or $x254 $x256)))
 (=> $x39 $x318))))))))))))))))
 ))
 (let (($x259 (forall ((input.ind-%var824X (_ BitVec 32)) )(let (($x231 (bvule (_ bv0 32) input.ind-%var824X)))
 (let (($x235 (and $x231 (bvult input.ind-%var824X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x256 (= input.ind-%var824X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x254 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var824X)))
 (let (($x39 (or $x254 $x256)))
 (= $x39 $x235)))))))
 ))
 (let (($x321 (and $x259 $x320)))
 (let (($x274 (= true true)))
 (let (($x322 (and $x274 $x321)))
 (let (($x323 (= $x322 true)))
 (let (($x205 (forall ((input.ind-%var813X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var813X)))
 (=> $x212 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var813X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var812X (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var812X)))
 (= $x212 false)))
 ))
 (let (($x133 (and $x243 $x205)))
 (let (($x237 (= $x133 true)))
 (let (($x118 (forall ((input.ind-%var807X (_ BitVec 32)) )(let ((?x213 (bvadd (bvmul input.ind-%var807X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x213))))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv2 32))) ?x277)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv3 32))) ?x265)))
 (let ((?x276 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var807X)))
 (let (($x254 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var807X)))
 (=> $x254 (= ?x276 ?x156)))))))))
 ))
 (let (($x26 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x231 (bvule (_ bv0 32) input.ind-%var806X)))
 (let (($x254 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var806X)))
 (= $x254 (and $x231 (bvult input.ind-%var806X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x253 (and $x26 $x118)))
 (let (($x76 (= $x253 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x89)))
 (let (($x245 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x245 true)))
 (let (($x269 (= $x172 true)))
 (let ((?x240 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x248 (= (_ bv0 2) ?x240)))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x215 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x215 true)))
 (let (($x223 (= $x222 true)))
 (let (($x219 (= $x223 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (= $x37 true)))
 (let (($x75 (= $x27 true)))
 (let (($x229 (= $x75 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x71 (bvsub ?x174 ?x113)))
 (let (($x164 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x71) (bvult ?x174 ?x71))))
 (let (($x127 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x50 (ite $x127 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x77 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvmul (_ bv4 64) ?x77)))
 (let ((?x159 ((_ extract 63 32) ?x88)))
 (let (($x114 (= ?x159 ?x50)))
 (let (($x143 (and $x114 $x164)))
 (let (($x102 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x214 (and $x102 $x143)))
 (let (($x42 (= true $x214)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (=> $x190 $x42)))
 (let (($x148 (= $x141 true)))
 (let (($x144 (= $x148 true)))
 (let (($x217 (= $x144 true)))
 (let (($x176 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x176 true)))
 (let (($x129 (= $x51 true)))
 (let (($x40 (= $x129 true)))
 (let (($x61 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x94 (= $x61 true)))
 (let (($x109 (= $x94 true)))
 (let (($x178 (= $x109 true)))
 (let (($x135 (= $x190 true)))
 (let (($x56 (= $x135 true)))
 (let (($x182 (= $x56 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x44)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x181)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x146)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x175 $x95)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x185 $x103)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x74 $x12)))
 (let (($x31 (not $x29)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x151 $x93)))
 (let (($x59 (and (not $x149) $x31)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x169 $x66)))
 (let (($x58 (not $x179)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x87 $x91)))
 (let (($x38 (and (not $x28) $x58)))
 (let (($x186 (and (and (and (and (and (and $x38 $x59) $x80) $x115) $x188) $x104) $x106)))
 (let (($x69 (and $x186 $x30)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x67 (or false (or false (and (and true (or $x19 $x62)) (or $x47 $x107))))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x23 (and $x154 $x69)))
 (let (($x48 (= $x23 true)))
 (let (($x162 (= $x48 true)))
 (let (($x105 (= $x162 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x65 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x65 true)))
 (let (($x16 (= $x83 true)))
 (let (($x64 (= ?x53 input.dst.llvm-%n)))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x13 (and $x81 $x16)))
 (let (($x70 (and $x13 $x105)))
 (let (($x130 (and $x70 $x182)))
 (let (($x187 (and $x130 $x178)))
 (let (($x157 (and $x187 $x40)))
 (let (($x110 (and $x157 $x217)))
 (let (($x230 (and $x110 $x229)))
 (let (($x220 (and $x230 $x219)))
 (let (($x238 (and $x220 $x234)))
 (let (($x250 (and $x238 $x249)))
 (let (($x170 (and $x250 $x269)))
 (let (($x204 (and $x170 $x76)))
 (let (($x139 (and $x204 $x237)))
 (let (($x260 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (and (not $x260) $x139)))
 (let (($x257 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x202 (and $x257 $x36)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x14 $x202)))
 (let (($x86 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x198 (and $x86 $x10)))
 (let (($x134 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd ?x174 (_ bv3 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x7 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x25 (or false (or false (and (and true (or $x184 $x7)) (or $x92 $x134))))))
 (let (($x8 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x126 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x270 (and $x126 $x198)))
 (let (($x324 (=> $x270 $x323)))
 (not $x324)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x232 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x252 (bvmul (_ bv4294967295 32) ?x96)))
 (let ((?x194 (bvneg ?x252)))
 (let (($x201 (= ?x194 ?x232)))
 (let (($x271 (= $x201 true)))
 (let (($x318 (forall ((input.ind-%var837X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var837X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var837X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var836X)))
 (= $x288 false)))
 ))
 (let (($x319 (and $x293 $x318)))
 (let (($x320 (= $x319 true)))
 (let (($x259 (forall ((input.ind-%var831X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var831X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x139))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x139 (_ bv2 32))) ?x198)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x139 (_ bv3 32))) ?x256)))
 (let ((?x251 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var831X)))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var831X)))
 (=> $x224 (= ?x251 ?x279)))))))))
 ))
 (let (($x34 (forall ((input.ind-%var830X (_ BitVec 32)) )(let (($x173 (and (bvule (_ bv0 32) input.ind-%var830X) (bvult input.ind-%var830X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var830X)))
 (= $x224 $x173))))
 ))
 (let (($x317 (and $x34 $x259)))
 (let (($x286 (= $x317 true)))
 (let ((?x195 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x195)))
 (let (($x172 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x172 true)))
 (let (($x170 (= $x269 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x42 (bvsub ?x174 ?x113)))
 (let (($x217 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x42) (bvult ?x174 ?x42))))
 (let (($x164 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x143 (ite $x164 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x71 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x71)))
 (let ((?x171 ((_ extract 63 32) ?x125)))
 (let (($x214 (= ?x171 ?x143)))
 (let (($x110 (and $x214 $x217)))
 (let (($x114 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x37 (and $x114 $x110)))
 (let (($x27 (= true $x37)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (=> $x190 $x27)))
 (let (($x229 (= $x75 true)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x183 (= $x102 true)))
 (let (($x77 (= $x183 true)))
 (let (($x88 (= $x77 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x40 (= $x129 true)))
 (let (($x157 (= $x40 true)))
 (let (($x177 (= $x157 true)))
 (let (($x109 (= $x190 true)))
 (let (($x178 (= $x109 true)))
 (let (($x187 (= $x178 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x30)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x186)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x188 $x152)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x103 $x104)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x138 $x80)))
 (let (($x150 (not $x131)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x31 $x59)))
 (let (($x147 (and (not $x24) $x150)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x93 $x149)))
 (let (($x74 (not $x33)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x84 $x47)))
 (let (($x29 (and (not $x151) $x74)))
 (let (($x135 (and (and (and (and (and (and $x29 $x147) $x175) $x95) $x161) $x106) $x44)))
 (let (($x56 (and $x135 $x69)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x179 (or false (or false (and (and true (or $x57 $x67)) (or $x91 $x28))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x182 (and $x38 $x56)))
 (let (($x130 (= $x182 true)))
 (let (($x155 (= $x130 true)))
 (let (($x61 (= $x155 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x60 (= (_ bv0 2) ?x68)))
 (let (($x22 (= $x60 true)))
 (let (($x19 (= $x22 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x65 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x65 true)))
 (let (($x16 (= $x83 true)))
 (let (($x64 (= ?x53 input.dst.llvm-%n)))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x13 (and $x81 $x16)))
 (let (($x62 (and $x13 $x19)))
 (let (($x94 (and $x62 $x61)))
 (let (($x176 (and $x94 $x187)))
 (let (($x97 (and $x176 $x177)))
 (let (($x159 (and $x97 $x88)))
 (let (($x222 (and $x159 $x215)))
 (let (($x221 (and $x222 $x218)))
 (let (($x240 (and $x221 $x239)))
 (let (($x89 (and $x240 $x250)))
 (let (($x167 (and $x89 $x170)))
 (let (($x285 (and $x167 $x286)))
 (let (($x321 (and $x285 $x320)))
 (let (($x207 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x323 (and (not $x207) $x321)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x324 (and $x261 $x323)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x325 (and $x267 $x324)))
 (let (($x266 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x266 $x325)))
 (let (($x165 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x174 (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x46 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x126 (or false (or false (and (and true (or $x45 $x46)) (or $x63 $x165))))))
 (let (($x86 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x126)))
 (let (($x9 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x126)))
 (let (($x73 (and $x9 $x112)))
 (let (($x258 (=> $x73 $x271)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x232 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x252 (bvmul (_ bv4294967295 32) ?x96)))
 (let ((?x194 (bvneg ?x252)))
 (let (($x201 (= ?x194 ?x232)))
 (let (($x271 (= $x201 true)))
 (let (($x318 (forall ((input.ind-%var837X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var837X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var837X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var836X)))
 (= $x288 false)))
 ))
 (let (($x319 (and $x293 $x318)))
 (let (($x320 (= $x319 true)))
 (let (($x259 (forall ((input.ind-%var831X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var831X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x139))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x139 (_ bv2 32))) ?x198)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x139 (_ bv3 32))) ?x256)))
 (let ((?x251 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var831X)))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var831X)))
 (=> $x224 (= ?x251 ?x279)))))))))
 ))
 (let (($x34 (forall ((input.ind-%var830X (_ BitVec 32)) )(let (($x173 (and (bvule (_ bv0 32) input.ind-%var830X) (bvult input.ind-%var830X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var830X)))
 (= $x224 $x173))))
 ))
 (let (($x317 (and $x34 $x259)))
 (let (($x286 (= $x317 true)))
 (let ((?x195 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x195)))
 (let (($x172 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x172 true)))
 (let (($x170 (= $x269 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x223 true)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x42 (bvsub ?x174 ?x113)))
 (let (($x217 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x42) (bvult ?x174 ?x42))))
 (let (($x164 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x143 (ite $x164 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x71 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x71)))
 (let ((?x171 ((_ extract 63 32) ?x125)))
 (let (($x214 (= ?x171 ?x143)))
 (let (($x110 (and $x214 $x217)))
 (let (($x114 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x37 (and $x114 $x110)))
 (let (($x27 (= true $x37)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (=> $x190 $x27)))
 (let (($x229 (= $x75 true)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= $x230 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x183 (= $x102 true)))
 (let (($x77 (= $x183 true)))
 (let (($x88 (= $x77 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x40 (= $x129 true)))
 (let (($x157 (= $x40 true)))
 (let (($x177 (= $x157 true)))
 (let (($x109 (= $x190 true)))
 (let (($x178 (= $x109 true)))
 (let (($x187 (= $x178 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x30)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x186)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x188 $x152)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x103 $x104)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x138 $x80)))
 (let (($x150 (not $x131)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x31 $x59)))
 (let (($x147 (and (not $x24) $x150)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x93 $x149)))
 (let (($x74 (not $x33)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x84 $x47)))
 (let (($x29 (and (not $x151) $x74)))
 (let (($x135 (and (and (and (and (and (and $x29 $x147) $x175) $x95) $x161) $x106) $x44)))
 (let (($x56 (and $x135 $x69)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x179 (or false (or false (and (and true (or $x57 $x67)) (or $x91 $x28))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x182 (and $x38 $x56)))
 (let (($x130 (= $x182 true)))
 (let (($x155 (= $x130 true)))
 (let (($x61 (= $x155 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x60 (= (_ bv0 2) ?x68)))
 (let (($x22 (= $x60 true)))
 (let (($x19 (= $x22 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x65 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x65 true)))
 (let (($x16 (= $x83 true)))
 (let (($x64 (= ?x53 input.dst.llvm-%n)))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x13 (and $x81 $x16)))
 (let (($x62 (and $x13 $x19)))
 (let (($x94 (and $x62 $x61)))
 (let (($x176 (and $x94 $x187)))
 (let (($x97 (and $x176 $x177)))
 (let (($x159 (and $x97 $x88)))
 (let (($x222 (and $x159 $x215)))
 (let (($x221 (and $x222 $x218)))
 (let (($x240 (and $x221 $x239)))
 (let (($x89 (and $x240 $x250)))
 (let (($x167 (and $x89 $x170)))
 (let (($x285 (and $x167 $x286)))
 (let (($x321 (and $x285 $x320)))
 (let (($x207 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x323 (and (not $x207) $x321)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x324 (and $x261 $x323)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x325 (and $x267 $x324)))
 (let (($x266 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x266 $x325)))
 (let (($x165 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x174 (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x46 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x126 (or false (or false (and (and true (or $x45 $x46)) (or $x63 $x165))))))
 (let (($x86 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x126)))
 (let (($x9 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x126)))
 (let (($x73 (and $x9 $x112)))
 (let (($x258 (=> $x73 $x271)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x289 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x292 (bvule ?x289 (_ bv4294967294 32))))
 (let (($x180 (= $x292 true)))
 (let (($x133 (= $x180 true)))
 (let (($x111 (forall ((input.ind-%var849X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var849X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var849X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var848X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var848X)))
 (= $x311 false)))
 ))
 (let (($x76 (and $x26 $x111)))
 (let (($x243 (= $x76 true)))
 (let (($x121 (forall ((input.ind-%var843X (_ BitVec 32)) )(let ((?x321 (bvadd (bvmul input.ind-%var843X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x112 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x321))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x321 (_ bv2 32))) ?x112)))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x321 (_ bv3 32))) ?x252)))
 (let ((?x36 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var843X)))
 (let (($x173 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var843X)))
 (=> $x173 (= ?x36 ?x201)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x32 (and (bvule (_ bv0 32) input.ind-%var842X) (bvult input.ind-%var842X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x173 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var842X)))
 (= $x173 $x32))))
 ))
 (let (($x55 (and $x270 $x121)))
 (let (($x123 (= $x55 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x245)))
 (let (($x269 (= ?x172 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x269 true)))
 (let (($x167 (= $x170 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x110)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x144)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x164 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x164)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (and $x171 $x143)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x125 $x214)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x102 $x183)))
 (let (($x88 (not $x77)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x157 $x177)))
 (let (($x127 (and (not $x97) $x88)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x178 $x187)))
 (let (($x51 (not $x176)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x104 $x161)))
 (let (($x40 (and (not $x109) $x51)))
 (let (($x222 (and (and (and (and (and (and $x40 $x127) $x114) $x71) $x141) $x148) $x217)))
 (let (($x223 (and $x222 $x37)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x155 (or false (or false (and (and true (or $x70 $x186)) (or $x30 $x69))))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x219 (and $x94 $x223)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x95 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x162 (= $x95 true)))
 (let (($x103 (= $x162 true)))
 (let (($x188 (= $x103 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x23 true)))
 (let (($x175 (= $x185 true)))
 (let (($x48 (= $x175 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x80 (= (_ bv0 2) ?x138)))
 (let (($x131 (= $x80 true)))
 (let (($x150 (= $x131 true)))
 (let ((?x151 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x151)))
 (let (($x29 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (= $x29 true)))
 (let (($x59 (= $x31 true)))
 (let (($x93 (= ?x12 input.dst.llvm-%n)))
 (let (($x149 (= $x93 true)))
 (let (($x33 (= $x149 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x57 (bvsub ?x174 ?x113)))
 (let (($x91 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x57) (bvult ?x174 ?x57))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x58 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvmul (_ bv4 64) ?x22)))
 (let ((?x62 ((_ extract 63 32) ?x19)))
 (let (($x116 (= ?x62 ?x58)))
 (let (($x28 (and $x116 $x91)))
 (let (($x68 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x20 (and $x68 $x28)))
 (let (($x169 (= true $x20)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (=> $x190 $x169)))
 (let (($x179 (= $x66 true)))
 (let (($x38 (= $x179 true)))
 (let (($x84 (= $x38 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x83 (= $x65 true)))
 (let (($x72 (= $x190 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x16 (and $x53 $x83)))
 (let (($x47 (and $x16 $x84)))
 (let (($x74 (and $x47 $x33)))
 (let (($x24 (and $x74 $x59)))
 (let (($x147 (and $x24 $x150)))
 (let (($x146 (and $x147 $x48)))
 (let (($x166 (and $x146 $x188)))
 (let (($x226 (and $x166 $x221)))
 (let (($x248 (and $x226 $x240)))
 (let (($x195 (and $x248 $x89)))
 (let (($x85 (and $x195 $x167)))
 (let (($x145 (and $x85 $x123)))
 (let (($x272 (and $x145 $x243)))
 (let (($x322 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x231 (and (not $x322) $x272)))
 (let (($x260 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x260 $x231)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x203 (and $x5 $x41)))
 (let (($x255 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x205 (and $x255 $x203)))
 (let (($x25 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd ?x174 (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x92 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x9 (or false (or false (and (and true (or $x191 $x92)) (or $x18 $x25))))))
 (let (($x266 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x9)))
 (let (($x11 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x9)))
 (let (($x287 (and $x11 $x205)))
 (let (($x310 (=> $x287 $x133)))
 (not $x310)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x289 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x292 (bvule ?x289 (_ bv4294967294 32))))
 (let (($x180 (= $x292 true)))
 (let (($x133 (= $x180 true)))
 (let (($x111 (forall ((input.ind-%var849X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var849X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var849X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var848X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var848X)))
 (= $x311 false)))
 ))
 (let (($x76 (and $x26 $x111)))
 (let (($x243 (= $x76 true)))
 (let (($x121 (forall ((input.ind-%var843X (_ BitVec 32)) )(let ((?x321 (bvadd (bvmul input.ind-%var843X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x112 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x321))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x321 (_ bv2 32))) ?x112)))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x321 (_ bv3 32))) ?x252)))
 (let ((?x36 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var843X)))
 (let (($x173 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var843X)))
 (=> $x173 (= ?x36 ?x201)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x32 (and (bvule (_ bv0 32) input.ind-%var842X) (bvult input.ind-%var842X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x173 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var842X)))
 (= $x173 $x32))))
 ))
 (let (($x55 (and $x270 $x121)))
 (let (($x123 (= $x55 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x245)))
 (let (($x269 (= ?x172 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x269 true)))
 (let (($x167 (= $x170 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x110)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x144)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x164 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x164)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (and $x171 $x143)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x125 $x214)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x102 $x183)))
 (let (($x88 (not $x77)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x157 $x177)))
 (let (($x127 (and (not $x97) $x88)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x178 $x187)))
 (let (($x51 (not $x176)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x104 $x161)))
 (let (($x40 (and (not $x109) $x51)))
 (let (($x222 (and (and (and (and (and (and $x40 $x127) $x114) $x71) $x141) $x148) $x217)))
 (let (($x223 (and $x222 $x37)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x155 (or false (or false (and (and true (or $x70 $x186)) (or $x30 $x69))))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x219 (and $x94 $x223)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x95 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x162 (= $x95 true)))
 (let (($x103 (= $x162 true)))
 (let (($x188 (= $x103 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x23 true)))
 (let (($x175 (= $x185 true)))
 (let (($x48 (= $x175 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x80 (= (_ bv0 2) ?x138)))
 (let (($x131 (= $x80 true)))
 (let (($x150 (= $x131 true)))
 (let ((?x151 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x151)))
 (let (($x29 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (= $x29 true)))
 (let (($x59 (= $x31 true)))
 (let (($x93 (= ?x12 input.dst.llvm-%n)))
 (let (($x149 (= $x93 true)))
 (let (($x33 (= $x149 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x57 (bvsub ?x174 ?x113)))
 (let (($x91 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x57) (bvult ?x174 ?x57))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x58 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvmul (_ bv4 64) ?x22)))
 (let ((?x62 ((_ extract 63 32) ?x19)))
 (let (($x116 (= ?x62 ?x58)))
 (let (($x28 (and $x116 $x91)))
 (let (($x68 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x20 (and $x68 $x28)))
 (let (($x169 (= true $x20)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (=> $x190 $x169)))
 (let (($x179 (= $x66 true)))
 (let (($x38 (= $x179 true)))
 (let (($x84 (= $x38 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x83 (= $x65 true)))
 (let (($x72 (= $x190 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x16 (and $x53 $x83)))
 (let (($x47 (and $x16 $x84)))
 (let (($x74 (and $x47 $x33)))
 (let (($x24 (and $x74 $x59)))
 (let (($x147 (and $x24 $x150)))
 (let (($x146 (and $x147 $x48)))
 (let (($x166 (and $x146 $x188)))
 (let (($x226 (and $x166 $x221)))
 (let (($x248 (and $x226 $x240)))
 (let (($x195 (and $x248 $x89)))
 (let (($x85 (and $x195 $x167)))
 (let (($x145 (and $x85 $x123)))
 (let (($x272 (and $x145 $x243)))
 (let (($x322 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x231 (and (not $x322) $x272)))
 (let (($x260 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x260 $x231)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x203 (and $x5 $x41)))
 (let (($x255 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x205 (and $x255 $x203)))
 (let (($x25 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd ?x174 (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x92 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x9 (or false (or false (and (and true (or $x191 $x92)) (or $x18 $x25))))))
 (let (($x266 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x9)))
 (let (($x11 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x9)))
 (let (($x287 (and $x11 $x205)))
 (let (($x310 (=> $x287 $x133)))
 (not $x310)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x319 (bvsge ?x202 (_ bv0 32))))
 (let (($x212 (= $x319 true)))
 (let (($x156 (= $x212 true)))
 (let (($x293 (forall ((input.ind-%var861X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var861X)))
 (=> $x10 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var861X) (_ bv0 32)))))
 ))
 (let (($x279 (forall ((input.ind-%var860X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var860X)))
 (= $x10 false)))
 ))
 (let (($x316 (and $x279 $x293)))
 (let (($x262 (= $x316 true)))
 (let (($x152 (forall ((input.ind-%var855X (_ BitVec 32)) )(let ((?x272 (bvadd (bvmul input.ind-%var855X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x272 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x272))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x272 (_ bv2 32))) ?x205)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x272 (_ bv3 32))) ?x292)))
 (let ((?x323 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var855X)))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var855X)))
 (=> $x32 (= ?x323 ?x310)))))))))
 ))
 (let (($x73 (forall ((input.ind-%var854X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var854X) (bvult input.ind-%var854X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var854X)))
 (= $x32 $x232))))
 ))
 (let (($x264 (and $x73 $x152)))
 (let (($x198 (= $x264 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x172)))
 (let (($x170 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x170 true)))
 (let (($x85 (= $x167 true)))
 (let (($x249 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x195 (= $x89 true)))
 (let (($x238 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x248 (= $x240 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x148)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x230)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x214)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x229 $x171)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x71 $x164)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x102 $x183)))
 (let (($x88 (not $x77)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x177 $x97)))
 (let (($x27 (and (not $x159) $x88)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x178 $x187)))
 (let (($x51 (not $x176)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x181 $x61)))
 (let (($x157 (and (not $x129) $x51)))
 (let (($x223 (and (and (and (and (and (and $x157 $x27) $x114) $x137) $x143) $x141) $x42)))
 (let (($x219 (and $x223 $x215)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x104 (or false (or false (and (and true (or $x44 $x135)) (or $x56 $x182))))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x220 (and $x109 $x219)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let (($x95 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x162 (= $x95 true)))
 (let (($x103 (= $x162 true)))
 (let (($x188 (= $x103 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x23 true)))
 (let (($x175 (= $x185 true)))
 (let (($x48 (= $x175 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x80 (= (_ bv0 2) ?x138)))
 (let (($x131 (= $x80 true)))
 (let (($x150 (= $x131 true)))
 (let ((?x151 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x151)))
 (let (($x29 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (= $x29 true)))
 (let (($x59 (= $x31 true)))
 (let (($x93 (= ?x12 input.dst.llvm-%n)))
 (let (($x149 (= $x93 true)))
 (let (($x33 (= $x149 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x67 (bvsub ?x174 ?x113)))
 (let (($x91 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x67) (bvult ?x174 ?x67))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x58 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvmul (_ bv4 64) ?x22)))
 (let ((?x62 ((_ extract 63 32) ?x19)))
 (let (($x116 (= ?x62 ?x58)))
 (let (($x28 (and $x116 $x91)))
 (let (($x68 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x20 (and $x68 $x28)))
 (let (($x169 (= true $x20)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (=> $x190 $x169)))
 (let (($x179 (= $x66 true)))
 (let (($x38 (= $x179 true)))
 (let (($x84 (= $x38 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x83 (= $x65 true)))
 (let (($x72 (= $x190 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x16 (and $x53 $x83)))
 (let (($x47 (and $x16 $x84)))
 (let (($x74 (and $x47 $x33)))
 (let (($x24 (and $x74 $x59)))
 (let (($x147 (and $x24 $x150)))
 (let (($x146 (and $x147 $x48)))
 (let (($x166 (and $x146 $x188)))
 (let (($x234 (and $x166 $x226)))
 (let (($x247 (and $x234 $x248)))
 (let (($x245 (and $x247 $x195)))
 (let (($x213 (and $x245 $x85)))
 (let (($x225 (and $x213 $x198)))
 (let (($x101 (and $x225 $x262)))
 (let (($x315 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and (not $x315) $x101)))
 (let (($x207 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x318 (and $x207 $x237)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x277 (and $x257 $x318)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x290 (and $x14 $x277)))
 (let (($x126 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd ?x174 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x63 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x11 (or false (or false (and (and true (or $x128 $x63)) (or $x8 $x126))))))
 (let (($x255 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x15 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x189 (and $x15 $x290)))
 (let (($x197 (=> $x189 $x156)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x319 (bvsge ?x202 (_ bv0 32))))
 (let (($x212 (= $x319 true)))
 (let (($x156 (= $x212 true)))
 (let (($x293 (forall ((input.ind-%var861X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var861X)))
 (=> $x10 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var861X) (_ bv0 32)))))
 ))
 (let (($x279 (forall ((input.ind-%var860X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var860X)))
 (= $x10 false)))
 ))
 (let (($x316 (and $x279 $x293)))
 (let (($x262 (= $x316 true)))
 (let (($x152 (forall ((input.ind-%var855X (_ BitVec 32)) )(let ((?x272 (bvadd (bvmul input.ind-%var855X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x272 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x272))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x272 (_ bv2 32))) ?x205)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x272 (_ bv3 32))) ?x292)))
 (let ((?x323 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var855X)))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var855X)))
 (=> $x32 (= ?x323 ?x310)))))))))
 ))
 (let (($x73 (forall ((input.ind-%var854X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var854X) (bvult input.ind-%var854X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var854X)))
 (= $x32 $x232))))
 ))
 (let (($x264 (and $x73 $x152)))
 (let (($x198 (= $x264 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x172)))
 (let (($x170 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x170 true)))
 (let (($x85 (= $x167 true)))
 (let (($x249 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x195 (= $x89 true)))
 (let (($x238 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let (($x248 (= $x240 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x148)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x230)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x214)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x229 $x171)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x71 $x164)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x102 $x183)))
 (let (($x88 (not $x77)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x177 $x97)))
 (let (($x27 (and (not $x159) $x88)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x178 $x187)))
 (let (($x51 (not $x176)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x181 $x61)))
 (let (($x157 (and (not $x129) $x51)))
 (let (($x223 (and (and (and (and (and (and $x157 $x27) $x114) $x137) $x143) $x141) $x42)))
 (let (($x219 (and $x223 $x215)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x104 (or false (or false (and (and true (or $x44 $x135)) (or $x56 $x182))))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x220 (and $x109 $x219)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let (($x95 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x162 (= $x95 true)))
 (let (($x103 (= $x162 true)))
 (let (($x188 (= $x103 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x23 true)))
 (let (($x175 (= $x185 true)))
 (let (($x48 (= $x175 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x80 (= (_ bv0 2) ?x138)))
 (let (($x131 (= $x80 true)))
 (let (($x150 (= $x131 true)))
 (let ((?x151 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x151)))
 (let (($x29 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (= $x29 true)))
 (let (($x59 (= $x31 true)))
 (let (($x93 (= ?x12 input.dst.llvm-%n)))
 (let (($x149 (= $x93 true)))
 (let (($x33 (= $x149 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x67 (bvsub ?x174 ?x113)))
 (let (($x91 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x67) (bvult ?x174 ?x67))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x58 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvmul (_ bv4 64) ?x22)))
 (let ((?x62 ((_ extract 63 32) ?x19)))
 (let (($x116 (= ?x62 ?x58)))
 (let (($x28 (and $x116 $x91)))
 (let (($x68 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x20 (and $x68 $x28)))
 (let (($x169 (= true $x20)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (=> $x190 $x169)))
 (let (($x179 (= $x66 true)))
 (let (($x38 (= $x179 true)))
 (let (($x84 (= $x38 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x98 true)))
 (let (($x65 (= $x81 true)))
 (let (($x83 (= $x65 true)))
 (let (($x72 (= $x190 true)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x16 (and $x53 $x83)))
 (let (($x47 (and $x16 $x84)))
 (let (($x74 (and $x47 $x33)))
 (let (($x24 (and $x74 $x59)))
 (let (($x147 (and $x24 $x150)))
 (let (($x146 (and $x147 $x48)))
 (let (($x166 (and $x146 $x188)))
 (let (($x234 (and $x166 $x226)))
 (let (($x247 (and $x234 $x248)))
 (let (($x245 (and $x247 $x195)))
 (let (($x213 (and $x245 $x85)))
 (let (($x225 (and $x213 $x198)))
 (let (($x101 (and $x225 $x262)))
 (let (($x315 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and (not $x315) $x101)))
 (let (($x207 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x318 (and $x207 $x237)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x277 (and $x257 $x318)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x290 (and $x14 $x277)))
 (let (($x126 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd ?x174 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x63 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x11 (or false (or false (and (and true (or $x128 $x63)) (or $x8 $x126))))))
 (let (($x255 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x15 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x189 (and $x15 $x290)))
 (let (($x197 (=> $x189 $x156)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x324 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (bvule ?x324 (_ bv4294967294 32))))
 (let (($x259 (= $x76 true)))
 (let (($x313 (= $x259 true)))
 (let (($x26 (forall ((input.ind-%var873X (_ BitVec 32)) )(let (($x325 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var873X)))
 (=> $x325 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var873X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var872X (_ BitVec 32)) )(let (($x325 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var872X)))
 (= $x325 false)))
 ))
 (let (($x253 (and $x201 $x26)))
 (let (($x314 (= $x253 true)))
 (let (($x105 (forall ((input.ind-%var867X (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul input.ind-%var867X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x101))))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv2 32))) ?x290)))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv3 32))) ?x319)))
 (let ((?x231 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var867X)))
 (let (($x232 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var867X)))
 (=> $x232 (= ?x231 ?x197)))))))))
 ))
 (let (($x287 (forall ((input.ind-%var866X (_ BitVec 32)) )(let (($x133 (and (bvule (_ bv0 32) input.ind-%var866X) (bvult input.ind-%var866X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x232 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var866X)))
 (= $x232 $x133))))
 ))
 (let (($x204 (and $x287 $x105)))
 (let (($x112 (= $x204 true)))
 (let ((?x269 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x269)))
 (let (($x167 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x167 true)))
 (let (($x213 (= $x85 true)))
 (let (($x250 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x89 (= $x250 true)))
 (let (($x195 (= $x89 true)))
 (let (($x245 (= $x195 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (= $x239 true)))
 (let (($x248 (= $x240 true)))
 (let (($x247 (= $x248 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x37 (bvsub ?x174 ?x113)))
 (let (($x148 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x37) (bvult ?x174 ?x37))))
 (let (($x110 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x110 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x171 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvmul (_ bv4 64) ?x171)))
 (let ((?x143 ((_ extract 63 32) ?x164)))
 (let (($x141 (= ?x143 ?x214)))
 (let (($x215 (and $x141 $x148)))
 (let (($x229 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x219 (and $x229 $x215)))
 (let (($x220 (= true $x219)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x190 $x220)))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x50 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x114 (= $x50 true)))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x77 (= $x190 true)))
 (let (($x88 (= $x77 true)))
 (let (($x27 (= $x88 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x61)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x109)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x69 $x182)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x30 $x130)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x162 $x103)))
 (let (($x166 (not $x188)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x48 $x146)))
 (let (($x70 (and (not $x95) $x166)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x131 $x150)))
 (let (($x23 (not $x147)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x66 $x179)))
 (let (($x175 (and (not $x80) $x23)))
 (let (($x157 (and (and (and (and (and (and $x175 $x70) $x186) $x135) $x155) $x104) $x181)))
 (let (($x177 (and $x157 $x129)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x24 (or false (or false (and (and true (or $x151 $x12)) (or $x33 $x74))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x97 (and $x138 $x177)))
 (let (($x159 (= $x97 true)))
 (let (($x127 (= $x159 true)))
 (let (($x102 (= $x127 true)))
 (let (($x154 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x154 true)))
 (let (($x91 (= $x87 true)))
 (let (($x28 (= $x91 true)))
 (let ((?x17 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x58 (= (_ bv0 2) ?x17)))
 (let (($x116 (= $x58 true)))
 (let (($x57 (= $x116 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x60 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x60 true)))
 (let (($x19 (= $x22 true)))
 (let (($x16 (= ?x83 input.dst.llvm-%n)))
 (let (($x13 (= $x16 true)))
 (let (($x196 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x68 (and $x98 $x196)))
 (let (($x62 (and $x68 $x19)))
 (let (($x67 (and $x62 $x57)))
 (let (($x20 (and $x67 $x28)))
 (let (($x183 (and $x20 $x102)))
 (let (($x144 (and $x183 $x27)))
 (let (($x137 (and $x144 $x75)))
 (let (($x238 (and $x137 $x234)))
 (let (($x249 (and $x238 $x247)))
 (let (($x172 (and $x249 $x245)))
 (let (($x139 (and $x172 $x213)))
 (let (($x224 (and $x139 $x112)))
 (let (($x39 (and $x224 $x314)))
 (let (($x265 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x320 (and (not $x265) $x39)))
 (let (($x322 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x322 $x320)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x261 $x111)))
 (let (($x267 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x274 (and $x267 $x140)))
 (let (($x9 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd ?x174 (_ bv3 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x18 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x15 (or false (or false (and (and true (or $x134 $x18)) (or $x86 $x9))))))
 (let (($x14 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x15)))
 (let (($x7 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x15)))
 (let (($x34 (and $x7 $x274)))
 (let (($x317 (=> $x34 $x313)))
 (not $x317)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x324 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (bvule ?x324 (_ bv4294967294 32))))
 (let (($x259 (= $x76 true)))
 (let (($x313 (= $x259 true)))
 (let (($x26 (forall ((input.ind-%var873X (_ BitVec 32)) )(let (($x325 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var873X)))
 (=> $x325 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var873X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var872X (_ BitVec 32)) )(let (($x325 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var872X)))
 (= $x325 false)))
 ))
 (let (($x253 (and $x201 $x26)))
 (let (($x314 (= $x253 true)))
 (let (($x105 (forall ((input.ind-%var867X (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul input.ind-%var867X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x101))))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv2 32))) ?x290)))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv3 32))) ?x319)))
 (let ((?x231 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var867X)))
 (let (($x232 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var867X)))
 (=> $x232 (= ?x231 ?x197)))))))))
 ))
 (let (($x287 (forall ((input.ind-%var866X (_ BitVec 32)) )(let (($x133 (and (bvule (_ bv0 32) input.ind-%var866X) (bvult input.ind-%var866X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x232 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var866X)))
 (= $x232 $x133))))
 ))
 (let (($x204 (and $x287 $x105)))
 (let (($x112 (= $x204 true)))
 (let ((?x269 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x269)))
 (let (($x167 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x167 true)))
 (let (($x213 (= $x85 true)))
 (let (($x250 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x89 (= $x250 true)))
 (let (($x195 (= $x89 true)))
 (let (($x245 (= $x195 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (= $x239 true)))
 (let (($x248 (= $x240 true)))
 (let (($x247 (= $x248 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x37 (bvsub ?x174 ?x113)))
 (let (($x148 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x37) (bvult ?x174 ?x37))))
 (let (($x110 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x110 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x171 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvmul (_ bv4 64) ?x171)))
 (let ((?x143 ((_ extract 63 32) ?x164)))
 (let (($x141 (= ?x143 ?x214)))
 (let (($x215 (and $x141 $x148)))
 (let (($x229 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x219 (and $x229 $x215)))
 (let (($x220 (= true $x219)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x190 $x220)))
 (let (($x221 (= $x218 true)))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x50 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x114 (= $x50 true)))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x77 (= $x190 true)))
 (let (($x88 (= $x77 true)))
 (let (($x27 (= $x88 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x61)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x109)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x69 $x182)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x30 $x130)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x162 $x103)))
 (let (($x166 (not $x188)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x48 $x146)))
 (let (($x70 (and (not $x95) $x166)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x131 $x150)))
 (let (($x23 (not $x147)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x66 $x179)))
 (let (($x175 (and (not $x80) $x23)))
 (let (($x157 (and (and (and (and (and (and $x175 $x70) $x186) $x135) $x155) $x104) $x181)))
 (let (($x177 (and $x157 $x129)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x24 (or false (or false (and (and true (or $x151 $x12)) (or $x33 $x74))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x97 (and $x138 $x177)))
 (let (($x159 (= $x97 true)))
 (let (($x127 (= $x159 true)))
 (let (($x102 (= $x127 true)))
 (let (($x154 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x154 true)))
 (let (($x91 (= $x87 true)))
 (let (($x28 (= $x91 true)))
 (let ((?x17 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x58 (= (_ bv0 2) ?x17)))
 (let (($x116 (= $x58 true)))
 (let (($x57 (= $x116 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x60 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x60 true)))
 (let (($x19 (= $x22 true)))
 (let (($x16 (= ?x83 input.dst.llvm-%n)))
 (let (($x13 (= $x16 true)))
 (let (($x196 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x68 (and $x98 $x196)))
 (let (($x62 (and $x68 $x19)))
 (let (($x67 (and $x62 $x57)))
 (let (($x20 (and $x67 $x28)))
 (let (($x183 (and $x20 $x102)))
 (let (($x144 (and $x183 $x27)))
 (let (($x137 (and $x144 $x75)))
 (let (($x238 (and $x137 $x234)))
 (let (($x249 (and $x238 $x247)))
 (let (($x172 (and $x249 $x245)))
 (let (($x139 (and $x172 $x213)))
 (let (($x224 (and $x139 $x112)))
 (let (($x39 (and $x224 $x314)))
 (let (($x265 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x320 (and (not $x265) $x39)))
 (let (($x322 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x322 $x320)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x261 $x111)))
 (let (($x267 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x274 (and $x267 $x140)))
 (let (($x9 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd ?x174 (_ bv3 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x18 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x15 (or false (or false (and (and true (or $x134 $x18)) (or $x86 $x9))))))
 (let (($x14 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x15)))
 (let (($x7 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x15)))
 (let (($x34 (and $x7 $x274)))
 (let (($x317 (=> $x34 $x313)))
 (not $x317)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 185 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (bvsge ?x41 (_ bv0 32))))
 (let (($x121 (= $x316 true)))
 (let (($x275 (= $x121 true)))
 (let (($x279 (forall ((input.ind-%var885X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var885X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var885X) (_ bv0 32)))))
 ))
 (let (($x310 (forall ((input.ind-%var884X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var884X)))
 (= $x203 false)))
 ))
 (let (($x286 (and $x310 $x279)))
 (let (($x118 (= $x286 true)))
 (let (($x169 (forall ((input.ind-%var879X (_ BitVec 32)) )(let ((?x39 (bvadd (bvmul input.ind-%var879X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x39))))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv2 32))) ?x274)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv3 32))) ?x76)))
 (let ((?x237 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var879X)))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var879X)))
 (=> $x133 (= ?x237 ?x317)))))))))
 ))
 (let (($x189 (forall ((input.ind-%var878X (_ BitVec 32)) )(let (($x156 (and (bvule (_ bv0 32) input.ind-%var878X) (bvult input.ind-%var878X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var878X)))
 (= $x133 $x156))))
 ))
 (let (($x285 (and $x189 $x169)))
 (let (($x205 (= $x285 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x170)))
 (let (($x85 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x85 true)))
 (let (($x139 (= $x213 true)))
 (let (($x89 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x89 true)))
 (let (($x245 (= $x195 true)))
 (let (($x172 (= $x245 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x240 true)))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x37 (bvsub ?x174 ?x113)))
 (let (($x215 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x37) (bvult ?x174 ?x37))))
 (let (($x214 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x141 (ite $x214 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x164 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x164)))
 (let ((?x110 ((_ extract 63 32) ?x143)))
 (let (($x230 (= ?x110 ?x141)))
 (let (($x219 (and $x230 $x215)))
 (let (($x125 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x220 (and $x125 $x219)))
 (let (($x218 (= true $x220)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (=> $x190 $x218)))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x88 (= $x190 true)))
 (let (($x27 (= $x88 true)))
 (let (($x144 (= $x27 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x104)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x176)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x30)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (and $x187 $x69)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x135 $x56)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x162 $x103)))
 (let (($x166 (not $x188)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x146 $x95)))
 (let (($x40 (and (not $x106) $x166)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x131 $x150)))
 (let (($x23 (not $x147)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x84 $x115)))
 (let (($x48 (and (not $x185) $x23)))
 (let (($x177 (and (and (and (and (and (and $x48 $x40) $x186) $x44) $x182) $x155) $x94)))
 (let (($x97 (and $x177 $x51)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x66 (or false (or false (and (and true (or $x93 $x149)) (or $x29 $x31))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x159 (and $x80 $x97)))
 (let (($x127 (= $x159 true)))
 (let (($x102 (= $x127 true)))
 (let (($x183 (= $x102 true)))
 (let (($x154 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x154 true)))
 (let (($x91 (= $x87 true)))
 (let (($x28 (= $x91 true)))
 (let ((?x17 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x58 (= (_ bv0 2) ?x17)))
 (let (($x116 (= $x58 true)))
 (let (($x57 (= $x116 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x60 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x60 true)))
 (let (($x19 (= $x22 true)))
 (let (($x16 (= ?x83 input.dst.llvm-%n)))
 (let (($x13 (= $x16 true)))
 (let (($x196 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x68 (and $x98 $x196)))
 (let (($x62 (and $x68 $x19)))
 (let (($x67 (and $x62 $x57)))
 (let (($x20 (and $x67 $x28)))
 (let (($x77 (and $x20 $x183)))
 (let (($x50 (and $x77 $x144)))
 (let (($x222 (and $x50 $x137)))
 (let (($x239 (and $x222 $x238)))
 (let (($x250 (and $x239 $x249)))
 (let (($x269 (and $x250 $x172)))
 (let (($x321 (and $x269 $x139)))
 (let (($x173 (and $x321 $x205)))
 (let (($x194 (and $x173 $x118)))
 (let (($x256 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and (not $x256) $x194)))
 (let (($x315 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (and $x315 $x243)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x260 $x293)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x5 $x291)))
 (let (($x11 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd ?x174 (_ bv3 32))))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x8 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x7 (or false (or false (and (and true (or $x165 $x8)) (or $x266 $x11))))))
 (let (($x267 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x7)))
 (let (($x46 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x7)))
 (let (($x270 (and $x46 $x96)))
 (let (($x55 (=> $x270 $x275)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (bvsge ?x41 (_ bv0 32))))
 (let (($x121 (= $x316 true)))
 (let (($x275 (= $x121 true)))
 (let (($x279 (forall ((input.ind-%var885X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var885X)))
 (=> $x203 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var885X) (_ bv0 32)))))
 ))
 (let (($x310 (forall ((input.ind-%var884X (_ BitVec 32)) )(let (($x203 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var884X)))
 (= $x203 false)))
 ))
 (let (($x286 (and $x310 $x279)))
 (let (($x118 (= $x286 true)))
 (let (($x169 (forall ((input.ind-%var879X (_ BitVec 32)) )(let ((?x39 (bvadd (bvmul input.ind-%var879X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x39))))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv2 32))) ?x274)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv3 32))) ?x76)))
 (let ((?x237 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var879X)))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var879X)))
 (=> $x133 (= ?x237 ?x317)))))))))
 ))
 (let (($x189 (forall ((input.ind-%var878X (_ BitVec 32)) )(let (($x156 (and (bvule (_ bv0 32) input.ind-%var878X) (bvult input.ind-%var878X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var878X)))
 (= $x133 $x156))))
 ))
 (let (($x285 (and $x189 $x169)))
 (let (($x205 (= $x285 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x170)))
 (let (($x85 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x85 true)))
 (let (($x139 (= $x213 true)))
 (let (($x89 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x89 true)))
 (let (($x245 (= $x195 true)))
 (let (($x172 (= $x245 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x240 true)))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x37 (bvsub ?x174 ?x113)))
 (let (($x215 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x37) (bvult ?x174 ?x37))))
 (let (($x214 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x141 (ite $x214 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x164 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x164)))
 (let ((?x110 ((_ extract 63 32) ?x143)))
 (let (($x230 (= ?x110 ?x141)))
 (let (($x219 (and $x230 $x215)))
 (let (($x125 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x220 (and $x125 $x219)))
 (let (($x218 (= true $x220)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (=> $x190 $x218)))
 (let (($x226 (= $x221 true)))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x88 (= $x190 true)))
 (let (($x27 (= $x88 true)))
 (let (($x144 (= $x27 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x104)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x176)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x30)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (and $x187 $x69)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x135 $x56)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x162 $x103)))
 (let (($x166 (not $x188)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x146 $x95)))
 (let (($x40 (and (not $x106) $x166)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x131 $x150)))
 (let (($x23 (not $x147)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x84 $x115)))
 (let (($x48 (and (not $x185) $x23)))
 (let (($x177 (and (and (and (and (and (and $x48 $x40) $x186) $x44) $x182) $x155) $x94)))
 (let (($x97 (and $x177 $x51)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x66 (or false (or false (and (and true (or $x93 $x149)) (or $x29 $x31))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x159 (and $x80 $x97)))
 (let (($x127 (= $x159 true)))
 (let (($x102 (= $x127 true)))
 (let (($x183 (= $x102 true)))
 (let (($x154 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x154 true)))
 (let (($x91 (= $x87 true)))
 (let (($x28 (= $x91 true)))
 (let ((?x17 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x58 (= (_ bv0 2) ?x17)))
 (let (($x116 (= $x58 true)))
 (let (($x57 (= $x116 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x60 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x60 true)))
 (let (($x19 (= $x22 true)))
 (let (($x16 (= ?x83 input.dst.llvm-%n)))
 (let (($x13 (= $x16 true)))
 (let (($x196 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x68 (and $x98 $x196)))
 (let (($x62 (and $x68 $x19)))
 (let (($x67 (and $x62 $x57)))
 (let (($x20 (and $x67 $x28)))
 (let (($x77 (and $x20 $x183)))
 (let (($x50 (and $x77 $x144)))
 (let (($x222 (and $x50 $x137)))
 (let (($x239 (and $x222 $x238)))
 (let (($x250 (and $x239 $x249)))
 (let (($x269 (and $x250 $x172)))
 (let (($x321 (and $x269 $x139)))
 (let (($x173 (and $x321 $x205)))
 (let (($x194 (and $x173 $x118)))
 (let (($x256 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and (not $x256) $x194)))
 (let (($x315 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (and $x315 $x243)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x260 $x293)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x5 $x291)))
 (let (($x11 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd ?x174 (_ bv3 32))))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x8 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x7 (or false (or false (and (and true (or $x165 $x8)) (or $x266 $x11))))))
 (let (($x267 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x7)))
 (let (($x46 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x7)))
 (let (($x270 (and $x46 $x96)))
 (let (($x55 (=> $x270 $x275)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x318 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x253 (bvule ?x318 input.dst.llvm-%n)))
 (let (($x152 (= $x253 true)))
 (let (($x288 (= $x152 true)))
 (let (($x201 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var897X)))
 (=> $x277 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var897X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var896X)))
 (= $x277 false)))
 ))
 (let (($x123 (and $x197 $x201)))
 (let (($x233 (= $x123 true)))
 (let (($x38 (forall ((input.ind-%var891X (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul input.ind-%var891X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x194))))
 (let ((?x316 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x194 (_ bv2 32))) ?x96)))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x194 (_ bv3 32))) ?x316)))
 (let ((?x320 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var891X)))
 (let (($x156 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var891X)))
 (=> $x156 (= ?x320 ?x55)))))))))
 ))
 (let (($x34 (forall ((input.ind-%var890X (_ BitVec 32)) )(let (($x313 (and (bvule (_ bv0 32) input.ind-%var890X) (bvult input.ind-%var890X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x156 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var890X)))
 (= $x156 $x313))))
 ))
 (let (($x145 (and $x34 $x38)))
 (let (($x290 (= $x145 true)))
 (let ((?x167 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x167)))
 (let (($x213 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x213 true)))
 (let (($x321 (= $x139 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x245 (= ?x83 input.dst.llvm-%n)))
 (let (($x172 (= $x245 true)))
 (let (($x269 (= $x172 true)))
 (let (($x247 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x214 (bvsub ?x174 ?x113)))
 (let (($x37 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x214) (bvult ?x174 ?x214))))
 (let (($x164 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x143 (ite $x164 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x229 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x229)))
 (let ((?x171 ((_ extract 63 32) ?x125)))
 (let (($x110 (= ?x171 ?x143)))
 (let (($x223 (and $x110 $x37)))
 (let (($x222 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x148 (and $x222 $x223)))
 (let (($x215 (= true $x148)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (=> $x190 $x215)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x27 true)))
 (let (($x50 (= $x144 true)))
 (let (($x114 (= $x50 true)))
 (let (($x102 (= $x190 true)))
 (let (($x183 (= $x102 true)))
 (let (($x77 (= $x183 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x56)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x30)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x186 $x178)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x161 $x44)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x146 $x95)))
 (let (($x70 (not $x106)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x147 $x23)))
 (let (($x103 (and (not $x48) $x70)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x84 $x115)))
 (let (($x175 (not $x185)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x91 $x28)))
 (let (($x150 (and (not $x80) $x175)))
 (let (($x94 (and (and (and (and (and (and $x150 $x103) $x166) $x109) $x157) $x187) $x69)))
 (let (($x177 (and $x94 $x182)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x24 (or false (or false (and (and true (or $x179 $x12)) (or $x33 $x74))))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x104 (and $x66 $x177)))
 (let (($x51 (= $x104 true)))
 (let (($x97 (= $x51 true)))
 (let (($x159 (= $x97 true)))
 (let (($x58 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x116 (= $x58 true)))
 (let (($x57 (= $x116 true)))
 (let (($x67 (= $x57 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x19 (= (_ bv0 2) ?x22)))
 (let (($x62 (= $x19 true)))
 (let (($x107 (= $x62 true)))
 (let (($x16 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x16 true)))
 (let (($x196 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x68 (and $x98 $x196)))
 (let (($x17 (and $x68 $x107)))
 (let (($x154 (and $x17 $x67)))
 (let (($x127 (and $x154 $x159)))
 (let (($x88 (and $x127 $x77)))
 (let (($x217 (and $x88 $x114)))
 (let (($x226 (and $x217 $x221)))
 (let (($x248 (and $x226 $x240)))
 (let (($x195 (and $x248 $x89)))
 (let (($x170 (and $x195 $x269)))
 (let (($x272 (and $x170 $x321)))
 (let (($x32 (and $x272 $x290)))
 (let (($x180 (and $x32 $x233)))
 (let (($x252 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and (not $x252) $x180)))
 (let (($x265 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (and $x265 $x262)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x254 (and $x207 $x26)))
 (let (($x257 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x257 $x254)))
 (let (($x15 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x174 (_ bv3 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x86 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x46 (or false (or false (and (and true (or $x25 $x86)) (or $x255 $x15))))))
 (let (($x5 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x46)))
 (let (($x92 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x46)))
 (let (($x73 (and $x92 $x289)))
 (let (($x264 (=> $x73 $x288)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x318 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x253 (bvule ?x318 input.dst.llvm-%n)))
 (let (($x152 (= $x253 true)))
 (let (($x288 (= $x152 true)))
 (let (($x201 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var897X)))
 (=> $x277 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var897X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var896X)))
 (= $x277 false)))
 ))
 (let (($x123 (and $x197 $x201)))
 (let (($x233 (= $x123 true)))
 (let (($x38 (forall ((input.ind-%var891X (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul input.ind-%var891X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x194))))
 (let ((?x316 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x194 (_ bv2 32))) ?x96)))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x194 (_ bv3 32))) ?x316)))
 (let ((?x320 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var891X)))
 (let (($x156 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var891X)))
 (=> $x156 (= ?x320 ?x55)))))))))
 ))
 (let (($x34 (forall ((input.ind-%var890X (_ BitVec 32)) )(let (($x313 (and (bvule (_ bv0 32) input.ind-%var890X) (bvult input.ind-%var890X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x156 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var890X)))
 (= $x156 $x313))))
 ))
 (let (($x145 (and $x34 $x38)))
 (let (($x290 (= $x145 true)))
 (let ((?x167 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x167)))
 (let (($x213 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x213 true)))
 (let (($x321 (= $x139 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x65)))
 (let (($x245 (= ?x83 input.dst.llvm-%n)))
 (let (($x172 (= $x245 true)))
 (let (($x269 (= $x172 true)))
 (let (($x247 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x89 (= $x250 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x214 (bvsub ?x174 ?x113)))
 (let (($x37 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x214) (bvult ?x174 ?x214))))
 (let (($x164 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x143 (ite $x164 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x229 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x229)))
 (let ((?x171 ((_ extract 63 32) ?x125)))
 (let (($x110 (= ?x171 ?x143)))
 (let (($x223 (and $x110 $x37)))
 (let (($x222 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x148 (and $x222 $x223)))
 (let (($x215 (= true $x148)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (=> $x190 $x215)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let (($x221 (= $x218 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x27 true)))
 (let (($x50 (= $x144 true)))
 (let (($x114 (= $x50 true)))
 (let (($x102 (= $x190 true)))
 (let (($x183 (= $x102 true)))
 (let (($x77 (= $x183 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x56)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x30)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x186 $x178)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x161 $x44)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x146 $x95)))
 (let (($x70 (not $x106)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x147 $x23)))
 (let (($x103 (and (not $x48) $x70)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x84 $x115)))
 (let (($x175 (not $x185)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x91 $x28)))
 (let (($x150 (and (not $x80) $x175)))
 (let (($x94 (and (and (and (and (and (and $x150 $x103) $x166) $x109) $x157) $x187) $x69)))
 (let (($x177 (and $x94 $x182)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x24 (or false (or false (and (and true (or $x179 $x12)) (or $x33 $x74))))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x104 (and $x66 $x177)))
 (let (($x51 (= $x104 true)))
 (let (($x97 (= $x51 true)))
 (let (($x159 (= $x97 true)))
 (let (($x58 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x116 (= $x58 true)))
 (let (($x57 (= $x116 true)))
 (let (($x67 (= $x57 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x19 (= (_ bv0 2) ?x22)))
 (let (($x62 (= $x19 true)))
 (let (($x107 (= $x62 true)))
 (let (($x16 (= ?x83 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x16 true)))
 (let (($x196 (= $x13 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x64 (= $x53 true)))
 (let (($x98 (= $x64 true)))
 (let (($x68 (and $x98 $x196)))
 (let (($x17 (and $x68 $x107)))
 (let (($x154 (and $x17 $x67)))
 (let (($x127 (and $x154 $x159)))
 (let (($x88 (and $x127 $x77)))
 (let (($x217 (and $x88 $x114)))
 (let (($x226 (and $x217 $x221)))
 (let (($x248 (and $x226 $x240)))
 (let (($x195 (and $x248 $x89)))
 (let (($x170 (and $x195 $x269)))
 (let (($x272 (and $x170 $x321)))
 (let (($x32 (and $x272 $x290)))
 (let (($x180 (and $x32 $x233)))
 (let (($x252 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and (not $x252) $x180)))
 (let (($x265 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (and $x265 $x262)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x254 (and $x207 $x26)))
 (let (($x257 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x257 $x254)))
 (let (($x15 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x174 (_ bv3 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x86 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x46 (or false (or false (and (and true (or $x25 $x86)) (or $x255 $x15))))))
 (let (($x5 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x46)))
 (let (($x92 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x46)))
 (let (($x73 (and $x92 $x289)))
 (let (($x264 (=> $x73 $x288)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x284 (forall ((input.ind-%var917X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var917X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x86 (bvadd ?x174 (_ bv3 32))))
 (let ((?x160 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x174 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x273 (store ?x160 (bvadd ?x174 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x210 (store ?x273 (bvadd ?x174 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x228 (store ?x210 ?x86 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x158 (concat (select ?x228 (bvadd ?x180 (_ bv2 32))) (concat (select ?x228 (bvadd ?x180 (_ bv1 32))) (select ?x228 ?x180)))))
 (let ((?x243 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var917X)))
 (let (($x52 (= input.ind-%var917X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x242 (= (ite $x52 input.spec-%var-i-0.L3%6%bbentry ?x243) (concat (select ?x228 (bvadd ?x180 (_ bv3 32))) ?x158))))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var917X)))
 (let (($x117 (or $x313 $x52)))
 (=> $x117 $x242))))))))))))))))
 ))
 (let (($x211 (forall ((input.ind-%var916X (_ BitVec 32)) )(let (($x121 (bvule (_ bv0 32) input.ind-%var916X)))
 (let (($x200 (and $x121 (bvult input.ind-%var916X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x52 (= input.ind-%var916X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var916X)))
 (let (($x117 (or $x313 $x52)))
 (= $x117 $x200)))))))
 ))
 (let (($x308 (and $x211 $x284)))
 (let (($x111 (= true true)))
 (let (($x280 (and $x111 $x308)))
 (let (($x282 (= $x280 true)))
 (let (($x310 (forall ((input.ind-%var909X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var909X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var909X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var908X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var908X)))
 (= $x140 false)))
 ))
 (let (($x198 (and $x317 $x310)))
 (let (($x258 (= $x198 true)))
 (let (($x87 (forall ((input.ind-%var903X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var903X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x180))))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv2 32))) ?x289)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv3 32))) ?x253)))
 (let ((?x243 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var903X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var903X)))
 (=> $x313 (= ?x243 ?x264)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x121 (bvule (_ bv0 32) input.ind-%var902X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var902X)))
 (= $x313 (and $x121 (bvult input.ind-%var902X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x225 (and $x270 $x87)))
 (let (($x274 (= $x225 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x85)))
 (let (($x139 (= ?x213 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x321 (= $x139 true)))
 (let (($x272 (= $x321 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x172 (= (_ bv0 2) ?x245)))
 (let (($x269 (= $x172 true)))
 (let (($x170 (= $x269 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x215 true)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x229 (bvsub ?x174 ?x113)))
 (let (($x143 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x229) (bvult ?x174 ?x229))))
 (let (($x137 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x222 (ite $x137 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x114 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x217 (bvmul (_ bv4 64) ?x114)))
 (let ((?x75 ((_ extract 63 32) ?x217)))
 (let (($x71 (= ?x75 ?x222)))
 (let (($x110 (and $x71 $x143)))
 (let (($x144 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x141 (and $x144 $x110)))
 (let (($x214 (= true $x141)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x230 (=> $x190 $x214)))
 (let (($x42 (= $x230 true)))
 (let (($x37 (= $x42 true)))
 (let (($x223 (= $x37 true)))
 (let (($x159 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x159 true)))
 (let (($x102 (= $x127 true)))
 (let (($x183 (= $x102 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x177 (= $x182 true)))
 (let (($x104 (= $x177 true)))
 (let (($x51 (= $x104 true)))
 (let (($x176 (= $x190 true)))
 (let (($x30 (= $x176 true)))
 (let (($x69 (= $x30 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x166)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x61)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x162)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x48 $x146)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x23 $x95)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x91 $x28)))
 (let (($x131 (not $x80)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x59 $x24)))
 (let (($x115 (and (not $x66) $x131)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x93 $x149)))
 (let (($x74 (not $x33)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x68 $x60)))
 (let (($x31 (and (not $x12) $x74)))
 (let (($x181 (and (and (and (and (and (and $x31 $x115) $x175) $x147) $x106) $x103) $x188)))
 (let (($x178 (and $x181 $x130)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x138 (or false (or false (and (and true (or $x107 $x17)) (or $x57 $x67))))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x44 (and $x179 $x178)))
 (let (($x157 (= $x44 true)))
 (let (($x129 (= $x157 true)))
 (let (($x135 (= $x129 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x65 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x65 true)))
 (let (($x16 (= $x83 true)))
 (let (($x64 (= ?x53 input.dst.llvm-%n)))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x13 (and $x81 $x16)))
 (let (($x187 (and $x13 $x135)))
 (let (($x94 (and $x187 $x69)))
 (let (($x97 (and $x94 $x51)))
 (let (($x77 (and $x97 $x183)))
 (let (($x148 (and $x77 $x223)))
 (let (($x221 (and $x148 $x218)))
 (let (($x240 (and $x221 $x239)))
 (let (($x89 (and $x240 $x250)))
 (let (($x167 (and $x89 $x170)))
 (let (($x101 (and $x167 $x272)))
 (let (($x232 (and $x101 $x274)))
 (let (($x212 (and $x232 $x258)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x314 (and (not $x292) $x212)))
 (let (($x256 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (and $x256 $x314)))
 (let (($x322 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x251 (and $x322 $x279)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x202 (and $x261 $x251)))
 (let (($x7 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd ?x174 (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x266 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x92 (or false (or false (and (and true (or $x126 $x266)) (or $x14 $x7))))))
 (let (($x257 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x92)))
 (let (($x63 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x92)))
 (let (($x287 (and $x63 $x202)))
 (let (($x309 (=> $x287 $x282)))
 (not $x309)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x284 (forall ((input.ind-%var917X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var917X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x86 (bvadd ?x174 (_ bv3 32))))
 (let ((?x160 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x174 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x273 (store ?x160 (bvadd ?x174 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x210 (store ?x273 (bvadd ?x174 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x228 (store ?x210 ?x86 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x158 (concat (select ?x228 (bvadd ?x180 (_ bv2 32))) (concat (select ?x228 (bvadd ?x180 (_ bv1 32))) (select ?x228 ?x180)))))
 (let ((?x243 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var917X)))
 (let (($x52 (= input.ind-%var917X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x242 (= (ite $x52 input.spec-%var-i-0.L3%6%bbentry ?x243) (concat (select ?x228 (bvadd ?x180 (_ bv3 32))) ?x158))))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var917X)))
 (let (($x117 (or $x313 $x52)))
 (=> $x117 $x242))))))))))))))))
 ))
 (let (($x211 (forall ((input.ind-%var916X (_ BitVec 32)) )(let (($x121 (bvule (_ bv0 32) input.ind-%var916X)))
 (let (($x200 (and $x121 (bvult input.ind-%var916X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x52 (= input.ind-%var916X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var916X)))
 (let (($x117 (or $x313 $x52)))
 (= $x117 $x200)))))))
 ))
 (let (($x308 (and $x211 $x284)))
 (let (($x111 (= true true)))
 (let (($x280 (and $x111 $x308)))
 (let (($x282 (= $x280 true)))
 (let (($x310 (forall ((input.ind-%var909X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var909X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var909X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var908X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var908X)))
 (= $x140 false)))
 ))
 (let (($x198 (and $x317 $x310)))
 (let (($x258 (= $x198 true)))
 (let (($x87 (forall ((input.ind-%var903X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var903X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x180))))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv2 32))) ?x289)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv3 32))) ?x253)))
 (let ((?x243 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var903X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var903X)))
 (=> $x313 (= ?x243 ?x264)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x121 (bvule (_ bv0 32) input.ind-%var902X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var902X)))
 (= $x313 (and $x121 (bvult input.ind-%var902X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x225 (and $x270 $x87)))
 (let (($x274 (= $x225 true)))
 (let ((?x85 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x85)))
 (let (($x139 (= ?x213 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x321 (= $x139 true)))
 (let (($x272 (= $x321 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x172 (= (_ bv0 2) ?x245)))
 (let (($x269 (= $x172 true)))
 (let (($x170 (= $x269 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x247 (= $x248 true)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (= $x226 true)))
 (let (($x238 (= $x234 true)))
 (let (($x239 (= $x238 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x215 true)))
 (let (($x220 (= $x219 true)))
 (let (($x218 (= $x220 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x229 (bvsub ?x174 ?x113)))
 (let (($x143 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x229) (bvult ?x174 ?x229))))
 (let (($x137 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x222 (ite $x137 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x114 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x217 (bvmul (_ bv4 64) ?x114)))
 (let ((?x75 ((_ extract 63 32) ?x217)))
 (let (($x71 (= ?x75 ?x222)))
 (let (($x110 (and $x71 $x143)))
 (let (($x144 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x141 (and $x144 $x110)))
 (let (($x214 (= true $x141)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x230 (=> $x190 $x214)))
 (let (($x42 (= $x230 true)))
 (let (($x37 (= $x42 true)))
 (let (($x223 (= $x37 true)))
 (let (($x159 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x159 true)))
 (let (($x102 (= $x127 true)))
 (let (($x183 (= $x102 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x177 (= $x182 true)))
 (let (($x104 (= $x177 true)))
 (let (($x51 (= $x104 true)))
 (let (($x176 (= $x190 true)))
 (let (($x30 (= $x176 true)))
 (let (($x69 (= $x30 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x166)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x61)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x162)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x48 $x146)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x23 $x95)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x91 $x28)))
 (let (($x131 (not $x80)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x59 $x24)))
 (let (($x115 (and (not $x66) $x131)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x93 $x149)))
 (let (($x74 (not $x33)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x68 $x60)))
 (let (($x31 (and (not $x12) $x74)))
 (let (($x181 (and (and (and (and (and (and $x31 $x115) $x175) $x147) $x106) $x103) $x188)))
 (let (($x178 (and $x181 $x130)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x138 (or false (or false (and (and true (or $x107 $x17)) (or $x57 $x67))))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x44 (and $x179 $x178)))
 (let (($x157 (= $x44 true)))
 (let (($x129 (= $x157 true)))
 (let (($x135 (= $x129 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x65 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x65 true)))
 (let (($x16 (= $x83 true)))
 (let (($x64 (= ?x53 input.dst.llvm-%n)))
 (let (($x98 (= $x64 true)))
 (let (($x81 (= $x98 true)))
 (let (($x13 (and $x81 $x16)))
 (let (($x187 (and $x13 $x135)))
 (let (($x94 (and $x187 $x69)))
 (let (($x97 (and $x94 $x51)))
 (let (($x77 (and $x97 $x183)))
 (let (($x148 (and $x77 $x223)))
 (let (($x221 (and $x148 $x218)))
 (let (($x240 (and $x221 $x239)))
 (let (($x89 (and $x240 $x250)))
 (let (($x167 (and $x89 $x170)))
 (let (($x101 (and $x167 $x272)))
 (let (($x232 (and $x101 $x274)))
 (let (($x212 (and $x232 $x258)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x314 (and (not $x292) $x212)))
 (let (($x256 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (and $x256 $x314)))
 (let (($x322 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x251 (and $x322 $x279)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x202 (and $x261 $x251)))
 (let (($x7 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd ?x174 (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x266 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x92 (or false (or false (and (and true (or $x126 $x266)) (or $x14 $x7))))))
 (let (($x257 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x92)))
 (let (($x63 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x92)))
 (let (($x287 (and $x63 $x202)))
 (let (($x309 (=> $x287 $x282)))
 (not $x309)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (not $x190)))
 (let (($x211 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (not $x211)))
 (let (($x6 (or $x153 $x281)))
 (let (($x160 (= $x6 true)))
 (let (($x100 (= $x160 true)))
 (let (($x287 (forall ((input.ind-%var929X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var929X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var929X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var928X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var928X)))
 (= $x140 false)))
 ))
 (let (($x111 (and $x124 $x287)))
 (let (($x52 (= $x111 true)))
 (let (($x271 (forall ((input.ind-%var923X (_ BitVec 32)) )(let ((?x233 (bvadd (bvmul input.ind-%var923X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x233))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x233 (_ bv2 32))) ?x32)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x233 (_ bv3 32))) ?x26)))
 (let ((?x172 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var923X)))
 (let (($x218 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var923X)))
 (=> $x218 (= ?x172 ?x289)))))))))
 ))
 (let (($x250 (forall ((input.ind-%var922X (_ BitVec 32)) )(let (($x247 (and (bvule (_ bv0 32) input.ind-%var922X) (bvult input.ind-%var922X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x218 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var922X)))
 (= $x218 $x247))))
 ))
 (let (($x192 (and $x250 $x271)))
 (let (($x87 (= $x192 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x214)))
 (let (($x42 (= ?x230 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x42 true)))
 (let (($x223 (= $x37 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x137)))
 (let (($x164 (= ?x222 input.dst.llvm-%n)))
 (let (($x143 (= $x164 true)))
 (let (($x110 (= $x143 true)))
 (let (($x71 (= ?x222 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (= $x71 true)))
 (let (($x229 (= $x125 true)))
 (let (($x27 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x144 (= $x27 true)))
 (let (($x50 (= $x144 true)))
 (let (($x114 (= $x50 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x127 true)))
 (let (($x183 (= $x102 true)))
 (let (($x77 (= $x183 true)))
 (let (($x177 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x177 true)))
 (let (($x51 (= $x104 true)))
 (let (($x97 (= $x51 true)))
 (let (($x30 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x69 (= $x30 true)))
 (let (($x94 (= $x69 true)))
 (let (($x56 (= $x94 true)))
 (let (($x44 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x157 (= $x44 true)))
 (let (($x129 (= $x157 true)))
 (let (($x135 (= $x129 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x48)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x155)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x115 $x185)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x131 $x175)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x33 $x74)))
 (let (($x59 (not $x31)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x29 $x93)))
 (let (($x66 (and (not $x149) $x59)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x47 $x138)))
 (let (($x68 (not $x179)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x98 $x81)))
 (let (($x12 (and (not $x20) $x68)))
 (let (($x103 (and (and (and (and (and (and $x12 $x66) $x91) $x80) $x109) $x147) $x23)))
 (let (($x186 (and $x103 $x162)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x57 (or false (or false (and (and true (or $x13 $x22)) (or $x62 $x107))))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x61 (and $x154 $x186)))
 (let (($x188 (= $x61 true)))
 (let (($x181 (= $x188 true)))
 (let (($x166 (= $x181 true)))
 (let ((?x319 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x72 (= (_ bv0 2) ?x319)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x130 (and $x53 $x166)))
 (let (($x187 (and $x130 $x135)))
 (let (($x182 (and $x187 $x56)))
 (let (($x159 (and $x182 $x97)))
 (let (($x88 (and $x159 $x77)))
 (let (($x217 (and $x88 $x114)))
 (let (($x171 (and $x217 $x229)))
 (let (($x141 (and $x171 $x110)))
 (let (($x148 (and $x141 $x223)))
 (let (($x225 (and $x148 $x87)))
 (let (($x117 (and $x225 $x52)))
 (let (($x252 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x312 (and $x252 $x117)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x236 (and $x315 $x312)))
 (let (($x260 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x260 $x236)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let (($x46 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x174 (_ bv3 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x255 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x266)))
 (let (($x63 (or false (or false (and (and true (or $x9 $x255)) (or $x267 $x46))))))
 (let (($x261 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x63)))
 (let (($x18 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x63)))
 (let (($x78 (and $x18 $x200)))
 (let (($x278 (=> $x78 $x100)))
 (not $x278))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (not $x190)))
 (let (($x211 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (not $x211)))
 (let (($x6 (or $x153 $x281)))
 (let (($x160 (= $x6 true)))
 (let (($x100 (= $x160 true)))
 (let (($x287 (forall ((input.ind-%var929X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var929X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var929X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var928X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var928X)))
 (= $x140 false)))
 ))
 (let (($x111 (and $x124 $x287)))
 (let (($x52 (= $x111 true)))
 (let (($x271 (forall ((input.ind-%var923X (_ BitVec 32)) )(let ((?x233 (bvadd (bvmul input.ind-%var923X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x233))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x233 (_ bv2 32))) ?x32)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x233 (_ bv3 32))) ?x26)))
 (let ((?x172 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var923X)))
 (let (($x218 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var923X)))
 (=> $x218 (= ?x172 ?x289)))))))))
 ))
 (let (($x250 (forall ((input.ind-%var922X (_ BitVec 32)) )(let (($x247 (and (bvule (_ bv0 32) input.ind-%var922X) (bvult input.ind-%var922X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x218 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var922X)))
 (= $x218 $x247))))
 ))
 (let (($x192 (and $x250 $x271)))
 (let (($x87 (= $x192 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x214)))
 (let (($x42 (= ?x230 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x42 true)))
 (let (($x223 (= $x37 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x137)))
 (let (($x164 (= ?x222 input.dst.llvm-%n)))
 (let (($x143 (= $x164 true)))
 (let (($x110 (= $x143 true)))
 (let (($x71 (= ?x222 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (= $x71 true)))
 (let (($x229 (= $x125 true)))
 (let (($x27 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x144 (= $x27 true)))
 (let (($x50 (= $x144 true)))
 (let (($x114 (= $x50 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x127 true)))
 (let (($x183 (= $x102 true)))
 (let (($x77 (= $x183 true)))
 (let (($x177 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x177 true)))
 (let (($x51 (= $x104 true)))
 (let (($x97 (= $x51 true)))
 (let (($x30 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x69 (= $x30 true)))
 (let (($x94 (= $x69 true)))
 (let (($x56 (= $x94 true)))
 (let (($x44 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x157 (= $x44 true)))
 (let (($x129 (= $x157 true)))
 (let (($x135 (= $x129 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x48)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x155)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x115 $x185)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x131 $x175)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x33 $x74)))
 (let (($x59 (not $x31)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x29 $x93)))
 (let (($x66 (and (not $x149) $x59)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x47 $x138)))
 (let (($x68 (not $x179)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x98 $x81)))
 (let (($x12 (and (not $x20) $x68)))
 (let (($x103 (and (and (and (and (and (and $x12 $x66) $x91) $x80) $x109) $x147) $x23)))
 (let (($x186 (and $x103 $x162)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x57 (or false (or false (and (and true (or $x13 $x22)) (or $x62 $x107))))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x61 (and $x154 $x186)))
 (let (($x188 (= $x61 true)))
 (let (($x181 (= $x188 true)))
 (let (($x166 (= $x181 true)))
 (let ((?x319 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x72 (= (_ bv0 2) ?x319)))
 (let (($x49 (= $x72 true)))
 (let (($x53 (= $x49 true)))
 (let (($x130 (and $x53 $x166)))
 (let (($x187 (and $x130 $x135)))
 (let (($x182 (and $x187 $x56)))
 (let (($x159 (and $x182 $x97)))
 (let (($x88 (and $x159 $x77)))
 (let (($x217 (and $x88 $x114)))
 (let (($x171 (and $x217 $x229)))
 (let (($x141 (and $x171 $x110)))
 (let (($x148 (and $x141 $x223)))
 (let (($x225 (and $x148 $x87)))
 (let (($x117 (and $x225 $x52)))
 (let (($x252 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x312 (and $x252 $x117)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x236 (and $x315 $x312)))
 (let (($x260 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x260 $x236)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let (($x46 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x174 (_ bv3 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x255 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x266)))
 (let (($x63 (or false (or false (and (and true (or $x9 $x255)) (or $x267 $x46))))))
 (let (($x261 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x63)))
 (let (($x18 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x63)))
 (let (($x78 (and $x18 $x200)))
 (let (($x278 (=> $x78 $x100)))
 (not $x278))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x323 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x224 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x96 (bvmul (_ bv4294967295 32) ?x224)))
 (let ((?x133 (bvneg ?x96)))
 (let (($x276 (= ?x133 ?x323)))
 (let (($x41 (= $x276 true)))
 (let (($x242 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var941X)))
 (=> $x279 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var941X) (_ bv0 32)))))
 ))
 (let (($x210 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var940X)))
 (= $x279 false)))
 ))
 (let (($x283 (and $x210 $x242)))
 (let (($x284 (= $x283 true)))
 (let (($x232 (forall ((input.ind-%var935X (_ BitVec 32)) )(let ((?x313 (bvadd (bvmul input.ind-%var935X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x313))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv2 32))) ?x272)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv3 32))) ?x198)))
 (let ((?x100 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var935X)))
 (let (($x202 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var935X)))
 (=> $x202 (= ?x100 ?x239)))))))))
 ))
 (let (($x153 (forall ((input.ind-%var934X (_ BitVec 32)) )(let (($x78 (and (bvule (_ bv0 32) input.ind-%var934X) (bvult input.ind-%var934X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x202 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var934X)))
 (= $x202 $x78))))
 ))
 (let (($x317 (and $x153 $x232)))
 (let (($x195 (= $x317 true)))
 (let ((?x271 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x271)))
 (let (($x87 (= ?x192 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x87 true)))
 (let (($x140 (= $x225 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x32 true)))
 (let (($x289 (= $x26 true)))
 (let (($x253 (= $x289 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x318 (= $x73 true)))
 (let (($x152 (= $x318 true)))
 (let (($x288 (= $x152 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (= $x316 true)))
 (let (($x254 (= $x233 true)))
 (let (($x262 (= $x254 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x42 (bvsub ?x174 ?x113)))
 (let (($x220 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x42) (bvult ?x174 ?x42))))
 (let (($x141 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x141 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x164 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x164)))
 (let ((?x110 ((_ extract 63 32) ?x143)))
 (let (($x230 (= ?x110 ?x214)))
 (let (($x218 (and $x230 $x220)))
 (let (($x229 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x248 (and $x229 $x218)))
 (let (($x240 (= true $x248)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (=> $x190 $x240)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x172 (= $x250 true)))
 (let (($x114 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x88 (= $x77 true)))
 (let (($x27 (= $x88 true)))
 (let (($x144 (= $x27 true)))
 (let (($x97 (= $x190 true)))
 (let (($x159 (= $x97 true)))
 (let (($x127 (= $x159 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x44)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x130)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x162)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x48 $x186)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x103 $x61)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x40 $x185)))
 (let (($x109 (not $x175)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x106 $x131)))
 (let (($x150 (and (not $x115) $x109)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x146 $x84)))
 (let (($x95 (not $x91)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x98 $x81)))
 (let (($x80 (and (not $x66) $x95)))
 (let (($x69 (and (and (and (and (and (and $x80 $x150) $x70) $x23) $x188) $x166) $x178)))
 (let (($x94 (and $x69 $x157)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x74 (or false (or false (and (and true (or $x138 $x179)) (or $x29 $x93))))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x56 (and $x59 $x94)))
 (let (($x182 (= $x56 true)))
 (let (($x177 (= $x182 true)))
 (let (($x104 (= $x177 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x17 (= (_ bv0 2) ?x107)))
 (let (($x58 (= $x17 true)))
 (let (($x116 (= $x58 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x53)))
 (let (($x13 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x13 true)))
 (let (($x19 (= $x22 true)))
 (let (($x83 (= ?x65 input.dst.llvm-%n)))
 (let (($x67 (= $x83 true)))
 (let (($x16 (= $x67 true)))
 (let (($x151 (and $x16 $x19)))
 (let (($x57 (and $x151 $x116)))
 (let (($x51 (and $x57 $x104)))
 (let (($x102 (and $x51 $x127)))
 (let (($x50 (and $x102 $x144)))
 (let (($x222 (and $x50 $x137)))
 (let (($x170 (and $x222 $x172)))
 (let (($x101 (and $x170 $x262)))
 (let (($x180 (and $x101 $x288)))
 (let (($x264 (and $x180 $x253)))
 (let (($x203 (and $x264 $x140)))
 (let (($x243 (and $x203 $x195)))
 (let (($x308 (and $x243 $x284)))
 (let (($x72 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x282 (and (not $x72) $x308)))
 (let (($x292 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x309 (and $x292 $x282)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x265 $x309)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x79 (and $x207 $x208)))
 (let (($x92 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd ?x174 (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x14 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x18 (or false (or false (and (and true (or $x11 $x14)) (or $x5 $x92))))))
 (let (($x260 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x8 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x196 (and $x8 $x79)))
 (let (($x291 (=> $x196 $x41)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x323 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x224 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x96 (bvmul (_ bv4294967295 32) ?x224)))
 (let ((?x133 (bvneg ?x96)))
 (let (($x276 (= ?x133 ?x323)))
 (let (($x41 (= $x276 true)))
 (let (($x242 (forall ((input.ind-%var941X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var941X)))
 (=> $x279 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var941X) (_ bv0 32)))))
 ))
 (let (($x210 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var940X)))
 (= $x279 false)))
 ))
 (let (($x283 (and $x210 $x242)))
 (let (($x284 (= $x283 true)))
 (let (($x232 (forall ((input.ind-%var935X (_ BitVec 32)) )(let ((?x313 (bvadd (bvmul input.ind-%var935X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x313))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv2 32))) ?x272)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv3 32))) ?x198)))
 (let ((?x100 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var935X)))
 (let (($x202 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var935X)))
 (=> $x202 (= ?x100 ?x239)))))))))
 ))
 (let (($x153 (forall ((input.ind-%var934X (_ BitVec 32)) )(let (($x78 (and (bvule (_ bv0 32) input.ind-%var934X) (bvult input.ind-%var934X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x202 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var934X)))
 (= $x202 $x78))))
 ))
 (let (($x317 (and $x153 $x232)))
 (let (($x195 (= $x317 true)))
 (let ((?x271 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x271)))
 (let (($x87 (= ?x192 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x87 true)))
 (let (($x140 (= $x225 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x32 true)))
 (let (($x289 (= $x26 true)))
 (let (($x253 (= $x289 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x318 (= $x73 true)))
 (let (($x152 (= $x318 true)))
 (let (($x288 (= $x152 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (= $x316 true)))
 (let (($x254 (= $x233 true)))
 (let (($x262 (= $x254 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x42 (bvsub ?x174 ?x113)))
 (let (($x220 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x42) (bvult ?x174 ?x42))))
 (let (($x141 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x141 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x164 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x164)))
 (let ((?x110 ((_ extract 63 32) ?x143)))
 (let (($x230 (= ?x110 ?x214)))
 (let (($x218 (and $x230 $x220)))
 (let (($x229 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x248 (and $x229 $x218)))
 (let (($x240 (= true $x248)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (=> $x190 $x240)))
 (let (($x249 (= $x247 true)))
 (let (($x250 (= $x249 true)))
 (let (($x172 (= $x250 true)))
 (let (($x114 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x88 (= $x77 true)))
 (let (($x27 (= $x88 true)))
 (let (($x144 (= $x27 true)))
 (let (($x97 (= $x190 true)))
 (let (($x159 (= $x97 true)))
 (let (($x127 (= $x159 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x44)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x130)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x162)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x48 $x186)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x103 $x61)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x40 $x185)))
 (let (($x109 (not $x175)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x106 $x131)))
 (let (($x150 (and (not $x115) $x109)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x146 $x84)))
 (let (($x95 (not $x91)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x98 $x81)))
 (let (($x80 (and (not $x66) $x95)))
 (let (($x69 (and (and (and (and (and (and $x80 $x150) $x70) $x23) $x188) $x166) $x178)))
 (let (($x94 (and $x69 $x157)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x74 (or false (or false (and (and true (or $x138 $x179)) (or $x29 $x93))))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x56 (and $x59 $x94)))
 (let (($x182 (= $x56 true)))
 (let (($x177 (= $x182 true)))
 (let (($x104 (= $x177 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x17 (= (_ bv0 2) ?x107)))
 (let (($x58 (= $x17 true)))
 (let (($x116 (= $x58 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x53)))
 (let (($x13 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x13 true)))
 (let (($x19 (= $x22 true)))
 (let (($x83 (= ?x65 input.dst.llvm-%n)))
 (let (($x67 (= $x83 true)))
 (let (($x16 (= $x67 true)))
 (let (($x151 (and $x16 $x19)))
 (let (($x57 (and $x151 $x116)))
 (let (($x51 (and $x57 $x104)))
 (let (($x102 (and $x51 $x127)))
 (let (($x50 (and $x102 $x144)))
 (let (($x222 (and $x50 $x137)))
 (let (($x170 (and $x222 $x172)))
 (let (($x101 (and $x170 $x262)))
 (let (($x180 (and $x101 $x288)))
 (let (($x264 (and $x180 $x253)))
 (let (($x203 (and $x264 $x140)))
 (let (($x243 (and $x203 $x195)))
 (let (($x308 (and $x243 $x284)))
 (let (($x72 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x282 (and (not $x72) $x308)))
 (let (($x292 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x309 (and $x292 $x282)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x265 $x309)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x79 (and $x207 $x208)))
 (let (($x92 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd ?x174 (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x14 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x18 (or false (or false (and (and true (or $x11 $x14)) (or $x5 $x92))))))
 (let (($x260 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x8 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x196 (and $x8 $x79)))
 (let (($x291 (=> $x196 $x41)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x310 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x246 (bvule ?x310 (_ bv4294967294 32))))
 (let (($x6 (= $x246 true)))
 (let (($x275 (= $x6 true)))
 (let (($x221 (forall ((input.ind-%var953X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var953X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var953X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var952X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var952X)))
 (= $x209 false)))
 ))
 (let (($x212 (and $x111 $x221)))
 (let (($x226 (= $x212 true)))
 (let (($x156 (forall ((input.ind-%var947X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var947X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x308))))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x308 (_ bv2 32))) ?x79)))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x308 (_ bv3 32))) ?x96)))
 (let ((?x139 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var947X)))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var947X)))
 (=> $x78 (= ?x139 ?x276)))))))))
 ))
 (let (($x121 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var946X) (bvult input.ind-%var946X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var946X)))
 (= $x78 $x238))))
 ))
 (let (($x99 (and $x121 $x156)))
 (let (($x154 (= $x99 true)))
 (let ((?x192 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x192)))
 (let (($x225 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x225 true)))
 (let (($x203 (= $x140 true)))
 (let (($x26 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x26 true)))
 (let (($x253 (= $x289 true)))
 (let (($x264 (= $x253 true)))
 (let (($x318 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x318 true)))
 (let (($x288 (= $x152 true)))
 (let (($x180 (= $x288 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x218)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x148)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (and $x110 $x214)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x143 $x230)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x114 $x217)))
 (let (($x137 (not $x75)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x27 $x144)))
 (let (($x71 (and (not $x50) $x137)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x159 $x127)))
 (let (($x183 (not $x102)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x61 $x188)))
 (let (($x88 (and (not $x97) $x183)))
 (let (($x170 (and (and (and (and (and (and $x88 $x71) $x229) $x164) $x37) $x223) $x220)))
 (let (($x316 (and $x170 $x248)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x177 (or false (or false (and (and true (or $x30 $x130)) (or $x44 $x157))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x177)))
 (let (($x233 (and $x51 $x316)))
 (let (($x254 (= $x233 true)))
 (let (($x262 (= $x254 true)))
 (let (($x101 (= $x262 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (= $x23 true)))
 (let (($x103 (= $x187 true)))
 (let (($x48 (= $x103 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x129 true)))
 (let (($x70 (= $x147 true)))
 (let (($x135 (= $x70 true)))
 (let ((?x40 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x40)))
 (let (($x175 (= $x185 true)))
 (let (($x109 (= $x175 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x66)))
 (let (($x80 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (= $x80 true)))
 (let (($x131 (= $x106 true)))
 (let (($x146 (= ?x28 input.dst.llvm-%n)))
 (let (($x84 (= $x146 true)))
 (let (($x91 (= $x84 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x138 (bvsub ?x174 ?x113)))
 (let (($x29 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x138) (bvult ?x174 ?x138))))
 (let (($x20 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x20 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x58 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x58)))
 (let ((?x57 ((_ extract 63 32) ?x116)))
 (let (($x47 (= ?x57 ?x31)))
 (let (($x93 (and $x47 $x29)))
 (let (($x107 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x149 (and $x107 $x93)))
 (let (($x24 (= true $x149)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (=> $x190 $x24)))
 (let (($x74 (= $x33 true)))
 (let (($x59 (= $x74 true)))
 (let (($x98 (= $x59 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x16 (= $x67 true)))
 (let (($x13 (= $x16 true)))
 (let (($x22 (= $x13 true)))
 (let (($x49 (= $x190 true)))
 (let (($x53 (= $x49 true)))
 (let (($x65 (= $x53 true)))
 (let (($x19 (and $x65 $x22)))
 (let (($x81 (and $x19 $x98)))
 (let (($x95 (and $x81 $x91)))
 (let (($x115 (and $x95 $x131)))
 (let (($x150 (and $x115 $x109)))
 (let (($x155 (and $x150 $x135)))
 (let (($x162 (and $x155 $x48)))
 (let (($x73 (and $x162 $x101)))
 (let (($x32 (and $x73 $x180)))
 (let (($x271 (and $x32 $x264)))
 (let (($x251 (and $x271 $x203)))
 (let (($x287 (and $x251 $x154)))
 (let (($x85 (and $x287 $x226)))
 (let (($x280 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and (not $x280) $x85)))
 (let (($x319 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (and $x319 $x258)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x256 $x117)))
 (let (($x322 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x322 $x312)))
 (let (($x63 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x174 (_ bv3 32))))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x267 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x8 (or false (or false (and (and true (or $x15 $x267)) (or $x257 $x63))))))
 (let (($x207 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x86 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x314 (and $x86 $x194)))
 (let (($x241 (=> $x314 $x275)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x310 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x246 (bvule ?x310 (_ bv4294967294 32))))
 (let (($x6 (= $x246 true)))
 (let (($x275 (= $x6 true)))
 (let (($x221 (forall ((input.ind-%var953X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var953X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var953X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var952X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var952X)))
 (= $x209 false)))
 ))
 (let (($x212 (and $x111 $x221)))
 (let (($x226 (= $x212 true)))
 (let (($x156 (forall ((input.ind-%var947X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var947X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x308))))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x308 (_ bv2 32))) ?x79)))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x308 (_ bv3 32))) ?x96)))
 (let ((?x139 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var947X)))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var947X)))
 (=> $x78 (= ?x139 ?x276)))))))))
 ))
 (let (($x121 (forall ((input.ind-%var946X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var946X) (bvult input.ind-%var946X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var946X)))
 (= $x78 $x238))))
 ))
 (let (($x99 (and $x121 $x156)))
 (let (($x154 (= $x99 true)))
 (let ((?x192 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x192)))
 (let (($x225 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x225 true)))
 (let (($x203 (= $x140 true)))
 (let (($x26 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x26 true)))
 (let (($x253 (= $x289 true)))
 (let (($x264 (= $x253 true)))
 (let (($x318 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x318 true)))
 (let (($x288 (= $x152 true)))
 (let (($x180 (= $x288 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x218)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x148)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (and $x110 $x214)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x143 $x230)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x114 $x217)))
 (let (($x137 (not $x75)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x27 $x144)))
 (let (($x71 (and (not $x50) $x137)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x159 $x127)))
 (let (($x183 (not $x102)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x61 $x188)))
 (let (($x88 (and (not $x97) $x183)))
 (let (($x170 (and (and (and (and (and (and $x88 $x71) $x229) $x164) $x37) $x223) $x220)))
 (let (($x316 (and $x170 $x248)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x177 (or false (or false (and (and true (or $x30 $x130)) (or $x44 $x157))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x177)))
 (let (($x233 (and $x51 $x316)))
 (let (($x254 (= $x233 true)))
 (let (($x262 (= $x254 true)))
 (let (($x101 (= $x262 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (= $x23 true)))
 (let (($x103 (= $x187 true)))
 (let (($x48 (= $x103 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x129 true)))
 (let (($x70 (= $x147 true)))
 (let (($x135 (= $x70 true)))
 (let ((?x40 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x40)))
 (let (($x175 (= $x185 true)))
 (let (($x109 (= $x175 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x66)))
 (let (($x80 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (= $x80 true)))
 (let (($x131 (= $x106 true)))
 (let (($x146 (= ?x28 input.dst.llvm-%n)))
 (let (($x84 (= $x146 true)))
 (let (($x91 (= $x84 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x138 (bvsub ?x174 ?x113)))
 (let (($x29 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x138) (bvult ?x174 ?x138))))
 (let (($x20 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x20 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x58 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x58)))
 (let ((?x57 ((_ extract 63 32) ?x116)))
 (let (($x47 (= ?x57 ?x31)))
 (let (($x93 (and $x47 $x29)))
 (let (($x107 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x149 (and $x107 $x93)))
 (let (($x24 (= true $x149)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (=> $x190 $x24)))
 (let (($x74 (= $x33 true)))
 (let (($x59 (= $x74 true)))
 (let (($x98 (= $x59 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x16 (= $x67 true)))
 (let (($x13 (= $x16 true)))
 (let (($x22 (= $x13 true)))
 (let (($x49 (= $x190 true)))
 (let (($x53 (= $x49 true)))
 (let (($x65 (= $x53 true)))
 (let (($x19 (and $x65 $x22)))
 (let (($x81 (and $x19 $x98)))
 (let (($x95 (and $x81 $x91)))
 (let (($x115 (and $x95 $x131)))
 (let (($x150 (and $x115 $x109)))
 (let (($x155 (and $x150 $x135)))
 (let (($x162 (and $x155 $x48)))
 (let (($x73 (and $x162 $x101)))
 (let (($x32 (and $x73 $x180)))
 (let (($x271 (and $x32 $x264)))
 (let (($x251 (and $x271 $x203)))
 (let (($x287 (and $x251 $x154)))
 (let (($x85 (and $x287 $x226)))
 (let (($x280 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and (not $x280) $x85)))
 (let (($x319 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (and $x319 $x258)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x256 $x117)))
 (let (($x322 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x322 $x312)))
 (let (($x63 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x174 (_ bv3 32))))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x267 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x8 (or false (or false (and (and true (or $x15 $x267)) (or $x257 $x63))))))
 (let (($x207 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x86 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x314 (and $x86 $x194)))
 (let (($x241 (=> $x314 $x275)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x321 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x283 (bvsge ?x321 (_ bv0 32))))
 (let (($x245 (= $x283 true)))
 (let (($x132 (= $x245 true)))
 (let (($x210 (forall ((input.ind-%var965X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var965X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var965X) (_ bv0 32)))))
 ))
 (let (($x239 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var964X)))
 (= $x213 false)))
 ))
 (let (($x119 (and $x239 $x210)))
 (let (($x64 (= $x119 true)))
 (let (($x186 (forall ((input.ind-%var959X (_ BitVec 32)) )(let ((?x85 (bvadd (bvmul input.ind-%var959X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x85))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv2 32))) ?x194)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv3 32))) ?x246)))
 (let ((?x282 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var959X)))
 (let (($x238 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var959X)))
 (=> $x238 (= ?x282 ?x241)))))))))
 ))
 (let (($x196 (forall ((input.ind-%var958X (_ BitVec 32)) )(let (($x323 (and (bvule (_ bv0 32) input.ind-%var958X) (bvult input.ind-%var958X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x238 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var958X)))
 (= $x238 $x323))))
 ))
 (let (($x211 (and $x196 $x186)))
 (let (($x272 (= $x211 true)))
 (let ((?x87 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x87)))
 (let (($x140 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x140 true)))
 (let (($x251 (= $x203 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x289 true)))
 (let (($x264 (= $x253 true)))
 (let (($x271 (= $x264 true)))
 (let (($x152 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x288 (= $x152 true)))
 (let (($x180 (= $x288 true)))
 (let (($x32 (= $x180 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x223)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x250)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x230)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x249 $x110)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x164 $x141)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x114 $x217)))
 (let (($x137 (not $x75)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x144 $x50)))
 (let (($x240 (and (not $x222) $x137)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x159 $x127)))
 (let (($x183 (not $x102)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x181 $x104)))
 (let (($x27 (and (not $x77) $x183)))
 (let (($x316 (and (and (and (and (and (and $x27 $x240) $x229) $x171) $x214) $x37) $x42)))
 (let (($x233 (and $x316 $x172)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x61 (or false (or false (and (and true (or $x178 $x69)) (or $x94 $x56))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x61)))
 (let (($x254 (and $x97 $x233)))
 (let (($x262 (= $x254 true)))
 (let (($x101 (= $x262 true)))
 (let (($x73 (= $x101 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (= $x23 true)))
 (let (($x103 (= $x187 true)))
 (let (($x48 (= $x103 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x129 true)))
 (let (($x70 (= $x147 true)))
 (let (($x135 (= $x70 true)))
 (let ((?x40 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x40)))
 (let (($x175 (= $x185 true)))
 (let (($x109 (= $x175 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x66)))
 (let (($x80 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (= $x80 true)))
 (let (($x131 (= $x106 true)))
 (let (($x146 (= ?x28 input.dst.llvm-%n)))
 (let (($x84 (= $x146 true)))
 (let (($x91 (= $x84 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x179 (bvsub ?x174 ?x113)))
 (let (($x29 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x179) (bvult ?x174 ?x179))))
 (let (($x20 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x20 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x58 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x58)))
 (let ((?x57 ((_ extract 63 32) ?x116)))
 (let (($x47 (= ?x57 ?x31)))
 (let (($x93 (and $x47 $x29)))
 (let (($x107 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x149 (and $x107 $x93)))
 (let (($x24 (= true $x149)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (=> $x190 $x24)))
 (let (($x74 (= $x33 true)))
 (let (($x59 (= $x74 true)))
 (let (($x98 (= $x59 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x16 (= $x67 true)))
 (let (($x13 (= $x16 true)))
 (let (($x22 (= $x13 true)))
 (let (($x49 (= $x190 true)))
 (let (($x53 (= $x49 true)))
 (let (($x65 (= $x53 true)))
 (let (($x19 (and $x65 $x22)))
 (let (($x81 (and $x19 $x98)))
 (let (($x95 (and $x81 $x91)))
 (let (($x115 (and $x95 $x131)))
 (let (($x150 (and $x115 $x109)))
 (let (($x155 (and $x150 $x135)))
 (let (($x162 (and $x155 $x48)))
 (let (($x318 (and $x162 $x73)))
 (let (($x26 (and $x318 $x32)))
 (let (($x192 (and $x26 $x271)))
 (let (($x236 (and $x192 $x251)))
 (let (($x281 (and $x236 $x272)))
 (let (($x200 (and $x281 $x64)))
 (let (($x268 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and (not $x268) $x200)))
 (let (($x72 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x242 (and $x72 $x39)))
 (let (($x252 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x252 $x242)))
 (let (($x315 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x142 (and $x315 $x278)))
 (let (($x18 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd ?x174 (_ bv3 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x5 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x86 (or false (or false (and (and true (or $x7 $x5)) (or $x261 $x18))))))
 (let (($x322 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x86)))
 (let (($x266 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x86)))
 (let (($x160 (and $x266 $x142)))
 (let (($x215 (=> $x160 $x132)))
 (not $x215)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x321 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x283 (bvsge ?x321 (_ bv0 32))))
 (let (($x245 (= $x283 true)))
 (let (($x132 (= $x245 true)))
 (let (($x210 (forall ((input.ind-%var965X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var965X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var965X) (_ bv0 32)))))
 ))
 (let (($x239 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var964X)))
 (= $x213 false)))
 ))
 (let (($x119 (and $x239 $x210)))
 (let (($x64 (= $x119 true)))
 (let (($x186 (forall ((input.ind-%var959X (_ BitVec 32)) )(let ((?x85 (bvadd (bvmul input.ind-%var959X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x85))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv2 32))) ?x194)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x85 (_ bv3 32))) ?x246)))
 (let ((?x282 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var959X)))
 (let (($x238 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var959X)))
 (=> $x238 (= ?x282 ?x241)))))))))
 ))
 (let (($x196 (forall ((input.ind-%var958X (_ BitVec 32)) )(let (($x323 (and (bvule (_ bv0 32) input.ind-%var958X) (bvult input.ind-%var958X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x238 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var958X)))
 (= $x238 $x323))))
 ))
 (let (($x211 (and $x196 $x186)))
 (let (($x272 (= $x211 true)))
 (let ((?x87 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x87)))
 (let (($x140 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x140 true)))
 (let (($x251 (= $x203 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x289 true)))
 (let (($x264 (= $x253 true)))
 (let (($x271 (= $x264 true)))
 (let (($x152 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x288 (= $x152 true)))
 (let (($x180 (= $x288 true)))
 (let (($x32 (= $x180 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x223)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x250)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x230)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x143)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x249 $x110)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x164 $x141)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x114 $x217)))
 (let (($x137 (not $x75)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x144 $x50)))
 (let (($x240 (and (not $x222) $x137)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x159 $x127)))
 (let (($x183 (not $x102)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x181 $x104)))
 (let (($x27 (and (not $x77) $x183)))
 (let (($x316 (and (and (and (and (and (and $x27 $x240) $x229) $x171) $x214) $x37) $x42)))
 (let (($x233 (and $x316 $x172)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x61 (or false (or false (and (and true (or $x178 $x69)) (or $x94 $x56))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x61)))
 (let (($x254 (and $x97 $x233)))
 (let (($x262 (= $x254 true)))
 (let (($x101 (= $x262 true)))
 (let (($x73 (= $x101 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (= $x23 true)))
 (let (($x103 (= $x187 true)))
 (let (($x48 (= $x103 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x129 true)))
 (let (($x70 (= $x147 true)))
 (let (($x135 (= $x70 true)))
 (let ((?x40 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x40)))
 (let (($x175 (= $x185 true)))
 (let (($x109 (= $x175 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x66)))
 (let (($x80 (= ?x28 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (= $x80 true)))
 (let (($x131 (= $x106 true)))
 (let (($x146 (= ?x28 input.dst.llvm-%n)))
 (let (($x84 (= $x146 true)))
 (let (($x91 (= $x84 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x179 (bvsub ?x174 ?x113)))
 (let (($x29 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x179) (bvult ?x174 ?x179))))
 (let (($x20 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x20 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x58 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x58)))
 (let ((?x57 ((_ extract 63 32) ?x116)))
 (let (($x47 (= ?x57 ?x31)))
 (let (($x93 (and $x47 $x29)))
 (let (($x107 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x149 (and $x107 $x93)))
 (let (($x24 (= true $x149)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (=> $x190 $x24)))
 (let (($x74 (= $x33 true)))
 (let (($x59 (= $x74 true)))
 (let (($x98 (= $x59 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x16 (= $x67 true)))
 (let (($x13 (= $x16 true)))
 (let (($x22 (= $x13 true)))
 (let (($x49 (= $x190 true)))
 (let (($x53 (= $x49 true)))
 (let (($x65 (= $x53 true)))
 (let (($x19 (and $x65 $x22)))
 (let (($x81 (and $x19 $x98)))
 (let (($x95 (and $x81 $x91)))
 (let (($x115 (and $x95 $x131)))
 (let (($x150 (and $x115 $x109)))
 (let (($x155 (and $x150 $x135)))
 (let (($x162 (and $x155 $x48)))
 (let (($x318 (and $x162 $x73)))
 (let (($x26 (and $x318 $x32)))
 (let (($x192 (and $x26 $x271)))
 (let (($x236 (and $x192 $x251)))
 (let (($x281 (and $x236 $x272)))
 (let (($x200 (and $x281 $x64)))
 (let (($x268 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and (not $x268) $x200)))
 (let (($x72 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x242 (and $x72 $x39)))
 (let (($x252 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x252 $x242)))
 (let (($x315 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x142 (and $x315 $x278)))
 (let (($x18 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd ?x174 (_ bv3 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x5 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x86 (or false (or false (and (and true (or $x7 $x5)) (or $x261 $x18))))))
 (let (($x322 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x86)))
 (let (($x266 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x86)))
 (let (($x160 (and $x266 $x142)))
 (let (($x215 (=> $x160 $x132)))
 (not $x215)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x309 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (bvule ?x309 (_ bv4294967294 32))))
 (let (($x232 (= $x212 true)))
 (let (($x43 (= $x232 true)))
 (let (($x111 (forall ((input.ind-%var977X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var977X)))
 (=> $x208 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var977X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var976X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var976X)))
 (= $x208 false)))
 ))
 (let (($x237 (and $x276 $x111)))
 (let (($x158 (= $x237 true)))
 (let (($x176 (forall ((input.ind-%var971X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var971X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x200))))
 (let ((?x283 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv2 32))) ?x142)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv3 32))) ?x283)))
 (let ((?x258 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var971X)))
 (let (($x323 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var971X)))
 (=> $x323 (= ?x258 ?x215)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var970X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var970X) (bvult input.ind-%var970X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x323 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var970X)))
 (= $x323 $x275))))
 ))
 (let (($x89 (and $x314 $x176)))
 (let (($x79 (= $x89 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x225)))
 (let (($x203 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x203 true)))
 (let (($x236 (= $x251 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x264 (= $x253 true)))
 (let (($x271 (= $x264 true)))
 (let (($x192 (= $x271 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x288 true)))
 (let (($x32 (= $x180 true)))
 (let (($x26 (= $x32 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x248 (bvsub ?x174 ?x113)))
 (let (($x223 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x248) (bvult ?x174 ?x248))))
 (let (($x218 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x230 (ite $x218 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x110 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x141 (bvmul (_ bv4 64) ?x110)))
 (let ((?x214 ((_ extract 63 32) ?x141)))
 (let (($x37 (= ?x214 ?x230)))
 (let (($x172 (and $x37 $x223)))
 (let (($x249 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x233 (and $x249 $x172)))
 (let (($x254 (= true $x233)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (=> $x190 $x254)))
 (let (($x101 (= $x262 true)))
 (let (($x73 (= $x101 true)))
 (let (($x318 (= $x73 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x229 (= $x125 true)))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let (($x75 (= $x190 true)))
 (let (($x137 (= $x75 true)))
 (let (($x240 (= $x137 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x104)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x97)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x157 $x56)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x44 $x182)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x187 $x103)))
 (let (($x162 (not $x48)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x135 $x155)))
 (let (($x30 (and (not $x23) $x162)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x175 $x109)))
 (let (($x129 (not $x150)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x33 $x74)))
 (let (($x70 (and (not $x185) $x129)))
 (let (($x27 (and (and (and (and (and (and $x70 $x30) $x130) $x69) $x177) $x61) $x181)))
 (let (($x144 (and $x27 $x77)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x115 (or false (or false (and (and true (or $x66 $x28)) (or $x91 $x95))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x50 (and $x40 $x144)))
 (let (($x222 (= $x50 true)))
 (let (($x71 (= $x222 true)))
 (let (($x114 (= $x71 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x68 true)))
 (let (($x29 (= $x12 true)))
 (let (($x93 (= $x29 true)))
 (let ((?x60 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x31 (= (_ bv0 2) ?x60)))
 (let (($x47 (= $x31 true)))
 (let (($x138 (= $x47 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x13)))
 (let (($x17 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x17 true)))
 (let (($x116 (= $x58 true)))
 (let (($x19 (= ?x22 input.dst.llvm-%n)))
 (let (($x151 (= $x19 true)))
 (let (($x62 (= $x151 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x67 (= $x83 true)))
 (let (($x107 (and $x67 $x62)))
 (let (($x57 (and $x107 $x116)))
 (let (($x179 (and $x57 $x138)))
 (let (($x149 (and $x179 $x93)))
 (let (($x217 (and $x149 $x114)))
 (let (($x148 (and $x217 $x240)))
 (let (($x171 (and $x148 $x247)))
 (let (($x152 (and $x171 $x318)))
 (let (($x289 (and $x152 $x26)))
 (let (($x87 (and $x289 $x192)))
 (let (($x313 (and $x87 $x236)))
 (let (($x202 (and $x313 $x79)))
 (let (($x219 (and $x202 $x158)))
 (let (($x273 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x284 (and (not $x273) $x219)))
 (let (($x280 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and $x280 $x284)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x167 (and $x292 $x221)))
 (let (($x265 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x265 $x167)))
 (let (($x8 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x174 (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x257 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x266 (or false (or false (and (and true (or $x46 $x257)) (or $x260 $x8))))))
 (let (($x315 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x266)))
 (let (($x255 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x266)))
 (let (($x153 (and $x255 $x173)))
 (let (($x317 (=> $x153 $x43)))
 (not $x317)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x309 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (bvule ?x309 (_ bv4294967294 32))))
 (let (($x232 (= $x212 true)))
 (let (($x43 (= $x232 true)))
 (let (($x111 (forall ((input.ind-%var977X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var977X)))
 (=> $x208 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var977X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var976X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var976X)))
 (= $x208 false)))
 ))
 (let (($x237 (and $x276 $x111)))
 (let (($x158 (= $x237 true)))
 (let (($x176 (forall ((input.ind-%var971X (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul input.ind-%var971X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x200))))
 (let ((?x283 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv2 32))) ?x142)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv3 32))) ?x283)))
 (let ((?x258 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var971X)))
 (let (($x323 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var971X)))
 (=> $x323 (= ?x258 ?x215)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var970X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var970X) (bvult input.ind-%var970X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x323 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var970X)))
 (= $x323 $x275))))
 ))
 (let (($x89 (and $x314 $x176)))
 (let (($x79 (= $x89 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x225)))
 (let (($x203 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x203 true)))
 (let (($x236 (= $x251 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x264 (= $x253 true)))
 (let (($x271 (= $x264 true)))
 (let (($x192 (= $x271 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x288 true)))
 (let (($x32 (= $x180 true)))
 (let (($x26 (= $x32 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x248 (bvsub ?x174 ?x113)))
 (let (($x223 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x248) (bvult ?x174 ?x248))))
 (let (($x218 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x230 (ite $x218 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x110 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x141 (bvmul (_ bv4 64) ?x110)))
 (let ((?x214 ((_ extract 63 32) ?x141)))
 (let (($x37 (= ?x214 ?x230)))
 (let (($x172 (and $x37 $x223)))
 (let (($x249 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x233 (and $x249 $x172)))
 (let (($x254 (= true $x233)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (=> $x190 $x254)))
 (let (($x101 (= $x262 true)))
 (let (($x73 (= $x101 true)))
 (let (($x318 (= $x73 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x229 (= $x125 true)))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let (($x75 (= $x190 true)))
 (let (($x137 (= $x75 true)))
 (let (($x240 (= $x137 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x104)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x97)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x157 $x56)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x44 $x182)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x187 $x103)))
 (let (($x162 (not $x48)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x135 $x155)))
 (let (($x30 (and (not $x23) $x162)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x175 $x109)))
 (let (($x129 (not $x150)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x33 $x74)))
 (let (($x70 (and (not $x185) $x129)))
 (let (($x27 (and (and (and (and (and (and $x70 $x30) $x130) $x69) $x177) $x61) $x181)))
 (let (($x144 (and $x27 $x77)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x115 (or false (or false (and (and true (or $x66 $x28)) (or $x91 $x95))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x50 (and $x40 $x144)))
 (let (($x222 (= $x50 true)))
 (let (($x71 (= $x222 true)))
 (let (($x114 (= $x71 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x68 true)))
 (let (($x29 (= $x12 true)))
 (let (($x93 (= $x29 true)))
 (let ((?x60 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x31 (= (_ bv0 2) ?x60)))
 (let (($x47 (= $x31 true)))
 (let (($x138 (= $x47 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x13)))
 (let (($x17 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x17 true)))
 (let (($x116 (= $x58 true)))
 (let (($x19 (= ?x22 input.dst.llvm-%n)))
 (let (($x151 (= $x19 true)))
 (let (($x62 (= $x151 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x67 (= $x83 true)))
 (let (($x107 (and $x67 $x62)))
 (let (($x57 (and $x107 $x116)))
 (let (($x179 (and $x57 $x138)))
 (let (($x149 (and $x179 $x93)))
 (let (($x217 (and $x149 $x114)))
 (let (($x148 (and $x217 $x240)))
 (let (($x171 (and $x148 $x247)))
 (let (($x152 (and $x171 $x318)))
 (let (($x289 (and $x152 $x26)))
 (let (($x87 (and $x289 $x192)))
 (let (($x313 (and $x87 $x236)))
 (let (($x202 (and $x313 $x79)))
 (let (($x219 (and $x202 $x158)))
 (let (($x273 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x284 (and (not $x273) $x219)))
 (let (($x280 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and $x280 $x284)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x167 (and $x292 $x221)))
 (let (($x265 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x265 $x167)))
 (let (($x8 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x174 (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x257 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x266 (or false (or false (and (and true (or $x46 $x257)) (or $x260 $x8))))))
 (let (($x315 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x266)))
 (let (($x255 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x266)))
 (let (($x153 (and $x255 $x173)))
 (let (($x317 (=> $x153 $x43)))
 (not $x317)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (bvsge ?x117 (_ bv0 32))))
 (let (($x156 (= $x119 true)))
 (let (($x234 (= $x156 true)))
 (let (($x239 (forall ((input.ind-%var989X (_ BitVec 32)) )(let (($x312 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var989X)))
 (=> $x312 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var989X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var988X (_ BitVec 32)) )(let (($x312 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var988X)))
 (= $x312 false)))
 ))
 (let (($x195 (and $x241 $x239)))
 (let (($x269 (= $x195 true)))
 (let (($x24 (forall ((input.ind-%var983X (_ BitVec 32)) )(let ((?x219 (bvadd (bvmul input.ind-%var983X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x219))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv2 32))) ?x173)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv3 32))) ?x212)))
 (let ((?x39 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var983X)))
 (let (($x275 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var983X)))
 (=> $x275 (= ?x39 ?x317)))))))))
 ))
 (let (($x160 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var982X) (bvult input.ind-%var982X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x275 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var982X)))
 (= $x275 $x132))))
 ))
 (let (($x243 (and $x160 $x24)))
 (let (($x194 (= $x243 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x140)))
 (let (($x251 (= ?x203 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x251 true)))
 (let (($x313 (= $x236 true)))
 (let (($x264 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x271 (= $x264 true)))
 (let (($x192 (= $x271 true)))
 (let (($x87 (= $x192 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (= $x180 true)))
 (let (($x26 (= $x32 true)))
 (let (($x289 (= $x26 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x248 (bvsub ?x174 ?x113)))
 (let (($x172 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x248) (bvult ?x174 ?x248))))
 (let (($x230 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x37 (ite $x230 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x141 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x214 (bvmul (_ bv4 64) ?x141)))
 (let ((?x218 ((_ extract 63 32) ?x214)))
 (let (($x250 (= ?x218 ?x37)))
 (let (($x233 (and $x250 $x172)))
 (let (($x143 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x254 (and $x143 $x233)))
 (let (($x262 (= true $x254)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (=> $x190 $x262)))
 (let (($x73 (= $x101 true)))
 (let (($x318 (= $x73 true)))
 (let (($x152 (= $x318 true)))
 (let (($x229 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let (($x171 (= $x247 true)))
 (let (($x137 (= $x190 true)))
 (let (($x240 (= $x137 true)))
 (let (($x148 (= $x240 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x61)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x102)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x127 $x157)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x69 $x94)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x187 $x103)))
 (let (($x162 (not $x48)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x155 $x23)))
 (let (($x88 (and (not $x166) $x162)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x175 $x109)))
 (let (($x129 (not $x150)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x98 $x161)))
 (let (($x135 (and (not $x147) $x129)))
 (let (($x144 (and (and (and (and (and (and $x135 $x88) $x130) $x178) $x56) $x177) $x51)))
 (let (($x50 (and $x144 $x183)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x33 (or false (or false (and (and true (or $x146 $x84)) (or $x80 $x106))))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x33)))
 (let (($x222 (and $x185 $x50)))
 (let (($x71 (= $x222 true)))
 (let (($x114 (= $x71 true)))
 (let (($x217 (= $x114 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x68 true)))
 (let (($x29 (= $x12 true)))
 (let (($x93 (= $x29 true)))
 (let ((?x60 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x31 (= (_ bv0 2) ?x60)))
 (let (($x47 (= $x31 true)))
 (let (($x138 (= $x47 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x13)))
 (let (($x17 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x17 true)))
 (let (($x116 (= $x58 true)))
 (let (($x19 (= ?x22 input.dst.llvm-%n)))
 (let (($x151 (= $x19 true)))
 (let (($x62 (= $x151 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x67 (= $x83 true)))
 (let (($x107 (and $x67 $x62)))
 (let (($x57 (and $x107 $x116)))
 (let (($x179 (and $x57 $x138)))
 (let (($x149 (and $x179 $x93)))
 (let (($x75 (and $x149 $x217)))
 (let (($x125 (and $x75 $x148)))
 (let (($x170 (and $x125 $x171)))
 (let (($x288 (and $x170 $x152)))
 (let (($x253 (and $x288 $x289)))
 (let (($x225 (and $x253 $x87)))
 (let (($x308 (and $x225 $x313)))
 (let (($x78 (and $x308 $x194)))
 (let (($x133 (and $x78 $x269)))
 (let (($x198 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x226 (and (not $x198) $x133)))
 (let (($x268 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x210 (and $x268 $x226)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x244 (and $x319 $x210)))
 (let (($x256 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x224 (and $x256 $x244)))
 (let (($x86 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x257 (bvadd ?x174 (_ bv3 32))))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x261 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x257)))
 (let (($x255 (or false (or false (and (and true (or $x92 $x261)) (or $x207 $x86))))))
 (let (($x265 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x255)))
 (let (($x14 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x255)))
 (let (($x121 (and $x14 $x224)))
 (let (($x99 (=> $x121 $x234)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (bvsge ?x117 (_ bv0 32))))
 (let (($x156 (= $x119 true)))
 (let (($x234 (= $x156 true)))
 (let (($x239 (forall ((input.ind-%var989X (_ BitVec 32)) )(let (($x312 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var989X)))
 (=> $x312 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var989X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var988X (_ BitVec 32)) )(let (($x312 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var988X)))
 (= $x312 false)))
 ))
 (let (($x195 (and $x241 $x239)))
 (let (($x269 (= $x195 true)))
 (let (($x24 (forall ((input.ind-%var983X (_ BitVec 32)) )(let ((?x219 (bvadd (bvmul input.ind-%var983X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x219))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv2 32))) ?x173)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv3 32))) ?x212)))
 (let ((?x39 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var983X)))
 (let (($x275 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var983X)))
 (=> $x275 (= ?x39 ?x317)))))))))
 ))
 (let (($x160 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var982X) (bvult input.ind-%var982X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x275 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var982X)))
 (= $x275 $x132))))
 ))
 (let (($x243 (and $x160 $x24)))
 (let (($x194 (= $x243 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x140)))
 (let (($x251 (= ?x203 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x251 true)))
 (let (($x313 (= $x236 true)))
 (let (($x264 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x271 (= $x264 true)))
 (let (($x192 (= $x271 true)))
 (let (($x87 (= $x192 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (= $x180 true)))
 (let (($x26 (= $x32 true)))
 (let (($x289 (= $x26 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x248 (bvsub ?x174 ?x113)))
 (let (($x172 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x248) (bvult ?x174 ?x248))))
 (let (($x230 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x37 (ite $x230 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x141 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x214 (bvmul (_ bv4 64) ?x141)))
 (let ((?x218 ((_ extract 63 32) ?x214)))
 (let (($x250 (= ?x218 ?x37)))
 (let (($x233 (and $x250 $x172)))
 (let (($x143 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x254 (and $x143 $x233)))
 (let (($x262 (= true $x254)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (=> $x190 $x262)))
 (let (($x73 (= $x101 true)))
 (let (($x318 (= $x73 true)))
 (let (($x152 (= $x318 true)))
 (let (($x229 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let (($x171 (= $x247 true)))
 (let (($x137 (= $x190 true)))
 (let (($x240 (= $x137 true)))
 (let (($x148 (= $x240 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x61)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x102)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x127 $x157)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x69 $x94)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x187 $x103)))
 (let (($x162 (not $x48)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x155 $x23)))
 (let (($x88 (and (not $x166) $x162)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x175 $x109)))
 (let (($x129 (not $x150)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x98 $x161)))
 (let (($x135 (and (not $x147) $x129)))
 (let (($x144 (and (and (and (and (and (and $x135 $x88) $x130) $x178) $x56) $x177) $x51)))
 (let (($x50 (and $x144 $x183)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x33 (or false (or false (and (and true (or $x146 $x84)) (or $x80 $x106))))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x33)))
 (let (($x222 (and $x185 $x50)))
 (let (($x71 (= $x222 true)))
 (let (($x114 (= $x71 true)))
 (let (($x217 (= $x114 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x68 true)))
 (let (($x29 (= $x12 true)))
 (let (($x93 (= $x29 true)))
 (let ((?x60 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x31 (= (_ bv0 2) ?x60)))
 (let (($x47 (= $x31 true)))
 (let (($x138 (= $x47 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x13)))
 (let (($x17 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x17 true)))
 (let (($x116 (= $x58 true)))
 (let (($x19 (= ?x22 input.dst.llvm-%n)))
 (let (($x151 (= $x19 true)))
 (let (($x62 (= $x151 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x67 (= $x83 true)))
 (let (($x107 (and $x67 $x62)))
 (let (($x57 (and $x107 $x116)))
 (let (($x179 (and $x57 $x138)))
 (let (($x149 (and $x179 $x93)))
 (let (($x75 (and $x149 $x217)))
 (let (($x125 (and $x75 $x148)))
 (let (($x170 (and $x125 $x171)))
 (let (($x288 (and $x170 $x152)))
 (let (($x253 (and $x288 $x289)))
 (let (($x225 (and $x253 $x87)))
 (let (($x308 (and $x225 $x313)))
 (let (($x78 (and $x308 $x194)))
 (let (($x133 (and $x78 $x269)))
 (let (($x198 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x226 (and (not $x198) $x133)))
 (let (($x268 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x210 (and $x268 $x226)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x244 (and $x319 $x210)))
 (let (($x256 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x224 (and $x256 $x244)))
 (let (($x86 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x257 (bvadd ?x174 (_ bv3 32))))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x261 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x257)))
 (let (($x255 (or false (or false (and (and true (or $x92 $x261)) (or $x207 $x86))))))
 (let (($x265 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x255)))
 (let (($x14 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x255)))
 (let (($x121 (and $x14 $x224)))
 (let (($x99 (=> $x121 $x234)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x237 (bvule ?x242 input.dst.llvm-%n)))
 (let (($x186 (= $x237 true)))
 (let (($x279 (= $x186 true)))
 (let (($x276 (forall ((input.ind-%var1001X (_ BitVec 32)) )(let (($x278 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1001X)))
 (=> $x278 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1001X) (_ bv0 32)))))
 ))
 (let (($x215 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let (($x278 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1000X)))
 (= $x278 false)))
 ))
 (let (($x154 (and $x215 $x276)))
 (let (($x274 (= $x154 true)))
 (let (($x59 (forall ((input.ind-%var995X (_ BitVec 32)) )(let ((?x133 (bvadd (bvmul input.ind-%var995X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x133))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x133 (_ bv2 32))) ?x224)))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x133 (_ bv3 32))) ?x119)))
 (let ((?x284 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var995X)))
 (let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var995X)))
 (=> $x132 (= ?x284 ?x99)))))))))
 ))
 (let (($x153 (forall ((input.ind-%var994X (_ BitVec 32)) )(let (($x43 (and (bvule (_ bv0 32) input.ind-%var994X) (bvult input.ind-%var994X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var994X)))
 (= $x132 $x43))))
 ))
 (let (($x287 (and $x153 $x59)))
 (let (($x142 (= $x287 true)))
 (let ((?x203 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x203)))
 (let (($x236 (= ?x251 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x236 true)))
 (let (($x308 (= $x313 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x13)))
 (let (($x192 (= ?x22 input.dst.llvm-%n)))
 (let (($x87 (= $x192 true)))
 (let (($x225 (= $x87 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x26 true)))
 (let (($x253 (= $x289 true)))
 (let (($x264 (= $x253 true)))
 (let (($x318 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (= $x318 true)))
 (let (($x288 (= $x152 true)))
 (let (($x180 (= $x288 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x230 (bvsub ?x174 ?x113)))
 (let (($x248 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x230) (bvult ?x174 ?x230))))
 (let (($x141 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x141 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x249 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x249)))
 (let ((?x110 ((_ extract 63 32) ?x143)))
 (let (($x218 (= ?x110 ?x214)))
 (let (($x316 (and $x218 $x248)))
 (let (($x170 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x223 (and $x170 $x316)))
 (let (($x172 (= true $x223)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x190 $x172)))
 (let (($x254 (= $x233 true)))
 (let (($x262 (= $x254 true)))
 (let (($x101 (= $x262 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x148 (= $x240 true)))
 (let (($x125 (= $x148 true)))
 (let (($x229 (= $x125 true)))
 (let (($x114 (= $x190 true)))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x94)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x44)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x130 $x159)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x188 $x178)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x155 $x23)))
 (let (($x30 (not $x166)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x150 $x129)))
 (let (($x103 (and (not $x135) $x30)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x98 $x161)))
 (let (($x70 (not $x147)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x29 $x93)))
 (let (($x109 (and (not $x185) $x70)))
 (let (($x51 (and (and (and (and (and (and $x109 $x103) $x162) $x97) $x27) $x127) $x157)))
 (let (($x144 (and $x51 $x56)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x66)))
 (let (($x115 (or false (or false (and (and true (or $x74 $x28)) (or $x91 $x95))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x61 (and $x33 $x144)))
 (let (($x183 (= $x61 true)))
 (let (($x50 (= $x183 true)))
 (let (($x222 (= $x50 true)))
 (let (($x31 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x47 (= $x31 true)))
 (let (($x138 (= $x47 true)))
 (let (($x179 (= $x138 true)))
 (let ((?x58 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x116 (= (_ bv0 2) ?x58)))
 (let (($x57 (= $x116 true)))
 (let (($x20 (= $x57 true)))
 (let (($x19 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (= $x19 true)))
 (let (($x62 (= $x151 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x67 (= $x83 true)))
 (let (($x107 (and $x67 $x62)))
 (let (($x60 (and $x107 $x20)))
 (let (($x68 (and $x60 $x179)))
 (let (($x71 (and $x68 $x222)))
 (let (($x137 (and $x71 $x75)))
 (let (($x220 (and $x137 $x229)))
 (let (($x73 (and $x220 $x101)))
 (let (($x32 (and $x73 $x180)))
 (let (($x271 (and $x32 $x264)))
 (let (($x140 (and $x271 $x225)))
 (let (($x85 (and $x140 $x308)))
 (let (($x238 (and $x85 $x142)))
 (let (($x6 (and $x238 $x274)))
 (let (($x96 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (and (not $x96) $x6)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x273 $x64)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x72 $x111)))
 (let (($x252 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x252 $x124)))
 (let (($x266 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd ?x174 (_ bv3 32))))
 (let (($x322 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x260 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x14 (or false (or false (and (and true (or $x63 $x260)) (or $x322 $x266))))))
 (let (($x256 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x267 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x196 (and $x267 $x310)))
 (let (($x211 (=> $x196 $x279)))
 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x237 (bvule ?x242 input.dst.llvm-%n)))
 (let (($x186 (= $x237 true)))
 (let (($x279 (= $x186 true)))
 (let (($x276 (forall ((input.ind-%var1001X (_ BitVec 32)) )(let (($x278 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1001X)))
 (=> $x278 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1001X) (_ bv0 32)))))
 ))
 (let (($x215 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let (($x278 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1000X)))
 (= $x278 false)))
 ))
 (let (($x154 (and $x215 $x276)))
 (let (($x274 (= $x154 true)))
 (let (($x59 (forall ((input.ind-%var995X (_ BitVec 32)) )(let ((?x133 (bvadd (bvmul input.ind-%var995X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x133))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x133 (_ bv2 32))) ?x224)))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x133 (_ bv3 32))) ?x119)))
 (let ((?x284 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var995X)))
 (let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var995X)))
 (=> $x132 (= ?x284 ?x99)))))))))
 ))
 (let (($x153 (forall ((input.ind-%var994X (_ BitVec 32)) )(let (($x43 (and (bvule (_ bv0 32) input.ind-%var994X) (bvult input.ind-%var994X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var994X)))
 (= $x132 $x43))))
 ))
 (let (($x287 (and $x153 $x59)))
 (let (($x142 (= $x287 true)))
 (let ((?x203 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x203)))
 (let (($x236 (= ?x251 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x236 true)))
 (let (($x308 (= $x313 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x13)))
 (let (($x192 (= ?x22 input.dst.llvm-%n)))
 (let (($x87 (= $x192 true)))
 (let (($x225 (= $x87 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x26 true)))
 (let (($x253 (= $x289 true)))
 (let (($x264 (= $x253 true)))
 (let (($x318 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (= $x318 true)))
 (let (($x288 (= $x152 true)))
 (let (($x180 (= $x288 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x230 (bvsub ?x174 ?x113)))
 (let (($x248 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x230) (bvult ?x174 ?x230))))
 (let (($x141 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x141 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x249 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x249)))
 (let ((?x110 ((_ extract 63 32) ?x143)))
 (let (($x218 (= ?x110 ?x214)))
 (let (($x316 (and $x218 $x248)))
 (let (($x170 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x223 (and $x170 $x316)))
 (let (($x172 (= true $x223)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x190 $x172)))
 (let (($x254 (= $x233 true)))
 (let (($x262 (= $x254 true)))
 (let (($x101 (= $x262 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x148 (= $x240 true)))
 (let (($x125 (= $x148 true)))
 (let (($x229 (= $x125 true)))
 (let (($x114 (= $x190 true)))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x94)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x44)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x130 $x159)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x188 $x178)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x155 $x23)))
 (let (($x30 (not $x166)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x150 $x129)))
 (let (($x103 (and (not $x135) $x30)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x98 $x161)))
 (let (($x70 (not $x147)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x29 $x93)))
 (let (($x109 (and (not $x185) $x70)))
 (let (($x51 (and (and (and (and (and (and $x109 $x103) $x162) $x97) $x27) $x127) $x157)))
 (let (($x144 (and $x51 $x56)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x66)))
 (let (($x115 (or false (or false (and (and true (or $x74 $x28)) (or $x91 $x95))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x61 (and $x33 $x144)))
 (let (($x183 (= $x61 true)))
 (let (($x50 (= $x183 true)))
 (let (($x222 (= $x50 true)))
 (let (($x31 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x47 (= $x31 true)))
 (let (($x138 (= $x47 true)))
 (let (($x179 (= $x138 true)))
 (let ((?x58 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x116 (= (_ bv0 2) ?x58)))
 (let (($x57 (= $x116 true)))
 (let (($x20 (= $x57 true)))
 (let (($x19 (= ?x22 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (= $x19 true)))
 (let (($x62 (= $x151 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x67 (= $x83 true)))
 (let (($x107 (and $x67 $x62)))
 (let (($x60 (and $x107 $x20)))
 (let (($x68 (and $x60 $x179)))
 (let (($x71 (and $x68 $x222)))
 (let (($x137 (and $x71 $x75)))
 (let (($x220 (and $x137 $x229)))
 (let (($x73 (and $x220 $x101)))
 (let (($x32 (and $x73 $x180)))
 (let (($x271 (and $x32 $x264)))
 (let (($x140 (and $x271 $x225)))
 (let (($x85 (and $x140 $x308)))
 (let (($x238 (and $x85 $x142)))
 (let (($x6 (and $x238 $x274)))
 (let (($x96 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (and (not $x96) $x6)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x273 $x64)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x72 $x111)))
 (let (($x252 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x252 $x124)))
 (let (($x266 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd ?x174 (_ bv3 32))))
 (let (($x322 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x260 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x14 (or false (or false (and (and true (or $x63 $x260)) (or $x322 $x266))))))
 (let (($x256 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x267 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x196 (and $x267 $x310)))
 (let (($x211 (=> $x196 $x279)))
 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x227 (forall ((input.ind-%var1021X (_ BitVec 32)) )(let ((?x6 (bvadd (bvmul input.ind-%var1021X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x260 (bvadd ?x174 (_ bv3 32))))
 (let ((?x286 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x174 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x76 (store ?x286 (bvadd ?x174 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x163 (store ?x76 (bvadd ?x174 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x122 (store ?x163 ?x260 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x105 (concat (select ?x122 (bvadd ?x6 (_ bv2 32))) (concat (select ?x122 (bvadd ?x6 (_ bv1 32))) (select ?x122 ?x6)))))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1021X)))
 (let (($x325 (= input.ind-%var1021X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x90 (= (ite $x325 input.spec-%var-i-0.L3%6%bbentry ?x226) (concat (select ?x122 (bvadd ?x6 (_ bv3 32))) ?x105))))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1021X)))
 (let (($x168 (or $x43 $x325)))
 (=> $x168 $x90))))))))))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1020X (_ BitVec 32)) )(let (($x156 (bvule (_ bv0 32) input.ind-%var1020X)))
 (let (($x235 (and $x156 (bvult input.ind-%var1020X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x325 (= input.ind-%var1020X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1020X)))
 (let (($x168 (or $x43 $x325)))
 (= $x168 $x235)))))))
 ))
 (let (($x216 (and $x231 $x227)))
 (let (($x221 (= true true)))
 (let (($x263 (and $x221 $x216)))
 (let (($x82 (= $x263 true)))
 (let (($x241 (forall ((input.ind-%var1013X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1013X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1013X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1012X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1012X)))
 (= $x167 false)))
 ))
 (let (($x272 (and $x317 $x241)))
 (let (($x291 (= $x272 true)))
 (let (($x12 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let ((?x6 (bvadd (bvmul input.ind-%var1007X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x6))))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv2 32))) ?x310)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv3 32))) ?x237)))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1007X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x43 (= ?x226 ?x211)))))))))
 ))
 (let (($x121 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x156 (bvule (_ bv0 32) input.ind-%var1006X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x43 (and $x156 (bvult input.ind-%var1006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x281 (and $x121 $x12)))
 (let (($x173 (= $x281 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x251)))
 (let (($x313 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x308 (= $x313 true)))
 (let (($x85 (= $x308 true)))
 (let ((?x192 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x87 (= (_ bv0 2) ?x192)))
 (let (($x225 (= $x87 true)))
 (let (($x140 (= $x225 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x32 true)))
 (let (($x289 (= $x26 true)))
 (let (($x253 (= $x289 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x318 (= $x73 true)))
 (let (($x152 (= $x318 true)))
 (let (($x288 (= $x152 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (= $x172 true)))
 (let (($x254 (= $x233 true)))
 (let (($x262 (= $x254 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x249 (bvsub ?x174 ?x113)))
 (let (($x214 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x249) (bvult ?x174 ?x249))))
 (let (($x171 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x170 (ite $x171 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x229 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x220 (bvmul (_ bv4 64) ?x229)))
 (let ((?x247 ((_ extract 63 32) ?x220)))
 (let (($x164 (= ?x247 ?x170)))
 (let (($x218 (and $x164 $x214)))
 (let (($x148 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x37 (and $x148 $x218)))
 (let (($x230 (= true $x37)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (=> $x190 $x230)))
 (let (($x42 (= $x250 true)))
 (let (($x248 (= $x42 true)))
 (let (($x316 (= $x248 true)))
 (let (($x222 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x222 true)))
 (let (($x114 (= $x71 true)))
 (let (($x217 (= $x114 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x56 true)))
 (let (($x61 (= $x144 true)))
 (let (($x183 (= $x61 true)))
 (let (($x102 (= $x190 true)))
 (let (($x44 (= $x102 true)))
 (let (($x157 (= $x44 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x162)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x104)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x135 $x155)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x129 $x23)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (and $x29 $x93)))
 (let (($x175 (not $x185)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x131 $x115)))
 (let (($x161 (and (not $x33) $x175)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x146 $x84)))
 (let (($x95 (not $x91)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x107 $x17)))
 (let (($x106 (and (not $x28) $x95)))
 (let (($x181 (and (and (and (and (and (and $x106 $x161) $x70) $x150) $x166) $x103) $x48)))
 (let (($x159 (and $x181 $x182)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x40 (or false (or false (and (and true (or $x20 $x60)) (or $x138 $x179))))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x178 (and $x74 $x159)))
 (let (($x27 (= $x178 true)))
 (let (($x77 (= $x27 true)))
 (let (($x69 (= $x77 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x53)))
 (let (($x13 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x13 true)))
 (let (($x19 (= $x22 true)))
 (let (($x83 (= ?x65 input.dst.llvm-%n)))
 (let (($x67 (= $x83 true)))
 (let (($x16 (= $x67 true)))
 (let (($x151 (and $x16 $x19)))
 (let (($x127 (and $x151 $x69)))
 (let (($x51 (and $x127 $x157)))
 (let (($x50 (and $x51 $x183)))
 (let (($x75 (and $x50 $x217)))
 (let (($x223 (and $x75 $x316)))
 (let (($x101 (and $x223 $x262)))
 (let (($x180 (and $x101 $x288)))
 (let (($x264 (and $x180 $x253)))
 (let (($x203 (and $x264 $x140)))
 (let (($x200 (and $x203 $x85)))
 (let (($x323 (and $x200 $x173)))
 (let (($x245 (and $x323 $x291)))
 (let (($x246 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and (not $x246) $x245)))
 (let (($x198 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and $x198 $x158)))
 (let (($x280 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x280 $x239)))
 (let (($x292 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x321 (and $x292 $x100)))
 (let (($x255 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x260 (bvadd ?x174 (_ bv3 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x207 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x260)))
 (let (($x267 (or false (or false (and (and true (or $x18 $x207)) (or $x315 $x255))))))
 (let (($x252 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x267)))
 (let (($x5 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x267)))
 (let (($x314 (and $x5 $x321)))
 (let (($x120 (=> $x314 $x82)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x227 (forall ((input.ind-%var1021X (_ BitVec 32)) )(let ((?x6 (bvadd (bvmul input.ind-%var1021X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x260 (bvadd ?x174 (_ bv3 32))))
 (let ((?x286 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x174 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x76 (store ?x286 (bvadd ?x174 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x163 (store ?x76 (bvadd ?x174 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x122 (store ?x163 ?x260 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x105 (concat (select ?x122 (bvadd ?x6 (_ bv2 32))) (concat (select ?x122 (bvadd ?x6 (_ bv1 32))) (select ?x122 ?x6)))))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1021X)))
 (let (($x325 (= input.ind-%var1021X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x90 (= (ite $x325 input.spec-%var-i-0.L3%6%bbentry ?x226) (concat (select ?x122 (bvadd ?x6 (_ bv3 32))) ?x105))))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1021X)))
 (let (($x168 (or $x43 $x325)))
 (=> $x168 $x90))))))))))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1020X (_ BitVec 32)) )(let (($x156 (bvule (_ bv0 32) input.ind-%var1020X)))
 (let (($x235 (and $x156 (bvult input.ind-%var1020X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x325 (= input.ind-%var1020X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1020X)))
 (let (($x168 (or $x43 $x325)))
 (= $x168 $x235)))))))
 ))
 (let (($x216 (and $x231 $x227)))
 (let (($x221 (= true true)))
 (let (($x263 (and $x221 $x216)))
 (let (($x82 (= $x263 true)))
 (let (($x241 (forall ((input.ind-%var1013X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1013X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1013X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1012X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1012X)))
 (= $x167 false)))
 ))
 (let (($x272 (and $x317 $x241)))
 (let (($x291 (= $x272 true)))
 (let (($x12 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let ((?x6 (bvadd (bvmul input.ind-%var1007X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x6))))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv2 32))) ?x310)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv3 32))) ?x237)))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1007X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x43 (= ?x226 ?x211)))))))))
 ))
 (let (($x121 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x156 (bvule (_ bv0 32) input.ind-%var1006X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x43 (and $x156 (bvult input.ind-%var1006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x281 (and $x121 $x12)))
 (let (($x173 (= $x281 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x251)))
 (let (($x313 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x308 (= $x313 true)))
 (let (($x85 (= $x308 true)))
 (let ((?x192 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x87 (= (_ bv0 2) ?x192)))
 (let (($x225 (= $x87 true)))
 (let (($x140 (= $x225 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x32 true)))
 (let (($x289 (= $x26 true)))
 (let (($x253 (= $x289 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x318 (= $x73 true)))
 (let (($x152 (= $x318 true)))
 (let (($x288 (= $x152 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (= $x172 true)))
 (let (($x254 (= $x233 true)))
 (let (($x262 (= $x254 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let ((?x249 (bvsub ?x174 ?x113)))
 (let (($x214 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x174 ?x249) (bvult ?x174 ?x249))))
 (let (($x171 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x170 (ite $x171 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x229 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x220 (bvmul (_ bv4 64) ?x229)))
 (let ((?x247 ((_ extract 63 32) ?x220)))
 (let (($x164 (= ?x247 ?x170)))
 (let (($x218 (and $x164 $x214)))
 (let (($x148 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x37 (and $x148 $x218)))
 (let (($x230 (= true $x37)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (=> $x190 $x230)))
 (let (($x42 (= $x250 true)))
 (let (($x248 (= $x42 true)))
 (let (($x316 (= $x248 true)))
 (let (($x222 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x222 true)))
 (let (($x114 (= $x71 true)))
 (let (($x217 (= $x114 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x56 true)))
 (let (($x61 (= $x144 true)))
 (let (($x183 (= $x61 true)))
 (let (($x102 (= $x190 true)))
 (let (($x44 (= $x102 true)))
 (let (($x157 (= $x44 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x162)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x104)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x135 $x155)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x129 $x23)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (and $x29 $x93)))
 (let (($x175 (not $x185)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x131 $x115)))
 (let (($x161 (and (not $x33) $x175)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x146 $x84)))
 (let (($x95 (not $x91)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x107 $x17)))
 (let (($x106 (and (not $x28) $x95)))
 (let (($x181 (and (and (and (and (and (and $x106 $x161) $x70) $x150) $x166) $x103) $x48)))
 (let (($x159 (and $x181 $x182)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x40 (or false (or false (and (and true (or $x20 $x60)) (or $x138 $x179))))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x178 (and $x74 $x159)))
 (let (($x27 (= $x178 true)))
 (let (($x77 (= $x27 true)))
 (let (($x69 (= $x77 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x53)))
 (let (($x13 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x13 true)))
 (let (($x19 (= $x22 true)))
 (let (($x83 (= ?x65 input.dst.llvm-%n)))
 (let (($x67 (= $x83 true)))
 (let (($x16 (= $x67 true)))
 (let (($x151 (and $x16 $x19)))
 (let (($x127 (and $x151 $x69)))
 (let (($x51 (and $x127 $x157)))
 (let (($x50 (and $x51 $x183)))
 (let (($x75 (and $x50 $x217)))
 (let (($x223 (and $x75 $x316)))
 (let (($x101 (and $x223 $x262)))
 (let (($x180 (and $x101 $x288)))
 (let (($x264 (and $x180 $x253)))
 (let (($x203 (and $x264 $x140)))
 (let (($x200 (and $x203 $x85)))
 (let (($x323 (and $x200 $x173)))
 (let (($x245 (and $x323 $x291)))
 (let (($x246 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and (not $x246) $x245)))
 (let (($x198 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and $x198 $x158)))
 (let (($x280 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x280 $x239)))
 (let (($x292 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x321 (and $x292 $x100)))
 (let (($x255 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x260 (bvadd ?x174 (_ bv3 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x207 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x260)))
 (let (($x267 (or false (or false (and (and true (or $x18 $x207)) (or $x315 $x255))))))
 (let (($x252 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x267)))
 (let (($x5 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x267)))
 (let (($x314 (and $x5 $x321)))
 (let (($x120 (=> $x314 $x82)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (not $x190)))
 (let (($x204 (= $x231 false)))
 (let (($x108 (= $x204 true)))
 (let (($x314 (forall ((input.ind-%var1033X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1033X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1033X) (_ bv0 32)))))
 ))
 (let (($x184 (forall ((input.ind-%var1032X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1032X)))
 (= $x167 false)))
 ))
 (let (($x221 (and $x184 $x314)))
 (let (($x325 (= $x221 true)))
 (let (($x41 (forall ((input.ind-%var1027X (_ BitVec 32)) )(let ((?x274 (bvadd (bvmul input.ind-%var1027X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x274))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv2 32))) ?x238)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv3 32))) ?x111)))
 (let ((?x87 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1027X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1027X)))
 (=> $x262 (= ?x87 ?x310)))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1026X (_ BitVec 32)) )(let (($x26 (and (bvule (_ bv0 32) input.ind-%var1026X) (bvult input.ind-%var1026X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1026X)))
 (= $x262 $x26))))
 ))
 (let (($x191 (and $x253 $x41)))
 (let (($x12 (= $x191 true)))
 (let ((?x230 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x230)))
 (let (($x42 (= ?x250 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x42 true)))
 (let (($x316 (= $x248 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x16)))
 (let (($x141 (= ?x13 input.dst.llvm-%n)))
 (let (($x214 (= $x141 true)))
 (let (($x218 (= $x214 true)))
 (let (($x170 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x164 (= $x170 true)))
 (let (($x143 (= $x164 true)))
 (let (($x249 (= $x143 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (= $x125 true)))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x240 (= $x137 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x127)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x77)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x48 $x162)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x104 $x182)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x129 $x135)))
 (let (($x155 (not $x187)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x109 $x150)))
 (let (($x166 (and (not $x177) $x155)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x175 $x161)))
 (let (($x147 (not $x88)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x40 $x74)))
 (let (($x97 (and (not $x185) $x147)))
 (let (($x144 (and (and (and (and (and (and $x97 $x166) $x30) $x130) $x159) $x27) $x69)))
 (let (($x61 (and $x144 $x102)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x98 (or false (or false (and (and true (or $x80 $x146)) (or $x95 $x106))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x183 (and $x93 $x61)))
 (let (($x50 (= $x183 true)))
 (let (($x222 (= $x50 true)))
 (let (($x71 (= $x222 true)))
 (let (($x47 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x138 (= $x47 true)))
 (let (($x179 (= $x138 true)))
 (let (($x68 (= $x179 true)))
 (let ((?x66 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x57 (= (_ bv0 2) ?x66)))
 (let (($x20 (= $x57 true)))
 (let (($x60 (= $x20 true)))
 (let (($x22 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (= $x22 true)))
 (let (($x151 (= $x19 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x58 (and $x83 $x151)))
 (let (($x31 (and $x58 $x60)))
 (let (($x149 (and $x31 $x68)))
 (let (($x114 (and $x149 $x71)))
 (let (($x148 (and $x114 $x240)))
 (let (($x171 (and $x148 $x247)))
 (let (($x110 (and $x171 $x249)))
 (let (($x37 (and $x110 $x218)))
 (let (($x223 (and $x37 $x316)))
 (let (($x281 (and $x223 $x12)))
 (let (($x168 (and $x281 $x325)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x206 (and $x96 $x168)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x55 (and $x268 $x206)))
 (let (($x319 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x235 (and $x319 $x55)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let (($x14 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x207 (bvadd ?x174 (_ bv3 32))))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x207)))
 (let (($x322 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x207)))
 (let (($x5 (or false (or false (and (and true (or $x8 $x322)) (or $x265 $x14))))))
 (let (($x292 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x5)))
 (let (($x257 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x5)))
 (let (($x277 (and $x257 $x235)))
 (let (($x193 (=> $x277 $x108)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (not $x190)))
 (let (($x204 (= $x231 false)))
 (let (($x108 (= $x204 true)))
 (let (($x314 (forall ((input.ind-%var1033X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1033X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1033X) (_ bv0 32)))))
 ))
 (let (($x184 (forall ((input.ind-%var1032X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1032X)))
 (= $x167 false)))
 ))
 (let (($x221 (and $x184 $x314)))
 (let (($x325 (= $x221 true)))
 (let (($x41 (forall ((input.ind-%var1027X (_ BitVec 32)) )(let ((?x274 (bvadd (bvmul input.ind-%var1027X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x274))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv2 32))) ?x238)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv3 32))) ?x111)))
 (let ((?x87 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1027X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1027X)))
 (=> $x262 (= ?x87 ?x310)))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1026X (_ BitVec 32)) )(let (($x26 (and (bvule (_ bv0 32) input.ind-%var1026X) (bvult input.ind-%var1026X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1026X)))
 (= $x262 $x26))))
 ))
 (let (($x191 (and $x253 $x41)))
 (let (($x12 (= $x191 true)))
 (let ((?x230 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x230)))
 (let (($x42 (= ?x250 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x42 true)))
 (let (($x316 (= $x248 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x16)))
 (let (($x141 (= ?x13 input.dst.llvm-%n)))
 (let (($x214 (= $x141 true)))
 (let (($x218 (= $x214 true)))
 (let (($x170 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x164 (= $x170 true)))
 (let (($x143 (= $x164 true)))
 (let (($x249 (= $x143 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (= $x125 true)))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x240 (= $x137 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x127)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x77)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x48 $x162)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x104 $x182)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x129 $x135)))
 (let (($x155 (not $x187)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x109 $x150)))
 (let (($x166 (and (not $x177) $x155)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x175 $x161)))
 (let (($x147 (not $x88)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x40 $x74)))
 (let (($x97 (and (not $x185) $x147)))
 (let (($x144 (and (and (and (and (and (and $x97 $x166) $x30) $x130) $x159) $x27) $x69)))
 (let (($x61 (and $x144 $x102)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x98 (or false (or false (and (and true (or $x80 $x146)) (or $x95 $x106))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x183 (and $x93 $x61)))
 (let (($x50 (= $x183 true)))
 (let (($x222 (= $x50 true)))
 (let (($x71 (= $x222 true)))
 (let (($x47 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x138 (= $x47 true)))
 (let (($x179 (= $x138 true)))
 (let (($x68 (= $x179 true)))
 (let ((?x66 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x57 (= (_ bv0 2) ?x66)))
 (let (($x20 (= $x57 true)))
 (let (($x60 (= $x20 true)))
 (let (($x22 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (= $x22 true)))
 (let (($x151 (= $x19 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x49 true)))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x58 (and $x83 $x151)))
 (let (($x31 (and $x58 $x60)))
 (let (($x149 (and $x31 $x68)))
 (let (($x114 (and $x149 $x71)))
 (let (($x148 (and $x114 $x240)))
 (let (($x171 (and $x148 $x247)))
 (let (($x110 (and $x171 $x249)))
 (let (($x37 (and $x110 $x218)))
 (let (($x223 (and $x37 $x316)))
 (let (($x281 (and $x223 $x12)))
 (let (($x168 (and $x281 $x325)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x206 (and $x96 $x168)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x55 (and $x268 $x206)))
 (let (($x319 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x235 (and $x319 $x55)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let (($x14 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x207 (bvadd ?x174 (_ bv3 32))))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x207)))
 (let (($x322 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x207)))
 (let (($x5 (or false (or false (and (and true (or $x8 $x322)) (or $x265 $x14))))))
 (let (($x292 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x5)))
 (let (($x257 (=> (and $x190 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x5)))
 (let (($x277 (and $x257 $x235)))
 (let (($x193 (=> $x277 $x108)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400008)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x05823e80)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x05823e80)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x05823e80)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x05823e80)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0040000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x05823e80)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!1 (bvmul #x00000004 x!0))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x05823e80 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x6c922620)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x6c922620)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1499e164)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x19439460)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x6c922620)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6c922620)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x19439463)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1499e167)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x19439460)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1499e164)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x6c922620)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!7 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6c922620 x!0)
         (ite (bvule #x6c922621 x!0) #x6c922621 #x6c922620)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!8 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (or $x226 $x25)))
 (let (($x241 (= $x158 true)))
 (let (($x239 (= $x241 true)))
 (let (($x233 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let (($x318 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1081X)))
 (=> $x318 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1081X) (_ bv0 32)))))
 ))
 (let (($x234 (forall ((input.ind-%var1080X (_ BitVec 32)) )(let (($x318 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1080X)))
 (= $x318 false)))
 ))
 (let (($x152 (and $x234 $x233)))
 (let (($x288 (= $x152 true)))
 (let (($x39 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let ((?x206 (bvadd (bvmul input.ind-%var1075X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x206))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv2 32))) ?x231)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv3 32))) ?x193)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1075X)))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1075X)))
 (=> $x289 (= ?x238 ?x81)))))))))
 ))
 (let (($x242 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) input.ind-%var1074X) (bvult input.ind-%var1074X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1074X)))
 (= $x289 $x200))))
 ))
 (let (($x245 (and $x242 $x39)))
 (let (($x264 (= $x245 true)))
 (let ((?x42 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x42)))
 (let (($x316 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (= $x316 true)))
 (let (($x254 (= $x223 true)))
 (let ((?x164 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x164)))
 (let (($x218 (= ?x143 input.dst.llvm-%n)))
 (let (($x37 (= $x218 true)))
 (let (($x230 (= $x37 true)))
 (let (($x249 (= ?x143 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (= $x249 true)))
 (let (($x141 (= $x110 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x229 (= $x125 true)))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let (($x217 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x240 (= $x137 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x183 true)))
 (let (($x222 (= $x50 true)))
 (let (($x71 (= $x222 true)))
 (let (($x69 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x69 true)))
 (let (($x127 (= $x144 true)))
 (let (($x102 (= $x127 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x94 (= $x159 true)))
 (let (($x178 (= $x94 true)))
 (let (($x27 (= $x178 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x187)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x129)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x88 $x97)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x161 $x109)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x131 $x115)))
 (let (($x98 (not $x33)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x91 $x95)))
 (let (($x40 (and (not $x106) $x98)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x17 $x29)))
 (let (($x80 (not $x28)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x16 $x13)))
 (let (($x84 (and (not $x107) $x80)))
 (let (($x103 (and (and (and (and (and (and $x84 $x40) $x185) $x175) $x150) $x23) $x135)))
 (let (($x130 (and $x103 $x155)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x179 (or false (or false (and (and true (or $x58 $x116)) (or $x20 $x60))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x51 (and $x149 $x130)))
 (let (($x104 (= $x51 true)))
 (let (($x48 (= $x104 true)))
 (let (($x181 (= $x48 true)))
 (let ((?x49 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x53 (= (_ bv0 2) ?x49)))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x162 (and $x83 $x181)))
 (let (($x56 (and $x162 $x27)))
 (let (($x61 (and $x56 $x102)))
 (let (($x114 (and $x61 $x71)))
 (let (($x148 (and $x114 $x240)))
 (let (($x171 (and $x148 $x247)))
 (let (($x214 (and $x171 $x141)))
 (let (($x250 (and $x214 $x230)))
 (let (($x262 (and $x250 $x254)))
 (let (($x192 (and $x262 $x264)))
 (let (($x121 (and $x192 $x288)))
 (let (($x246 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x246 $x121)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x323 (and $x273 $x173)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x317 (and $x72 $x323)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let (($x267 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x322 (bvadd ?x174 (_ bv3 32))))
 (let (($x256 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x322)))
 (let (($x315 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x322)))
 (let (($x257 (or false (or false (and (and true (or $x86 $x315)) (or $x256 $x267))))))
 (let (($x319 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x257)))
 (let (($x261 (=> (and $x25 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x257)))
 (let (($x271 (and $x261 $x317)))
 (let (($x38 (=> $x271 $x239)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (or $x226 $x25)))
 (let (($x241 (= $x158 true)))
 (let (($x239 (= $x241 true)))
 (let (($x233 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let (($x318 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1081X)))
 (=> $x318 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1081X) (_ bv0 32)))))
 ))
 (let (($x234 (forall ((input.ind-%var1080X (_ BitVec 32)) )(let (($x318 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1080X)))
 (= $x318 false)))
 ))
 (let (($x152 (and $x234 $x233)))
 (let (($x288 (= $x152 true)))
 (let (($x39 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let ((?x206 (bvadd (bvmul input.ind-%var1075X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x206))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv2 32))) ?x231)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv3 32))) ?x193)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1075X)))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1075X)))
 (=> $x289 (= ?x238 ?x81)))))))))
 ))
 (let (($x242 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) input.ind-%var1074X) (bvult input.ind-%var1074X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1074X)))
 (= $x289 $x200))))
 ))
 (let (($x245 (and $x242 $x39)))
 (let (($x264 (= $x245 true)))
 (let ((?x42 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x42)))
 (let (($x316 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (= $x316 true)))
 (let (($x254 (= $x223 true)))
 (let ((?x164 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x164)))
 (let (($x218 (= ?x143 input.dst.llvm-%n)))
 (let (($x37 (= $x218 true)))
 (let (($x230 (= $x37 true)))
 (let (($x249 (= ?x143 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (= $x249 true)))
 (let (($x141 (= $x110 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x229 (= $x125 true)))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let (($x217 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x240 (= $x137 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (= $x183 true)))
 (let (($x222 (= $x50 true)))
 (let (($x71 (= $x222 true)))
 (let (($x69 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x69 true)))
 (let (($x127 (= $x144 true)))
 (let (($x102 (= $x127 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x94 (= $x159 true)))
 (let (($x178 (= $x94 true)))
 (let (($x27 (= $x178 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x187)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x129)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x88 $x97)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x161 $x109)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x131 $x115)))
 (let (($x98 (not $x33)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x91 $x95)))
 (let (($x40 (and (not $x106) $x98)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x17 $x29)))
 (let (($x80 (not $x28)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x16 $x13)))
 (let (($x84 (and (not $x107) $x80)))
 (let (($x103 (and (and (and (and (and (and $x84 $x40) $x185) $x175) $x150) $x23) $x135)))
 (let (($x130 (and $x103 $x155)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x179 (or false (or false (and (and true (or $x58 $x116)) (or $x20 $x60))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x51 (and $x149 $x130)))
 (let (($x104 (= $x51 true)))
 (let (($x48 (= $x104 true)))
 (let (($x181 (= $x48 true)))
 (let ((?x49 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x53 (= (_ bv0 2) ?x49)))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x162 (and $x83 $x181)))
 (let (($x56 (and $x162 $x27)))
 (let (($x61 (and $x56 $x102)))
 (let (($x114 (and $x61 $x71)))
 (let (($x148 (and $x114 $x240)))
 (let (($x171 (and $x148 $x247)))
 (let (($x214 (and $x171 $x141)))
 (let (($x250 (and $x214 $x230)))
 (let (($x262 (and $x250 $x254)))
 (let (($x192 (and $x262 $x264)))
 (let (($x121 (and $x192 $x288)))
 (let (($x246 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x246 $x121)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x323 (and $x273 $x173)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x317 (and $x72 $x323)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvadd input.dst.llvm-%m ?x113)))
 (let (($x267 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x322 (bvadd ?x174 (_ bv3 32))))
 (let (($x256 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x322)))
 (let (($x315 (bvugt ?x174 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x322)))
 (let (($x257 (or false (or false (and (and true (or $x86 $x315)) (or $x256 $x267))))))
 (let (($x319 (=> (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32))) $x257)))
 (let (($x261 (=> (and $x25 (bvule ?x174 (bvsub (bvadd ?x174 (_ bv4 32)) (_ bv1 32)))) $x257)))
 (let (($x271 (and $x261 $x317)))
 (let (($x38 (=> $x271 $x239)))
 (not $x38))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x311 (forall ((input.ind-%var1099X (_ BitVec 32)) )(let ((?x264 (bvadd (bvmul input.ind-%var1099X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x264))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv2 32))) ?x234)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv3 32))) ?x272)))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1099X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1099X)))
 (=> $x37 (= ?x196 ?x288)))))))))
 ))
 (let (($x73 (forall ((input.ind-%var1098X (_ BitVec 32)) )(let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1098X)))
 (= $x37 (and (bvule (_ bv0 32) input.ind-%var1098X) (bvult input.ind-%var1098X input.dst.llvm-%n)))))
 ))
 (let (($x123 (and $x73 $x311)))
 (let (($x41 (= true true)))
 (let (($x105 (and $x41 $x123)))
 (let (($x285 (= $x105 true)))
 (let (($x237 (forall ((input.ind-%var1093X (_ BitVec 32)) )(let (($x239 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1093X)))
 (=> $x239 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1093X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var1092X (_ BitVec 32)) )(let (($x239 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1092X)))
 (= $x239 false)))
 ))
 (let (($x211 (and $x67 $x237)))
 (let (($x100 (= $x211 true)))
 (let (($x323 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let ((?x264 (bvadd (bvmul input.ind-%var1087X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x264))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv2 32))) ?x234)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv3 32))) ?x272)))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1087X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (=> $x37 (= ?x196 ?x288)))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x254 (bvule (_ bv0 32) input.ind-%var1086X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (= $x37 (and $x254 (bvult input.ind-%var1086X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x317 (and $x289 $x323)))
 (let (($x271 (= $x317 true)))
 (let ((?x261 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x261)))
 (let (($x164 (= ?x92 input.dst.llvm-%n)))
 (let (($x143 (= $x164 true)))
 (let (($x249 (= $x143 true)))
 (let ((?x229 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x220 (= (_ bv0 2) ?x229)))
 (let (($x247 (= $x220 true)))
 (let (($x171 (= $x247 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x61 (not $x102)))
 (let (($x183 (= $x61 true)))
 (let (($x50 (= $x183 true)))
 (let (($x222 (= $x50 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x51)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x155)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x30 $x157)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x150 $x129)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x185 $x44)))
 (let (($x175 (not $x70)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x40 $x166)))
 (let (($x161 (and (not $x74) $x175)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x106 $x93)))
 (let (($x115 (not $x131)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x58 $x116)))
 (let (($x98 (and (not $x95) $x115)))
 (let (($x94 (and (and (and (and (and (and $x98 $x161) $x147) $x109) $x135) $x187) $x130)))
 (let (($x178 (and $x94 $x104)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x80 (or false (or false (and (and true (or $x47 $x138)) (or $x107 $x146))))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x27 (and $x91 $x178)))
 (let (($x56 (= $x27 true)))
 (let (($x77 (= $x56 true)))
 (let (($x69 (= $x77 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x22 (= $x83 true)))
 (let (($x198 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x96 (= $x198 true)))
 (let (($x246 (= $x96 true)))
 (let (($x283 (= $x246 true)))
 (let (($x72 (= ?x92 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x280 (= $x72 true)))
 (let (($x268 (= $x280 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x267)))
 (let (($x5 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x5 true)))
 (let (($x257 (= $x292 true)))
 (let (($x315 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x266 (= $x315 true)))
 (let (($x265 (= $x266 true)))
 (let (($x255 (= $x265 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x322 (= $x18 true)))
 (let (($x86 (= $x322 true)))
 (let (($x8 (= $x86 true)))
 (let (($x256 (and $x8 $x255)))
 (let (($x319 (and $x256 $x257)))
 (let (($x273 (and $x319 $x268)))
 (let (($x49 (and $x273 $x283)))
 (let (($x19 (and $x49 $x22)))
 (let (($x144 (and $x19 $x69)))
 (let (($x71 (and $x144 $x222)))
 (let (($x240 (and $x71 $x137)))
 (let (($x170 (and $x240 $x171)))
 (let (($x110 (and $x170 $x249)))
 (let (($x226 (and $x110 $x271)))
 (let (($x321 (and $x226 $x100)))
 (let (($x63 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x312 (and $x63 $x321)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x7 $x312)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x15 $x184)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x12 (and $x25 $x191)))
 (let (($x90 (=> $x12 $x285)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x311 (forall ((input.ind-%var1099X (_ BitVec 32)) )(let ((?x264 (bvadd (bvmul input.ind-%var1099X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x264))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv2 32))) ?x234)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv3 32))) ?x272)))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1099X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1099X)))
 (=> $x37 (= ?x196 ?x288)))))))))
 ))
 (let (($x73 (forall ((input.ind-%var1098X (_ BitVec 32)) )(let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1098X)))
 (= $x37 (and (bvule (_ bv0 32) input.ind-%var1098X) (bvult input.ind-%var1098X input.dst.llvm-%n)))))
 ))
 (let (($x123 (and $x73 $x311)))
 (let (($x41 (= true true)))
 (let (($x105 (and $x41 $x123)))
 (let (($x285 (= $x105 true)))
 (let (($x237 (forall ((input.ind-%var1093X (_ BitVec 32)) )(let (($x239 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1093X)))
 (=> $x239 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1093X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var1092X (_ BitVec 32)) )(let (($x239 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1092X)))
 (= $x239 false)))
 ))
 (let (($x211 (and $x67 $x237)))
 (let (($x100 (= $x211 true)))
 (let (($x323 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let ((?x264 (bvadd (bvmul input.ind-%var1087X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x264))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv2 32))) ?x234)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x264 (_ bv3 32))) ?x272)))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1087X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (=> $x37 (= ?x196 ?x288)))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x254 (bvule (_ bv0 32) input.ind-%var1086X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (= $x37 (and $x254 (bvult input.ind-%var1086X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x317 (and $x289 $x323)))
 (let (($x271 (= $x317 true)))
 (let ((?x261 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x261)))
 (let (($x164 (= ?x92 input.dst.llvm-%n)))
 (let (($x143 (= $x164 true)))
 (let (($x249 (= $x143 true)))
 (let ((?x229 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x220 (= (_ bv0 2) ?x229)))
 (let (($x247 (= $x220 true)))
 (let (($x171 (= $x247 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x61 (not $x102)))
 (let (($x183 (= $x61 true)))
 (let (($x50 (= $x183 true)))
 (let (($x222 (= $x50 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x51)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x155)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x30 $x157)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x150 $x129)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x185 $x44)))
 (let (($x175 (not $x70)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x40 $x166)))
 (let (($x161 (and (not $x74) $x175)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x106 $x93)))
 (let (($x115 (not $x131)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x58 $x116)))
 (let (($x98 (and (not $x95) $x115)))
 (let (($x94 (and (and (and (and (and (and $x98 $x161) $x147) $x109) $x135) $x187) $x130)))
 (let (($x178 (and $x94 $x104)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x80 (or false (or false (and (and true (or $x47 $x138)) (or $x107 $x146))))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x27 (and $x91 $x178)))
 (let (($x56 (= $x27 true)))
 (let (($x77 (= $x56 true)))
 (let (($x69 (= $x77 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x22 (= $x83 true)))
 (let (($x198 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x96 (= $x198 true)))
 (let (($x246 (= $x96 true)))
 (let (($x283 (= $x246 true)))
 (let (($x72 (= ?x92 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x280 (= $x72 true)))
 (let (($x268 (= $x280 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x267)))
 (let (($x5 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x5 true)))
 (let (($x257 (= $x292 true)))
 (let (($x315 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x266 (= $x315 true)))
 (let (($x265 (= $x266 true)))
 (let (($x255 (= $x265 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x322 (= $x18 true)))
 (let (($x86 (= $x322 true)))
 (let (($x8 (= $x86 true)))
 (let (($x256 (and $x8 $x255)))
 (let (($x319 (and $x256 $x257)))
 (let (($x273 (and $x319 $x268)))
 (let (($x49 (and $x273 $x283)))
 (let (($x19 (and $x49 $x22)))
 (let (($x144 (and $x19 $x69)))
 (let (($x71 (and $x144 $x222)))
 (let (($x240 (and $x71 $x137)))
 (let (($x170 (and $x240 $x171)))
 (let (($x110 (and $x170 $x249)))
 (let (($x226 (and $x110 $x271)))
 (let (($x321 (and $x226 $x100)))
 (let (($x63 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x312 (and $x63 $x321)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x7 $x312)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x15 $x184)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x12 (and $x25 $x191)))
 (let (($x90 (=> $x12 $x285)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (not $x25)))
 (let (($x194 (or $x25 $x36)))
 (let (($x295 (= $x194 true)))
 (let (($x156 (= $x295 true)))
 (let (($x248 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1111X)))
 (=> $x277 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1111X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var1110X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1110X)))
 (= $x277 false)))
 ))
 (let (($x158 (and $x134 $x248)))
 (let (($x241 (= $x158 true)))
 (let (($x250 (forall ((input.ind-%var1105X (_ BitVec 32)) )(let ((?x285 (bvadd (bvmul input.ind-%var1105X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x285))))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv2 32))) ?x151)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv3 32))) ?x38)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1105X)))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1105X)))
 (=> $x133 (= ?x236 ?x64)))))))))
 ))
 (let (($x226 (forall ((input.ind-%var1104X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1104X) (bvult input.ind-%var1104X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1104X)))
 (= $x133 $x317))))
 ))
 (let (($x42 (and $x226 $x250)))
 (let (($x206 (= $x42 true)))
 (let ((?x168 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x168)))
 (let (($x264 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x233 (= $x264 true)))
 (let (($x152 (= $x233 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x66)))
 (let (($x26 (= ?x57 input.dst.llvm-%n)))
 (let (($x289 (= $x26 true)))
 (let (($x196 (= $x289 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x218 true)))
 (let (($x254 (= $x37 true)))
 (let (($x223 (= $x254 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (= $x170 true)))
 (let (($x143 (= $x164 true)))
 (let (($x249 (= $x143 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x229 (= $x125 true)))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x144)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x77)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x130 $x51)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x155 $x104)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x30 $x177)))
 (let (($x157 (not $x23)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x109 $x162)))
 (let (($x135 (and (not $x150) $x157)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x161 $x48)))
 (let (($x147 (not $x88)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x91 $x58)))
 (let (($x97 (and (not $x175) $x147)))
 (let (($x71 (and (and (and (and (and (and $x97 $x135) $x103) $x159) $x178) $x56) $x69)))
 (let (($x114 (and $x71 $x127)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x185 (or false (or false (and (and true (or $x106 $x93)) (or $x98 $x40))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x185)))
 (let (($x217 (and $x70 $x114)))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x240 (= $x137 true)))
 (let (($x13 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x146 (= $x13 true)))
 (let (($x17 (= $x146 true)))
 (let (($x29 (= $x17 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x179 (= (_ bv0 2) ?x138)))
 (let (($x149 (= $x179 true)))
 (let (($x16 (= $x149 true)))
 (let (($x84 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (= $x84 true)))
 (let (($x31 (= $x20 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x22 (= $x83 true)))
 (let (($x47 (and $x22 $x31)))
 (let (($x107 (and $x47 $x16)))
 (let (($x28 (and $x107 $x29)))
 (let (($x148 (and $x28 $x240)))
 (let (($x171 (and $x148 $x247)))
 (let (($x110 (and $x171 $x249)))
 (let (($x262 (and $x110 $x223)))
 (let (($x238 (and $x262 $x196)))
 (let (($x235 (and $x238 $x152)))
 (let (($x286 (and $x235 $x206)))
 (let (($x85 (and $x286 $x241)))
 (let (($x246 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x43 (and $x246 $x85)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x273 $x43)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x122 (and $x72 $x297)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd input.dst.llvm-%m ?x15)))
 (let (($x252 (bvugt ?x113 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x113 (_ bv3 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x266 (bvugt ?x113 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x319 (or false (or false (and (and true (or $x315 $x266)) (or $x267 $x252))))))
 (let (($x92 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) $x319)))
 (let (($x7 (=> (and $x25 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) $x319)))
 (let (($x324 (and $x7 $x122)))
 (let (($x76 (=> $x324 $x156)))
 (not $x76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (not $x25)))
 (let (($x194 (or $x25 $x36)))
 (let (($x295 (= $x194 true)))
 (let (($x156 (= $x295 true)))
 (let (($x248 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1111X)))
 (=> $x277 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1111X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var1110X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1110X)))
 (= $x277 false)))
 ))
 (let (($x158 (and $x134 $x248)))
 (let (($x241 (= $x158 true)))
 (let (($x250 (forall ((input.ind-%var1105X (_ BitVec 32)) )(let ((?x285 (bvadd (bvmul input.ind-%var1105X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x285))))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv2 32))) ?x151)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv3 32))) ?x38)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1105X)))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1105X)))
 (=> $x133 (= ?x236 ?x64)))))))))
 ))
 (let (($x226 (forall ((input.ind-%var1104X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1104X) (bvult input.ind-%var1104X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1104X)))
 (= $x133 $x317))))
 ))
 (let (($x42 (and $x226 $x250)))
 (let (($x206 (= $x42 true)))
 (let ((?x168 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x168)))
 (let (($x264 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x233 (= $x264 true)))
 (let (($x152 (= $x233 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x66)))
 (let (($x26 (= ?x57 input.dst.llvm-%n)))
 (let (($x289 (= $x26 true)))
 (let (($x196 (= $x289 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x218 true)))
 (let (($x254 (= $x37 true)))
 (let (($x223 (= $x254 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (= $x170 true)))
 (let (($x143 (= $x164 true)))
 (let (($x249 (= $x143 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x229 (= $x125 true)))
 (let (($x220 (= $x229 true)))
 (let (($x247 (= $x220 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x144)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x77)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x130 $x51)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x155 $x104)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x30 $x177)))
 (let (($x157 (not $x23)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x109 $x162)))
 (let (($x135 (and (not $x150) $x157)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x161 $x48)))
 (let (($x147 (not $x88)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x91 $x58)))
 (let (($x97 (and (not $x175) $x147)))
 (let (($x71 (and (and (and (and (and (and $x97 $x135) $x103) $x159) $x178) $x56) $x69)))
 (let (($x114 (and $x71 $x127)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x185 (or false (or false (and (and true (or $x106 $x93)) (or $x98 $x40))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x185)))
 (let (($x217 (and $x70 $x114)))
 (let (($x75 (= $x217 true)))
 (let (($x137 (= $x75 true)))
 (let (($x240 (= $x137 true)))
 (let (($x13 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x146 (= $x13 true)))
 (let (($x17 (= $x146 true)))
 (let (($x29 (= $x17 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x179 (= (_ bv0 2) ?x138)))
 (let (($x149 (= $x179 true)))
 (let (($x16 (= $x149 true)))
 (let (($x84 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (= $x84 true)))
 (let (($x31 (= $x20 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x53 true)))
 (let (($x83 (= $x65 true)))
 (let (($x22 (= $x83 true)))
 (let (($x47 (and $x22 $x31)))
 (let (($x107 (and $x47 $x16)))
 (let (($x28 (and $x107 $x29)))
 (let (($x148 (and $x28 $x240)))
 (let (($x171 (and $x148 $x247)))
 (let (($x110 (and $x171 $x249)))
 (let (($x262 (and $x110 $x223)))
 (let (($x238 (and $x262 $x196)))
 (let (($x235 (and $x238 $x152)))
 (let (($x286 (and $x235 $x206)))
 (let (($x85 (and $x286 $x241)))
 (let (($x246 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x43 (and $x246 $x85)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x273 $x43)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x122 (and $x72 $x297)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd input.dst.llvm-%m ?x15)))
 (let (($x252 (bvugt ?x113 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x113 (_ bv3 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x266 (bvugt ?x113 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x319 (or false (or false (and (and true (or $x315 $x266)) (or $x267 $x252))))))
 (let (($x92 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) $x319)))
 (let (($x7 (=> (and $x25 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) $x319)))
 (let (($x324 (and $x7 $x122)))
 (let (($x76 (=> $x324 $x156)))
 (not $x76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x33)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x95)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x16 $x146)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x149 $x17)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x19 $x66)))
 (let (($x84 (not $x57)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x65 $x83)))
 (let (($x31 (and (not $x22) $x84)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x198 $x96)))
 (let (($x283 (not $x246)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x280 $x268)))
 (let (($x53 (and (not $x273) $x283)))
 (let (($x166 (and (and (and (and (and (and $x53 $x31) $x60) $x179) $x29) $x116) $x44)))
 (let (($x74 (and $x166 $x106)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x255 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x266)))
 (let (($x7 (or false (or false (and (and true (or $x265 $x255)) (or $x5 $x292))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x264 (and $x72 $x74)))
 (let (($x233 (= $x264 true)))
 (let (($x152 (= $x233 true)))
 (let (($x262 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x125 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1117X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x125 false)))
 ))
 (let (($x26 (and $x171 $x262)))
 (let (($x289 (= $x26 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x129 (concat ?x109 (concat ?x48 ?x181)))))
 (let (($x127 (= ?x30 input.dst.llvm-%n)))
 (let (($x114 (= $x127 true)))
 (let (($x217 (= $x114 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x183 (concat ?x61 (concat ?x102 ?x157)))))
 (let (($x77 (= ?x155 input.dst.llvm-%m)))
 (let (($x69 (= $x77 true)))
 (let (($x71 (= $x69 true)))
 (let (($x130 (= input.dst.llvm-%m ?x155)))
 (let (($x177 (= input.dst.llvm-%n ?x30)))
 (let (($x94 (and $x177 $x130)))
 (let (($x91 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x51 (and $x91 $x94)))
 (let (($x50 (and (and (and $x72 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x74) $x51)))
 (let (($x27 (= $x50 true)))
 (let (($x56 (= $x27 true)))
 (let (($x222 (= $x56 true)))
 (let (($x144 (and $x222 $x71)))
 (let (($x75 (and $x144 $x217)))
 (let (($x196 (and $x75 $x289)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x238 (and $x63 $x196)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x11 $x238)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x126 $x168)))
 (let (($x235 (=> $x245 $x152)))
 (not $x235)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x33)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x95)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x16 $x146)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x149 $x17)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x19 $x66)))
 (let (($x84 (not $x57)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x65 $x83)))
 (let (($x31 (and (not $x22) $x84)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x198 $x96)))
 (let (($x283 (not $x246)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x280 $x268)))
 (let (($x53 (and (not $x273) $x283)))
 (let (($x166 (and (and (and (and (and (and $x53 $x31) $x60) $x179) $x29) $x116) $x44)))
 (let (($x74 (and $x166 $x106)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x255 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x266)))
 (let (($x7 (or false (or false (and (and true (or $x265 $x255)) (or $x5 $x292))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x264 (and $x72 $x74)))
 (let (($x233 (= $x264 true)))
 (let (($x152 (= $x233 true)))
 (let (($x262 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x125 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1117X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x125 false)))
 ))
 (let (($x26 (and $x171 $x262)))
 (let (($x289 (= $x26 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x129 (concat ?x109 (concat ?x48 ?x181)))))
 (let (($x127 (= ?x30 input.dst.llvm-%n)))
 (let (($x114 (= $x127 true)))
 (let (($x217 (= $x114 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x183 (concat ?x61 (concat ?x102 ?x157)))))
 (let (($x77 (= ?x155 input.dst.llvm-%m)))
 (let (($x69 (= $x77 true)))
 (let (($x71 (= $x69 true)))
 (let (($x130 (= input.dst.llvm-%m ?x155)))
 (let (($x177 (= input.dst.llvm-%n ?x30)))
 (let (($x94 (and $x177 $x130)))
 (let (($x91 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x51 (and $x91 $x94)))
 (let (($x50 (and (and (and $x72 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x74) $x51)))
 (let (($x27 (= $x50 true)))
 (let (($x56 (= $x27 true)))
 (let (($x222 (= $x56 true)))
 (let (($x144 (and $x222 $x71)))
 (let (($x75 (and $x144 $x217)))
 (let (($x196 (and $x75 $x289)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x238 (and $x63 $x196)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x11 $x238)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x126 $x168)))
 (let (($x235 (=> $x245 $x152)))
 (not $x235)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x218)))
 (let (($x37 (= ?x164 input.dst.llvm-%n)))
 (let (($x108 (= $x37 true)))
 (let (($x23 (forall ((input.ind-%var1123X (_ BitVec 32)) )(let (($x223 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1123X)))
 (=> $x223 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1123X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let (($x223 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1122X)))
 (= $x223 false)))
 ))
 (let (($x175 (and $x196 $x23)))
 (let (($x229 (= $x175 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x94 (concat ?x187 (concat ?x102 ?x61)))))
 (let (($x75 (= ?x51 input.dst.llvm-%n)))
 (let (($x148 (= $x75 true)))
 (let (($x125 (= $x148 true)))
 (let ((?x315 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x292 (concat ?x267 (concat ?x265 ?x315)))))
 (let (($x27 (= input.dst.llvm-%m ?x257)))
 (let (($x50 (= input.dst.llvm-%n ?x51)))
 (let (($x56 (and $x50 $x27)))
 (let (($x183 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x222 (and $x183 $x56)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x147)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x150)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (and $x74 $x188)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x106 $x185)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x29 $x98)))
 (let (($x116 (not $x28)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x13 $x146)))
 (let (($x95 (and (not $x17) $x116)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x138 $x179)))
 (let (($x149 (not $x115)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x47 $x60)))
 (let (($x107 (and (not $x131) $x149)))
 (let (($x162 (and (and (and (and (and (and $x107 $x95) $x44) $x33) $x70) $x58) $x129)))
 (let (($x30 (and $x162 $x97)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x84 (or false (or false (and (and true (or $x96 $x246)) (or $x22 $x20))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x84)))
 (let (($x71 (and (and (and $x93 $x104) $x30) $x222)))
 (let (($x144 (= $x71 true)))
 (let (($x127 (= $x144 true)))
 (let (($x114 (= $x127 true)))
 (let (($x92 (= ?x257 input.dst.llvm-%m)))
 (let (($x7 (= $x92 true)))
 (let (($x72 (= $x7 true)))
 (let (($x217 (and $x72 $x114)))
 (let (($x247 (and $x217 $x125)))
 (let (($x110 (and $x247 $x229)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x113 $x110)))
 (let (($x310 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x310 $x143)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x240 (and $x25 $x137)))
 (let (($x133 (=> $x240 $x108)))
 (not $x133)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x218)))
 (let (($x37 (= ?x164 input.dst.llvm-%n)))
 (let (($x108 (= $x37 true)))
 (let (($x23 (forall ((input.ind-%var1123X (_ BitVec 32)) )(let (($x223 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1123X)))
 (=> $x223 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1123X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let (($x223 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1122X)))
 (= $x223 false)))
 ))
 (let (($x175 (and $x196 $x23)))
 (let (($x229 (= $x175 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x94 (concat ?x187 (concat ?x102 ?x61)))))
 (let (($x75 (= ?x51 input.dst.llvm-%n)))
 (let (($x148 (= $x75 true)))
 (let (($x125 (= $x148 true)))
 (let ((?x315 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x292 (concat ?x267 (concat ?x265 ?x315)))))
 (let (($x27 (= input.dst.llvm-%m ?x257)))
 (let (($x50 (= input.dst.llvm-%n ?x51)))
 (let (($x56 (and $x50 $x27)))
 (let (($x183 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x222 (and $x183 $x56)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x147)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x150)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (and $x74 $x188)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x106 $x185)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x29 $x98)))
 (let (($x116 (not $x28)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x13 $x146)))
 (let (($x95 (and (not $x17) $x116)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x138 $x179)))
 (let (($x149 (not $x115)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x47 $x60)))
 (let (($x107 (and (not $x131) $x149)))
 (let (($x162 (and (and (and (and (and (and $x107 $x95) $x44) $x33) $x70) $x58) $x129)))
 (let (($x30 (and $x162 $x97)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x84 (or false (or false (and (and true (or $x96 $x246)) (or $x22 $x20))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x84)))
 (let (($x71 (and (and (and $x93 $x104) $x30) $x222)))
 (let (($x144 (= $x71 true)))
 (let (($x127 (= $x144 true)))
 (let (($x114 (= $x127 true)))
 (let (($x92 (= ?x257 input.dst.llvm-%m)))
 (let (($x7 (= $x92 true)))
 (let (($x72 (= $x7 true)))
 (let (($x217 (and $x72 $x114)))
 (let (($x247 (and $x217 $x125)))
 (let (($x110 (and $x247 $x229)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x113 $x110)))
 (let (($x310 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x310 $x143)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x240 (and $x25 $x137)))
 (let (($x133 (=> $x240 $x108)))
 (not $x133)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x249 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x26 (= (_ bv0 2) ?x249)))
 (let (($x152 (= $x26 true)))
 (let (($x323 (forall ((input.ind-%var1129X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1129X)))
 (=> $x207 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1129X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var1128X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1128X)))
 (= $x207 false)))
 ))
 (let (($x261 (and $x110 $x323)))
 (let (($x8 (= $x261 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x50 (concat ?x157 (concat ?x135 ?x182)))))
 (let (($x247 (= ?x27 input.dst.llvm-%m)))
 (let (($x254 (= $x247 true)))
 (let (($x223 (= $x254 true)))
 (let (($x56 (= input.dst.llvm-%m ?x27)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x319 (concat ?x257 (concat ?x265 (concat ?x255 ?x252)))))
 (let (($x130 (= input.dst.llvm-%n ?x319)))
 (let (($x222 (and $x130 $x56)))
 (let (($x183 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x71 (and $x183 $x222)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x91)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x70)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x33 $x106)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x166 $x74)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x40 $x29)))
 (let (($x28 (not $x98)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x13 $x146)))
 (let (($x95 (and (not $x17) $x28)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x16 $x138)))
 (let (($x115 (not $x179)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x273 $x60)))
 (let (($x107 (and (not $x131) $x115)))
 (let (($x97 (and (and (and (and (and (and $x107 $x95) $x44) $x161) $x178) $x185) $x181)))
 (let (($x30 (and $x97 $x58)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x283 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x283)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x283)))
 (let (($x104 (or false (or false (and (and true (or $x53 $x65)) (or $x66 $x57))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x114 (and (and (and $x47 $x31) $x30) $x71)))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x148 (= $x75 true)))
 (let (($x7 (= ?x319 input.dst.llvm-%n)))
 (let (($x72 (= $x7 true)))
 (let (($x280 (= $x72 true)))
 (let (($x125 (and $x280 $x148)))
 (let (($x289 (and $x125 $x223)))
 (let (($x103 (and $x289 $x8)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and $x15 $x103)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x174 $x262)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x126 $x233)))
 (let (($x168 (=> $x245 $x152)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x249 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x26 (= (_ bv0 2) ?x249)))
 (let (($x152 (= $x26 true)))
 (let (($x323 (forall ((input.ind-%var1129X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1129X)))
 (=> $x207 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1129X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var1128X (_ BitVec 32)) )(let (($x207 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1128X)))
 (= $x207 false)))
 ))
 (let (($x261 (and $x110 $x323)))
 (let (($x8 (= $x261 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x50 (concat ?x157 (concat ?x135 ?x182)))))
 (let (($x247 (= ?x27 input.dst.llvm-%m)))
 (let (($x254 (= $x247 true)))
 (let (($x223 (= $x254 true)))
 (let (($x56 (= input.dst.llvm-%m ?x27)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x319 (concat ?x257 (concat ?x265 (concat ?x255 ?x252)))))
 (let (($x130 (= input.dst.llvm-%n ?x319)))
 (let (($x222 (and $x130 $x56)))
 (let (($x183 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x71 (and $x183 $x222)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x91)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x70)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x33 $x106)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x166 $x74)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x40 $x29)))
 (let (($x28 (not $x98)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x13 $x146)))
 (let (($x95 (and (not $x17) $x28)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x16 $x138)))
 (let (($x115 (not $x179)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x273 $x60)))
 (let (($x107 (and (not $x131) $x115)))
 (let (($x97 (and (and (and (and (and (and $x107 $x95) $x44) $x161) $x178) $x185) $x181)))
 (let (($x30 (and $x97 $x58)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x283 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x283)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x283)))
 (let (($x104 (or false (or false (and (and true (or $x53 $x65)) (or $x66 $x57))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x114 (and (and (and $x47 $x31) $x30) $x71)))
 (let (($x217 (= $x114 true)))
 (let (($x75 (= $x217 true)))
 (let (($x148 (= $x75 true)))
 (let (($x7 (= ?x319 input.dst.llvm-%n)))
 (let (($x72 (= $x7 true)))
 (let (($x280 (= $x72 true)))
 (let (($x125 (and $x280 $x148)))
 (let (($x289 (and $x125 $x223)))
 (let (($x103 (and $x289 $x8)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and $x15 $x103)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x174 $x262)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x126 $x233)))
 (let (($x168 (=> $x245 $x152)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x175)))
 (let (($x137 (= ?x164 input.spec-%var-n-1)))
 (let (($x37 (= $x137 true)))
 (let (($x268 (forall ((input.ind-%var1135X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1135X)))
 (=> $x133 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1135X) (_ bv0 32)))))
 ))
 (let (($x103 (forall ((input.ind-%var1134X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1134X)))
 (= $x133 false)))
 ))
 (let (($x94 (and $x103 $x268)))
 (let (($x260 (= $x94 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x66 (concat ?x22 (concat ?x53 ?x49)))))
 (let (($x75 (= input.dst.llvm-%m ?x19)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x319 (concat ?x255 (concat ?x267 ?x14)))))
 (let (($x217 (= input.dst.llvm-%n ?x92)))
 (let (($x148 (and $x217 $x75)))
 (let (($x114 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and $x114 $x148)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x61)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x51)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x127)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x30 $x69)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x58 $x177)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (and $x162 $x188)))
 (let (($x147 (not $x185)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x106 $x74)))
 (let (($x181 (and (not $x178) $x147)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x150 $x161)))
 (let (($x166 (not $x129)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x144 $x109)))
 (let (($x48 (and (not $x44) $x166)))
 (let (($x27 (and (and (and (and (and (and $x48 $x181) $x97) $x91) $x159) $x130) $x50)))
 (let (($x56 (and $x27 $x157)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x28 (or false (or false (and (and true (or $x138 $x179)) (or $x17 $x116))))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x223 (and (and (and $x88 $x31) $x56) $x125)))
 (let (($x289 (= $x223 true)))
 (let (($x318 (= $x289 true)))
 (let (($x207 (= $x318 true)))
 (let (($x84 (= ?x19 input.dst.llvm-%m)))
 (let (($x93 (= $x84 true)))
 (let (($x18 (= $x93 true)))
 (let (($x72 (= ?x92 input.dst.llvm-%n)))
 (let (($x280 (= $x72 true)))
 (let (($x198 (= $x280 true)))
 (let (($x104 (and $x198 $x18)))
 (let (($x229 (and $x104 $x207)))
 (let (($x23 (and $x229 $x260)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and $x11 $x23)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x240 (and $x46 $x218)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x196 (and $x25 $x240)))
 (let (($x238 (=> $x196 $x37)))
 (not $x238)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x175)))
 (let (($x137 (= ?x164 input.spec-%var-n-1)))
 (let (($x37 (= $x137 true)))
 (let (($x268 (forall ((input.ind-%var1135X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1135X)))
 (=> $x133 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1135X) (_ bv0 32)))))
 ))
 (let (($x103 (forall ((input.ind-%var1134X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1134X)))
 (= $x133 false)))
 ))
 (let (($x94 (and $x103 $x268)))
 (let (($x260 (= $x94 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x66 (concat ?x22 (concat ?x53 ?x49)))))
 (let (($x75 (= input.dst.llvm-%m ?x19)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x319 (concat ?x255 (concat ?x267 ?x14)))))
 (let (($x217 (= input.dst.llvm-%n ?x92)))
 (let (($x148 (and $x217 $x75)))
 (let (($x114 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and $x114 $x148)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x61)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x51)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x127)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x30 $x69)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x58 $x177)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (and $x162 $x188)))
 (let (($x147 (not $x185)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x106 $x74)))
 (let (($x181 (and (not $x178) $x147)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x150 $x161)))
 (let (($x166 (not $x129)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x144 $x109)))
 (let (($x48 (and (not $x44) $x166)))
 (let (($x27 (and (and (and (and (and (and $x48 $x181) $x97) $x91) $x159) $x130) $x50)))
 (let (($x56 (and $x27 $x157)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x28 (or false (or false (and (and true (or $x138 $x179)) (or $x17 $x116))))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x223 (and (and (and $x88 $x31) $x56) $x125)))
 (let (($x289 (= $x223 true)))
 (let (($x318 (= $x289 true)))
 (let (($x207 (= $x318 true)))
 (let (($x84 (= ?x19 input.dst.llvm-%m)))
 (let (($x93 (= $x84 true)))
 (let (($x18 (= $x93 true)))
 (let (($x72 (= ?x92 input.dst.llvm-%n)))
 (let (($x280 (= $x72 true)))
 (let (($x198 (= $x280 true)))
 (let (($x104 (and $x198 $x18)))
 (let (($x229 (and $x104 $x207)))
 (let (($x23 (and $x229 $x260)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and $x11 $x23)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x240 (and $x46 $x218)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x196 (and $x25 $x240)))
 (let (($x238 (=> $x196 $x37)))
 (not $x238)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var1147X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x204))))
 (=> false (= (_ bv0 32) ?x158))))))
 ))
 (let (($x226 (forall ((input.ind-%var1146X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1146X) (bvult input.ind-%var1146X (_ bv0 32)))))
 ))
 (let (($x297 (and $x226 $x43)))
 (let (($x110 (= true true)))
 (let (($x122 (and $x110 $x297)))
 (let (($x324 (= $x122 true)))
 (let (($x170 (forall ((input.ind-%var1141X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1141X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1141X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var1140X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1140X)))
 (= $x235 false)))
 ))
 (let (($x47 (and $x23 $x170)))
 (let (($x96 (= $x47 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x254 (concat ?x61 (concat ?x51 ?x130)))))
 (let (($x229 (= ?x222 input.dst.llvm-%m)))
 (let (($x108 (= $x229 true)))
 (let (($x133 (= $x108 true)))
 (let (($x71 (= input.dst.llvm-%m ?x222)))
 (let ((?x315 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x92 (concat ?x267 (concat ?x265 ?x315)))))
 (let (($x102 (= input.dst.llvm-%n ?x7)))
 (let (($x114 (and $x102 $x71)))
 (let (($x159 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x217 (and $x159 $x114)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x147)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x188)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x166 $x106)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x129 $x74)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (and $x88 $x31)))
 (let (($x144 (not $x247)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x29 $x98)))
 (let (($x44 (and (not $x28) $x144)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x107 $x13)))
 (let (($x146 (not $x17)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x65 $x179)))
 (let (($x40 (and (not $x115) $x146)))
 (let (($x58 (and (and (and (and (and (and $x40 $x44) $x150) $x161) $x178) $x162) $x185)))
 (let (($x30 (and $x58 $x181)))
 (let (($x66 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x246 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x246)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x246)))
 (let (($x16 (or false (or false (and (and true (or $x83 $x19)) (or $x104 $x273))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x125 (and (and (and $x149 $x66) $x30) $x217)))
 (let (($x223 (= $x125 true)))
 (let (($x289 (= $x223 true)))
 (let (($x318 (= $x289 true)))
 (let (($x280 (= ?x7 input.dst.llvm-%n)))
 (let (($x198 (= $x280 true)))
 (let (($x77 (= $x198 true)))
 (let (($x207 (and $x77 $x318)))
 (let (($x8 (and $x207 $x133)))
 (let (($x5 (and $x8 $x96)))
 (let (($x310 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x323 (and $x310 $x5)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x249 (and $x86 $x323)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x126 $x249)))
 (let (($x36 (=> $x245 $x324)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var1147X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x204))))
 (=> false (= (_ bv0 32) ?x158))))))
 ))
 (let (($x226 (forall ((input.ind-%var1146X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1146X) (bvult input.ind-%var1146X (_ bv0 32)))))
 ))
 (let (($x297 (and $x226 $x43)))
 (let (($x110 (= true true)))
 (let (($x122 (and $x110 $x297)))
 (let (($x324 (= $x122 true)))
 (let (($x170 (forall ((input.ind-%var1141X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1141X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1141X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var1140X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1140X)))
 (= $x235 false)))
 ))
 (let (($x47 (and $x23 $x170)))
 (let (($x96 (= $x47 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x254 (concat ?x61 (concat ?x51 ?x130)))))
 (let (($x229 (= ?x222 input.dst.llvm-%m)))
 (let (($x108 (= $x229 true)))
 (let (($x133 (= $x108 true)))
 (let (($x71 (= input.dst.llvm-%m ?x222)))
 (let ((?x315 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x92 (concat ?x267 (concat ?x265 ?x315)))))
 (let (($x102 (= input.dst.llvm-%n ?x7)))
 (let (($x114 (and $x102 $x71)))
 (let (($x159 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x217 (and $x159 $x114)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x147)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x188)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x166 $x106)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x129 $x74)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (and $x88 $x31)))
 (let (($x144 (not $x247)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x29 $x98)))
 (let (($x44 (and (not $x28) $x144)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x107 $x13)))
 (let (($x146 (not $x17)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x65 $x179)))
 (let (($x40 (and (not $x115) $x146)))
 (let (($x58 (and (and (and (and (and (and $x40 $x44) $x150) $x161) $x178) $x162) $x185)))
 (let (($x30 (and $x58 $x181)))
 (let (($x66 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x246 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x246)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x246)))
 (let (($x16 (or false (or false (and (and true (or $x83 $x19)) (or $x104 $x273))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x125 (and (and (and $x149 $x66) $x30) $x217)))
 (let (($x223 (= $x125 true)))
 (let (($x289 (= $x223 true)))
 (let (($x318 (= $x289 true)))
 (let (($x280 (= ?x7 input.dst.llvm-%n)))
 (let (($x198 (= $x280 true)))
 (let (($x77 (= $x198 true)))
 (let (($x207 (and $x77 $x318)))
 (let (($x8 (and $x207 $x133)))
 (let (($x5 (and $x8 $x96)))
 (let (($x310 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x323 (and $x310 $x5)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x249 (and $x86 $x323)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x126 $x249)))
 (let (($x36 (=> $x245 $x324)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x286 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x277 (= $x286 true)))
 (let (($x206 (= $x277 true)))
 (let (($x105 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1153X)))
 (=> $x238 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1153X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1152X)))
 (= $x238 false)))
 ))
 (let (($x250 (and $x5 $x105)))
 (let (($x42 (= $x250 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x157 (concat ?x51 (concat ?x27 ?x56)))))
 (let (($x8 (= ?x222 input.dst.llvm-%n)))
 (let (($x168 (= $x8 true)))
 (let (($x235 (= $x168 true)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x7 (concat ?x265 (concat ?x255 ?x252)))))
 (let (($x114 (= input.dst.llvm-%m ?x72)))
 (let (($x71 (= input.dst.llvm-%n ?x222)))
 (let (($x217 (and $x71 $x114)))
 (let (($x159 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and $x159 $x217)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x182)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x70)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x129 $x48)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x135 $x106)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x31 $x247)))
 (let (($x44 (not $x144)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x28 $x109)))
 (let (($x33 (and (not $x88) $x44)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x13 $x17)))
 (let (($x40 (not $x146)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x115 $x116)))
 (let (($x98 (and (not $x107) $x40)))
 (let (($x148 (and (and (and (and (and (and $x98 $x33) $x150) $x161) $x74) $x91) $x162)))
 (let (($x127 (and $x148 $x188)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x75 (or false (or false (and (and true (or $x84 $x93)) (or $x95 $x131))))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x75)))
 (let (($x318 (and (and (and $x179 $x53) $x127) $x125)))
 (let (($x207 (= $x318 true)))
 (let (($x229 (= $x207 true)))
 (let (($x108 (= $x229 true)))
 (let (($x198 (= ?x72 input.dst.llvm-%m)))
 (let (($x77 (= $x198 true)))
 (let (($x22 (= $x77 true)))
 (let (($x133 (and $x22 $x108)))
 (let (($x260 (and $x133 $x235)))
 (let (($x214 (and $x260 $x42)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x248 (and $x174 $x214)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x63 $x248)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x25 $x134)))
 (let (($x204 (=> $x203 $x206)))
 (not $x204))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x286 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x277 (= $x286 true)))
 (let (($x206 (= $x277 true)))
 (let (($x105 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1153X)))
 (=> $x238 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1153X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1152X)))
 (= $x238 false)))
 ))
 (let (($x250 (and $x5 $x105)))
 (let (($x42 (= $x250 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x157 (concat ?x51 (concat ?x27 ?x56)))))
 (let (($x8 (= ?x222 input.dst.llvm-%n)))
 (let (($x168 (= $x8 true)))
 (let (($x235 (= $x168 true)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x7 (concat ?x265 (concat ?x255 ?x252)))))
 (let (($x114 (= input.dst.llvm-%m ?x72)))
 (let (($x71 (= input.dst.llvm-%n ?x222)))
 (let (($x217 (and $x71 $x114)))
 (let (($x159 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and $x159 $x217)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x182)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x70)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x129 $x48)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x135 $x106)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x31 $x247)))
 (let (($x44 (not $x144)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x28 $x109)))
 (let (($x33 (and (not $x88) $x44)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x13 $x17)))
 (let (($x40 (not $x146)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x115 $x116)))
 (let (($x98 (and (not $x107) $x40)))
 (let (($x148 (and (and (and (and (and (and $x98 $x33) $x150) $x161) $x74) $x91) $x162)))
 (let (($x127 (and $x148 $x188)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x75 (or false (or false (and (and true (or $x84 $x93)) (or $x95 $x131))))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x75)))
 (let (($x318 (and (and (and $x179 $x53) $x127) $x125)))
 (let (($x207 (= $x318 true)))
 (let (($x229 (= $x207 true)))
 (let (($x108 (= $x229 true)))
 (let (($x198 (= ?x72 input.dst.llvm-%m)))
 (let (($x77 (= $x198 true)))
 (let (($x22 (= $x77 true)))
 (let (($x133 (and $x22 $x108)))
 (let (($x260 (and $x133 $x235)))
 (let (($x214 (and $x260 $x42)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x248 (and $x174 $x214)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x63 $x248)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x25 $x134)))
 (let (($x204 (=> $x203 $x206)))
 (not $x204))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x224 (bvmul (_ bv4294967295 32) ?x202)))
 (let ((?x275 (bvneg ?x224)))
 (let (($x52 (= ?x275 ?x282)))
 (let (($x117 (= $x52 true)))
 (let (($x293 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x10 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1165X) (_ bv0 32)))))
 ))
 (let (($x291 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x10 false)))
 ))
 (let (($x219 (and $x291 $x293)))
 (let (($x227 (= $x219 true)))
 (let (($x165 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1159X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x73)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x288)))
 (let ((?x163 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1159X)))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1159X)))
 (=> $x64 (= ?x163 ?x193)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) input.ind-%var1158X) (bvult input.ind-%var1158X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1158X)))
 (= $x64 $x200))))
 ))
 (let (($x123 (and $x262 $x165)))
 (let (($x281 (= $x123 true)))
 (let ((?x151 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x151)))
 (let (($x199 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x199 true)))
 (let (($x191 (= $x68 true)))
 (let (($x261 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x285 (= $x261 true)))
 (let (($x186 (= $x285 true)))
 (let (($x103 (= $x186 true)))
 (let (($x268 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x175 (= $x268 true)))
 (let (($x218 (= $x175 true)))
 (let (($x196 (= $x218 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x15 (= $x194 true)))
 (let (($x20 (= $x15 true)))
 (let (($x183 (= $x20 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x47 (bvsub ?x86 ?x63)))
 (let (($x236 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x47) (bvult ?x86 ?x47))))
 (let (($x245 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x23 (ite $x245 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x102 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x102)))
 (let ((?x173 ((_ extract 63 32) ?x170)))
 (let (($x264 (= ?x173 ?x23)))
 (let (($x158 (and $x264 $x236)))
 (let (($x283 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x241 (and $x283 $x158)))
 (let (($x85 (= true $x241)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x25 $x85)))
 (let (($x297 (= $x43 true)))
 (let (($x122 (= $x297 true)))
 (let (($x324 (= $x122 true)))
 (let (($x134 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x203 (= $x134 true)))
 (let (($x286 (= $x203 true)))
 (let (($x277 (= $x286 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x250 (= $x105 true)))
 (let (($x42 (= $x250 true)))
 (let (($x214 (= $x42 true)))
 (let (($x96 (= $x25 true)))
 (let (($x5 (= $x96 true)))
 (let (($x110 (= $x5 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x114)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x222)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x155 $x254)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x157 $x27)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x162 $x148)))
 (let (($x188 (not $x182)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x91 $x30)))
 (let (($x289 (and (not $x70) $x188)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x166 $x48)))
 (let (($x74 (not $x106)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x98 $x28)))
 (let (($x178 (and (not $x129) $x74)))
 (let (($x133 (and (and (and (and (and (and $x178 $x289) $x177) $x50) $x56) $x130) $x71)))
 (let (($x8 (and $x133 $x217)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x161 (or false (or false (and (and true (or $x31 $x247)) (or $x33 $x185))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x161)))
 (let (($x168 (and $x135 $x8)))
 (let (($x235 (= $x168 true)))
 (let (($x260 (= $x235 true)))
 (let (($x37 (= $x260 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x29 (= (_ bv0 2) ?x107)))
 (let (($x13 (= $x29 true)))
 (let (($x17 (= $x13 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x16)))
 (let (($x138 (= ?x149 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x138 true)))
 (let (($x223 (= $x53 true)))
 (let (($x66 (= ?x149 input.dst.llvm-%n)))
 (let (($x75 (= $x66 true)))
 (let (($x179 (= $x75 true)))
 (let (($x115 (and $x179 $x223)))
 (let (($x146 (and $x115 $x17)))
 (let (($x238 (and $x146 $x37)))
 (let (($x271 (and $x238 $x110)))
 (let (($x248 (and $x271 $x214)))
 (let (($x206 (and $x248 $x277)))
 (let (($x36 (and $x206 $x324)))
 (let (($x322 (and $x36 $x183)))
 (let (($x220 (and $x322 $x196)))
 (let (($x171 (and $x220 $x103)))
 (let (($x230 (and $x171 $x191)))
 (let (($x231 (and $x230 $x281)))
 (let (($x216 (and $x231 $x227)))
 (let (($x60 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and (not $x60) $x216)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x273 $x82)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x93 $x120)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x57 $x294)))
 (let (($x198 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x265 (bvadd ?x86 (_ bv3 32))))
 (let (($x280 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x265)))
 (let (($x255 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x265)))
 (let (($x83 (or false (or false (and (and true (or $x92 $x255)) (or $x280 $x198))))))
 (let (($x49 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x83)))
 (let (($x174 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x83)))
 (let (($x62 (and $x174 $x128)))
 (let (($x244 (=> $x62 $x117)))
 (not $x244)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x224 (bvmul (_ bv4294967295 32) ?x202)))
 (let ((?x275 (bvneg ?x224)))
 (let (($x52 (= ?x275 ?x282)))
 (let (($x117 (= $x52 true)))
 (let (($x293 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x10 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1165X) (_ bv0 32)))))
 ))
 (let (($x291 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x10 false)))
 ))
 (let (($x219 (and $x291 $x293)))
 (let (($x227 (= $x219 true)))
 (let (($x165 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1159X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x73)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x288)))
 (let ((?x163 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1159X)))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1159X)))
 (=> $x64 (= ?x163 ?x193)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) input.ind-%var1158X) (bvult input.ind-%var1158X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1158X)))
 (= $x64 $x200))))
 ))
 (let (($x123 (and $x262 $x165)))
 (let (($x281 (= $x123 true)))
 (let ((?x151 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x151)))
 (let (($x199 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x199 true)))
 (let (($x191 (= $x68 true)))
 (let (($x261 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x285 (= $x261 true)))
 (let (($x186 (= $x285 true)))
 (let (($x103 (= $x186 true)))
 (let (($x268 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x175 (= $x268 true)))
 (let (($x218 (= $x175 true)))
 (let (($x196 (= $x218 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x15 (= $x194 true)))
 (let (($x20 (= $x15 true)))
 (let (($x183 (= $x20 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x47 (bvsub ?x86 ?x63)))
 (let (($x236 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x47) (bvult ?x86 ?x47))))
 (let (($x245 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x23 (ite $x245 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x102 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x102)))
 (let ((?x173 ((_ extract 63 32) ?x170)))
 (let (($x264 (= ?x173 ?x23)))
 (let (($x158 (and $x264 $x236)))
 (let (($x283 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x241 (and $x283 $x158)))
 (let (($x85 (= true $x241)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (=> $x25 $x85)))
 (let (($x297 (= $x43 true)))
 (let (($x122 (= $x297 true)))
 (let (($x324 (= $x122 true)))
 (let (($x134 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x203 (= $x134 true)))
 (let (($x286 (= $x203 true)))
 (let (($x277 (= $x286 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x250 (= $x105 true)))
 (let (($x42 (= $x250 true)))
 (let (($x214 (= $x42 true)))
 (let (($x96 (= $x25 true)))
 (let (($x5 (= $x96 true)))
 (let (($x110 (= $x5 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x114)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x222)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x155 $x254)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x157 $x27)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x162 $x148)))
 (let (($x188 (not $x182)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x91 $x30)))
 (let (($x289 (and (not $x70) $x188)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x166 $x48)))
 (let (($x74 (not $x106)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x98 $x28)))
 (let (($x178 (and (not $x129) $x74)))
 (let (($x133 (and (and (and (and (and (and $x178 $x289) $x177) $x50) $x56) $x130) $x71)))
 (let (($x8 (and $x133 $x217)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x161 (or false (or false (and (and true (or $x31 $x247)) (or $x33 $x185))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x161)))
 (let (($x168 (and $x135 $x8)))
 (let (($x235 (= $x168 true)))
 (let (($x260 (= $x235 true)))
 (let (($x37 (= $x260 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x29 (= (_ bv0 2) ?x107)))
 (let (($x13 (= $x29 true)))
 (let (($x17 (= $x13 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x16)))
 (let (($x138 (= ?x149 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x138 true)))
 (let (($x223 (= $x53 true)))
 (let (($x66 (= ?x149 input.dst.llvm-%n)))
 (let (($x75 (= $x66 true)))
 (let (($x179 (= $x75 true)))
 (let (($x115 (and $x179 $x223)))
 (let (($x146 (and $x115 $x17)))
 (let (($x238 (and $x146 $x37)))
 (let (($x271 (and $x238 $x110)))
 (let (($x248 (and $x271 $x214)))
 (let (($x206 (and $x248 $x277)))
 (let (($x36 (and $x206 $x324)))
 (let (($x322 (and $x36 $x183)))
 (let (($x220 (and $x322 $x196)))
 (let (($x171 (and $x220 $x103)))
 (let (($x230 (and $x171 $x191)))
 (let (($x231 (and $x230 $x281)))
 (let (($x216 (and $x231 $x227)))
 (let (($x60 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and (not $x60) $x216)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x273 $x82)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x93 $x120)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x57 $x294)))
 (let (($x198 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x265 (bvadd ?x86 (_ bv3 32))))
 (let (($x280 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x265)))
 (let (($x255 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x265)))
 (let (($x83 (or false (or false (and (and true (or $x92 $x255)) (or $x280 $x198))))))
 (let (($x49 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x83)))
 (let (($x174 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x83)))
 (let (($x62 (and $x174 $x128)))
 (let (($x244 (=> $x62 $x117)))
 (not $x244)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x156 (= $x225 true)))
 (let (($x41 (= $x156 true)))
 (let (($x55 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1177X)))
 (=> $x119 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1177X) (_ bv0 32)))))
 ))
 (let (($x164 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1176X)))
 (= $x119 false)))
 ))
 (let (($x67 (and $x164 $x55)))
 (let (($x237 (= $x67 true)))
 (let (($x132 (forall ((input.ind-%var1171X (_ BitVec 32)) )(let ((?x216 (bvadd (bvmul input.ind-%var1171X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x216))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv2 32))) ?x128)))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv3 32))) ?x224)))
 (let ((?x100 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1171X)))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1171X)))
 (=> $x200 (= ?x100 ?x52)))))))))
 ))
 (let (($x101 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1170X) (bvult input.ind-%var1170X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (= $x200 $x311))))
 ))
 (let (($x113 (and $x101 $x132)))
 (let (($x40 (= $x113 true)))
 (let ((?x38 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x199 (bvneg ?x38)))
 (let (($x68 (= ?x199 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x68 true)))
 (let (($x230 (= $x191 true)))
 (let (($x285 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x186 (= $x285 true)))
 (let (($x103 (= $x186 true)))
 (let (($x171 (= $x103 true)))
 (let (($x175 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x218 (= $x175 true)))
 (let (($x196 (= $x218 true)))
 (let (($x220 (= $x196 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x158)))
 (let ((?x317 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x317)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x249 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x245)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x173 $x23)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x170 $x264)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (and $x134 $x203)))
 (let (($x277 (not $x286)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x42 $x214)))
 (let (($x204 (and (not $x248) $x277)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (and $x5 $x110)))
 (let (($x226 (not $x271)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x27 $x56)))
 (let (($x250 (and (not $x96) $x226)))
 (let (($x36 (and (and (and (and (and (and $x250 $x204) $x283) $x102) $x143) $x249) $x236)))
 (let (($x194 (and $x36 $x241)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x260 (or false (or false (and (and true (or $x108 $x222)) (or $x114 $x217))))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x260)))
 (let (($x15 (and $x238 $x194)))
 (let (($x20 (= $x15 true)))
 (let (($x183 (= $x20 true)))
 (let (($x322 (= $x183 true)))
 (let (($x50 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x50 true)))
 (let (($x157 (= $x207 true)))
 (let (($x155 (= $x157 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x69 (= $x125 true)))
 (let (($x177 (= $x69 true)))
 (let (($x318 (= $x177 true)))
 (let ((?x162 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x148 (= (_ bv0 2) ?x162)))
 (let (($x182 (= $x148 true)))
 (let (($x188 (= $x182 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x129)))
 (let (($x178 (= ?x181 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x178 true)))
 (let (($x30 (= $x91 true)))
 (let (($x166 (= ?x181 input.dst.llvm-%n)))
 (let (($x48 (= $x166 true)))
 (let (($x106 (= $x48 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x31 (bvsub ?x86 ?x63)))
 (let (($x33 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x31) (bvult ?x86 ?x31))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x147 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x13)))
 (let ((?x146 ((_ extract 63 32) ?x17)))
 (let (($x187 (= ?x146 ?x147)))
 (let (($x185 (and $x187 $x33)))
 (let (($x107 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x150 (and $x107 $x185)))
 (let (($x58 (= true $x150)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (=> $x25 $x58)))
 (let (($x161 (= $x97 true)))
 (let (($x135 (= $x161 true)))
 (let (($x98 (= $x135 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x75 true)))
 (let (($x138 (= $x179 true)))
 (let (($x53 (= $x138 true)))
 (let (($x131 (= $x25 true)))
 (let (($x16 (= $x131 true)))
 (let (($x149 (= $x16 true)))
 (let (($x223 (and $x149 $x53)))
 (let (($x28 (and $x223 $x98)))
 (let (($x74 (and $x28 $x106)))
 (let (($x70 (and $x74 $x30)))
 (let (($x289 (and $x70 $x188)))
 (let (($x159 (and $x289 $x318)))
 (let (($x51 (and $x159 $x155)))
 (let (($x268 (and $x51 $x322)))
 (let (($x261 (and $x268 $x220)))
 (let (($x151 (and $x261 $x171)))
 (let (($x90 (and $x151 $x230)))
 (let (($x94 (and $x90 $x40)))
 (let (($x172 (and $x94 $x237)))
 (let (($x263 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x242 (and (not $x263) $x172)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x95 $x242)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x104 $x233)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x12 (and $x84 $x152)))
 (let (($x22 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd ?x86 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x257 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x174 (or false (or false (and (and true (or $x252 $x257)) (or $x77 $x22))))))
 (let (($x57 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x174)))
 (let (($x292 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x174)))
 (let (($x314 (and $x292 $x12)))
 (let (($x111 (=> $x314 $x41)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x156 (= $x225 true)))
 (let (($x41 (= $x156 true)))
 (let (($x55 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1177X)))
 (=> $x119 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1177X) (_ bv0 32)))))
 ))
 (let (($x164 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1176X)))
 (= $x119 false)))
 ))
 (let (($x67 (and $x164 $x55)))
 (let (($x237 (= $x67 true)))
 (let (($x132 (forall ((input.ind-%var1171X (_ BitVec 32)) )(let ((?x216 (bvadd (bvmul input.ind-%var1171X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x216))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv2 32))) ?x128)))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv3 32))) ?x224)))
 (let ((?x100 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1171X)))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1171X)))
 (=> $x200 (= ?x100 ?x52)))))))))
 ))
 (let (($x101 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let (($x311 (and (bvule (_ bv0 32) input.ind-%var1170X) (bvult input.ind-%var1170X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (= $x200 $x311))))
 ))
 (let (($x113 (and $x101 $x132)))
 (let (($x40 (= $x113 true)))
 (let ((?x38 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x199 (bvneg ?x38)))
 (let (($x68 (= ?x199 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x68 true)))
 (let (($x230 (= $x191 true)))
 (let (($x285 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x186 (= $x285 true)))
 (let (($x103 (= $x186 true)))
 (let (($x171 (= $x103 true)))
 (let (($x175 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x218 (= $x175 true)))
 (let (($x196 (= $x218 true)))
 (let (($x220 (= $x196 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x158)))
 (let ((?x317 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x317)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x249 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x245)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x173 $x23)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x170 $x264)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (and $x134 $x203)))
 (let (($x277 (not $x286)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x42 $x214)))
 (let (($x204 (and (not $x248) $x277)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (and $x5 $x110)))
 (let (($x226 (not $x271)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x27 $x56)))
 (let (($x250 (and (not $x96) $x226)))
 (let (($x36 (and (and (and (and (and (and $x250 $x204) $x283) $x102) $x143) $x249) $x236)))
 (let (($x194 (and $x36 $x241)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x260 (or false (or false (and (and true (or $x108 $x222)) (or $x114 $x217))))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x260)))
 (let (($x15 (and $x238 $x194)))
 (let (($x20 (= $x15 true)))
 (let (($x183 (= $x20 true)))
 (let (($x322 (= $x183 true)))
 (let (($x50 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x50 true)))
 (let (($x157 (= $x207 true)))
 (let (($x155 (= $x157 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x69 (= $x125 true)))
 (let (($x177 (= $x69 true)))
 (let (($x318 (= $x177 true)))
 (let ((?x162 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x148 (= (_ bv0 2) ?x162)))
 (let (($x182 (= $x148 true)))
 (let (($x188 (= $x182 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x129)))
 (let (($x178 (= ?x181 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x178 true)))
 (let (($x30 (= $x91 true)))
 (let (($x166 (= ?x181 input.dst.llvm-%n)))
 (let (($x48 (= $x166 true)))
 (let (($x106 (= $x48 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x31 (bvsub ?x86 ?x63)))
 (let (($x33 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x31) (bvult ?x86 ?x31))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x147 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x13)))
 (let ((?x146 ((_ extract 63 32) ?x17)))
 (let (($x187 (= ?x146 ?x147)))
 (let (($x185 (and $x187 $x33)))
 (let (($x107 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x150 (and $x107 $x185)))
 (let (($x58 (= true $x150)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (=> $x25 $x58)))
 (let (($x161 (= $x97 true)))
 (let (($x135 (= $x161 true)))
 (let (($x98 (= $x135 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x75 true)))
 (let (($x138 (= $x179 true)))
 (let (($x53 (= $x138 true)))
 (let (($x131 (= $x25 true)))
 (let (($x16 (= $x131 true)))
 (let (($x149 (= $x16 true)))
 (let (($x223 (and $x149 $x53)))
 (let (($x28 (and $x223 $x98)))
 (let (($x74 (and $x28 $x106)))
 (let (($x70 (and $x74 $x30)))
 (let (($x289 (and $x70 $x188)))
 (let (($x159 (and $x289 $x318)))
 (let (($x51 (and $x159 $x155)))
 (let (($x268 (and $x51 $x322)))
 (let (($x261 (and $x268 $x220)))
 (let (($x151 (and $x261 $x171)))
 (let (($x90 (and $x151 $x230)))
 (let (($x94 (and $x90 $x40)))
 (let (($x172 (and $x94 $x237)))
 (let (($x263 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x242 (and (not $x263) $x172)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x95 $x242)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x104 $x233)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x12 (and $x84 $x152)))
 (let (($x22 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd ?x86 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x257 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x174 (or false (or false (and (and true (or $x252 $x257)) (or $x77 $x22))))))
 (let (($x57 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x174)))
 (let (($x292 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x174)))
 (let (($x314 (and $x292 $x12)))
 (let (($x111 (=> $x314 $x41)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 185 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x184 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x219 (bvsge ?x184 (_ bv0 32))))
 (let (($x234 (= $x219 true)))
 (let (($x192 (= $x234 true)))
 (let (($x291 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let (($x274 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1189X)))
 (=> $x274 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1189X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x274 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1188X)))
 (= $x274 false)))
 ))
 (let (($x279 (and $x193 $x291)))
 (let (($x87 (= $x279 true)))
 (let (($x254 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var1183X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x172))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv2 32))) ?x12)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv3 32))) ?x225)))
 (let ((?x82 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1183X)))
 (let (($x311 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1183X)))
 (=> $x311 (= ?x82 ?x111)))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var1182X) (bvult input.ind-%var1182X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x311 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1182X)))
 (= $x311 $x282))))
 ))
 (let (($x141 (and $x62 $x254)))
 (let (($x73 (= $x141 true)))
 (let ((?x199 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x199)))
 (let (($x191 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x191 true)))
 (let (($x90 (= $x230 true)))
 (let (($x186 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x103 (= $x186 true)))
 (let (($x171 (= $x103 true)))
 (let (($x151 (= $x171 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x196 (= $x218 true)))
 (let (($x220 (= $x196 true)))
 (let (($x261 (= $x220 true)))
 (let ((?x249 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x249)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x122)))
 (let ((?x264 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x264)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x245 (and $x297 $x173)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x102 $x245)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (and $x134 $x203)))
 (let (($x277 (not $x286)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x214 $x248)))
 (let (($x85 (and (not $x206) $x277)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (and $x5 $x110)))
 (let (($x226 (not $x271)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x61 $x37)))
 (let (($x42 (and (not $x105) $x226)))
 (let (($x194 (and (and (and (and (and (and $x42 $x85) $x283) $x256) $x23) $x143) $x47)))
 (let (($x15 (and $x194 $x324)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x222 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x222)))
 (let (($x27 (or false (or false (and (and true (or $x71 $x133)) (or $x8 $x168))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x20 (and $x96 $x15)))
 (let (($x183 (= $x20 true)))
 (let (($x322 (= $x183 true)))
 (let (($x268 (= $x322 true)))
 (let (($x50 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x50 true)))
 (let (($x157 (= $x207 true)))
 (let (($x155 (= $x157 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x69 (= $x125 true)))
 (let (($x177 (= $x69 true)))
 (let (($x318 (= $x177 true)))
 (let ((?x162 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x148 (= (_ bv0 2) ?x162)))
 (let (($x182 (= $x148 true)))
 (let (($x188 (= $x182 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x129)))
 (let (($x178 (= ?x181 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x178 true)))
 (let (($x30 (= $x91 true)))
 (let (($x166 (= ?x181 input.dst.llvm-%n)))
 (let (($x48 (= $x166 true)))
 (let (($x106 (= $x48 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x247 (bvsub ?x86 ?x63)))
 (let (($x33 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x247) (bvult ?x86 ?x247))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x147 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x13)))
 (let ((?x146 ((_ extract 63 32) ?x17)))
 (let (($x187 (= ?x146 ?x147)))
 (let (($x185 (and $x187 $x33)))
 (let (($x107 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x150 (and $x107 $x185)))
 (let (($x58 (= true $x150)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (=> $x25 $x58)))
 (let (($x161 (= $x97 true)))
 (let (($x135 (= $x161 true)))
 (let (($x98 (= $x135 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x75 true)))
 (let (($x138 (= $x179 true)))
 (let (($x53 (= $x138 true)))
 (let (($x131 (= $x25 true)))
 (let (($x16 (= $x131 true)))
 (let (($x149 (= $x16 true)))
 (let (($x223 (and $x149 $x53)))
 (let (($x28 (and $x223 $x98)))
 (let (($x74 (and $x28 $x106)))
 (let (($x70 (and $x74 $x30)))
 (let (($x289 (and $x70 $x188)))
 (let (($x159 (and $x289 $x318)))
 (let (($x51 (and $x159 $x155)))
 (let (($x175 (and $x51 $x268)))
 (let (($x285 (and $x175 $x261)))
 (let (($x38 (and $x285 $x151)))
 (let (($x240 (and $x38 $x90)))
 (let (($x295 (and $x240 $x73)))
 (let (($x137 (and $x295 $x87)))
 (let (($x39 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x321 (and (not $x39) $x137)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (and $x60 $x321)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x9 (and $x18 $x293)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x316 (and $x19 $x9)))
 (let (($x83 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x257 (bvadd ?x86 (_ bv3 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x280 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x257)))
 (let (($x292 (or false (or false (and (and true (or $x315 $x280)) (or $x246 $x83))))))
 (let (($x84 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x292)))
 (let (($x7 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x292)))
 (let (($x76 (and $x7 $x316)))
 (let (($x272 (=> $x76 $x192)))
 (not $x272)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x184 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x219 (bvsge ?x184 (_ bv0 32))))
 (let (($x234 (= $x219 true)))
 (let (($x192 (= $x234 true)))
 (let (($x291 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let (($x274 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1189X)))
 (=> $x274 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1189X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x274 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1188X)))
 (= $x274 false)))
 ))
 (let (($x279 (and $x193 $x291)))
 (let (($x87 (= $x279 true)))
 (let (($x254 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var1183X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x172))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv2 32))) ?x12)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x172 (_ bv3 32))) ?x225)))
 (let ((?x82 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1183X)))
 (let (($x311 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1183X)))
 (=> $x311 (= ?x82 ?x111)))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var1182X) (bvult input.ind-%var1182X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x311 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1182X)))
 (= $x311 $x282))))
 ))
 (let (($x141 (and $x62 $x254)))
 (let (($x73 (= $x141 true)))
 (let ((?x199 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x199)))
 (let (($x191 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x191 true)))
 (let (($x90 (= $x230 true)))
 (let (($x186 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x103 (= $x186 true)))
 (let (($x171 (= $x103 true)))
 (let (($x151 (= $x171 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x196 (= $x218 true)))
 (let (($x220 (= $x196 true)))
 (let (($x261 (= $x220 true)))
 (let ((?x249 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x249)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x122)))
 (let ((?x264 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x264)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x245 (and $x297 $x173)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x102 $x245)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (and $x134 $x203)))
 (let (($x277 (not $x286)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x214 $x248)))
 (let (($x85 (and (not $x206) $x277)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (and $x5 $x110)))
 (let (($x226 (not $x271)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x61 $x37)))
 (let (($x42 (and (not $x105) $x226)))
 (let (($x194 (and (and (and (and (and (and $x42 $x85) $x283) $x256) $x23) $x143) $x47)))
 (let (($x15 (and $x194 $x324)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x222 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x222)))
 (let (($x27 (or false (or false (and (and true (or $x71 $x133)) (or $x8 $x168))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x20 (and $x96 $x15)))
 (let (($x183 (= $x20 true)))
 (let (($x322 (= $x183 true)))
 (let (($x268 (= $x322 true)))
 (let (($x50 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x50 true)))
 (let (($x157 (= $x207 true)))
 (let (($x155 (= $x157 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x69 (= $x125 true)))
 (let (($x177 (= $x69 true)))
 (let (($x318 (= $x177 true)))
 (let ((?x162 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x148 (= (_ bv0 2) ?x162)))
 (let (($x182 (= $x148 true)))
 (let (($x188 (= $x182 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x129)))
 (let (($x178 (= ?x181 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x178 true)))
 (let (($x30 (= $x91 true)))
 (let (($x166 (= ?x181 input.dst.llvm-%n)))
 (let (($x48 (= $x166 true)))
 (let (($x106 (= $x48 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x247 (bvsub ?x86 ?x63)))
 (let (($x33 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x247) (bvult ?x86 ?x247))))
 (let (($x109 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x147 (ite $x109 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x13)))
 (let ((?x146 ((_ extract 63 32) ?x17)))
 (let (($x187 (= ?x146 ?x147)))
 (let (($x185 (and $x187 $x33)))
 (let (($x107 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x150 (and $x107 $x185)))
 (let (($x58 (= true $x150)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (=> $x25 $x58)))
 (let (($x161 (= $x97 true)))
 (let (($x135 (= $x161 true)))
 (let (($x98 (= $x135 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x75 true)))
 (let (($x138 (= $x179 true)))
 (let (($x53 (= $x138 true)))
 (let (($x131 (= $x25 true)))
 (let (($x16 (= $x131 true)))
 (let (($x149 (= $x16 true)))
 (let (($x223 (and $x149 $x53)))
 (let (($x28 (and $x223 $x98)))
 (let (($x74 (and $x28 $x106)))
 (let (($x70 (and $x74 $x30)))
 (let (($x289 (and $x70 $x188)))
 (let (($x159 (and $x289 $x318)))
 (let (($x51 (and $x159 $x155)))
 (let (($x175 (and $x51 $x268)))
 (let (($x285 (and $x175 $x261)))
 (let (($x38 (and $x285 $x151)))
 (let (($x240 (and $x38 $x90)))
 (let (($x295 (and $x240 $x73)))
 (let (($x137 (and $x295 $x87)))
 (let (($x39 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x321 (and (not $x39) $x137)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (and $x60 $x321)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x9 (and $x18 $x293)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x316 (and $x19 $x9)))
 (let (($x83 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x257 (bvadd ?x86 (_ bv3 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x280 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x257)))
 (let (($x292 (or false (or false (and (and true (or $x315 $x280)) (or $x246 $x83))))))
 (let (($x84 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x292)))
 (let (($x7 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x292)))
 (let (($x76 (and $x7 $x316)))
 (let (($x272 (=> $x76 $x192)))
 (not $x272)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 185 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x67 (bvule ?x120 (_ bv4294967294 32))))
 (let (($x165 (= $x67 true)))
 (let (($x6 (= $x165 true)))
 (let (($x164 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1201X)))
 (=> $x294 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1201X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1200X)))
 (= $x294 false)))
 ))
 (let (($x239 (and $x52 $x164)))
 (let (($x169 (= $x239 true)))
 (let (($x229 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x137 (bvadd (bvmul input.ind-%var1195X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x316 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x137))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv2 32))) ?x316)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv3 32))) ?x219)))
 (let ((?x242 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1195X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x282 (= ?x242 ?x272)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x41 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x282 $x41))))
 ))
 (let (($x308 (and $x314 $x229)))
 (let (($x128 (= $x308 true)))
 (let ((?x68 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x68)))
 (let (($x230 (= ?x191 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x230 true)))
 (let (($x240 (= $x90 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x103 true)))
 (let (($x151 (= $x171 true)))
 (let (($x38 (= $x151 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x196 true)))
 (let (($x261 (= $x220 true)))
 (let (($x285 (= $x261 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x241 (bvsub ?x86 ?x63)))
 (let (($x249 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x241) (bvult ?x86 ?x241))))
 (let (($x158 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x264 (ite $x158 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x173 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x173)))
 (let ((?x23 ((_ extract 63 32) ?x245)))
 (let (($x143 (= ?x23 ?x264)))
 (let (($x324 (and $x143 $x249)))
 (let (($x297 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x15 (and $x297 $x324)))
 (let (($x20 (= true $x15)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (=> $x25 $x20)))
 (let (($x322 (= $x183 true)))
 (let (($x268 (= $x322 true)))
 (let (($x175 (= $x268 true)))
 (let (($x313 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x283 (= $x313 true)))
 (let (($x236 (= $x283 true)))
 (let (($x43 (= $x236 true)))
 (let (($x286 (= $x25 true)))
 (let (($x277 (= $x286 true)))
 (let (($x85 (= $x277 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x37)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x96)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (and $x217 $x168)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x114 $x235)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x207 $x157)))
 (let (($x51 (not $x155)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x318 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x318 $x159)))
 (let (($x108 (and (not $x50) $x51)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x182 $x188)))
 (let (($x125 (not $x289)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x97 $x161)))
 (let (($x177 (and (not $x148) $x125)))
 (let (($x42 (and (and (and (and (and (and $x177 $x108) $x222) $x133) $x260) $x27) $x61)))
 (let (($x214 (and $x42 $x105)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x70 (or false (or false (and (and true (or $x129 $x181)) (or $x106 $x74))))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x248 (and $x162 $x214)))
 (let (($x206 (= $x248 true)))
 (let (($x204 (= $x206 true)))
 (let (($x134 (= $x204 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x44 (= $x144 true)))
 (let (($x33 (= $x44 true)))
 (let (($x185 (= $x33 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x147 (= (_ bv0 2) ?x88)))
 (let (($x187 (= $x147 true)))
 (let (($x31 (= $x187 true)))
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x138)))
 (let (($x29 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x29 true)))
 (let (($x17 (= $x13 true)))
 (let (($x223 (= ?x53 input.dst.llvm-%n)))
 (let (($x115 (= $x223 true)))
 (let (($x116 (= $x115 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x16 true)))
 (let (($x66 (= $x149 true)))
 (let (($x75 (= $x66 true)))
 (let (($x107 (and $x75 $x116)))
 (let (($x146 (and $x107 $x17)))
 (let (($x247 (and $x146 $x31)))
 (let (($x150 (and $x247 $x185)))
 (let (($x203 (and $x150 $x134)))
 (let (($x317 (and $x203 $x85)))
 (let (($x256 (and $x317 $x43)))
 (let (($x218 (and $x256 $x175)))
 (let (($x186 (and $x218 $x285)))
 (let (($x199 (and $x186 $x38)))
 (let (($x312 (and $x199 $x240)))
 (let (($x64 (and $x312 $x128)))
 (let (($x121 (and $x64 $x169)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x227 (and (not $x80) $x121)))
 (let (($x263 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x263 $x227)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x273 $x55)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x78 (and $x93 $x221)))
 (let (($x174 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x280 (bvadd ?x86 (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x280)))
 (let (($x77 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x280)))
 (let (($x7 (or false (or false (and (and true (or $x72 $x77)) (or $x49 $x174))))))
 (let (($x19 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x7)))
 (let (($x265 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x7)))
 (let (($x262 (and $x265 $x78)))
 (let (($x123 (=> $x262 $x6)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x67 (bvule ?x120 (_ bv4294967294 32))))
 (let (($x165 (= $x67 true)))
 (let (($x6 (= $x165 true)))
 (let (($x164 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1201X)))
 (=> $x294 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1201X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1200X)))
 (= $x294 false)))
 ))
 (let (($x239 (and $x52 $x164)))
 (let (($x169 (= $x239 true)))
 (let (($x229 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x137 (bvadd (bvmul input.ind-%var1195X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x316 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x137))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv2 32))) ?x316)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv3 32))) ?x219)))
 (let ((?x242 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1195X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x282 (= ?x242 ?x272)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x41 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x282 $x41))))
 ))
 (let (($x308 (and $x314 $x229)))
 (let (($x128 (= $x308 true)))
 (let ((?x68 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x68)))
 (let (($x230 (= ?x191 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x230 true)))
 (let (($x240 (= $x90 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x103 true)))
 (let (($x151 (= $x171 true)))
 (let (($x38 (= $x151 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x196 true)))
 (let (($x261 (= $x220 true)))
 (let (($x285 (= $x261 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x241 (bvsub ?x86 ?x63)))
 (let (($x249 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x241) (bvult ?x86 ?x241))))
 (let (($x158 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x264 (ite $x158 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x173 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x173)))
 (let ((?x23 ((_ extract 63 32) ?x245)))
 (let (($x143 (= ?x23 ?x264)))
 (let (($x324 (and $x143 $x249)))
 (let (($x297 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x15 (and $x297 $x324)))
 (let (($x20 (= true $x15)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (=> $x25 $x20)))
 (let (($x322 (= $x183 true)))
 (let (($x268 (= $x322 true)))
 (let (($x175 (= $x268 true)))
 (let (($x313 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x283 (= $x313 true)))
 (let (($x236 (= $x283 true)))
 (let (($x43 (= $x236 true)))
 (let (($x286 (= $x25 true)))
 (let (($x277 (= $x286 true)))
 (let (($x85 (= $x277 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x37)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x96)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (and $x217 $x168)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x114 $x235)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x207 $x157)))
 (let (($x51 (not $x155)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x318 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x318 $x159)))
 (let (($x108 (and (not $x50) $x51)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x182 $x188)))
 (let (($x125 (not $x289)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x97 $x161)))
 (let (($x177 (and (not $x148) $x125)))
 (let (($x42 (and (and (and (and (and (and $x177 $x108) $x222) $x133) $x260) $x27) $x61)))
 (let (($x214 (and $x42 $x105)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x70 (or false (or false (and (and true (or $x129 $x181)) (or $x106 $x74))))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x248 (and $x162 $x214)))
 (let (($x206 (= $x248 true)))
 (let (($x204 (= $x206 true)))
 (let (($x134 (= $x204 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x44 (= $x144 true)))
 (let (($x33 (= $x44 true)))
 (let (($x185 (= $x33 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x147 (= (_ bv0 2) ?x88)))
 (let (($x187 (= $x147 true)))
 (let (($x31 (= $x187 true)))
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x138)))
 (let (($x29 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x29 true)))
 (let (($x17 (= $x13 true)))
 (let (($x223 (= ?x53 input.dst.llvm-%n)))
 (let (($x115 (= $x223 true)))
 (let (($x116 (= $x115 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x16 true)))
 (let (($x66 (= $x149 true)))
 (let (($x75 (= $x66 true)))
 (let (($x107 (and $x75 $x116)))
 (let (($x146 (and $x107 $x17)))
 (let (($x247 (and $x146 $x31)))
 (let (($x150 (and $x247 $x185)))
 (let (($x203 (and $x150 $x134)))
 (let (($x317 (and $x203 $x85)))
 (let (($x256 (and $x317 $x43)))
 (let (($x218 (and $x256 $x175)))
 (let (($x186 (and $x218 $x285)))
 (let (($x199 (and $x186 $x38)))
 (let (($x312 (and $x199 $x240)))
 (let (($x64 (and $x312 $x128)))
 (let (($x121 (and $x64 $x169)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x227 (and (not $x80) $x121)))
 (let (($x263 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x263 $x227)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x273 $x55)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x78 (and $x93 $x221)))
 (let (($x174 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x280 (bvadd ?x86 (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x280)))
 (let (($x77 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x280)))
 (let (($x7 (or false (or false (and (and true (or $x72 $x77)) (or $x49 $x174))))))
 (let (($x19 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x7)))
 (let (($x265 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x7)))
 (let (($x262 (and $x265 $x78)))
 (let (($x123 (=> $x262 $x6)))
 (not $x123)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 185 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x112 (forall ((input.ind-%var1221X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var1221X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x77 (bvadd ?x86 (_ bv3 32))))
 (let ((?x195 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x86 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x212 (store ?x195 (bvadd ?x86 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x205 (store ?x212 (bvadd ?x86 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x34 (store ?x205 ?x77 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x176 (concat (select ?x34 (bvadd ?x121 (_ bv2 32))) (concat (select ?x34 (bvadd ?x121 (_ bv1 32))) (select ?x34 ?x121)))))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1221X)))
 (let (($x208 (= input.ind-%var1221X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x320 (= (ite $x208 input.spec-%var-i-0.L3%6%bbentry ?x321) (concat (select ?x34 (bvadd ?x121 (_ bv3 32))) ?x176))))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1221X)))
 (let (($x54 (or $x41 $x208)))
 (=> $x54 $x320))))))))))))))))
 ))
 (let (($x258 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x234 (bvule (_ bv0 32) input.ind-%var1220X)))
 (let (($x270 (and $x234 (bvult input.ind-%var1220X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x208 (= input.ind-%var1220X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1220X)))
 (let (($x54 (or $x41 $x208)))
 (= $x54 $x270)))))))
 ))
 (let (($x201 (and $x258 $x112)))
 (let (($x233 (= true true)))
 (let (($x145 (and $x233 $x201)))
 (let (($x290 (= $x145 true)))
 (let (($x193 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x152 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1213X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x152 false)))
 ))
 (let (($x281 (and $x111 $x193)))
 (let (($x325 (= $x281 true)))
 (let (($x58 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var1207X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x121))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv2 32))) ?x78)))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv3 32))) ?x67)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1207X)))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1207X)))
 (=> $x41 (= ?x321 ?x123)))))))))
 ))
 (let (($x76 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x234 (bvule (_ bv0 32) input.ind-%var1206X)))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1206X)))
 (= $x41 (and $x234 (bvult input.ind-%var1206X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x231 (and $x76 $x58)))
 (let (($x12 (= $x231 true)))
 (let ((?x191 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x191)))
 (let (($x90 (= ?x230 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x90 true)))
 (let (($x312 (= $x240 true)))
 (let ((?x171 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x151 (= (_ bv0 2) ?x171)))
 (let (($x38 (= $x151 true)))
 (let (($x199 (= $x38 true)))
 (let (($x196 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x220 (= $x196 true)))
 (let (($x261 (= $x220 true)))
 (let (($x285 (= $x261 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x322 (= $x183 true)))
 (let (($x268 (= $x322 true)))
 (let (($x175 (= $x268 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x249 (= $x194 true)))
 (let (($x324 (= $x249 true)))
 (let (($x15 (= $x324 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x36 (bvsub ?x86 ?x63)))
 (let (($x173 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x36) (bvult ?x86 ?x36))))
 (let (($x236 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x43 (ite $x236 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x317 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x313 (bvmul (_ bv4 64) ?x317)))
 (let ((?x283 ((_ extract 63 32) ?x313)))
 (let (($x256 (= ?x283 ?x43)))
 (let (($x245 (and $x256 $x173)))
 (let (($x277 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x23 (and $x277 $x245)))
 (let (($x158 (= true $x23)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (=> $x25 $x158)))
 (let (($x143 (= $x264 true)))
 (let (($x122 (= $x143 true)))
 (let (($x241 (= $x122 true)))
 (let (($x214 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x214 true)))
 (let (($x206 (= $x248 true)))
 (let (($x204 (= $x206 true)))
 (let (($x96 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x96 true)))
 (let (($x42 (= $x61 true)))
 (let (($x37 (= $x42 true)))
 (let (($x260 (= $x25 true)))
 (let (($x271 (= $x260 true)))
 (let (($x238 (= $x271 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x51)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x157)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x318 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x177)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x125 $x318)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x289 $x159)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x91 $x30)))
 (let (($x162 (not $x70)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x106 $x74)))
 (let (($x161 (and (not $x178) $x162)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x127 $x28)))
 (let (($x181 (not $x129)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x107 $x29)))
 (let (($x48 (and (not $x98) $x181)))
 (let (($x133 (and (and (and (and (and (and $x48 $x161) $x69) $x188) $x50) $x207) $x155)))
 (let (($x110 (and $x133 $x108)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x146 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x146)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x146)))
 (let (($x185 (or false (or false (and (and true (or $x109 $x88)) (or $x31 $x247))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x185)))
 (let (($x114 (and $x135 $x110)))
 (let (($x217 (= $x114 true)))
 (let (($x8 (= $x217 true)))
 (let (($x168 (= $x8 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x16)))
 (let (($x138 (= ?x149 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x138 true)))
 (let (($x223 (= $x53 true)))
 (let (($x66 (= ?x149 input.dst.llvm-%n)))
 (let (($x75 (= $x66 true)))
 (let (($x179 (= $x75 true)))
 (let (($x115 (and $x179 $x223)))
 (let (($x235 (and $x115 $x168)))
 (let (($x27 (and $x235 $x238)))
 (let (($x105 (and $x27 $x37)))
 (let (($x134 (and $x105 $x204)))
 (let (($x47 (and $x134 $x241)))
 (let (($x20 (and $x47 $x15)))
 (let (($x218 (and $x20 $x175)))
 (let (($x186 (and $x218 $x285)))
 (let (($x68 (and $x186 $x199)))
 (let (($x216 (and $x68 $x312)))
 (let (($x200 (and $x216 $x12)))
 (let (($x275 (and $x200 $x325)))
 (let (($x288 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and (not $x288) $x275)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and $x39 $x237)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x259 (and $x95 $x291)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x202 (and $x104 $x259)))
 (let (($x292 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd ?x86 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x246 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x265 (or false (or false (and (and true (or $x198 $x246)) (or $x57 $x292))))))
 (let (($x93 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x265)))
 (let (($x255 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x265)))
 (let (($x101 (and $x255 $x202)))
 (let (($x189 (=> $x101 $x290)))
 (not $x189)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x112 (forall ((input.ind-%var1221X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var1221X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x77 (bvadd ?x86 (_ bv3 32))))
 (let ((?x195 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x86 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x212 (store ?x195 (bvadd ?x86 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x205 (store ?x212 (bvadd ?x86 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x34 (store ?x205 ?x77 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x176 (concat (select ?x34 (bvadd ?x121 (_ bv2 32))) (concat (select ?x34 (bvadd ?x121 (_ bv1 32))) (select ?x34 ?x121)))))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1221X)))
 (let (($x208 (= input.ind-%var1221X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x320 (= (ite $x208 input.spec-%var-i-0.L3%6%bbentry ?x321) (concat (select ?x34 (bvadd ?x121 (_ bv3 32))) ?x176))))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1221X)))
 (let (($x54 (or $x41 $x208)))
 (=> $x54 $x320))))))))))))))))
 ))
 (let (($x258 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x234 (bvule (_ bv0 32) input.ind-%var1220X)))
 (let (($x270 (and $x234 (bvult input.ind-%var1220X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x208 (= input.ind-%var1220X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1220X)))
 (let (($x54 (or $x41 $x208)))
 (= $x54 $x270)))))))
 ))
 (let (($x201 (and $x258 $x112)))
 (let (($x233 (= true true)))
 (let (($x145 (and $x233 $x201)))
 (let (($x290 (= $x145 true)))
 (let (($x193 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x152 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1213X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x152 false)))
 ))
 (let (($x281 (and $x111 $x193)))
 (let (($x325 (= $x281 true)))
 (let (($x58 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x121 (bvadd (bvmul input.ind-%var1207X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x121))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv2 32))) ?x78)))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv3 32))) ?x67)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1207X)))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1207X)))
 (=> $x41 (= ?x321 ?x123)))))))))
 ))
 (let (($x76 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x234 (bvule (_ bv0 32) input.ind-%var1206X)))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1206X)))
 (= $x41 (and $x234 (bvult input.ind-%var1206X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x231 (and $x76 $x58)))
 (let (($x12 (= $x231 true)))
 (let ((?x191 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x191)))
 (let (($x90 (= ?x230 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x90 true)))
 (let (($x312 (= $x240 true)))
 (let ((?x171 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x151 (= (_ bv0 2) ?x171)))
 (let (($x38 (= $x151 true)))
 (let (($x199 (= $x38 true)))
 (let (($x196 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x220 (= $x196 true)))
 (let (($x261 (= $x220 true)))
 (let (($x285 (= $x261 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x322 (= $x183 true)))
 (let (($x268 (= $x322 true)))
 (let (($x175 (= $x268 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x249 (= $x194 true)))
 (let (($x324 (= $x249 true)))
 (let (($x15 (= $x324 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x36 (bvsub ?x86 ?x63)))
 (let (($x173 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x36) (bvult ?x86 ?x36))))
 (let (($x236 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x43 (ite $x236 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x317 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x313 (bvmul (_ bv4 64) ?x317)))
 (let ((?x283 ((_ extract 63 32) ?x313)))
 (let (($x256 (= ?x283 ?x43)))
 (let (($x245 (and $x256 $x173)))
 (let (($x277 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x23 (and $x277 $x245)))
 (let (($x158 (= true $x23)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (=> $x25 $x158)))
 (let (($x143 (= $x264 true)))
 (let (($x122 (= $x143 true)))
 (let (($x241 (= $x122 true)))
 (let (($x214 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x214 true)))
 (let (($x206 (= $x248 true)))
 (let (($x204 (= $x206 true)))
 (let (($x96 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x96 true)))
 (let (($x42 (= $x61 true)))
 (let (($x37 (= $x42 true)))
 (let (($x260 (= $x25 true)))
 (let (($x271 (= $x260 true)))
 (let (($x238 (= $x271 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x51)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x157)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x318 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x177)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x125 $x318)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x289 $x159)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x91 $x30)))
 (let (($x162 (not $x70)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x106 $x74)))
 (let (($x161 (and (not $x178) $x162)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x127 $x28)))
 (let (($x181 (not $x129)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x107 $x29)))
 (let (($x48 (and (not $x98) $x181)))
 (let (($x133 (and (and (and (and (and (and $x48 $x161) $x69) $x188) $x50) $x207) $x155)))
 (let (($x110 (and $x133 $x108)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x146 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x146)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x146)))
 (let (($x185 (or false (or false (and (and true (or $x109 $x88)) (or $x31 $x247))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x185)))
 (let (($x114 (and $x135 $x110)))
 (let (($x217 (= $x114 true)))
 (let (($x8 (= $x217 true)))
 (let (($x168 (= $x8 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x16)))
 (let (($x138 (= ?x149 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x138 true)))
 (let (($x223 (= $x53 true)))
 (let (($x66 (= ?x149 input.dst.llvm-%n)))
 (let (($x75 (= $x66 true)))
 (let (($x179 (= $x75 true)))
 (let (($x115 (and $x179 $x223)))
 (let (($x235 (and $x115 $x168)))
 (let (($x27 (and $x235 $x238)))
 (let (($x105 (and $x27 $x37)))
 (let (($x134 (and $x105 $x204)))
 (let (($x47 (and $x134 $x241)))
 (let (($x20 (and $x47 $x15)))
 (let (($x218 (and $x20 $x175)))
 (let (($x186 (and $x218 $x285)))
 (let (($x68 (and $x186 $x199)))
 (let (($x216 (and $x68 $x312)))
 (let (($x200 (and $x216 $x12)))
 (let (($x275 (and $x200 $x325)))
 (let (($x288 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and (not $x288) $x275)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and $x39 $x237)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x259 (and $x95 $x291)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x202 (and $x104 $x259)))
 (let (($x292 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd ?x86 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x246 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x265 (or false (or false (and (and true (or $x198 $x246)) (or $x57 $x292))))))
 (let (($x93 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x265)))
 (let (($x255 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x265)))
 (let (($x101 (and $x255 $x202)))
 (let (($x189 (=> $x101 $x290)))
 (not $x189)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (bvsge ?x94 (_ bv0 32))))
 (let (($x311 (= $x316 true)))
 (let (($x163 (= $x311 true)))
 (let (($x320 (forall ((input.ind-%var1233X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1233X)))
 (=> $x228 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1233X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var1232X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1232X)))
 (= $x228 false)))
 ))
 (let (($x197 (and $x205 $x320)))
 (let (($x112 (= $x197 true)))
 (let (($x258 (forall ((input.ind-%var1227X (_ BitVec 32)) )(let ((?x275 (bvadd (bvmul input.ind-%var1227X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x275))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv2 32))) ?x202)))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv3 32))) ?x208)))
 (let ((?x227 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1227X)))
 (let (($x192 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1227X)))
 (=> $x192 (= ?x227 ?x99)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x6 (and (bvule (_ bv0 32) input.ind-%var1226X) (bvult input.ind-%var1226X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x192 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1226X)))
 (= $x192 $x6))))
 ))
 (let (($x89 (and $x262 $x258)))
 (let (($x136 (= $x89 true)))
 (let ((?x230 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x230)))
 (let (($x240 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x312 (= $x240 true)))
 (let (($x216 (= $x312 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (= $x151 true)))
 (let (($x199 (= $x38 true)))
 (let (($x68 (= $x199 true)))
 (let (($x261 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x285 (= $x261 true)))
 (let (($x186 (= $x285 true)))
 (let (($x103 (= $x186 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x47 (bvsub ?x86 ?x63)))
 (let (($x15 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x47) (bvult ?x86 ?x47))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x122 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x23 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvmul (_ bv4 64) ?x23)))
 (let ((?x264 ((_ extract 63 32) ?x158)))
 (let (($x241 (= ?x264 ?x122)))
 (let (($x20 (and $x241 $x15)))
 (let (($x173 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x183 (and $x173 $x20)))
 (let (($x322 (= true $x183)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (=> $x25 $x322)))
 (let (($x175 (= $x268 true)))
 (let (($x218 (= $x175 true)))
 (let (($x196 (= $x218 true)))
 (let (($x236 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x43 (= $x236 true)))
 (let (($x256 (= $x43 true)))
 (let (($x102 (= $x256 true)))
 (let (($x85 (= $x25 true)))
 (let (($x317 (= $x85 true)))
 (let (($x313 (= $x317 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x226)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x238)))
 (let ((?x260 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x271 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x260)))
 (let ((?x217 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x217)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x114 $x8)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (and $x110 $x168)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x50 $x5)))
 (let (($x207 (not $x130)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x177 $x318)))
 (let (($x157 (and (not $x159) $x207)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x56 $x182)))
 (let (($x222 (not $x188)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x166 $x127)))
 (let (($x125 (and (not $x69) $x222)))
 (let (($x248 (and (and (and (and (and (and $x125 $x157) $x133) $x108) $x235) $x271) $x27)))
 (let (($x206 (and $x248 $x96)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x181)))
 (let (($x161 (or false (or false (and (and true (or $x48 $x106)) (or $x97 $x91))))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x161)))
 (let (($x204 (and $x148 $x206)))
 (let (($x134 (= $x204 true)))
 (let (($x203 (= $x134 true)))
 (let (($x286 (= $x203 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x33 true)))
 (let (($x135 (= $x185 true)))
 (let (($x107 (= $x135 true)))
 (let ((?x187 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x31 (= (_ bv0 2) ?x187)))
 (let (($x247 (= $x31 true)))
 (let (($x144 (= $x247 true)))
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x138)))
 (let (($x150 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (= $x150 true)))
 (let (($x109 (= $x146 true)))
 (let (($x223 (= ?x53 input.dst.llvm-%n)))
 (let (($x115 (= $x223 true)))
 (let (($x13 (= $x115 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x16 true)))
 (let (($x66 (= $x149 true)))
 (let (($x75 (= $x66 true)))
 (let (($x17 (and $x75 $x13)))
 (let (($x88 (and $x17 $x109)))
 (let (($x44 (and $x88 $x144)))
 (let (($x29 (and $x44 $x107)))
 (let (($x277 (and $x29 $x286)))
 (let (($x283 (and $x277 $x313)))
 (let (($x36 (and $x283 $x102)))
 (let (($x220 (and $x36 $x196)))
 (let (($x171 (and $x220 $x103)))
 (let (($x191 (and $x171 $x68)))
 (let (($x172 (and $x191 $x216)))
 (let (($x35 (and $x172 $x136)))
 (let (($x201 (and $x35 $x112)))
 (let (($x224 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and (not $x224) $x201)))
 (let (($x80 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (and $x80 $x290)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x296 (and $x60 $x189)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x18 $x296)))
 (let (($x7 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x246 (bvadd ?x86 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x246)))
 (let (($x49 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x246)))
 (let (($x255 (or false (or false (and (and true (or $x22 $x49)) (or $x84 $x7))))))
 (let (($x104 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x255)))
 (let (($x257 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x255)))
 (let (($x116 (and $x257 $x11)))
 (let (($x124 (=> $x116 $x163)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (bvsge ?x94 (_ bv0 32))))
 (let (($x311 (= $x316 true)))
 (let (($x163 (= $x311 true)))
 (let (($x320 (forall ((input.ind-%var1233X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1233X)))
 (=> $x228 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1233X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var1232X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1232X)))
 (= $x228 false)))
 ))
 (let (($x197 (and $x205 $x320)))
 (let (($x112 (= $x197 true)))
 (let (($x258 (forall ((input.ind-%var1227X (_ BitVec 32)) )(let ((?x275 (bvadd (bvmul input.ind-%var1227X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x275))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv2 32))) ?x202)))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv3 32))) ?x208)))
 (let ((?x227 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1227X)))
 (let (($x192 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1227X)))
 (=> $x192 (= ?x227 ?x99)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x6 (and (bvule (_ bv0 32) input.ind-%var1226X) (bvult input.ind-%var1226X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x192 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1226X)))
 (= $x192 $x6))))
 ))
 (let (($x89 (and $x262 $x258)))
 (let (($x136 (= $x89 true)))
 (let ((?x230 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x230)))
 (let (($x240 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x312 (= $x240 true)))
 (let (($x216 (= $x312 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (= $x151 true)))
 (let (($x199 (= $x38 true)))
 (let (($x68 (= $x199 true)))
 (let (($x261 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x285 (= $x261 true)))
 (let (($x186 (= $x285 true)))
 (let (($x103 (= $x186 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x47 (bvsub ?x86 ?x63)))
 (let (($x15 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x47) (bvult ?x86 ?x47))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x122 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x23 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvmul (_ bv4 64) ?x23)))
 (let ((?x264 ((_ extract 63 32) ?x158)))
 (let (($x241 (= ?x264 ?x122)))
 (let (($x20 (and $x241 $x15)))
 (let (($x173 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x183 (and $x173 $x20)))
 (let (($x322 (= true $x183)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (=> $x25 $x322)))
 (let (($x175 (= $x268 true)))
 (let (($x218 (= $x175 true)))
 (let (($x196 (= $x218 true)))
 (let (($x236 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x43 (= $x236 true)))
 (let (($x256 (= $x43 true)))
 (let (($x102 (= $x256 true)))
 (let (($x85 (= $x25 true)))
 (let (($x317 (= $x85 true)))
 (let (($x313 (= $x317 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x226)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x238)))
 (let ((?x260 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x271 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x260)))
 (let ((?x217 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x217)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x114 $x8)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (and $x110 $x168)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x50 $x5)))
 (let (($x207 (not $x130)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x177 $x318)))
 (let (($x157 (and (not $x159) $x207)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x56 $x182)))
 (let (($x222 (not $x188)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x166 $x127)))
 (let (($x125 (and (not $x69) $x222)))
 (let (($x248 (and (and (and (and (and (and $x125 $x157) $x133) $x108) $x235) $x271) $x27)))
 (let (($x206 (and $x248 $x96)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x181)))
 (let (($x161 (or false (or false (and (and true (or $x48 $x106)) (or $x97 $x91))))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x161)))
 (let (($x204 (and $x148 $x206)))
 (let (($x134 (= $x204 true)))
 (let (($x203 (= $x134 true)))
 (let (($x286 (= $x203 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x33 true)))
 (let (($x135 (= $x185 true)))
 (let (($x107 (= $x135 true)))
 (let ((?x187 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x31 (= (_ bv0 2) ?x187)))
 (let (($x247 (= $x31 true)))
 (let (($x144 (= $x247 true)))
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x138)))
 (let (($x150 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (= $x150 true)))
 (let (($x109 (= $x146 true)))
 (let (($x223 (= ?x53 input.dst.llvm-%n)))
 (let (($x115 (= $x223 true)))
 (let (($x13 (= $x115 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x16 true)))
 (let (($x66 (= $x149 true)))
 (let (($x75 (= $x66 true)))
 (let (($x17 (and $x75 $x13)))
 (let (($x88 (and $x17 $x109)))
 (let (($x44 (and $x88 $x144)))
 (let (($x29 (and $x44 $x107)))
 (let (($x277 (and $x29 $x286)))
 (let (($x283 (and $x277 $x313)))
 (let (($x36 (and $x283 $x102)))
 (let (($x220 (and $x36 $x196)))
 (let (($x171 (and $x220 $x103)))
 (let (($x191 (and $x171 $x68)))
 (let (($x172 (and $x191 $x216)))
 (let (($x35 (and $x172 $x136)))
 (let (($x201 (and $x35 $x112)))
 (let (($x224 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and (not $x224) $x201)))
 (let (($x80 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (and $x80 $x290)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x296 (and $x60 $x189)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x18 $x296)))
 (let (($x7 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x246 (bvadd ?x86 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x246)))
 (let (($x49 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x246)))
 (let (($x255 (or false (or false (and (and true (or $x22 $x49)) (or $x84 $x7))))))
 (let (($x104 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x255)))
 (let (($x257 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x255)))
 (let (($x116 (and $x257 $x11)))
 (let (($x124 (=> $x116 $x163)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 185 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (bvule ?x55 input.dst.llvm-%n)))
 (let (($x209 (= $x281 true)))
 (let (($x34 (= $x209 true)))
 (let (($x111 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x221 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1245X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x221 false)))
 ))
 (let (($x73 (and $x123 $x111)))
 (let (($x213 (= $x73 true)))
 (let (($x98 (forall ((input.ind-%var1239X (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul input.ind-%var1239X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x201))))
 (let ((?x316 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv2 32))) ?x11)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv3 32))) ?x316)))
 (let ((?x237 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1239X)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1239X)))
 (=> $x6 (= ?x237 ?x124)))))))))
 ))
 (let (($x101 (forall ((input.ind-%var1238X (_ BitVec 32)) )(let (($x32 (and (bvule (_ bv0 32) input.ind-%var1238X) (bvult input.ind-%var1238X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1238X)))
 (= $x6 $x32))))
 ))
 (let (($x295 (and $x101 $x98)))
 (let (($x78 (= $x295 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x240 (bvneg ?x90)))
 (let (($x312 (= ?x240 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x312 true)))
 (let (($x172 (= $x216 true)))
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x138)))
 (let (($x199 (= ?x53 input.dst.llvm-%n)))
 (let (($x68 (= $x199 true)))
 (let (($x191 (= $x68 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x186 true)))
 (let (($x171 (= $x103 true)))
 (let (($x151 (= $x171 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (= $x218 true)))
 (let (($x220 (= $x196 true)))
 (let (($x261 (= $x220 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x143 (bvsub ?x86 ?x63)))
 (let (($x47 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x143) (bvult ?x86 ?x143))))
 (let (($x23 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x158 (ite $x23 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x170 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x170)))
 (let ((?x245 ((_ extract 63 32) ?x173)))
 (let (($x264 (= ?x245 ?x158)))
 (let (($x249 (and $x264 $x47)))
 (let (($x36 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x324 (and $x36 $x249)))
 (let (($x15 (= true $x324)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (=> $x25 $x15)))
 (let (($x183 (= $x20 true)))
 (let (($x322 (= $x183 true)))
 (let (($x268 (= $x322 true)))
 (let (($x317 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x313 (= $x317 true)))
 (let (($x283 (= $x313 true)))
 (let (($x236 (= $x283 true)))
 (let (($x203 (= $x25 true)))
 (let (($x286 (= $x203 true)))
 (let (($x277 (= $x286 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x168)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x217)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x133 $x51)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x155 $x108)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x177 $x318)))
 (let (($x71 (not $x159)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x188 $x222)))
 (let (($x5 (and (not $x125) $x71)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x166 $x127)))
 (let (($x289 (not $x69)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x135 $x107)))
 (let (($x182 (and (not $x148) $x289)))
 (let (($x27 (and (and (and (and (and (and $x182 $x5) $x207) $x61) $x37) $x114) $x8)))
 (let (($x248 (and $x27 $x235)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x70 (or false (or false (and (and true (or $x250 $x181)) (or $x74 $x178))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x226 (and $x161 $x248)))
 (let (($x96 (= $x226 true)))
 (let (($x206 (= $x96 true)))
 (let (($x204 (= $x206 true)))
 (let (($x31 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x247 (= $x31 true)))
 (let (($x144 (= $x247 true)))
 (let (($x44 (= $x144 true)))
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x109 (= (_ bv0 2) ?x146)))
 (let (($x88 (= $x109 true)))
 (let (($x147 (= $x88 true)))
 (let (($x223 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (= $x223 true)))
 (let (($x13 (= $x115 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x16 true)))
 (let (($x66 (= $x149 true)))
 (let (($x75 (= $x66 true)))
 (let (($x17 (and $x75 $x13)))
 (let (($x187 (and $x17 $x147)))
 (let (($x33 (and $x187 $x44)))
 (let (($x134 (and $x33 $x204)))
 (let (($x85 (and $x134 $x277)))
 (let (($x43 (and $x85 $x236)))
 (let (($x175 (and $x43 $x268)))
 (let (($x285 (and $x175 $x261)))
 (let (($x38 (and $x285 $x151)))
 (let (($x230 (and $x38 $x191)))
 (let (($x137 (and $x230 $x172)))
 (let (($x212 (and $x137 $x78)))
 (let (($x234 (and $x212 $x213)))
 (let (($x145 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and (not $x145) $x234)))
 (let (($x288 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (and $x288 $x169)))
 (let (($x263 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x263 $x193)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x232 (and $x273 $x195)))
 (let (($x265 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd ?x86 (_ bv3 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x57 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x257 (or false (or false (and (and true (or $x83 $x57)) (or $x19 $x265))))))
 (let (($x18 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x257)))
 (let (($x280 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x257)))
 (let (($x309 (and $x280 $x232)))
 (let (($x154 (=> $x309 $x34)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (bvule ?x55 input.dst.llvm-%n)))
 (let (($x209 (= $x281 true)))
 (let (($x34 (= $x209 true)))
 (let (($x111 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x221 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1245X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x221 false)))
 ))
 (let (($x73 (and $x123 $x111)))
 (let (($x213 (= $x73 true)))
 (let (($x98 (forall ((input.ind-%var1239X (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul input.ind-%var1239X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x201))))
 (let ((?x316 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv2 32))) ?x11)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv3 32))) ?x316)))
 (let ((?x237 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1239X)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1239X)))
 (=> $x6 (= ?x237 ?x124)))))))))
 ))
 (let (($x101 (forall ((input.ind-%var1238X (_ BitVec 32)) )(let (($x32 (and (bvule (_ bv0 32) input.ind-%var1238X) (bvult input.ind-%var1238X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1238X)))
 (= $x6 $x32))))
 ))
 (let (($x295 (and $x101 $x98)))
 (let (($x78 (= $x295 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x240 (bvneg ?x90)))
 (let (($x312 (= ?x240 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x312 true)))
 (let (($x172 (= $x216 true)))
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x138)))
 (let (($x199 (= ?x53 input.dst.llvm-%n)))
 (let (($x68 (= $x199 true)))
 (let (($x191 (= $x68 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x186 true)))
 (let (($x171 (= $x103 true)))
 (let (($x151 (= $x171 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (= $x218 true)))
 (let (($x220 (= $x196 true)))
 (let (($x261 (= $x220 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let ((?x143 (bvsub ?x86 ?x63)))
 (let (($x47 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x86 ?x143) (bvult ?x86 ?x143))))
 (let (($x23 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x158 (ite $x23 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x170 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x170)))
 (let ((?x245 ((_ extract 63 32) ?x173)))
 (let (($x264 (= ?x245 ?x158)))
 (let (($x249 (and $x264 $x47)))
 (let (($x36 (= (bvand ?x86 (_ bv4294967292 32)) ?x86)))
 (let (($x324 (and $x36 $x249)))
 (let (($x15 (= true $x324)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (=> $x25 $x15)))
 (let (($x183 (= $x20 true)))
 (let (($x322 (= $x183 true)))
 (let (($x268 (= $x322 true)))
 (let (($x317 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x313 (= $x317 true)))
 (let (($x283 (= $x313 true)))
 (let (($x236 (= $x283 true)))
 (let (($x203 (= $x25 true)))
 (let (($x286 (= $x203 true)))
 (let (($x277 (= $x286 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x168)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x217)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x133 $x51)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x155 $x108)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x177 $x318)))
 (let (($x71 (not $x159)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x188 $x222)))
 (let (($x5 (and (not $x125) $x71)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x166 $x127)))
 (let (($x289 (not $x69)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x135 $x107)))
 (let (($x182 (and (not $x148) $x289)))
 (let (($x27 (and (and (and (and (and (and $x182 $x5) $x207) $x61) $x37) $x114) $x8)))
 (let (($x248 (and $x27 $x235)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x70 (or false (or false (and (and true (or $x250 $x181)) (or $x74 $x178))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x226 (and $x161 $x248)))
 (let (($x96 (= $x226 true)))
 (let (($x206 (= $x96 true)))
 (let (($x204 (= $x206 true)))
 (let (($x31 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x247 (= $x31 true)))
 (let (($x144 (= $x247 true)))
 (let (($x44 (= $x144 true)))
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x109 (= (_ bv0 2) ?x146)))
 (let (($x88 (= $x109 true)))
 (let (($x147 (= $x88 true)))
 (let (($x223 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (= $x223 true)))
 (let (($x13 (= $x115 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x16 true)))
 (let (($x66 (= $x149 true)))
 (let (($x75 (= $x66 true)))
 (let (($x17 (and $x75 $x13)))
 (let (($x187 (and $x17 $x147)))
 (let (($x33 (and $x187 $x44)))
 (let (($x134 (and $x33 $x204)))
 (let (($x85 (and $x134 $x277)))
 (let (($x43 (and $x85 $x236)))
 (let (($x175 (and $x43 $x268)))
 (let (($x285 (and $x175 $x261)))
 (let (($x38 (and $x285 $x151)))
 (let (($x230 (and $x38 $x191)))
 (let (($x137 (and $x230 $x172)))
 (let (($x212 (and $x137 $x78)))
 (let (($x234 (and $x212 $x213)))
 (let (($x145 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and (not $x145) $x234)))
 (let (($x288 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (and $x288 $x169)))
 (let (($x263 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x263 $x193)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x232 (and $x273 $x195)))
 (let (($x265 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd ?x86 (_ bv3 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x57 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x257 (or false (or false (and (and true (or $x83 $x57)) (or $x19 $x265))))))
 (let (($x18 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x257)))
 (let (($x280 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x257)))
 (let (($x309 (and $x280 $x232)))
 (let (($x154 (=> $x309 $x34)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (not $x25)))
 (let (($x185 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (not $x185)))
 (let (($x41 (or $x64 $x202)))
 (let (($x82 (= $x41 true)))
 (let (($x233 (= $x82 true)))
 (let (($x309 (forall ((input.ind-%var1257X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1257X)))
 (=> $x221 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1257X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1256X)))
 (= $x221 false)))
 ))
 (let (($x55 (and $x140 $x309)))
 (let (($x281 (= $x55 true)))
 (let (($x184 (forall ((input.ind-%var1251X (_ BitVec 32)) )(let ((?x112 (bvadd (bvmul input.ind-%var1251X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x112))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv2 32))) ?x35)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv3 32))) ?x189)))
 (let ((?x199 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1251X)))
 (let (($x183 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1251X)))
 (=> $x183 (= ?x199 ?x11)))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1250X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var1250X) (bvult input.ind-%var1250X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x183 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1250X)))
 (= $x183 $x285))))
 ))
 (let (($x46 (and $x103 $x184)))
 (let (($x98 (= $x46 true)))
 (let ((?x122 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x122)))
 (let (($x241 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x194 (= $x241 true)))
 (let (($x47 (= $x194 true)))
 (let ((?x256 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x256)))
 (let (($x245 (= ?x102 input.dst.llvm-%n)))
 (let (($x23 (= $x245 true)))
 (let (($x158 (= $x23 true)))
 (let (($x36 (= ?x102 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (= $x36 true)))
 (let (($x170 (= $x297 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x317 (= $x85 true)))
 (let (($x313 (= $x317 true)))
 (let (($x283 (= $x313 true)))
 (let (($x204 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x204 true)))
 (let (($x203 (= $x134 true)))
 (let (($x286 (= $x203 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x235 true)))
 (let (($x226 (= $x248 true)))
 (let (($x96 (= $x226 true)))
 (let (($x238 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x217 (= $x238 true)))
 (let (($x8 (= $x217 true)))
 (let (($x27 (= $x8 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x51 true)))
 (let (($x37 (= $x108 true)))
 (let (($x214 (= $x37 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x318 (= (_ bv0 32) ?x177)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x125)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x127)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (and $x166 $x69)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x56 $x289)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x74 $x178)))
 (let (($x91 (not $x97)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x181 $x48)))
 (let (($x70 (and (not $x106) $x91)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x33 $x29)))
 (let (($x162 (not $x28)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x75 $x179)))
 (let (($x250 (and (not $x44) $x162)))
 (let (($x207 (and (and (and (and (and (and $x250 $x70) $x135) $x148) $x182) $x222) $x50)))
 (let (($x260 (and $x207 $x318)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x223)))
 (let (($x31 (or false (or false (and (and true (or $x115 $x13)) (or $x146 $x109))))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x157 (and $x144 $x260)))
 (let (($x61 (= $x157 true)))
 (let (($x271 (= $x61 true)))
 (let (($x155 (= $x271 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x131 (= (_ bv0 2) ?x219)))
 (let (($x16 (= $x131 true)))
 (let (($x149 (= $x16 true)))
 (let (($x133 (and $x149 $x155)))
 (let (($x110 (and $x133 $x214)))
 (let (($x168 (and $x110 $x27)))
 (let (($x206 (and $x168 $x96)))
 (let (($x277 (and $x206 $x286)))
 (let (($x236 (and $x277 $x283)))
 (let (($x173 (and $x236 $x170)))
 (let (($x264 (and $x173 $x158)))
 (let (($x249 (and $x264 $x47)))
 (let (($x295 (and $x249 $x98)))
 (let (($x209 (and $x295 $x281)))
 (let (($x224 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and $x224 $x209)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x39 $x34)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x59 (and $x95 $x154)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let (($x255 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd ?x86 (_ bv3 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x84 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x280 (or false (or false (and (and true (or $x174 $x84)) (or $x93 $x255))))))
 (let (($x273 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x280)))
 (let (($x77 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x280)))
 (let (($x266 (and $x77 $x59)))
 (let (($x259 (=> $x266 $x233)))
 (not $x259))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (not $x25)))
 (let (($x185 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (not $x185)))
 (let (($x41 (or $x64 $x202)))
 (let (($x82 (= $x41 true)))
 (let (($x233 (= $x82 true)))
 (let (($x309 (forall ((input.ind-%var1257X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1257X)))
 (=> $x221 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1257X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let (($x221 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1256X)))
 (= $x221 false)))
 ))
 (let (($x55 (and $x140 $x309)))
 (let (($x281 (= $x55 true)))
 (let (($x184 (forall ((input.ind-%var1251X (_ BitVec 32)) )(let ((?x112 (bvadd (bvmul input.ind-%var1251X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x112))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv2 32))) ?x35)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv3 32))) ?x189)))
 (let ((?x199 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1251X)))
 (let (($x183 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1251X)))
 (=> $x183 (= ?x199 ?x11)))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1250X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var1250X) (bvult input.ind-%var1250X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x183 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1250X)))
 (= $x183 $x285))))
 ))
 (let (($x46 (and $x103 $x184)))
 (let (($x98 (= $x46 true)))
 (let ((?x122 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x122)))
 (let (($x241 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x194 (= $x241 true)))
 (let (($x47 (= $x194 true)))
 (let ((?x256 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x256)))
 (let (($x245 (= ?x102 input.dst.llvm-%n)))
 (let (($x23 (= $x245 true)))
 (let (($x158 (= $x23 true)))
 (let (($x36 (= ?x102 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (= $x36 true)))
 (let (($x170 (= $x297 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x317 (= $x85 true)))
 (let (($x313 (= $x317 true)))
 (let (($x283 (= $x313 true)))
 (let (($x204 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x204 true)))
 (let (($x203 (= $x134 true)))
 (let (($x286 (= $x203 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x235 true)))
 (let (($x226 (= $x248 true)))
 (let (($x96 (= $x226 true)))
 (let (($x238 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x217 (= $x238 true)))
 (let (($x8 (= $x217 true)))
 (let (($x27 (= $x8 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x51 true)))
 (let (($x37 (= $x108 true)))
 (let (($x214 (= $x37 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x318 (= (_ bv0 32) ?x177)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x125)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x127)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (and $x166 $x69)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x56 $x289)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x74 $x178)))
 (let (($x91 (not $x97)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x181 $x48)))
 (let (($x70 (and (not $x106) $x91)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x33 $x29)))
 (let (($x162 (not $x28)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x75 $x179)))
 (let (($x250 (and (not $x44) $x162)))
 (let (($x207 (and (and (and (and (and (and $x250 $x70) $x135) $x148) $x182) $x222) $x50)))
 (let (($x260 (and $x207 $x318)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x223)))
 (let (($x31 (or false (or false (and (and true (or $x115 $x13)) (or $x146 $x109))))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x157 (and $x144 $x260)))
 (let (($x61 (= $x157 true)))
 (let (($x271 (= $x61 true)))
 (let (($x155 (= $x271 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x131 (= (_ bv0 2) ?x219)))
 (let (($x16 (= $x131 true)))
 (let (($x149 (= $x16 true)))
 (let (($x133 (and $x149 $x155)))
 (let (($x110 (and $x133 $x214)))
 (let (($x168 (and $x110 $x27)))
 (let (($x206 (and $x168 $x96)))
 (let (($x277 (and $x206 $x286)))
 (let (($x236 (and $x277 $x283)))
 (let (($x173 (and $x236 $x170)))
 (let (($x264 (and $x173 $x158)))
 (let (($x249 (and $x264 $x47)))
 (let (($x295 (and $x249 $x98)))
 (let (($x209 (and $x295 $x281)))
 (let (($x224 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and $x224 $x209)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x39 $x34)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x59 (and $x95 $x154)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let (($x255 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd ?x86 (_ bv3 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x84 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x280 (or false (or false (and (and true (or $x174 $x84)) (or $x93 $x255))))))
 (let (($x273 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x280)))
 (let (($x77 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x280)))
 (let (($x266 (and $x77 $x59)))
 (let (($x259 (=> $x266 $x233)))
 (not $x259))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (or $x212 $x25)))
 (let (($x151 (= $x123 true)))
 (let (($x237 (= $x151 true)))
 (let (($x54 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1269X)))
 (=> $x38 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1269X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1268X)))
 (= $x38 false)))
 ))
 (let (($x200 (and $x230 $x54)))
 (let (($x73 (= $x200 true)))
 (let (($x66 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var1263X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x34))))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv2 32))) ?x185)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv3 32))) ?x41)))
 (let ((?x35 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1263X)))
 (let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1263X)))
 (=> $x186 (= ?x35 ?x259)))))))))
 ))
 (let (($x94 (forall ((input.ind-%var1262X (_ BitVec 32)) )(let (($x137 (and (bvule (_ bv0 32) input.ind-%var1262X) (bvult input.ind-%var1262X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1262X)))
 (= $x186 $x137))))
 ))
 (let (($x322 (and $x94 $x66)))
 (let (($x68 (= $x322 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x241)))
 (let (($x47 (= ?x194 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x47 true)))
 (let (($x20 (= $x249 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x36)))
 (let (($x158 (= ?x297 input.dst.llvm-%n)))
 (let (($x264 (= $x158 true)))
 (let (($x122 (= $x264 true)))
 (let (($x170 (= ?x297 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (= $x170 true)))
 (let (($x245 (= $x173 true)))
 (let (($x313 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x283 (= $x313 true)))
 (let (($x236 (= $x283 true)))
 (let (($x43 (= $x236 true)))
 (let (($x203 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x203 true)))
 (let (($x277 (= $x286 true)))
 (let (($x85 (= $x277 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x226 true)))
 (let (($x206 (= $x96 true)))
 (let (($x204 (= $x206 true)))
 (let (($x8 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x27 (= $x8 true)))
 (let (($x168 (= $x27 true)))
 (let (($x235 (= $x168 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x214 (= $x37 true)))
 (let (($x110 (= $x214 true)))
 (let (($x114 (= $x110 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x130)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x188)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x56 $x127)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x5 $x69)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x178 $x97)))
 (let (($x70 (not $x91)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x106 $x30)))
 (let (($x161 (and (not $x74) $x70)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x29 $x28)))
 (let (($x250 (not $x162)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x247 $x223)))
 (let (($x48 (and (not $x33) $x250)))
 (let (($x157 (and (and (and (and (and (and $x48 $x161) $x71) $x148) $x289) $x105) $x222)))
 (let (($x61 (and $x157 $x125)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x179 (or false (or false (and (and true (or $x150 $x146)) (or $x147 $x187))))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x271 (and $x129 $x61)))
 (let (($x155 (= $x271 true)))
 (let (($x133 (= $x155 true)))
 (let (($x42 (= $x133 true)))
 (let ((?x131 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x16 (= (_ bv0 2) ?x131)))
 (let (($x149 (= $x16 true)))
 (let (($x138 (= $x149 true)))
 (let (($x51 (and $x138 $x42)))
 (let (($x238 (and $x51 $x114)))
 (let (($x248 (and $x238 $x235)))
 (let (($x134 (and $x248 $x204)))
 (let (($x317 (and $x134 $x85)))
 (let (($x256 (and $x317 $x43)))
 (let (($x23 (and $x256 $x245)))
 (let (($x143 (and $x23 $x122)))
 (let (($x183 (and $x143 $x20)))
 (let (($x321 (and $x183 $x68)))
 (let (($x15 (and $x321 $x73)))
 (let (($x145 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and $x145 $x15)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x80 $x218)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x60 $x196)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let (($x257 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd ?x86 (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x19 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x77 (or false (or false (and (and true (or $x292 $x19)) (or $x104 $x257))))))
 (let (($x95 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x77)))
 (let (($x246 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x77)))
 (let (($x78 (and $x246 $x101)))
 (let (($x169 (=> $x78 $x237)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (or $x212 $x25)))
 (let (($x151 (= $x123 true)))
 (let (($x237 (= $x151 true)))
 (let (($x54 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1269X)))
 (=> $x38 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1269X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1268X)))
 (= $x38 false)))
 ))
 (let (($x200 (and $x230 $x54)))
 (let (($x73 (= $x200 true)))
 (let (($x66 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var1263X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x34))))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv2 32))) ?x185)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv3 32))) ?x41)))
 (let ((?x35 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1263X)))
 (let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1263X)))
 (=> $x186 (= ?x35 ?x259)))))))))
 ))
 (let (($x94 (forall ((input.ind-%var1262X (_ BitVec 32)) )(let (($x137 (and (bvule (_ bv0 32) input.ind-%var1262X) (bvult input.ind-%var1262X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1262X)))
 (= $x186 $x137))))
 ))
 (let (($x322 (and $x94 $x66)))
 (let (($x68 (= $x322 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x241)))
 (let (($x47 (= ?x194 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x47 true)))
 (let (($x20 (= $x249 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x36)))
 (let (($x158 (= ?x297 input.dst.llvm-%n)))
 (let (($x264 (= $x158 true)))
 (let (($x122 (= $x264 true)))
 (let (($x170 (= ?x297 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (= $x170 true)))
 (let (($x245 (= $x173 true)))
 (let (($x313 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x283 (= $x313 true)))
 (let (($x236 (= $x283 true)))
 (let (($x43 (= $x236 true)))
 (let (($x203 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x203 true)))
 (let (($x277 (= $x286 true)))
 (let (($x85 (= $x277 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x226 true)))
 (let (($x206 (= $x96 true)))
 (let (($x204 (= $x206 true)))
 (let (($x8 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x27 (= $x8 true)))
 (let (($x168 (= $x27 true)))
 (let (($x235 (= $x168 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x214 (= $x37 true)))
 (let (($x110 (= $x214 true)))
 (let (($x114 (= $x110 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x130)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x188)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x56 $x127)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x5 $x69)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x178 $x97)))
 (let (($x70 (not $x91)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x106 $x30)))
 (let (($x161 (and (not $x74) $x70)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x29 $x28)))
 (let (($x250 (not $x162)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x247 $x223)))
 (let (($x48 (and (not $x33) $x250)))
 (let (($x157 (and (and (and (and (and (and $x48 $x161) $x71) $x148) $x289) $x105) $x222)))
 (let (($x61 (and $x157 $x125)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x179 (or false (or false (and (and true (or $x150 $x146)) (or $x147 $x187))))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x179)))
 (let (($x271 (and $x129 $x61)))
 (let (($x155 (= $x271 true)))
 (let (($x133 (= $x155 true)))
 (let (($x42 (= $x133 true)))
 (let ((?x131 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x16 (= (_ bv0 2) ?x131)))
 (let (($x149 (= $x16 true)))
 (let (($x138 (= $x149 true)))
 (let (($x51 (and $x138 $x42)))
 (let (($x238 (and $x51 $x114)))
 (let (($x248 (and $x238 $x235)))
 (let (($x134 (and $x248 $x204)))
 (let (($x317 (and $x134 $x85)))
 (let (($x256 (and $x317 $x43)))
 (let (($x23 (and $x256 $x245)))
 (let (($x143 (and $x23 $x122)))
 (let (($x183 (and $x143 $x20)))
 (let (($x321 (and $x183 $x68)))
 (let (($x15 (and $x321 $x73)))
 (let (($x145 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and $x145 $x15)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x80 $x218)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x60 $x196)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvadd input.dst.llvm-%m ?x63)))
 (let (($x257 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd ?x86 (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x19 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x77 (or false (or false (and (and true (or $x292 $x19)) (or $x104 $x257))))))
 (let (($x95 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) $x77)))
 (let (($x246 (=> (and $x25 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) $x77)))
 (let (($x78 (and $x246 $x101)))
 (let (($x169 (=> $x78 $x237)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x258 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var1287X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x68))))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv2 32))) ?x230)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv3 32))) ?x172)))
 (let ((?x116 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1287X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1287X)))
 (=> $x264 (= ?x116 ?x73)))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1286X (_ BitVec 32)) )(let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1286X)))
 (= $x264 (and (bvule (_ bv0 32) input.ind-%var1286X) (bvult input.ind-%var1286X input.dst.llvm-%n)))))
 ))
 (let (($x89 (and $x171 $x258)))
 (let (($x184 (= true true)))
 (let (($x278 (and $x184 $x89)))
 (let (($x136 (= $x278 true)))
 (let (($x316 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1281X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1281X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1280X)))
 (= $x237 false)))
 ))
 (let (($x124 (and $x53 $x316)))
 (let (($x195 (= $x124 true)))
 (let (($x196 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var1275X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x68))))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv2 32))) ?x230)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv3 32))) ?x172)))
 (let ((?x116 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1275X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x264 (= ?x116 ?x73)))))))))
 ))
 (let (($x186 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x20 (bvule (_ bv0 32) input.ind-%var1274X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x264 (and $x20 (bvult input.ind-%var1274X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x101 (and $x186 $x196)))
 (let (($x78 (= $x101 true)))
 (let ((?x246 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x246)))
 (let (($x36 (= ?x198 input.dst.llvm-%n)))
 (let (($x297 (= $x36 true)))
 (let (($x170 (= $x297 true)))
 (let ((?x283 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x236 (= (_ bv0 2) ?x283)))
 (let (($x43 (= $x236 true)))
 (let (($x256 (= $x43 true)))
 (let (($x134 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x134 true)))
 (let (($x286 (= $x203 true)))
 (let (($x277 (= $x286 true)))
 (let (($x235 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (not $x235)))
 (let (($x226 (= $x248 true)))
 (let (($x96 (= $x226 true)))
 (let (($x206 (= $x96 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x271)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x125)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x318 $x260)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x289 $x188)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x71 $x207)))
 (let (($x148 (not $x107)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x161 $x50)))
 (let (($x5 (and (not $x135) $x148)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x74 $x159)))
 (let (($x97 (not $x178)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x150 $x146)))
 (let (($x70 (and (not $x30) $x97)))
 (let (($x214 (and (and (and (and (and (and $x70 $x5) $x166) $x69) $x222) $x130) $x61)))
 (let (($x110 (and $x214 $x155)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x250 (or false (or false (and (and true (or $x144 $x75)) (or $x33 $x181))))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x250)))
 (let (($x114 (and $x106 $x110)))
 (let (($x238 (= $x114 true)))
 (let (($x217 (= $x238 true)))
 (let (($x8 (= $x217 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x16 true)))
 (let (($x138 (= $x149 true)))
 (let (($x115 (= $x138 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x224 (= $x288 true)))
 (let (($x145 (= $x224 true)))
 (let (($x219 (= $x145 true)))
 (let (($x60 (= ?x198 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (= $x60 true)))
 (let (($x39 (= $x263 true)))
 (let ((?x257 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x257)))
 (let (($x280 (= ?x18 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x280 true)))
 (let (($x77 (= $x273 true)))
 (let (($x19 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x19 true)))
 (let (($x93 (= $x7 true)))
 (let (($x265 (= $x93 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x83 true)))
 (let (($x292 (= $x84 true)))
 (let (($x174 (= $x292 true)))
 (let (($x104 (and $x174 $x265)))
 (let (($x95 (and $x104 $x77)))
 (let (($x80 (and $x95 $x39)))
 (let (($x131 (and $x80 $x219)))
 (let (($x13 (and $x131 $x115)))
 (let (($x27 (and $x13 $x8)))
 (let (($x204 (and $x27 $x206)))
 (let (($x85 (and $x204 $x277)))
 (let (($x102 (and $x85 $x256)))
 (let (($x173 (and $x102 $x170)))
 (let (($x212 (and $x173 $x78)))
 (let (($x232 (and $x212 $x195)))
 (let (($x22 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x22 $x232)))
 (let (($x315 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and $x315 $x152)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x319 $x140)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x25 $x46)))
 (let (($x205 (=> $x98 $x136)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x258 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var1287X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x68))))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv2 32))) ?x230)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv3 32))) ?x172)))
 (let ((?x116 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1287X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1287X)))
 (=> $x264 (= ?x116 ?x73)))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1286X (_ BitVec 32)) )(let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1286X)))
 (= $x264 (and (bvule (_ bv0 32) input.ind-%var1286X) (bvult input.ind-%var1286X input.dst.llvm-%n)))))
 ))
 (let (($x89 (and $x171 $x258)))
 (let (($x184 (= true true)))
 (let (($x278 (and $x184 $x89)))
 (let (($x136 (= $x278 true)))
 (let (($x316 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1281X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1281X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1280X)))
 (= $x237 false)))
 ))
 (let (($x124 (and $x53 $x316)))
 (let (($x195 (= $x124 true)))
 (let (($x196 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var1275X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x68))))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv2 32))) ?x230)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x68 (_ bv3 32))) ?x172)))
 (let ((?x116 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1275X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x264 (= ?x116 ?x73)))))))))
 ))
 (let (($x186 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x20 (bvule (_ bv0 32) input.ind-%var1274X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x264 (and $x20 (bvult input.ind-%var1274X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x101 (and $x186 $x196)))
 (let (($x78 (= $x101 true)))
 (let ((?x246 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x246)))
 (let (($x36 (= ?x198 input.dst.llvm-%n)))
 (let (($x297 (= $x36 true)))
 (let (($x170 (= $x297 true)))
 (let ((?x283 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x236 (= (_ bv0 2) ?x283)))
 (let (($x43 (= $x236 true)))
 (let (($x256 (= $x43 true)))
 (let (($x134 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x134 true)))
 (let (($x286 (= $x203 true)))
 (let (($x277 (= $x286 true)))
 (let (($x235 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (not $x235)))
 (let (($x226 (= $x248 true)))
 (let (($x96 (= $x226 true)))
 (let (($x206 (= $x96 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x271)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x125)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x318 $x260)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x289 $x188)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x71 $x207)))
 (let (($x148 (not $x107)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x161 $x50)))
 (let (($x5 (and (not $x135) $x148)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x74 $x159)))
 (let (($x97 (not $x178)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x150 $x146)))
 (let (($x70 (and (not $x30) $x97)))
 (let (($x214 (and (and (and (and (and (and $x70 $x5) $x166) $x69) $x222) $x130) $x61)))
 (let (($x110 (and $x214 $x155)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x250 (or false (or false (and (and true (or $x144 $x75)) (or $x33 $x181))))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x250)))
 (let (($x114 (and $x106 $x110)))
 (let (($x238 (= $x114 true)))
 (let (($x217 (= $x238 true)))
 (let (($x8 (= $x217 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x16 true)))
 (let (($x138 (= $x149 true)))
 (let (($x115 (= $x138 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x224 (= $x288 true)))
 (let (($x145 (= $x224 true)))
 (let (($x219 (= $x145 true)))
 (let (($x60 (= ?x198 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (= $x60 true)))
 (let (($x39 (= $x263 true)))
 (let ((?x257 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x257)))
 (let (($x280 (= ?x18 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x280 true)))
 (let (($x77 (= $x273 true)))
 (let (($x19 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x19 true)))
 (let (($x93 (= $x7 true)))
 (let (($x265 (= $x93 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x83 true)))
 (let (($x292 (= $x84 true)))
 (let (($x174 (= $x292 true)))
 (let (($x104 (and $x174 $x265)))
 (let (($x95 (and $x104 $x77)))
 (let (($x80 (and $x95 $x39)))
 (let (($x131 (and $x80 $x219)))
 (let (($x13 (and $x131 $x115)))
 (let (($x27 (and $x13 $x8)))
 (let (($x204 (and $x27 $x206)))
 (let (($x85 (and $x204 $x277)))
 (let (($x102 (and $x85 $x256)))
 (let (($x173 (and $x102 $x170)))
 (let (($x212 (and $x173 $x78)))
 (let (($x232 (and $x212 $x195)))
 (let (($x22 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x22 $x232)))
 (let (($x315 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and $x315 $x152)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x319 $x140)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x25 $x46)))
 (let (($x205 (=> $x98 $x136)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676020/query
