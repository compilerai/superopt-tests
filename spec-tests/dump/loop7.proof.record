==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (= false true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x128 (concat ?x125 (concat ?x122 ?x120)))))
 (let (($x131 (= ?x129 input.dst.llvm-%m)))
 (let (($x132 (= $x131 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x111 (concat ?x107 ?x105)))))
 (let (($x116 (= ?x115 input.dst.llvm-%n)))
 (let (($x117 (= $x116 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x91)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x57)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x71 $x86)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x66 $x87)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x17 $x39)))
 (let (($x60 (not $x79)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x80 $x61)))
 (let (($x62 (and (not $x24) $x60)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x75 $x78)))
 (let (($x50 (not $x83)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x9 $x23)))
 (let (($x63 (and (not $x56) $x50)))
 (let (($x98 (and (and (and (and (and (and $x63 $x62) $x18) $x47) $x88) $x58) $x59)))
 (let (($x99 (and $x98 $x92)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x73 (or false (or false (and (and true (or $x20 $x38)) (or $x11 $x65))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x73)))
 (let (($x100 (and $x72 $x99)))
 (let (($x101 (= $x100 true)))
 (let (($x21 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x89 (= $x21 true)))
 (let (($x102 (and $x89 $x101)))
 (let (($x118 (and $x102 $x117)))
 (let (($x133 (and $x118 $x132)))
 (let (($x68 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x68 $x133)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x135 (and $x22 $x134)))
 (let (($x33 (forall ((input.ind-%var65X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var65X)))
 (=> $x34 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var65X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var64X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var64X)))
 (= $x34 false)))
 ))
 (let (($x82 (and $x51 $x33)))
 (let (($x136 (and $x82 $x135)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x137 (and $x25 $x136)))
 (let (($x139 (=> $x137 $x138)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (= false true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x128 (concat ?x125 (concat ?x122 ?x120)))))
 (let (($x131 (= ?x129 input.dst.llvm-%m)))
 (let (($x132 (= $x131 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x111 (concat ?x107 ?x105)))))
 (let (($x116 (= ?x115 input.dst.llvm-%n)))
 (let (($x117 (= $x116 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x91)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x57)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x71 $x86)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x66 $x87)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x17 $x39)))
 (let (($x60 (not $x79)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x80 $x61)))
 (let (($x62 (and (not $x24) $x60)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x75 $x78)))
 (let (($x50 (not $x83)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x9 $x23)))
 (let (($x63 (and (not $x56) $x50)))
 (let (($x98 (and (and (and (and (and (and $x63 $x62) $x18) $x47) $x88) $x58) $x59)))
 (let (($x99 (and $x98 $x92)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x73 (or false (or false (and (and true (or $x20 $x38)) (or $x11 $x65))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x73)))
 (let (($x100 (and $x72 $x99)))
 (let (($x101 (= $x100 true)))
 (let (($x21 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x89 (= $x21 true)))
 (let (($x102 (and $x89 $x101)))
 (let (($x118 (and $x102 $x117)))
 (let (($x133 (and $x118 $x132)))
 (let (($x68 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x68 $x133)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x135 (and $x22 $x134)))
 (let (($x33 (forall ((input.ind-%var65X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var65X)))
 (=> $x34 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var65X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var64X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var64X)))
 (= $x34 false)))
 ))
 (let (($x82 (and $x51 $x33)))
 (let (($x136 (and $x82 $x135)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x137 (and $x25 $x136)))
 (let (($x139 (=> $x137 $x138)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xeefcc268)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb421d650)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb421d653)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xeefcc26b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb421d650)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xeefcc268)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x66)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x39)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x100 $x92)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x21 $x17)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x8 $x83)))
 (let (($x72 (not $x114)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x87 $x62)))
 (let (($x9 (and (not $x18) $x72)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x59 $x47)))
 (let (($x95 (not $x99)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x97 $x78)))
 (let (($x80 (and (not $x79) $x95)))
 (let (($x108 (and (and (and (and (and (and $x80 $x9) $x24) $x38) $x45) $x98) $x16)))
 (let (($x112 (and $x108 $x63)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x57 (or false (or false (and (and true (or $x93 $x64)) (or $x84 $x22))))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x67 (and $x102 $x112)))
 (let (($x14 (= $x67 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x139 (concat ?x136 (concat ?x133 ?x131)))))
 (let (($x5 (= input.dst.llvm-%m ?x140)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x123 (concat ?x121 (concat ?x127 ?x117)))))
 (let (($x129 (= input.dst.llvm-%n ?x126)))
 (let (($x119 (and $x129 $x5)))
 (let (($x35 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x102) $x112)))
 (let (($x76 (and $x35 $x119)))
 (let (($x44 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x19 (and $x44 $x76)))
 (let (($x36 (= $x19 true)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and $x109 $x36)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x94 $x48)))
 (let (($x70 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x37 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x53 false)))
 ))
 (let (($x28 (and $x37 $x70)))
 (let (($x81 (and $x28 $x10)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x7 (and $x42 $x81)))
 (let (($x141 (=> $x7 $x14)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x66)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x39)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x100 $x92)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x21 $x17)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x8 $x83)))
 (let (($x72 (not $x114)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x87 $x62)))
 (let (($x9 (and (not $x18) $x72)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x59 $x47)))
 (let (($x95 (not $x99)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x97 $x78)))
 (let (($x80 (and (not $x79) $x95)))
 (let (($x108 (and (and (and (and (and (and $x80 $x9) $x24) $x38) $x45) $x98) $x16)))
 (let (($x112 (and $x108 $x63)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x57 (or false (or false (and (and true (or $x93 $x64)) (or $x84 $x22))))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x67 (and $x102 $x112)))
 (let (($x14 (= $x67 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x139 (concat ?x136 (concat ?x133 ?x131)))))
 (let (($x5 (= input.dst.llvm-%m ?x140)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x123 (concat ?x121 (concat ?x127 ?x117)))))
 (let (($x129 (= input.dst.llvm-%n ?x126)))
 (let (($x119 (and $x129 $x5)))
 (let (($x35 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x102) $x112)))
 (let (($x76 (and $x35 $x119)))
 (let (($x44 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x19 (and $x44 $x76)))
 (let (($x36 (= $x19 true)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and $x109 $x36)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x94 $x48)))
 (let (($x70 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x37 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x53 false)))
 ))
 (let (($x28 (and $x37 $x70)))
 (let (($x81 (and $x28 $x10)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x7 (and $x42 $x81)))
 (let (($x141 (=> $x7 $x14)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x15 (= $x54 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x14 (concat ?x81 (concat ?x36 ?x76)))))
 (let (($x142 (= input.dst.llvm-%m ?x141)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x137 (concat ?x133 (concat ?x139 ?x129)))))
 (let (($x5 (= input.dst.llvm-%n ?x140)))
 (let (($x55 (and $x5 $x142)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x120)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x35)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x98 $x16)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x90 $x108)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x38 $x106)))
 (let (($x100 (not $x21)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x24 $x111)))
 (let (($x31 (and (not $x71) $x100)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x83 $x114)))
 (let (($x9 (not $x72)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x74 $x22)))
 (let (($x91 (and (not $x8) $x9)))
 (let (($x117 (and (and (and (and (and (and $x91 $x31) $x17) $x107) $x66) $x112) $x115)))
 (let (($x128 (and $x117 $x123)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x62 (or false (or false (and (and true (or $x104 $x97)) (or $x47 $x99))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x62)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x116 (and (and (and $x20 $x68) $x128) $x55)))
 (let (($x93 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x25 (and $x93 $x116)))
 (let (($x33 (= $x25 true)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (and $x73 $x33)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x13 $x69)))
 (let (($x26 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var97X)))
 (=> $x37 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var97X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var96X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var96X)))
 (= $x37 false)))
 ))
 (let (($x61 (and $x88 $x26)))
 (let (($x51 (and $x61 $x6)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x34 (and $x42 $x51)))
 (let (($x12 (=> $x34 $x15)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x15 (= $x54 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x14 (concat ?x81 (concat ?x36 ?x76)))))
 (let (($x142 (= input.dst.llvm-%m ?x141)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x137 (concat ?x133 (concat ?x139 ?x129)))))
 (let (($x5 (= input.dst.llvm-%n ?x140)))
 (let (($x55 (and $x5 $x142)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x120)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x35)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x98 $x16)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x90 $x108)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x38 $x106)))
 (let (($x100 (not $x21)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x24 $x111)))
 (let (($x31 (and (not $x71) $x100)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x83 $x114)))
 (let (($x9 (not $x72)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x74 $x22)))
 (let (($x91 (and (not $x8) $x9)))
 (let (($x117 (and (and (and (and (and (and $x91 $x31) $x17) $x107) $x66) $x112) $x115)))
 (let (($x128 (and $x117 $x123)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x62 (or false (or false (and (and true (or $x104 $x97)) (or $x47 $x99))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x62)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x116 (and (and (and $x20 $x68) $x128) $x55)))
 (let (($x93 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x25 (and $x93 $x116)))
 (let (($x33 (= $x25 true)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (and $x73 $x33)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x13 $x69)))
 (let (($x26 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var97X)))
 (=> $x37 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var97X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var96X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var96X)))
 (= $x37 false)))
 ))
 (let (($x61 (and $x88 $x26)))
 (let (($x51 (and $x61 $x6)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x34 (and $x42 $x51)))
 (let (($x12 (=> $x34 $x15)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2e14bffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffbffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffbffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2e14bfff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffbffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2e14bffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffbffff9) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000c080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x72f8a824)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x04040400)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000c083)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x72f8a827)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000c080)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x72f8a824)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x72f8a824) #x00
      #x04))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x28)))
 (let (($x27 (= ?x52 input.dst.llvm-%n)))
 (let (($x143 (= $x27 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x15 (concat ?x51 (concat ?x33 ?x116)))))
 (let (($x30 (= input.dst.llvm-%m ?x12)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x7 (concat ?x36 (concat ?x14 ?x5)))))
 (let (($x142 (= input.dst.llvm-%n ?x141)))
 (let (($x82 (and $x142 $x30)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x134)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x130)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x35)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x112 $x115)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x63 $x117)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x107 $x121)))
 (let (($x98 (not $x90)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x17 $x125)))
 (let (($x39 (and (not $x45) $x98)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x106 $x21)))
 (let (($x31 (not $x100)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x59 $x99)))
 (let (($x92 (and (not $x38) $x31)))
 (let (($x129 (and (and (and (and (and (and $x92 $x39) $x108) $x118) $x120) $x128) $x122)))
 (let (($x135 (and $x129 $x137)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x111 (or false (or false (and (and true (or $x32 $x74)) (or $x114 $x72))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x111)))
 (let (($x79 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x126 (and (and (and $x79 $x101) $x135) $x82)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (and $x104 $x126)))
 (let (($x49 (= $x77 true)))
 (let (($x85 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x85 $x49)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x56 $x41)))
 (let (($x64 (forall ((input.ind-%var115X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var115X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var115X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var114X)))
 (= $x29 false)))
 ))
 (let (($x58 (and $x44 $x64)))
 (let (($x53 (and $x58 $x43)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x113 $x53)))
 (let (($x144 (=> $x89 $x143)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x28)))
 (let (($x27 (= ?x52 input.dst.llvm-%n)))
 (let (($x143 (= $x27 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x15 (concat ?x51 (concat ?x33 ?x116)))))
 (let (($x30 (= input.dst.llvm-%m ?x12)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x7 (concat ?x36 (concat ?x14 ?x5)))))
 (let (($x142 (= input.dst.llvm-%n ?x141)))
 (let (($x82 (and $x142 $x30)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x134)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x130)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x35)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x112 $x115)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x63 $x117)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x107 $x121)))
 (let (($x98 (not $x90)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x17 $x125)))
 (let (($x39 (and (not $x45) $x98)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x106 $x21)))
 (let (($x31 (not $x100)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x59 $x99)))
 (let (($x92 (and (not $x38) $x31)))
 (let (($x129 (and (and (and (and (and (and $x92 $x39) $x108) $x118) $x120) $x128) $x122)))
 (let (($x135 (and $x129 $x137)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x111 (or false (or false (and (and true (or $x32 $x74)) (or $x114 $x72))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x111)))
 (let (($x79 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x126 (and (and (and $x79 $x101) $x135) $x82)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (and $x104 $x126)))
 (let (($x49 (= $x77 true)))
 (let (($x85 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x85 $x49)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x56 $x41)))
 (let (($x64 (forall ((input.ind-%var115X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var115X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var115X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var114X)))
 (= $x29 false)))
 ))
 (let (($x58 (and $x44 $x64)))
 (let (($x53 (and $x58 $x43)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x113 $x53)))
 (let (($x144 (=> $x89 $x143)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x37 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x94 (bvmul ?x37 (_ bv256 16))))
 (let (($x26 (= ?x94 ?x73)))
 (let (($x96 (= $x26 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x28 (concat ?x53 (concat ?x49 ?x126)))))
 (let (($x27 (= input.dst.llvm-%m ?x52)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x34 (concat ?x33 (concat ?x15 ?x142)))))
 (let (($x30 (= input.dst.llvm-%n ?x12)))
 (let (($x143 (and $x30 $x27)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x48)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x119)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x130)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x128 $x122)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x123 $x129)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x118 $x133)))
 (let (($x112 (not $x63)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x108 $x132)))
 (let (($x35 (and (not $x66) $x112)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x121 $x90)))
 (let (($x39 (not $x98)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x83 $x72)))
 (let (($x16 (and (not $x107) $x39)))
 (let (($x5 (and (and (and (and (and (and $x16 $x35) $x117) $x138) $x134) $x135) $x131)))
 (let (($x10 (and $x5 $x7)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x125 (or false (or false (and (and true (or $x84 $x59)) (or $x21 $x100))))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x8 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x50 (and (and (and $x8 $x105) $x10) $x143)))
 (let (($x32 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x47 (and $x32 $x50)))
 (let (($x55 (= $x47 true)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and $x87 $x55)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x95 $x140)))
 (let (($x97 (forall ((input.ind-%var125X (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var125X)))
 (=> $x44 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var125X) (_ bv0 32)))))
 ))
 (let (($x65 (forall ((input.ind-%var124X (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var124X)))
 (= $x44 false)))
 ))
 (let (($x78 (and $x65 $x97)))
 (let (($x13 (and $x78 $x88)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x61 (and $x113 $x13)))
 (let (($x70 (=> $x61 $x96)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x37 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x94 (bvmul ?x37 (_ bv256 16))))
 (let (($x26 (= ?x94 ?x73)))
 (let (($x96 (= $x26 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x28 (concat ?x53 (concat ?x49 ?x126)))))
 (let (($x27 (= input.dst.llvm-%m ?x52)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x34 (concat ?x33 (concat ?x15 ?x142)))))
 (let (($x30 (= input.dst.llvm-%n ?x12)))
 (let (($x143 (and $x30 $x27)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x48)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x119)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x130)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x128 $x122)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x123 $x129)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x118 $x133)))
 (let (($x112 (not $x63)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x108 $x132)))
 (let (($x35 (and (not $x66) $x112)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x121 $x90)))
 (let (($x39 (not $x98)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x83 $x72)))
 (let (($x16 (and (not $x107) $x39)))
 (let (($x5 (and (and (and (and (and (and $x16 $x35) $x117) $x138) $x134) $x135) $x131)))
 (let (($x10 (and $x5 $x7)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x125 (or false (or false (and (and true (or $x84 $x59)) (or $x21 $x100))))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x8 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x50 (and (and (and $x8 $x105) $x10) $x143)))
 (let (($x32 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x47 (and $x32 $x50)))
 (let (($x55 (= $x47 true)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and $x87 $x55)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x95 $x140)))
 (let (($x97 (forall ((input.ind-%var125X (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var125X)))
 (=> $x44 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var125X) (_ bv0 32)))))
 ))
 (let (($x65 (forall ((input.ind-%var124X (_ BitVec 32)) )(let (($x44 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var124X)))
 (= $x44 false)))
 ))
 (let (($x78 (and $x65 $x97)))
 (let (($x13 (and $x78 $x88)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x61 (and $x113 $x13)))
 (let (($x70 (=> $x61 $x96)))
 (not $x70)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x29 (= (_ bv0 2) ?x42)))
 (let (($x103 (= $x29 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x11 (concat ?x13 (concat ?x55 ?x50)))))
 (let (($x73 (= input.dst.llvm-%m ?x94)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x89 (concat ?x49 (concat ?x28 ?x30)))))
 (let (($x27 (= input.dst.llvm-%n ?x52)))
 (let (($x26 (and $x27 $x73)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x69)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x145)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x119)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (and $x135 $x131)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x137 $x5)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (and $x138 $x36)))
 (let (($x128 (not $x123)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x117 $x19)))
 (let (($x130 (and (not $x120) $x128)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x133 $x63)))
 (let (($x35 (not $x112)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x106 $x100)))
 (let (($x115 (and (not $x118) $x35)))
 (let (($x142 (and (and (and (and (and (and $x115 $x130) $x129) $x67) $x48) $x10) $x76)))
 (let (($x6 (and $x142 $x34)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x132 (or false (or false (and (and true (or $x144 $x83)) (or $x90 $x98))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x38 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x146 (and (and (and $x38 $x127) $x6) $x26)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (and $x84 $x146)))
 (let (($x114 (= $x60 true)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x24 $x114)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x9 $x82)))
 (let (($x74 (forall ((input.ind-%var143X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var143X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var143X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var142X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var142X)))
 (= $x93 false)))
 ))
 (let (($x22 (and $x104 $x74)))
 (let (($x110 (and $x22 $x141)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x40 $x110)))
 (let (($x85 (=> $x86 $x103)))
 (not $x85)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x29 (= (_ bv0 2) ?x42)))
 (let (($x103 (= $x29 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x11 (concat ?x13 (concat ?x55 ?x50)))))
 (let (($x73 (= input.dst.llvm-%m ?x94)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x89 (concat ?x49 (concat ?x28 ?x30)))))
 (let (($x27 (= input.dst.llvm-%n ?x52)))
 (let (($x26 (and $x27 $x73)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x69)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x145)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x119)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (and $x135 $x131)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x137 $x5)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (and $x138 $x36)))
 (let (($x128 (not $x123)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x117 $x19)))
 (let (($x130 (and (not $x120) $x128)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x133 $x63)))
 (let (($x35 (not $x112)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x106 $x100)))
 (let (($x115 (and (not $x118) $x35)))
 (let (($x142 (and (and (and (and (and (and $x115 $x130) $x129) $x67) $x48) $x10) $x76)))
 (let (($x6 (and $x142 $x34)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x132 (or false (or false (and (and true (or $x144 $x83)) (or $x90 $x98))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x38 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x146 (and (and (and $x38 $x127) $x6) $x26)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (and $x84 $x146)))
 (let (($x114 (= $x60 true)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x24 $x114)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x9 $x82)))
 (let (($x74 (forall ((input.ind-%var143X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var143X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var143X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var142X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var142X)))
 (= $x93 false)))
 ))
 (let (($x22 (and $x104 $x74)))
 (let (($x110 (and $x22 $x141)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x40 $x110)))
 (let (($x85 (=> $x86 $x103)))
 (not $x85)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x56)))
 (let (($x97 (= ?x71 input.spec-%var-n-1)))
 (let (($x87 (= $x97 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x42 (concat ?x110 (concat ?x114 ?x146)))))
 (let (($x103 (= input.dst.llvm-%m ?x29)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x61 (concat ?x55 (concat ?x11 ?x27)))))
 (let (($x73 (= input.dst.llvm-%n ?x94)))
 (let (($x85 (and $x73 $x103)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x41)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x70)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x10 $x76)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x7 $x142)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x67 $x33)))
 (let (($x135 (not $x137)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x129 $x25)))
 (let (($x119 (and (not $x134) $x135)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x36 $x123)))
 (let (($x130 (not $x128)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x121 $x98)))
 (let (($x122 (and (not $x138) $x130)))
 (let (($x30 (and (and (and (and (and (and $x122 $x119) $x5) $x54) $x69) $x6) $x116)))
 (let (($x43 (and $x30 $x89)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x19 (or false (or false (and (and true (or $x96 $x106)) (or $x63 $x112))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x19)))
 (let (($x107 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x21 (and (and (and $x107 $x139) $x43) $x85)))
 (let (($x144 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x143 (and $x144 $x21)))
 (let (($x12 (= $x143 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (and $x17 $x12)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x95 (and $x31 $x65)))
 (let (($x59 (forall ((input.ind-%var153X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var153X)))
 (=> $x104 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var153X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var152X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var152X)))
 (= $x104 false)))
 ))
 (let (($x99 (and $x32 $x59)))
 (let (($x78 (and $x99 $x95)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x40 $x78)))
 (let (($x64 (=> $x113 $x87)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x56)))
 (let (($x97 (= ?x71 input.spec-%var-n-1)))
 (let (($x87 (= $x97 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x42 (concat ?x110 (concat ?x114 ?x146)))))
 (let (($x103 (= input.dst.llvm-%m ?x29)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x61 (concat ?x55 (concat ?x11 ?x27)))))
 (let (($x73 (= input.dst.llvm-%n ?x94)))
 (let (($x85 (and $x73 $x103)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x41)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x70)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x10 $x76)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x7 $x142)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x67 $x33)))
 (let (($x135 (not $x137)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x129 $x25)))
 (let (($x119 (and (not $x134) $x135)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x36 $x123)))
 (let (($x130 (not $x128)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x121 $x98)))
 (let (($x122 (and (not $x138) $x130)))
 (let (($x30 (and (and (and (and (and (and $x122 $x119) $x5) $x54) $x69) $x6) $x116)))
 (let (($x43 (and $x30 $x89)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x19 (or false (or false (and (and true (or $x96 $x106)) (or $x63 $x112))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x19)))
 (let (($x107 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x21 (and (and (and $x107 $x139) $x43) $x85)))
 (let (($x144 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x143 (and $x144 $x21)))
 (let (($x12 (= $x143 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (and $x17 $x12)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x95 (and $x31 $x65)))
 (let (($x59 (forall ((input.ind-%var153X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var153X)))
 (=> $x104 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var153X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var152X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var152X)))
 (= $x104 false)))
 ))
 (let (($x99 (and $x32 $x59)))
 (let (($x78 (and $x99 $x95)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x40 $x78)))
 (let (($x64 (=> $x113 $x87)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 ((_ extract 1 0) input.spec-%var-n-1)))
 (let (($x80 (= (_ bv0 2) ?x93)))
 (let (($x24 (= $x80 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x56 (concat ?x78 (concat ?x12 ?x21)))))
 (let (($x97 (= input.dst.llvm-%m ?x71)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x86 (concat ?x114 (concat ?x42 ?x73)))))
 (let (($x103 (= input.dst.llvm-%n ?x29)))
 (let (($x87 (and $x103 $x97)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x140)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x124)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x70)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (and $x6 $x116)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x34 $x30)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x54 $x49)))
 (let (($x10 (not $x7)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x5 $x77)))
 (let (($x145 (and (not $x48) $x10)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x33 $x137)))
 (let (($x119 (not $x135)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x133 $x112)))
 (let (($x131 (and (not $x67) $x119)))
 (let (($x27 (and (and (and (and (and (and $x131 $x145) $x142) $x109) $x41) $x43) $x126)))
 (let (($x88 (and $x27 $x61)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x25 (or false (or false (and (and true (or $x58 $x121)) (or $x123 $x128))))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x25)))
 (let (($x118 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x136 (and (and (and $x118 $x14) $x88) $x87)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x90 (and $x96 $x136)))
 (let (($x26 (= $x90 true)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (and $x108 $x26)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x79 (and $x39 $x52)))
 (let (($x83 (forall ((input.ind-%var163X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var163X)))
 (=> $x32 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var163X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var162X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var162X)))
 (= $x32 false)))
 ))
 (let (($x72 (and $x111 $x83)))
 (let (($x91 (and $x72 $x79)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x40 $x91)))
 (let (($x22 (=> $x8 $x24)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 ((_ extract 1 0) input.spec-%var-n-1)))
 (let (($x80 (= (_ bv0 2) ?x93)))
 (let (($x24 (= $x80 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x56 (concat ?x78 (concat ?x12 ?x21)))))
 (let (($x97 (= input.dst.llvm-%m ?x71)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x86 (concat ?x114 (concat ?x42 ?x73)))))
 (let (($x103 (= input.dst.llvm-%n ?x29)))
 (let (($x87 (and $x103 $x97)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x140)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x124)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x70)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (and $x6 $x116)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x34 $x30)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x54 $x49)))
 (let (($x10 (not $x7)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x5 $x77)))
 (let (($x145 (and (not $x48) $x10)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x33 $x137)))
 (let (($x119 (not $x135)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x133 $x112)))
 (let (($x131 (and (not $x67) $x119)))
 (let (($x27 (and (and (and (and (and (and $x131 $x145) $x142) $x109) $x41) $x43) $x126)))
 (let (($x88 (and $x27 $x61)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x25 (or false (or false (and (and true (or $x58 $x121)) (or $x123 $x128))))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x25)))
 (let (($x118 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x136 (and (and (and $x118 $x14) $x88) $x87)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x90 (and $x96 $x136)))
 (let (($x26 (= $x90 true)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (and $x108 $x26)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x79 (and $x39 $x52)))
 (let (($x83 (forall ((input.ind-%var163X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var163X)))
 (=> $x32 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var163X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var162X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var162X)))
 (= $x32 false)))
 ))
 (let (($x72 (and $x111 $x83)))
 (let (($x91 (and $x72 $x79)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x40 $x91)))
 (let (($x22 (=> $x8 $x24)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1bfca830)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb8799e70)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb8799e73)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1bfca833)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb8799e70)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1bfca830)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb8799e70) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x17 (= $x45 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x44 (concat ?x79 (concat ?x90 ?x87)))))
 (let (($x80 (= input.dst.llvm-%m ?x93)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x65 (concat ?x143 (concat ?x23 ?x29)))))
 (let (($x71 (= input.dst.llvm-%n ?x113)))
 (let (($x24 (and $x71 $x80)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x50)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x88)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x11)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x89 $x124)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x37 $x126)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x69 $x109)))
 (let (($x34 (not $x55)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x76 $x142)))
 (let (($x28 (and (not $x47) $x34)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x54 $x49)))
 (let (($x10 (not $x7)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x123 $x36)))
 (let (($x13 (and (not $x15) $x10)))
 (let (($x42 (and (and (and (and (and (and $x13 $x28) $x116) $x41) $x27) $x61) $x102)))
 (let (($x73 (and $x42 $x82)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x25)))
 (let (($x5 (or false (or false (and (and true (or $x14 $x64)) (or $x33 $x137))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x98 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x63 (and (and (and $x98 $x48) $x73) $x24)))
 (let (($x139 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x85 (and $x139 $x63)))
 (let (($x94 (= $x85 true)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x134 $x94)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x118 $x9)))
 (let (($x132 (forall ((input.ind-%var181X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var181X)))
 (=> $x84 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var181X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var180X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var180X)))
 (= $x84 false)))
 ))
 (let (($x106 (and $x144 $x132)))
 (let (($x38 (and $x106 $x92)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x62 $x38)))
 (let (($x99 (=> $x18 $x17)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x17 (= $x45 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x44 (concat ?x79 (concat ?x90 ?x87)))))
 (let (($x80 (= input.dst.llvm-%m ?x93)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x65 (concat ?x143 (concat ?x23 ?x29)))))
 (let (($x71 (= input.dst.llvm-%n ?x113)))
 (let (($x24 (and $x71 $x80)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x50)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x88)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x11)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x89 $x124)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x37 $x126)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x69 $x109)))
 (let (($x34 (not $x55)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x76 $x142)))
 (let (($x28 (and (not $x47) $x34)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x54 $x49)))
 (let (($x10 (not $x7)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x123 $x36)))
 (let (($x13 (and (not $x15) $x10)))
 (let (($x42 (and (and (and (and (and (and $x13 $x28) $x116) $x41) $x27) $x61) $x102)))
 (let (($x73 (and $x42 $x82)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x25)))
 (let (($x5 (or false (or false (and (and true (or $x14 $x64)) (or $x33 $x137))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x98 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x63 (and (and (and $x98 $x48) $x73) $x24)))
 (let (($x139 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x85 (and $x139 $x63)))
 (let (($x94 (= $x85 true)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x134 $x94)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x118 $x9)))
 (let (($x132 (forall ((input.ind-%var181X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var181X)))
 (=> $x84 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var181X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var180X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var180X)))
 (= $x84 false)))
 ))
 (let (($x106 (and $x144 $x132)))
 (let (($x38 (and $x106 $x92)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x62 $x38)))
 (let (($x99 (=> $x18 $x17)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf34ff6e8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7fbffefc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fbffeff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf34ff6eb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7fbffefc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf34ff6e8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf34ff6e8) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x59 (= $x120 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x104 (concat ?x92 (concat ?x85 ?x24)))))
 (let (($x17 (= input.dst.llvm-%m ?x45)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x26 (concat ?x136 (concat ?x8 ?x113)))))
 (let (($x93 (= input.dst.llvm-%n ?x91)))
 (let (($x99 (and $x93 $x17)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x141)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x73)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (and $x140 $x88)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x114 $x102)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x30 $x41)))
 (let (($x37 (not $x60)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x70 $x116)))
 (let (($x43 (and (not $x110) $x37)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x69 $x109)))
 (let (($x34 (not $x55)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x33 $x53)))
 (let (($x86 (and (not $x6) $x34)))
 (let (($x23 (and (and (and (and (and (and $x86 $x43) $x124) $x27) $x42) $x82) $x101)))
 (let (($x29 (and $x23 $x21)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x76 (or false (or false (and (and true (or $x48 $x22)) (or $x54 $x49))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x76)))
 (let (($x133 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x97 (and (and (and $x133 $x47) $x29) $x99)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x146 (and $x25 $x97)))
 (let (($x111 (= $x146 true)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x77 $x111)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x72 (and $x98 $x39)))
 (let (($x58 (forall ((input.ind-%var199X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var199X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var199X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var198X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var198X)))
 (= $x66 false)))
 ))
 (let (($x19 (and $x127 $x58)))
 (let (($x40 (and $x19 $x72)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x81 $x40)))
 (let (($x83 (=> $x68 $x59)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x59 (= $x120 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x104 (concat ?x92 (concat ?x85 ?x24)))))
 (let (($x17 (= input.dst.llvm-%m ?x45)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x26 (concat ?x136 (concat ?x8 ?x113)))))
 (let (($x93 (= input.dst.llvm-%n ?x91)))
 (let (($x99 (and $x93 $x17)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x141)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x73)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (and $x140 $x88)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x114 $x102)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x30 $x41)))
 (let (($x37 (not $x60)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x70 $x116)))
 (let (($x43 (and (not $x110) $x37)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x69 $x109)))
 (let (($x34 (not $x55)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x33 $x53)))
 (let (($x86 (and (not $x6) $x34)))
 (let (($x23 (and (and (and (and (and (and $x86 $x43) $x124) $x27) $x42) $x82) $x101)))
 (let (($x29 (and $x23 $x21)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x76 (or false (or false (and (and true (or $x48 $x22)) (or $x54 $x49))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x76)))
 (let (($x133 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x97 (and (and (and $x133 $x47) $x29) $x99)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x146 (and $x25 $x97)))
 (let (($x111 (= $x146 true)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x77 $x111)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x72 (and $x98 $x39)))
 (let (($x58 (forall ((input.ind-%var199X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var199X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var199X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var198X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var198X)))
 (= $x66 false)))
 ))
 (let (($x19 (and $x127 $x58)))
 (let (($x40 (and $x19 $x72)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x81 $x40)))
 (let (($x83 (=> $x68 $x59)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000f) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xdda380a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xdda380ab)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xdda380a8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x115 (= $x107 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x31 (concat ?x72 (concat ?x146 ?x99)))))
 (let (($x59 (= input.dst.llvm-%m ?x120)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x94 (concat ?x63 (concat ?x18 ?x91)))))
 (let (($x45 (= input.dst.llvm-%n ?x38)))
 (let (($x83 (and $x45 $x59)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x56)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x29)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x103)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x50 $x73)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x143 $x101)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x126 $x27)))
 (let (($x114 (not $x78)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x11 $x124)))
 (let (($x61 (and (not $x95) $x114)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x30 $x41)))
 (let (($x37 (not $x60)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x54 $x145)))
 (let (($x65 (and (not $x89) $x37)))
 (let (($x8 (and (and (and (and (and (and $x65 $x61) $x88) $x42) $x23) $x21) $x51)))
 (let (($x113 (and $x8 $x87)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x70 (or false (or false (and (and true (or $x47 $x105)) (or $x69 $x109))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x123 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x80 (and (and (and $x123 $x110) $x113) $x83)))
 (let (($x5 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (and $x5 $x80)))
 (let (($x144 (= $x12 true)))
 (let (($x142 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x142 $x144)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x106 (and $x133 $x118)))
 (let (($x14 (forall ((input.ind-%var217X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var217X)))
 (=> $x16 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var217X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var216X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var216X)))
 (= $x16 false)))
 ))
 (let (($x129 (and $x117 $x14)))
 (let (($x62 (and $x129 $x106)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x32 (and $x138 $x62)))
 (let (($x125 (=> $x32 $x115)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x115 (= $x107 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x31 (concat ?x72 (concat ?x146 ?x99)))))
 (let (($x59 (= input.dst.llvm-%m ?x120)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x94 (concat ?x63 (concat ?x18 ?x91)))))
 (let (($x45 (= input.dst.llvm-%n ?x38)))
 (let (($x83 (and $x45 $x59)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x56)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x29)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x103)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x50 $x73)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x143 $x101)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x126 $x27)))
 (let (($x114 (not $x78)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x11 $x124)))
 (let (($x61 (and (not $x95) $x114)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x30 $x41)))
 (let (($x37 (not $x60)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x54 $x145)))
 (let (($x65 (and (not $x89) $x37)))
 (let (($x8 (and (and (and (and (and (and $x65 $x61) $x88) $x42) $x23) $x21) $x51)))
 (let (($x113 (and $x8 $x87)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x70 (or false (or false (and (and true (or $x47 $x105)) (or $x69 $x109))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x123 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x80 (and (and (and $x123 $x110) $x113) $x83)))
 (let (($x5 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (and $x5 $x80)))
 (let (($x144 (= $x12 true)))
 (let (($x142 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x142 $x144)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x106 (and $x133 $x118)))
 (let (($x14 (forall ((input.ind-%var217X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var217X)))
 (=> $x16 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var217X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var216X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var216X)))
 (= $x16 false)))
 ))
 (let (($x129 (and $x117 $x14)))
 (let (($x62 (and $x129 $x106)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x32 (and $x138 $x62)))
 (let (($x125 (=> $x32 $x115)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (forall ((input.ind-%var239X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var239X))))
 ))
 (let (($x57 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x58 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var238X)))
 (= false $x58)))
 ))
 (let (($x155 (and $x57 $x154)))
 (let (($x156 (= $x155 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x115 (concat ?x62 (concat ?x144 ?x80)))))
 (let (($x132 (= input.dst.llvm-%m ?x125)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x40 (concat ?x146 (concat ?x31 ?x45)))))
 (let (($x59 (= input.dst.llvm-%n ?x120)))
 (let (($x36 (and $x59 $x132)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x24)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x67)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x21 $x51)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x141 $x8)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (and $x42 $x79)))
 (let (($x50 (not $x143)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x88 $x52)))
 (let (($x103 (and (not $x102) $x50)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x27 $x78)))
 (let (($x61 (not $x114)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x28 $x109)))
 (let (($x20 (and (not $x126) $x61)))
 (let (($x91 (and (and (and (and (and (and $x20 $x103) $x101) $x136) $x56) $x113) $x44)))
 (let (($x104 (and $x91 $x94)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x124 (or false (or false (and (and true (or $x108 $x54)) (or $x41 $x60))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x90 (and (and (and $x53 $x140) $x104) $x36)))
 (let (($x47 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x127 (and $x47 $x90)))
 (let (($x98 (= $x127 true)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x10 $x98)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x81 (and $x49 $x19)))
 (let (($x131 (forall ((input.ind-%var227X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var227X)))
 (=> $x117 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var227X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var226X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var226X)))
 (= $x117 false)))
 ))
 (let (($x22 (and $x25 $x131)))
 (let (($x84 (and $x22 $x81)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x138 $x84)))
 (let (($x157 (=> $x100 $x156)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (forall ((input.ind-%var239X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var239X))))
 ))
 (let (($x57 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x58 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var238X)))
 (= false $x58)))
 ))
 (let (($x155 (and $x57 $x154)))
 (let (($x156 (= $x155 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x115 (concat ?x62 (concat ?x144 ?x80)))))
 (let (($x132 (= input.dst.llvm-%m ?x125)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x40 (concat ?x146 (concat ?x31 ?x45)))))
 (let (($x59 (= input.dst.llvm-%n ?x120)))
 (let (($x36 (and $x59 $x132)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x24)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x67)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x21 $x51)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x141 $x8)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (and $x42 $x79)))
 (let (($x50 (not $x143)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x88 $x52)))
 (let (($x103 (and (not $x102) $x50)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x27 $x78)))
 (let (($x61 (not $x114)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x28 $x109)))
 (let (($x20 (and (not $x126) $x61)))
 (let (($x91 (and (and (and (and (and (and $x20 $x103) $x101) $x136) $x56) $x113) $x44)))
 (let (($x104 (and $x91 $x94)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x124 (or false (or false (and (and true (or $x108 $x54)) (or $x41 $x60))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x90 (and (and (and $x53 $x140) $x104) $x36)))
 (let (($x47 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x127 (and $x47 $x90)))
 (let (($x98 (= $x127 true)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x10 $x98)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x81 (and $x49 $x19)))
 (let (($x131 (forall ((input.ind-%var227X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var227X)))
 (=> $x117 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var227X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var226X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var226X)))
 (= $x117 false)))
 ))
 (let (($x22 (and $x25 $x131)))
 (let (($x84 (and $x22 $x81)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x138 $x84)))
 (let (($x157 (=> $x100 $x156)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.ind-%var238X!3 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var238X!3 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x947d00b0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe5de32a0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe5de32a3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x947d00b3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe5de32a0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x947d00b0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x147 (forall ((input.ind-%var277X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var277X))))
 ))
 (let (($x64 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x137 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var276X)))
 (= false $x137)))
 ))
 (let (($x134 (and $x64 $x147)))
 (let (($x150 (= $x134 true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x74 (concat ?x84 (concat ?x98 ?x90)))))
 (let (($x148 (= input.dst.llvm-%m ?x57)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x32 (concat ?x144 (concat ?x115 ?x59)))))
 (let (($x132 (= input.dst.llvm-%n ?x125)))
 (let (($x152 (and $x132 $x148)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x111)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x17)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x113 $x44)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x87 $x91)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x136 $x63)))
 (let (($x21 (not $x141)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x101 $x92)))
 (let (($x29 (and (not $x23) $x21)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x79 $x143)))
 (let (($x103 (not $x50)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x30 $x60)))
 (let (($x73 (and (not $x42) $x103)))
 (let (($x45 (and (and (and (and (and (and $x73 $x29) $x8) $x93) $x24) $x104) $x85)))
 (let (($x39 (and $x45 $x40)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x52 (or false (or false (and (and true (or $x15 $x28)) (or $x78 $x114))))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x52)))
 (let (($x89 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x155 (and (and (and $x89 $x82) $x39) $x152)))
 (let (($x108 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x156 (and $x108 $x155)))
 (let (($x157 (= $x156 true)))
 (let (($x86 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and $x86 $x157)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x55 $x158)))
 (let (($x105 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var265X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var265X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var264X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var264X)))
 (= $x25 false)))
 ))
 (let (($x33 (and $x48 $x105)))
 (let (($x69 (and $x33 $x6)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x138 $x69)))
 (let (($x151 (=> $x83 $x150)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x147 (forall ((input.ind-%var277X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var277X))))
 ))
 (let (($x64 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x137 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var276X)))
 (= false $x137)))
 ))
 (let (($x134 (and $x64 $x147)))
 (let (($x150 (= $x134 true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x74 (concat ?x84 (concat ?x98 ?x90)))))
 (let (($x148 (= input.dst.llvm-%m ?x57)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x32 (concat ?x144 (concat ?x115 ?x59)))))
 (let (($x132 (= input.dst.llvm-%n ?x125)))
 (let (($x152 (and $x132 $x148)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x111)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x17)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x113 $x44)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x87 $x91)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x136 $x63)))
 (let (($x21 (not $x141)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x101 $x92)))
 (let (($x29 (and (not $x23) $x21)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x79 $x143)))
 (let (($x103 (not $x50)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x30 $x60)))
 (let (($x73 (and (not $x42) $x103)))
 (let (($x45 (and (and (and (and (and (and $x73 $x29) $x8) $x93) $x24) $x104) $x85)))
 (let (($x39 (and $x45 $x40)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x52 (or false (or false (and (and true (or $x15 $x28)) (or $x78 $x114))))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x52)))
 (let (($x89 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x155 (and (and (and $x89 $x82) $x39) $x152)))
 (let (($x108 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x156 (and $x108 $x155)))
 (let (($x157 (= $x156 true)))
 (let (($x86 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and $x86 $x157)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x55 $x158)))
 (let (($x105 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var265X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var265X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var264X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var264X)))
 (= $x25 false)))
 ))
 (let (($x33 (and $x48 $x105)))
 (let (($x69 (and $x33 $x6)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x138 $x69)))
 (let (($x151 (=> $x83 $x150)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.ind-%var276X!3 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var276X!3 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x947d00b0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe5de32a0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe5de32a3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x947d00b3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe5de32a0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x947d00b0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x187 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul input.ind-%var319X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x178))))
 (let ((?x149 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var319X)))
 (let (($x7 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var319X)))
 (=> $x7 (= ?x149 ?x184))))))))
 ))
 (let (($x76 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var318X)))
 (= $x7 (and (bvule (_ bv0 32) input.ind-%var318X) (bvult input.ind-%var318X input.dst.llvm-%n)))))
 ))
 (let (($x188 (and $x76 $x187)))
 (let (($x189 (= $x188 true)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x137 (concat ?x6 (concat ?x156 ?x152)))))
 (let (($x64 (= input.dst.llvm-%m ?x14)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x19 (concat ?x127 (concat ?x58 ?x125)))))
 (let (($x57 (= input.dst.llvm-%n ?x100)))
 (let (($x128 (and $x57 $x64)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x99)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x39)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (and $x94 $x17)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x68 $x85)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x56 $x93)))
 (let (($x87 (not $x146)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x51 $x8)))
 (let (($x18 (and (not $x97) $x87)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x136 $x63)))
 (let (($x21 (not $x141)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x78 $x27)))
 (let (($x72 (and (not $x71) $x21)))
 (let (($x115 (and (and (and (and (and (and $x72 $x18) $x44) $x24) $x45) $x40) $x154)))
 (let (($x59 (and $x115 $x118)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x101 (or false (or false (and (and true (or $x82 $x153)) (or $x79 $x143))))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x109 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x147 (and (and (and $x109 $x23) $x59) $x128)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (and $x140 $x147)))
 (let (($x150 (= $x134 true)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and $x102 $x150)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x89 $x151)))
 (let (($x70 (forall ((input.ind-%var307X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var307X)))
 (=> $x5 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var307X) (_ bv0 32)))))
 ))
 (let (($x47 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var306X)))
 (= $x5 false)))
 ))
 (let (($x54 (and $x47 $x70)))
 (let (($x41 (and $x54 $x139)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x36 (and $x112 $x41)))
 (let (($x190 (=> $x36 $x189)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x187 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul input.ind-%var319X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x178))))
 (let ((?x149 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var319X)))
 (let (($x7 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var319X)))
 (=> $x7 (= ?x149 ?x184))))))))
 ))
 (let (($x76 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var318X)))
 (= $x7 (and (bvule (_ bv0 32) input.ind-%var318X) (bvult input.ind-%var318X input.dst.llvm-%n)))))
 ))
 (let (($x188 (and $x76 $x187)))
 (let (($x189 (= $x188 true)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x137 (concat ?x6 (concat ?x156 ?x152)))))
 (let (($x64 (= input.dst.llvm-%m ?x14)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x19 (concat ?x127 (concat ?x58 ?x125)))))
 (let (($x57 (= input.dst.llvm-%n ?x100)))
 (let (($x128 (and $x57 $x64)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x99)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x39)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (and $x94 $x17)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x68 $x85)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x56 $x93)))
 (let (($x87 (not $x146)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x51 $x8)))
 (let (($x18 (and (not $x97) $x87)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x136 $x63)))
 (let (($x21 (not $x141)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x78 $x27)))
 (let (($x72 (and (not $x71) $x21)))
 (let (($x115 (and (and (and (and (and (and $x72 $x18) $x44) $x24) $x45) $x40) $x154)))
 (let (($x59 (and $x115 $x118)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x101 (or false (or false (and (and true (or $x82 $x153)) (or $x79 $x143))))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x109 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x147 (and (and (and $x109 $x23) $x59) $x128)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x134 (and $x140 $x147)))
 (let (($x150 (= $x134 true)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and $x102 $x150)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x89 $x151)))
 (let (($x70 (forall ((input.ind-%var307X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var307X)))
 (=> $x5 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var307X) (_ bv0 32)))))
 ))
 (let (($x47 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var306X)))
 (= $x5 false)))
 ))
 (let (($x54 (and $x47 $x70)))
 (let (($x41 (and $x54 $x139)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x36 (and $x112 $x41)))
 (let (($x190 (=> $x36 $x189)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var319X!1 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var318X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.ind-%var319X!1 () (_ BitVec 32)
    #x3fffffc0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #xf8
    (ite (= x!0 #xfffffff0) #x01
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x162 (forall ((input.ind-%var359X (_ BitVec 32)) )(let ((?x105 (bvadd (bvmul input.ind-%var359X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x120))))
 (=> false (= (_ bv0 32) ?x169))))))
 ))
 (let (($x187 (forall ((input.ind-%var358X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var358X) (bvult input.ind-%var358X (_ bv0 32)))))
 ))
 (let (($x163 (and $x187 $x162)))
 (let (($x161 (= $x163 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x7 (concat ?x139 (concat ?x134 ?x128)))))
 (let (($x117 (= input.dst.llvm-%m ?x135)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x157 (concat ?x155 (concat ?x83 ?x100)))))
 (let (($x14 (= input.dst.llvm-%n ?x69)))
 (let (($x10 (and $x14 $x117)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x106)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x59)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x107)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x111 $x39)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x144 $x154)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x91 $x24)))
 (let (($x68 (not $x12)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x67 $x44)))
 (let (($x104 (and (not $x62) $x68)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x56 $x93)))
 (let (($x87 (not $x146)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x79 $x9)))
 (let (($x32 (and (not $x113) $x87)))
 (let (($x58 (and (and (and (and (and (and $x32 $x104) $x17) $x45) $x115) $x118) $x96)))
 (let (($x125 (and $x58 $x90)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x51 (or false (or false (and (and true (or $x23 $x130)) (or $x136 $x63))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x30 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x149 (and (and (and $x30 $x97) $x125) $x10)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x75 (and $x52 $x149)))
 (let (($x173 (= $x75 true)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x92 $x173)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x182 (and $x109 $x174)))
 (let (($x15 (forall ((input.ind-%var349X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var349X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var349X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var348X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var348X)))
 (= $x116 false)))
 ))
 (let (($x124 (and $x110 $x15)))
 (let (($x183 (and $x124 $x182)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x119 $x183)))
 (let (($x164 (=> $x179 $x161)))
 (not $x164))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x162 (forall ((input.ind-%var359X (_ BitVec 32)) )(let ((?x105 (bvadd (bvmul input.ind-%var359X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x120))))
 (=> false (= (_ bv0 32) ?x169))))))
 ))
 (let (($x187 (forall ((input.ind-%var358X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var358X) (bvult input.ind-%var358X (_ bv0 32)))))
 ))
 (let (($x163 (and $x187 $x162)))
 (let (($x161 (= $x163 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x7 (concat ?x139 (concat ?x134 ?x128)))))
 (let (($x117 (= input.dst.llvm-%m ?x135)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x157 (concat ?x155 (concat ?x83 ?x100)))))
 (let (($x14 (= input.dst.llvm-%n ?x69)))
 (let (($x10 (and $x14 $x117)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x106)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x59)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x107)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x111 $x39)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x144 $x154)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x91 $x24)))
 (let (($x68 (not $x12)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x67 $x44)))
 (let (($x104 (and (not $x62) $x68)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x56 $x93)))
 (let (($x87 (not $x146)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x79 $x9)))
 (let (($x32 (and (not $x113) $x87)))
 (let (($x58 (and (and (and (and (and (and $x32 $x104) $x17) $x45) $x115) $x118) $x96)))
 (let (($x125 (and $x58 $x90)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x51 (or false (or false (and (and true (or $x23 $x130)) (or $x136 $x63))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x30 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x149 (and (and (and $x30 $x97) $x125) $x10)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x75 (and $x52 $x149)))
 (let (($x173 (= $x75 true)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x92 $x173)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x182 (and $x109 $x174)))
 (let (($x15 (forall ((input.ind-%var349X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var349X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var349X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var348X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var348X)))
 (= $x116 false)))
 ))
 (let (($x124 (and $x110 $x15)))
 (let (($x183 (and $x124 $x182)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x119 $x183)))
 (let (($x164 (=> $x179 $x161)))
 (not $x164))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var383X (_ BitVec 32)) )(let ((?x176 (bvadd (bvmul input.ind-%var383X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x33))))
 (=> false (= (_ bv0 32) ?x48))))))
 ))
 (let (($x161 (forall ((input.ind-%var382X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var382X) (bvult input.ind-%var382X input.dst.llvm-%m))))
 ))
 (let (($x175 (and $x161 $x177)))
 (let (($x178 (= $x175 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x184 (concat ?x182 (concat ?x75 ?x10)))))
 (let (($x185 (= input.dst.llvm-%m ?x181)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x150 (concat ?x147 (concat ?x36 ?x69)))))
 (let (($x135 (= input.dst.llvm-%n ?x41)))
 (let (($x186 (and $x135 $x185)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x74)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x125)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x99 $x59)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x127 $x96)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x85 $x45)))
 (let (($x144 (not $x84)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x31 $x17)))
 (let (($x40 (and (not $x81) $x144)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x91 $x24)))
 (let (($x68 (not $x12)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x136 $x29)))
 (let (($x19 (and (not $x94) $x68)))
 (let (($x83 (and (and (and (and (and (and $x19 $x40) $x39) $x115) $x58) $x90) $x76)))
 (let (($x100 (and $x83 $x152)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x67 (or false (or false (and (and true (or $x97 $x22)) (or $x56 $x93))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x95 (and (and (and $x78 $x62) $x100) $x186)))
 (let (($x101 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x105 (and $x101 $x95)))
 (let (($x160 (= $x105 true)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x8 $x160)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x30 $x168)))
 (let (($x82 (forall ((input.ind-%var373X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var373X)))
 (=> $x34 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var373X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var372X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var372X)))
 (= $x34 false)))
 ))
 (let (($x88 (and $x11 $x82)))
 (let (($x131 (and $x88 $x142)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x189 $x131)))
 (let (($x122 (=> $x66 $x178)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var383X (_ BitVec 32)) )(let ((?x176 (bvadd (bvmul input.ind-%var383X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x33))))
 (=> false (= (_ bv0 32) ?x48))))))
 ))
 (let (($x161 (forall ((input.ind-%var382X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var382X) (bvult input.ind-%var382X input.dst.llvm-%m))))
 ))
 (let (($x175 (and $x161 $x177)))
 (let (($x178 (= $x175 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x184 (concat ?x182 (concat ?x75 ?x10)))))
 (let (($x185 (= input.dst.llvm-%m ?x181)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x150 (concat ?x147 (concat ?x36 ?x69)))))
 (let (($x135 (= input.dst.llvm-%n ?x41)))
 (let (($x186 (and $x135 $x185)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x74)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x125)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x99 $x59)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x127 $x96)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x85 $x45)))
 (let (($x144 (not $x84)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x31 $x17)))
 (let (($x40 (and (not $x81) $x144)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x91 $x24)))
 (let (($x68 (not $x12)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x136 $x29)))
 (let (($x19 (and (not $x94) $x68)))
 (let (($x83 (and (and (and (and (and (and $x19 $x40) $x39) $x115) $x58) $x90) $x76)))
 (let (($x100 (and $x83 $x152)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x67 (or false (or false (and (and true (or $x97 $x22)) (or $x56 $x93))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x95 (and (and (and $x78 $x62) $x100) $x186)))
 (let (($x101 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x105 (and $x101 $x95)))
 (let (($x160 (= $x105 true)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x8 $x160)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x30 $x168)))
 (let (($x82 (forall ((input.ind-%var373X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var373X)))
 (=> $x34 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var373X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var372X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var372X)))
 (= $x34 false)))
 ))
 (let (($x88 (and $x11 $x82)))
 (let (($x131 (and $x88 $x142)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x189 $x131)))
 (let (($x122 (=> $x66 $x178)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var382X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf8d31800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00535054)
  (define-fun input.ind-%var382X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00535057)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf8d31803)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00535054)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf8d31800)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf8d31800) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (forall ((input.ind-%var411X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var411X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x65))))
 (=> false (= (_ bv0 32) ?x108))))))
 ))
 (let (($x122 (forall ((input.ind-%var410X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var410X) (bvult input.ind-%var410X input.dst.llvm-%n))))
 ))
 (let (($x159 (and $x122 $x120)))
 (let (($x169 (= $x159 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x165 (concat ?x131 (concat ?x160 ?x95)))))
 (let (($x163 (= input.dst.llvm-%m ?x162)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x183 (concat ?x75 (concat ?x184 ?x135)))))
 (let (($x185 (= input.dst.llvm-%n ?x181)))
 (let (($x161 (and $x185 $x163)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x128)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x190)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x90 $x76)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x106 $x83)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x115 $x6)))
 (let (($x99 (not $x127)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x39 $x158)))
 (let (($x132 (and (not $x154) $x99)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x45 $x84)))
 (let (($x40 (not $x144)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x18 $x93)))
 (let (($x107 (and (not $x85) $x40)))
 (let (($x69 (and (and (and (and (and (and $x107 $x132) $x96) $x155) $x74) $x100) $x137)))
 (let (($x7 (and $x69 $x150)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x17 (or false (or false (and (and true (or $x187 $x136)) (or $x24 $x12))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x9 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x176 (and (and (and $x9 $x111) $x7) $x161)))
 (let (($x97 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (and $x97 $x176)))
 (let (($x26 (= $x80 true)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x21 $x26)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x63 $x55)))
 (let (($x73 (forall ((input.ind-%var401X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var401X)))
 (=> $x11 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var401X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var400X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var400X)))
 (= $x11 false)))
 ))
 (let (($x130 (and $x52 $x73)))
 (let (($x126 (and $x130 $x77)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x13 (and $x189 $x126)))
 (let (($x102 (=> $x13 $x169)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (forall ((input.ind-%var411X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var411X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x65))))
 (=> false (= (_ bv0 32) ?x108))))))
 ))
 (let (($x122 (forall ((input.ind-%var410X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var410X) (bvult input.ind-%var410X input.dst.llvm-%n))))
 ))
 (let (($x159 (and $x122 $x120)))
 (let (($x169 (= $x159 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x165 (concat ?x131 (concat ?x160 ?x95)))))
 (let (($x163 (= input.dst.llvm-%m ?x162)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x183 (concat ?x75 (concat ?x184 ?x135)))))
 (let (($x185 (= input.dst.llvm-%n ?x181)))
 (let (($x161 (and $x185 $x163)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x128)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x190)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x90 $x76)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x106 $x83)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x115 $x6)))
 (let (($x99 (not $x127)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x39 $x158)))
 (let (($x132 (and (not $x154) $x99)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x45 $x84)))
 (let (($x40 (not $x144)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x18 $x93)))
 (let (($x107 (and (not $x85) $x40)))
 (let (($x69 (and (and (and (and (and (and $x107 $x132) $x96) $x155) $x74) $x100) $x137)))
 (let (($x7 (and $x69 $x150)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x17 (or false (or false (and (and true (or $x187 $x136)) (or $x24 $x12))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x9 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x176 (and (and (and $x9 $x111) $x7) $x161)))
 (let (($x97 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (and $x97 $x176)))
 (let (($x26 (= $x80 true)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x21 $x26)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x63 $x55)))
 (let (($x73 (forall ((input.ind-%var401X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var401X)))
 (=> $x11 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var401X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var400X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var400X)))
 (= $x11 false)))
 ))
 (let (($x130 (and $x52 $x73)))
 (let (($x126 (and $x130 $x77)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x13 (and $x189 $x126)))
 (let (($x102 (=> $x13 $x169)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var410X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7a9ffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7a9fffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7a9ffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00802104)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var410X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000b8480)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00802107)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000b8483)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00802104)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000b8480)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00802104) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= false true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x138 (concat ?x126 (concat ?x26 ?x176)))))
 (let (($x178 (= input.dst.llvm-%m ?x175)))
 (let ((?x185 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x66 (concat ?x160 (concat ?x165 ?x185)))))
 (let (($x163 (= input.dst.llvm-%n ?x162)))
 (let (($x122 (and $x163 $x178)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x173)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x180)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x190)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x100 $x137)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x152 $x69)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x155 $x147)))
 (let (($x90 (not $x106)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x96 $x139)))
 (let (($x125 (and (not $x58) $x90)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x6 $x127)))
 (let (($x132 (not $x99)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x91 $x12)))
 (let (($x59 (and (not $x115) $x132)))
 (let (($x135 (and (and (and (and (and (and $x59 $x125) $x83) $x14) $x128) $x7) $x134)))
 (let (($x174 (and $x135 $x183)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x158 (or false (or false (and (and true (or $x60 $x18)) (or $x84 $x144))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x86 (and (and (and $x94 $x118) $x174) $x122)))
 (let (($x187 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x89 (and $x187 $x86)))
 (let (($x98 (= $x89 true)))
 (let (($x32 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and $x32 $x98)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x146 $x54)))
 (let (($x22 (forall ((input.ind-%var429X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var429X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var429X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var428X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var428X)))
 (= $x52 false)))
 ))
 (let (($x79 (and $x23 $x22)))
 (let (($x64 (and $x79 $x43)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x189 $x64)))
 (let (($x65 (=> $x53 $x42)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= false true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x138 (concat ?x126 (concat ?x26 ?x176)))))
 (let (($x178 (= input.dst.llvm-%m ?x175)))
 (let ((?x185 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x66 (concat ?x160 (concat ?x165 ?x185)))))
 (let (($x163 (= input.dst.llvm-%n ?x162)))
 (let (($x122 (and $x163 $x178)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x173)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x180)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x190)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x100 $x137)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x152 $x69)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x155 $x147)))
 (let (($x90 (not $x106)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x96 $x139)))
 (let (($x125 (and (not $x58) $x90)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x6 $x127)))
 (let (($x132 (not $x99)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x91 $x12)))
 (let (($x59 (and (not $x115) $x132)))
 (let (($x135 (and (and (and (and (and (and $x59 $x125) $x83) $x14) $x128) $x7) $x134)))
 (let (($x174 (and $x135 $x183)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x158 (or false (or false (and (and true (or $x60 $x18)) (or $x84 $x144))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x86 (and (and (and $x94 $x118) $x174) $x122)))
 (let (($x187 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x89 (and $x187 $x86)))
 (let (($x98 (= $x89 true)))
 (let (($x32 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and $x32 $x98)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x146 $x54)))
 (let (($x22 (forall ((input.ind-%var429X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var429X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var429X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var428X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var428X)))
 (= $x52 false)))
 ))
 (let (($x79 (and $x23 $x22)))
 (let (($x64 (and $x79 $x43)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x189 $x64)))
 (let (($x65 (=> $x53 $x42)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x67bd5a28)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf011de2c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf011de2f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x67bd5a2b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf011de2c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x67bd5a28)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x10)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x174)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x173)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x150 $x180)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x179 $x134)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x74 $x14)))
 (let (($x152 (not $x75)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x76 $x83)))
 (let (($x36 (and (not $x149) $x152)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x155 $x147)))
 (let (($x90 (not $x106)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x84 $x45)))
 (let (($x182 (and (not $x57) $x90)))
 (let (($x165 (and (and (and (and (and (and $x182 $x36) $x137) $x128) $x135) $x183) $x16)))
 (let (($x185 (and $x165 $x168)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x158)))
 (let (($x96 (or false (or false (and (and true (or $x118 $x27)) (or $x6 $x127))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x49 (and $x58 $x185)))
 (let (($x130 (= $x49 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x42 (concat ?x43 (concat ?x89 ?x122)))))
 (let (($x47 (= input.dst.llvm-%m ?x65)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x55 (concat ?x80 (concat ?x177 ?x162)))))
 (let (($x175 (= input.dst.llvm-%n ?x13)))
 (let (($x24 (and $x175 $x47)))
 (let (($x181 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x58) $x185)))
 (let (($x30 (and $x181 $x24)))
 (let (($x111 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x141 (and $x111 $x30)))
 (let (($x78 (= $x141 true)))
 (let (($x154 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (and $x154 $x78)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x94 $x37)))
 (let (($x67 (forall ((input.ind-%var447X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var447X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var447X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var446X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var446X)))
 (= $x101 false)))
 ))
 (let (($x136 (and $x97 $x67)))
 (let (($x50 (and $x136 $x11)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x112 $x50)))
 (let (($x51 (=> $x21 $x130)))
 (not $x51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x10)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x174)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x173)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x184)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x150 $x180)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x179 $x134)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x74 $x14)))
 (let (($x152 (not $x75)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x76 $x83)))
 (let (($x36 (and (not $x149) $x152)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x155 $x147)))
 (let (($x90 (not $x106)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x84 $x45)))
 (let (($x182 (and (not $x57) $x90)))
 (let (($x165 (and (and (and (and (and (and $x182 $x36) $x137) $x128) $x135) $x183) $x16)))
 (let (($x185 (and $x165 $x168)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x158)))
 (let (($x96 (or false (or false (and (and true (or $x118 $x27)) (or $x6 $x127))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x49 (and $x58 $x185)))
 (let (($x130 (= $x49 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x42 (concat ?x43 (concat ?x89 ?x122)))))
 (let (($x47 (= input.dst.llvm-%m ?x65)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x55 (concat ?x80 (concat ?x177 ?x162)))))
 (let (($x175 (= input.dst.llvm-%n ?x13)))
 (let (($x24 (and $x175 $x47)))
 (let (($x181 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x58) $x185)))
 (let (($x30 (and $x181 $x24)))
 (let (($x111 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x141 (and $x111 $x30)))
 (let (($x78 (= $x141 true)))
 (let (($x154 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (and $x154 $x78)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x94 $x37)))
 (let (($x67 (forall ((input.ind-%var447X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var447X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var447X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var446X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var446X)))
 (= $x101 false)))
 ))
 (let (($x136 (and $x97 $x67)))
 (let (($x50 (and $x136 $x11)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x112 $x50)))
 (let (($x51 (=> $x21 $x130)))
 (not $x51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x81 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x73 (= $x81 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x130 (concat ?x50 (concat ?x78 ?x30)))))
 (let (($x108 (= input.dst.llvm-%m ?x51)))
 (let ((?x175 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x64 (concat ?x89 (concat ?x42 ?x175)))))
 (let (($x47 (= input.dst.llvm-%n ?x65)))
 (let (($x85 (and $x47 $x108)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x176)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x181)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x174)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x183 $x16)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x173 $x165)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x128 $x105)))
 (let (($x150 (not $x179)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x137 $x131)))
 (let (($x184 (and (not $x69) $x150)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x14 $x75)))
 (let (($x36 (not $x152)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x151 $x127)))
 (let (($x190 (and (not $x74) $x36)))
 (let (($x162 (and (and (and (and (and (and $x190 $x184) $x134) $x160) $x10) $x185) $x142)))
 (let (($x138 (and $x162 $x55)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x83 (or false (or false (and (and true (or $x161 $x84)) (or $x147 $x106))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x83)))
 (let (($x12 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x95 (and (and (and $x12 $x100) $x138) $x85)))
 (let (($x118 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x23 (and $x118 $x95)))
 (let (($x146 (= $x23 true)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and $x107 $x146)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x144 $x79)))
 (let (($x17 (forall ((input.ind-%var457X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var457X)))
 (=> $x97 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var457X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var456X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var456X)))
 (= $x97 false)))
 ))
 (let (($x18 (and $x187 $x17)))
 (let (($x20 (and $x18 $x189)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x112 $x20)))
 (let (($x22 (=> $x63 $x73)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x81 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x73 (= $x81 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x130 (concat ?x50 (concat ?x78 ?x30)))))
 (let (($x108 (= input.dst.llvm-%m ?x51)))
 (let ((?x175 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x64 (concat ?x89 (concat ?x42 ?x175)))))
 (let (($x47 (= input.dst.llvm-%n ?x65)))
 (let (($x85 (and $x47 $x108)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x176)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x181)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x174)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x183 $x16)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x173 $x165)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x128 $x105)))
 (let (($x150 (not $x179)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x137 $x131)))
 (let (($x184 (and (not $x69) $x150)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x14 $x75)))
 (let (($x36 (not $x152)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x151 $x127)))
 (let (($x190 (and (not $x74) $x36)))
 (let (($x162 (and (and (and (and (and (and $x190 $x184) $x134) $x160) $x10) $x185) $x142)))
 (let (($x138 (and $x162 $x55)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x83 (or false (or false (and (and true (or $x161 $x84)) (or $x147 $x106))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x83)))
 (let (($x12 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x95 (and (and (and $x12 $x100) $x138) $x85)))
 (let (($x118 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x23 (and $x118 $x95)))
 (let (($x146 (= $x23 true)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and $x107 $x146)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x144 $x79)))
 (let (($x17 (forall ((input.ind-%var457X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var457X)))
 (=> $x97 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var457X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var456X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var456X)))
 (= $x97 false)))
 ))
 (let (($x18 (and $x187 $x17)))
 (let (($x20 (and $x18 $x189)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x112 $x20)))
 (let (($x22 (=> $x63 $x73)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000c080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x72f8a824)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x04040400)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000c083)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x72f8a827)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000c080)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x72f8a824)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x72f8a824) #x00
      #x04))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2e14bffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffbffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffbffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2e14bfff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffbffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2e14bffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffbffff9) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x72)))
 (let (($x31 (= ?x136 input.dst.llvm-%n)))
 (let (($x25 (= $x31 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x73 (concat ?x20 (concat ?x146 ?x95)))))
 (let (($x32 (= input.dst.llvm-%m ?x22)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x21 (concat ?x78 (concat ?x130 ?x47)))))
 (let (($x108 (= input.dst.llvm-%n ?x51)))
 (let (($x115 (and $x108 $x32)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x98)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x178)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (and $x185 $x142)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x168 $x162)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x160 $x80)))
 (let (($x183 (not $x173)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x134 $x126)))
 (let (($x174 (and (not $x135) $x183)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x105 $x179)))
 (let (($x184 (not $x150)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x155 $x106)))
 (let (($x180 (and (not $x128) $x184)))
 (let (($x175 (and (and (and (and (and (and $x180 $x174) $x165) $x163) $x176) $x138) $x26)))
 (let (($x54 (and $x175 $x64)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x131 (or false (or false (and (and true (or $x157 $x151)) (or $x75 $x152))))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x57 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x13 (and (and (and $x57 $x7) $x54) $x115)))
 (let (($x161 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (and $x161 $x13)))
 (let (($x68 (= $x9 true)))
 (let (($x59 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x59 $x68)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x52 (and $x99 $x29)))
 (let (($x27 (forall ((input.ind-%var475X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var475X)))
 (=> $x62 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var475X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var474X)))
 (= $x62 false)))
 ))
 (let (($x91 (and $x111 $x27)))
 (let (($x101 (and $x91 $x52)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x87 (and $x104 $x101)))
 (let (($x70 (=> $x87 $x25)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x72)))
 (let (($x31 (= ?x136 input.dst.llvm-%n)))
 (let (($x25 (= $x31 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x73 (concat ?x20 (concat ?x146 ?x95)))))
 (let (($x32 (= input.dst.llvm-%m ?x22)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x21 (concat ?x78 (concat ?x130 ?x47)))))
 (let (($x108 (= input.dst.llvm-%n ?x51)))
 (let (($x115 (and $x108 $x32)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x98)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x178)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (and $x185 $x142)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x168 $x162)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x160 $x80)))
 (let (($x183 (not $x173)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x134 $x126)))
 (let (($x174 (and (not $x135) $x183)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x105 $x179)))
 (let (($x184 (not $x150)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x155 $x106)))
 (let (($x180 (and (not $x128) $x184)))
 (let (($x175 (and (and (and (and (and (and $x180 $x174) $x165) $x163) $x176) $x138) $x26)))
 (let (($x54 (and $x175 $x64)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x131 (or false (or false (and (and true (or $x157 $x151)) (or $x75 $x152))))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x57 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x13 (and (and (and $x57 $x7) $x54) $x115)))
 (let (($x161 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (and $x161 $x13)))
 (let (($x68 (= $x9 true)))
 (let (($x59 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x59 $x68)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x52 (and $x99 $x29)))
 (let (($x27 (forall ((input.ind-%var475X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var475X)))
 (=> $x62 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var475X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var474X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var474X)))
 (= $x62 false)))
 ))
 (let (($x91 (and $x111 $x27)))
 (let (($x101 (and $x91 $x52)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x87 (and $x104 $x101)))
 (let (($x70 (=> $x87 $x25)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x112 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x94 (bvmul ?x112 (_ bv256 16))))
 (let (($x67 (= ?x94 ?x107)))
 (let (($x17 (= $x67 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x72 (concat ?x101 (concat ?x68 ?x13)))))
 (let (($x31 (= input.dst.llvm-%m ?x136)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x63 (concat ?x146 (concat ?x73 ?x108)))))
 (let (($x32 (= input.dst.llvm-%n ?x22)))
 (let (($x25 (and $x32 $x31)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x37)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x24)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x138 $x26)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x55 $x175)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x163 $x89)))
 (let (($x185 (not $x168)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x165 $x86)))
 (let (($x181 (and (not $x10) $x185)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x80 $x173)))
 (let (($x174 (not $x183)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x14 $x152)))
 (let (($x16 (and (not $x160) $x174)))
 (let (($x47 (and (and (and (and (and (and $x16 $x181) $x162) $x53) $x98) $x54) $x122)))
 (let (($x11 (and $x47 $x21)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x126 (or false (or false (and (and true (or $x6 $x155)) (or $x179 $x150))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x126)))
 (let (($x74 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and (and (and $x74 $x166) $x11) $x25)))
 (let (($x157 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (and $x157 $x125)))
 (let (($x85 (= $x147 true)))
 (let (($x76 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (and $x76 $x85)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x90 $x65)))
 (let (($x84 (forall ((input.ind-%var485X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var485X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var485X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var484X)))
 (= $x111 false)))
 ))
 (let (($x45 (and $x39 $x84)))
 (let (($x144 (and $x45 $x187)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x104 $x144)))
 (let (($x158 (=> $x18 $x17)))
 (not $x158)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x112 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x94 (bvmul ?x112 (_ bv256 16))))
 (let (($x67 (= ?x94 ?x107)))
 (let (($x17 (= $x67 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x72 (concat ?x101 (concat ?x68 ?x13)))))
 (let (($x31 (= input.dst.llvm-%m ?x136)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x63 (concat ?x146 (concat ?x73 ?x108)))))
 (let (($x32 (= input.dst.llvm-%n ?x22)))
 (let (($x25 (and $x32 $x31)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x37)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x24)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x138 $x26)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x55 $x175)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x163 $x89)))
 (let (($x185 (not $x168)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x165 $x86)))
 (let (($x181 (and (not $x10) $x185)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x80 $x173)))
 (let (($x174 (not $x183)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x14 $x152)))
 (let (($x16 (and (not $x160) $x174)))
 (let (($x47 (and (and (and (and (and (and $x16 $x181) $x162) $x53) $x98) $x54) $x122)))
 (let (($x11 (and $x47 $x21)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x126 (or false (or false (and (and true (or $x6 $x155)) (or $x179 $x150))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x126)))
 (let (($x74 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and (and (and $x74 $x166) $x11) $x25)))
 (let (($x157 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (and $x157 $x125)))
 (let (($x85 (= $x147 true)))
 (let (($x76 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (and $x76 $x85)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x90 $x65)))
 (let (($x84 (forall ((input.ind-%var485X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var485X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var485X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var484X)))
 (= $x111 false)))
 ))
 (let (($x45 (and $x39 $x84)))
 (let (($x144 (and $x45 $x187)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x104 $x144)))
 (let (($x158 (=> $x18 $x17)))
 (not $x158)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x62 (= (_ bv0 2) ?x97)))
 (let (($x139 (= $x62 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x44 (concat ?x144 (concat ?x85 ?x125)))))
 (let (($x107 (= input.dst.llvm-%m ?x94)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x87 (concat ?x68 (concat ?x72 ?x32)))))
 (let (($x31 (= input.dst.llvm-%n ?x136)))
 (let (($x67 (and $x31 $x107)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x79)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x120)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x24)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x54 $x122)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x64 $x47)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x53 $x78)))
 (let (($x138 (not $x55)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x162 $x141)))
 (let (($x178 (and (not $x176) $x138)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x89 $x168)))
 (let (($x181 (not $x185)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x105 $x150)))
 (let (($x142 (and (not $x163) $x181)))
 (let (($x108 (and (and (and (and (and (and $x142 $x178) $x175) $x49) $x37) $x11) $x30)))
 (let (($x189 (and $x108 $x63)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x86 (or false (or false (and (and true (or $x70 $x14)) (or $x173 $x183))))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x128 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x159 (and (and (and $x128 $x177) $x189) $x67)))
 (let (($x6 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x66 (and $x6 $x159)))
 (let (($x75 (= $x66 true)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x137 $x75)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x51 (and $x36 $x115)))
 (let (($x151 (forall ((input.ind-%var503X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var503X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var503X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var502X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var502X)))
 (= $x39 false)))
 ))
 (let (($x127 (and $x96 $x151)))
 (let (($x93 (and $x127 $x51)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x104 $x93)))
 (let (($x59 (=> $x132 $x139)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x62 (= (_ bv0 2) ?x97)))
 (let (($x139 (= $x62 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x44 (concat ?x144 (concat ?x85 ?x125)))))
 (let (($x107 (= input.dst.llvm-%m ?x94)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x87 (concat ?x68 (concat ?x72 ?x32)))))
 (let (($x31 (= input.dst.llvm-%n ?x136)))
 (let (($x67 (and $x31 $x107)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x79)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x120)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x24)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x54 $x122)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x64 $x47)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x53 $x78)))
 (let (($x138 (not $x55)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x162 $x141)))
 (let (($x178 (and (not $x176) $x138)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x89 $x168)))
 (let (($x181 (not $x185)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x105 $x150)))
 (let (($x142 (and (not $x163) $x181)))
 (let (($x108 (and (and (and (and (and (and $x142 $x178) $x175) $x49) $x37) $x11) $x30)))
 (let (($x189 (and $x108 $x63)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x86 (or false (or false (and (and true (or $x70 $x14)) (or $x173 $x183))))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x128 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x159 (and (and (and $x128 $x177) $x189) $x67)))
 (let (($x6 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x66 (and $x6 $x159)))
 (let (($x75 (= $x66 true)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x137 $x75)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x51 (and $x36 $x115)))
 (let (($x151 (forall ((input.ind-%var503X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var503X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var503X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var502X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var502X)))
 (= $x39 false)))
 ))
 (let (($x127 (and $x96 $x151)))
 (let (($x93 (and $x127 $x51)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x104 $x93)))
 (let (($x59 (=> $x132 $x139)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x149 ((_ extract 1 0) input.spec-%var-n-1)))
 (let (($x76 (= (_ bv0 2) ?x149)))
 (let (($x27 (= $x76 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x97 (concat ?x93 (concat ?x75 ?x159)))))
 (let (($x139 (= input.dst.llvm-%m ?x62)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x85 (concat ?x44 ?x31)))))
 (let (($x107 (= input.dst.llvm-%n ?x94)))
 (let (($x59 (and $x107 $x139)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x29)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x158)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x11 $x30)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x21 $x108)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x49 $x146)))
 (let (($x54 (not $x64)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x175 $x23)))
 (let (($x24 (and (not $x98) $x54)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x78 $x55)))
 (let (($x178 (not $x138)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x80 $x183)))
 (let (($x26 (and (not $x53) $x178)))
 (let (($x32 (and (and (and (and (and (and $x26 $x24) $x47) $x81) $x79) $x189) $x95)))
 (let (($x52 (and $x32 $x87)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x141 (or false (or false (and (and true (or $x17 $x105)) (or $x168 $x185))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x141)))
 (let (($x160 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x179 (and (and (and $x160 $x42) $x52) $x59)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x25 (and $x70 $x179)))
 (let (($x22 (= $x25 true)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x134 $x22)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x182 (and $x184 $x99)))
 (let (($x155 (forall ((input.ind-%var513X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var513X)))
 (=> $x96 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var513X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var512X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var512X)))
 (= $x96 false)))
 ))
 (let (($x106 (and $x83 $x155)))
 (let (($x57 (and $x106 $x182)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x104 $x57)))
 (let (($x45 (=> $x19 $x27)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x149 ((_ extract 1 0) input.spec-%var-n-1)))
 (let (($x76 (= (_ bv0 2) ?x149)))
 (let (($x27 (= $x76 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x97 (concat ?x93 (concat ?x75 ?x159)))))
 (let (($x139 (= input.dst.llvm-%m ?x62)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x85 (concat ?x44 ?x31)))))
 (let (($x107 (= input.dst.llvm-%n ?x94)))
 (let (($x59 (and $x107 $x139)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x29)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x158)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (and $x11 $x30)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x21 $x108)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x49 $x146)))
 (let (($x54 (not $x64)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x175 $x23)))
 (let (($x24 (and (not $x98) $x54)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x78 $x55)))
 (let (($x178 (not $x138)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x80 $x183)))
 (let (($x26 (and (not $x53) $x178)))
 (let (($x32 (and (and (and (and (and (and $x26 $x24) $x47) $x81) $x79) $x189) $x95)))
 (let (($x52 (and $x32 $x87)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x141 (or false (or false (and (and true (or $x17 $x105)) (or $x168 $x185))))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x141)))
 (let (($x160 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x179 (and (and (and $x160 $x42) $x52) $x59)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x25 (and $x70 $x179)))
 (let (($x22 (= $x25 true)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x134 $x22)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x182 (and $x184 $x99)))
 (let (($x155 (forall ((input.ind-%var513X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var513X)))
 (=> $x96 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var513X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var512X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var512X)))
 (= $x96 false)))
 ))
 (let (($x106 (and $x83 $x155)))
 (let (($x57 (and $x106 $x182)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x104 $x57)))
 (let (($x45 (=> $x19 $x27)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1bfca830)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb8799e70)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb8799e73)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1bfca833)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb8799e70)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1bfca830)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb8799e70) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x137 (= $x69 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x149 (concat ?x57 (concat ?x22 ?x179)))))
 (let (($x27 (= input.dst.llvm-%m ?x76)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x132 (concat ?x75 (concat ?x97 ?x107)))))
 (let (($x139 (= input.dst.llvm-%n ?x62)))
 (let (($x45 (and $x139 $x27)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x65)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x77)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x189 $x95)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x63 $x32)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x81 $x68)))
 (let (($x11 (not $x21)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x47 $x9)))
 (let (($x120 (and (not $x37) $x11)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x146 $x64)))
 (let (($x24 (not $x54)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x89 $x185)))
 (let (($x122 (and (not $x49) $x24)))
 (let (($x31 (and (and (and (and (and (and $x122 $x120) $x108) $x154) $x29) $x52) $x13)))
 (let (($x187 (and $x31 $x18)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x23 (or false (or false (and (and true (or $x60 $x80)) (or $x55 $x138))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x163 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x173 (and (and (and $x163 $x130) $x187) $x45)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x67 (and $x17 $x173)))
 (let (($x136 (= $x67 true)))
 (let (($x165 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and $x165 $x136)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x190 (and $x174 $x90)))
 (let (($x14 (forall ((input.ind-%var531X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var531X)))
 (=> $x83 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var531X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var530X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var530X)))
 (= $x83 false)))
 ))
 (let (($x152 (and $x131 $x14)))
 (let (($x74 (and $x152 $x190)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x104 $x74)))
 (let (($x84 (=> $x118 $x137)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x137 (= $x69 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x149 (concat ?x57 (concat ?x22 ?x179)))))
 (let (($x27 (= input.dst.llvm-%m ?x76)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x132 (concat ?x75 (concat ?x97 ?x107)))))
 (let (($x139 (= input.dst.llvm-%n ?x62)))
 (let (($x45 (and $x139 $x27)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x65)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x77)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x189 $x95)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x63 $x32)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x81 $x68)))
 (let (($x11 (not $x21)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x47 $x9)))
 (let (($x120 (and (not $x37) $x11)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x146 $x64)))
 (let (($x24 (not $x54)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x89 $x185)))
 (let (($x122 (and (not $x49) $x24)))
 (let (($x31 (and (and (and (and (and (and $x122 $x120) $x108) $x154) $x29) $x52) $x13)))
 (let (($x187 (and $x31 $x18)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x42)))
 (let (($x23 (or false (or false (and (and true (or $x60 $x80)) (or $x55 $x138))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x163 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x173 (and (and (and $x163 $x130) $x187) $x45)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x67 (and $x17 $x173)))
 (let (($x136 (= $x67 true)))
 (let (($x165 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and $x165 $x136)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x190 (and $x174 $x90)))
 (let (($x14 (forall ((input.ind-%var531X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var531X)))
 (=> $x83 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var531X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var530X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var530X)))
 (= $x83 false)))
 ))
 (let (($x152 (and $x131 $x14)))
 (let (($x74 (and $x152 $x190)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x104 $x74)))
 (let (($x84 (=> $x118 $x137)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf34ff6e8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7fbffefc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fbffeff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf34ff6eb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7fbffefc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf34ff6e8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf34ff6e8) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x151 (= $x134 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x69 (concat ?x74 (concat ?x136 ?x173)))))
 (let (($x84 (= input.dst.llvm-%m ?x137)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x19 (concat ?x22 (concat ?x149 ?x139)))))
 (let (($x27 (= input.dst.llvm-%n ?x76)))
 (let (($x127 (and $x27 $x84)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x115)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x43)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x77)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x52 $x13)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x87 $x31)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x154 $x85)))
 (let (($x189 (not $x63)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x108 $x147)))
 (let (($x158 (and (not $x79) $x189)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x68 $x21)))
 (let (($x120 (not $x11)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x78 $x138)))
 (let (($x30 (and (not $x81) $x120)))
 (let (($x107 (and (and (and (and (and (and $x30 $x158) $x32) $x112) $x65) $x187) $x125)))
 (let (($x51 (and $x107 $x132)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x9 (or false (or false (and (and true (or $x100 $x89)) (or $x64 $x54))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x59 (and (and (and $x53 $x73) $x51) $x127)))
 (let (($x60 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (and $x60 $x59)))
 (let (($x36 (= $x94 true)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (and $x162 $x36)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x181 $x180)))
 (let (($x105 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var549X)))
 (=> $x131 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var549X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var548X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var548X)))
 (= $x131 false)))
 ))
 (let (($x150 (and $x126 $x105)))
 (let (($x161 (and $x150 $x128)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x104 $x161)))
 (let (($x106 (=> $x96 $x151)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x151 (= $x134 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x69 (concat ?x74 (concat ?x136 ?x173)))))
 (let (($x84 (= input.dst.llvm-%m ?x137)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x19 (concat ?x22 (concat ?x149 ?x139)))))
 (let (($x27 (= input.dst.llvm-%n ?x76)))
 (let (($x127 (and $x27 $x84)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x115)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x43)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x77)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x52 $x13)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x87 $x31)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x154 $x85)))
 (let (($x189 (not $x63)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x108 $x147)))
 (let (($x158 (and (not $x79) $x189)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x68 $x21)))
 (let (($x120 (not $x11)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x78 $x138)))
 (let (($x30 (and (not $x81) $x120)))
 (let (($x107 (and (and (and (and (and (and $x30 $x158) $x32) $x112) $x65) $x187) $x125)))
 (let (($x51 (and $x107 $x132)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x9 (or false (or false (and (and true (or $x100 $x89)) (or $x64 $x54))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x59 (and (and (and $x53 $x73) $x51) $x127)))
 (let (($x60 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (and $x60 $x59)))
 (let (($x36 (= $x94 true)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (and $x162 $x36)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x181 $x180)))
 (let (($x105 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var549X)))
 (=> $x131 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var549X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var548X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var548X)))
 (= $x131 false)))
 ))
 (let (($x150 (and $x126 $x105)))
 (let (($x161 (and $x150 $x128)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x104 $x161)))
 (let (($x106 (=> $x96 $x151)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000f) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xdda380a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xdda380ab)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xdda380a8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x10 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x165 (= $x10 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x134 (concat ?x161 (concat ?x36 ?x59)))))
 (let (($x106 (= input.dst.llvm-%m ?x151)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x118 (concat ?x136 (concat ?x69 ?x27)))))
 (let (($x84 (= input.dst.llvm-%n ?x137)))
 (let (($x166 (and $x84 $x106)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x99)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x168)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x187 $x125)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x18 $x107)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x112 $x75)))
 (let (($x52 (not $x87)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x32 $x66)))
 (let (($x77 (and (not $x29) $x52)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x85 $x63)))
 (let (($x158 (not $x189)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x146 $x54)))
 (let (($x95 (and (not $x154) $x158)))
 (let (($x139 (and (and (and (and (and (and $x95 $x77) $x31) $x12) $x115) $x51) $x159)))
 (let (($x182 (and $x139 $x19)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x147 (or false (or false (and (and true (or $x50 $x78)) (or $x21 $x11))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x49 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x45 (and (and (and $x49 $x72) $x182) $x166)))
 (let (($x100 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (and $x100 $x45)))
 (let (($x184 (= $x62 true)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and $x175 $x184)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x178 $x16)))
 (let (($x80 (forall ((input.ind-%var567X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var567X)))
 (=> $x126 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var567X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var566X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var566X)))
 (= $x126 false)))
 ))
 (let (($x183 (and $x86 $x80)))
 (let (($x157 (and $x183 $x160)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x104 $x157)))
 (let (($x155 (=> $x83 $x165)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x10 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x165 (= $x10 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x134 (concat ?x161 (concat ?x36 ?x59)))))
 (let (($x106 (= input.dst.llvm-%m ?x151)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x118 (concat ?x136 (concat ?x69 ?x27)))))
 (let (($x84 (= input.dst.llvm-%n ?x137)))
 (let (($x166 (and $x84 $x106)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x99)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x168)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x187 $x125)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x18 $x107)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x112 $x75)))
 (let (($x52 (not $x87)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x32 $x66)))
 (let (($x77 (and (not $x29) $x52)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x85 $x63)))
 (let (($x158 (not $x189)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x146 $x54)))
 (let (($x95 (and (not $x154) $x158)))
 (let (($x139 (and (and (and (and (and (and $x95 $x77) $x31) $x12) $x115) $x51) $x159)))
 (let (($x182 (and $x139 $x19)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x147 (or false (or false (and (and true (or $x50 $x78)) (or $x21 $x11))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x49 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x45 (and (and (and $x49 $x72) $x182) $x166)))
 (let (($x100 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (and $x100 $x45)))
 (let (($x184 (= $x62 true)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and $x175 $x184)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x178 $x16)))
 (let (($x80 (forall ((input.ind-%var567X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var567X)))
 (=> $x126 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var567X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var566X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var566X)))
 (= $x126 false)))
 ))
 (let (($x183 (and $x86 $x80)))
 (let (($x157 (and $x183 $x160)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x104 $x157)))
 (let (($x155 (=> $x83 $x165)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (forall ((input.ind-%var587X (_ BitVec 32)) )(let ((?x110 (bvadd (bvmul input.ind-%var587X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x5))))
 (let ((?x28 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var587X)))
 (let (($x150 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var587X)))
 (=> $x150 (= ?x28 ?x188))))))))
 ))
 (let (($x113 (forall ((input.ind-%var586X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var586X)))
 (= $x150 (and (bvule (_ bv0 32) input.ind-%var586X) (bvult input.ind-%var586X input.dst.llvm-%n)))))
 ))
 (let (($x35 (and $x113 $x123)))
 (let (($x171 (= $x35 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x165 (concat ?x157 (concat ?x184 ?x45)))))
 (let (($x152 (= input.dst.llvm-%m ?x155)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x96 (concat ?x36 (concat ?x134 ?x84)))))
 (let (($x106 (= input.dst.llvm-%n ?x151)))
 (let (($x101 (and $x106 $x152)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x90)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x55)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x168)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x51 $x159)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x132 $x139)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x12 $x22)))
 (let (($x187 (not $x18)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x31 $x25)))
 (let (($x43 (and (not $x65) $x187)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x75 $x87)))
 (let (($x77 (not $x52)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x68 $x11)))
 (let (($x13 (and (not $x112) $x77)))
 (let (($x27 (and (and (and (and (and (and $x13 $x43) $x107) $x111) $x99) $x182) $x179)))
 (let (($x190 (and $x27 $x118)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x66 (or false (or false (and (and true (or $x20 $x146)) (or $x63 $x189))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x81 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x76 (and (and (and $x81 $x44) $x190) $x101)))
 (let (($x50 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x174 (and $x50 $x76)))
 (let (($x142 (= $x174 true)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x47 $x142)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x24 $x163)))
 (let (($x89 (forall ((input.ind-%var577X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var577X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var577X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var576X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var576X)))
 (= $x86 false)))
 ))
 (let (($x185 (and $x141 $x89)))
 (let (($x131 (and $x185 $x6)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x104 $x131)))
 (let (($x121 (=> $x176 $x171)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (forall ((input.ind-%var587X (_ BitVec 32)) )(let ((?x110 (bvadd (bvmul input.ind-%var587X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x5))))
 (let ((?x28 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var587X)))
 (let (($x150 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var587X)))
 (=> $x150 (= ?x28 ?x188))))))))
 ))
 (let (($x113 (forall ((input.ind-%var586X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var586X)))
 (= $x150 (and (bvule (_ bv0 32) input.ind-%var586X) (bvult input.ind-%var586X input.dst.llvm-%n)))))
 ))
 (let (($x35 (and $x113 $x123)))
 (let (($x171 (= $x35 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x165 (concat ?x157 (concat ?x184 ?x45)))))
 (let (($x152 (= input.dst.llvm-%m ?x155)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x96 (concat ?x36 (concat ?x134 ?x84)))))
 (let (($x106 (= input.dst.llvm-%n ?x151)))
 (let (($x101 (and $x106 $x152)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x90)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x55)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x168)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x51 $x159)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x132 $x139)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x12 $x22)))
 (let (($x187 (not $x18)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x31 $x25)))
 (let (($x43 (and (not $x65) $x187)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x75 $x87)))
 (let (($x77 (not $x52)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x68 $x11)))
 (let (($x13 (and (not $x112) $x77)))
 (let (($x27 (and (and (and (and (and (and $x13 $x43) $x107) $x111) $x99) $x182) $x179)))
 (let (($x190 (and $x27 $x118)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x66 (or false (or false (and (and true (or $x20 $x146)) (or $x63 $x189))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x81 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x76 (and (and (and $x81 $x44) $x190) $x101)))
 (let (($x50 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x174 (and $x50 $x76)))
 (let (($x142 (= $x174 true)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x47 $x142)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x24 $x163)))
 (let (($x89 (forall ((input.ind-%var577X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var577X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var577X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var576X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var576X)))
 (= $x86 false)))
 ))
 (let (($x185 (and $x141 $x89)))
 (let (($x131 (and $x185 $x6)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x104 $x131)))
 (let (($x121 (=> $x176 $x171)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var587X!1 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var586X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.ind-%var587X!1 () (_ BitVec 32)
    #x3fffffc0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #xf8
    (ite (= x!0 #xfffffff0) #x01
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (= false true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x102 (concat ?x131 (concat ?x142 ?x76)))))
 (let (($x38 (= input.dst.llvm-%m ?x169)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x83 (concat ?x184 (concat ?x165 ?x106)))))
 (let (($x152 (= input.dst.llvm-%n ?x155)))
 (let (($x167 (and $x152 $x38)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x180)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x127)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x182 $x179)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x19 $x27)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x111 $x136)))
 (let (($x51 (not $x132)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x107 $x67)))
 (let (($x168 (and (not $x115) $x51)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x22 $x18)))
 (let (($x43 (not $x187)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x85 $x189)))
 (let (($x125 (and (not $x12) $x43)))
 (let (($x84 (and (and (and (and (and (and $x125 $x168) $x139) $x39) $x90) $x190) $x173)))
 (let (($x128 (and $x84 $x96)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x25 (or false (or false (and (and true (or $x64 $x68)) (or $x87 $x52))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x25)))
 (let (($x154 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x153 (and (and (and $x154 $x97) $x128) $x167)))
 (let (($x20 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (and $x20 $x153)))
 (let (($x110 (= $x46 true)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x108 $x110)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x120 $x129)))
 (let (($x78 (forall ((input.ind-%var613X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var613X)))
 (=> $x141 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var613X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var612X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var612X)))
 (= $x141 false)))
 ))
 (let (($x138 (and $x23 $x78)))
 (let (($x15 (and $x138 $x92)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x104 $x15)))
 (let (($x140 (=> $x148 $x156)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (= false true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x102 (concat ?x131 (concat ?x142 ?x76)))))
 (let (($x38 (= input.dst.llvm-%m ?x169)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x83 (concat ?x184 (concat ?x165 ?x106)))))
 (let (($x152 (= input.dst.llvm-%n ?x155)))
 (let (($x167 (and $x152 $x38)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x180)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x127)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x182 $x179)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x19 $x27)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x111 $x136)))
 (let (($x51 (not $x132)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x107 $x67)))
 (let (($x168 (and (not $x115) $x51)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x22 $x18)))
 (let (($x43 (not $x187)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x85 $x189)))
 (let (($x125 (and (not $x12) $x43)))
 (let (($x84 (and (and (and (and (and (and $x125 $x168) $x139) $x39) $x90) $x190) $x173)))
 (let (($x128 (and $x84 $x96)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x25 (or false (or false (and (and true (or $x64 $x68)) (or $x87 $x52))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x25)))
 (let (($x154 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x153 (and (and (and $x154 $x97) $x128) $x167)))
 (let (($x20 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (and $x20 $x153)))
 (let (($x110 (= $x46 true)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x108 $x110)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x120 $x129)))
 (let (($x78 (forall ((input.ind-%var613X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var613X)))
 (=> $x141 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var613X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var612X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var612X)))
 (= $x141 false)))
 ))
 (let (($x138 (and $x23 $x78)))
 (let (($x15 (and $x138 $x92)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x104 $x15)))
 (let (($x140 (=> $x148 $x156)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x67bd5a28)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf011de2c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf011de2f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x67bd5a2b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf011de2c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x67bd5a28)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x150 false)))
 (let (($x137 (= $x166 true)))
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x133)))
 (let (($x35 (= ?x123 input.dst.llvm-%n)))
 (let (($x171 (= $x35 true)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x5 true)))
 (let (($x56 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x56 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x86 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (= $x122 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x151 (= $x101 true)))
 (let ((?x6 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x131 (bvadd input.dst.llvm-%m ?x6)))
 (let (($x129 (bvugt ?x131 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x131 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x167 (bvugt ?x131 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x156 (or false (or false (and (and true (or $x38 $x167)) (or $x110 $x129))))))
 (let (($x109 (=> (bvule ?x131 (bvsub (bvadd ?x131 (_ bv4 32)) (_ bv1 32))) $x156)))
 (let (($x142 (=> (and $x150 (bvule ?x131 (bvsub (bvadd ?x131 (_ bv4 32)) (_ bv1 32)))) $x156)))
 (let (($x76 (= $x142 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x28)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x96)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x190)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (and $x135 $x134)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x90 $x127)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x94 $x99)))
 (let (($x36 (not $x39)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x161 $x159)))
 (let (($x182 (and (not $x139) $x36)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x149 $x111)))
 (let (($x132 (not $x136)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x57 $x87)))
 (let (($x168 (and (not $x115) $x132)))
 (let (($x10 (and (and (and (and (and (and $x168 $x182) $x55) $x27) $x173) $x180) $x128)))
 (let (($x165 (and $x10 $x59)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x125 (or false (or false (and (and true (or $x25 $x97)) (or $x74 $x22))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x106 (and $x67 $x165)))
 (let (($x160 (= $x106 true)))
 (let ((?x64 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x66 (= (_ bv0 2) ?x64)))
 (let (($x68 (= $x66 true)))
 (let (($x45 (and $x68 $x160)))
 (let (($x63 (and $x45 $x76)))
 (let (($x178 (and $x63 $x151)))
 (let (($x17 (and $x178 $x49)))
 (let (($x47 (and $x17 $x37)))
 (let (($x73 (and $x47 $x185)))
 (let (($x188 (and $x73 $x48)))
 (let (($x121 (and $x188 $x171)))
 (let (($x65 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x65 $x121)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x154 $x172)))
 (let (($x147 (forall ((input.ind-%var631X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var631X)))
 (=> $x141 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var631X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var630X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var630X)))
 (= $x141 false)))
 ))
 (let (($x146 (and $x50 $x147)))
 (let (($x144 (and $x146 $x82)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x119 $x144)))
 (let (($x181 (=> $x21 $x137)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x150 false)))
 (let (($x137 (= $x166 true)))
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x133)))
 (let (($x35 (= ?x123 input.dst.llvm-%n)))
 (let (($x171 (= $x35 true)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x5 true)))
 (let (($x56 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x56 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x86 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (= $x122 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x151 (= $x101 true)))
 (let ((?x6 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x131 (bvadd input.dst.llvm-%m ?x6)))
 (let (($x129 (bvugt ?x131 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x131 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x167 (bvugt ?x131 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x156 (or false (or false (and (and true (or $x38 $x167)) (or $x110 $x129))))))
 (let (($x109 (=> (bvule ?x131 (bvsub (bvadd ?x131 (_ bv4 32)) (_ bv1 32))) $x156)))
 (let (($x142 (=> (and $x150 (bvule ?x131 (bvsub (bvadd ?x131 (_ bv4 32)) (_ bv1 32)))) $x156)))
 (let (($x76 (= $x142 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x28)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x96)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x190)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (and $x135 $x134)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x90 $x127)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x94 $x99)))
 (let (($x36 (not $x39)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x161 $x159)))
 (let (($x182 (and (not $x139) $x36)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x149 $x111)))
 (let (($x132 (not $x136)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x57 $x87)))
 (let (($x168 (and (not $x115) $x132)))
 (let (($x10 (and (and (and (and (and (and $x168 $x182) $x55) $x27) $x173) $x180) $x128)))
 (let (($x165 (and $x10 $x59)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x125 (or false (or false (and (and true (or $x25 $x97)) (or $x74 $x22))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x106 (and $x67 $x165)))
 (let (($x160 (= $x106 true)))
 (let ((?x64 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x66 (= (_ bv0 2) ?x64)))
 (let (($x68 (= $x66 true)))
 (let (($x45 (and $x68 $x160)))
 (let (($x63 (and $x45 $x76)))
 (let (($x178 (and $x63 $x151)))
 (let (($x17 (and $x178 $x49)))
 (let (($x47 (and $x17 $x37)))
 (let (($x73 (and $x47 $x185)))
 (let (($x188 (and $x73 $x48)))
 (let (($x121 (and $x188 $x171)))
 (let (($x65 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x65 $x121)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x154 $x172)))
 (let (($x147 (forall ((input.ind-%var631X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var631X)))
 (=> $x141 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var631X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var630X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var630X)))
 (= $x141 false)))
 ))
 (let (($x146 (and $x50 $x147)))
 (let (($x144 (and $x146 $x82)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x119 $x144)))
 (let (($x181 (=> $x21 $x137)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff0d9c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfff81000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff0d9f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff0d9c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfff7fff0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x152)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x45)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x96 $x28)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x184 $x59)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (and $x90 $x135)))
 (let (($x190 (not $x118)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x179 $x27)))
 (let (($x127 (and (not $x157) $x190)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x36 $x182)))
 (let (($x69 (not $x16)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x22 $x18)))
 (let (($x83 (and (not $x39) $x69)))
 (let (($x140 (and (and (and (and (and (and $x83 $x127) $x62) $x180) $x165) $x160) $x155)))
 (let (($x169 (and $x140 $x150)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x19 (or false (or false (and (and true (or $x87 $x115)) (or $x132 $x168))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x19)))
 (let (($x82 (and $x99 $x169)))
 (let (($x144 (= $x82 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x56 (concat ?x86 (concat ?x122 ?x151)))))
 (let (($x73 (= input.dst.llvm-%m ?x185)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x142 (concat ?x148 (concat ?x110 ?x153)))))
 (let (($x63 (= input.dst.llvm-%n ?x76)))
 (let (($x5 (and $x63 $x73)))
 (let (($x188 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x99) $x169)))
 (let (($x170 (and $x188 $x5)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (and $x13 $x170)))
 (let (($x123 (= $x133 true)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x35 (and $x31 $x123)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x52 $x35)))
 (let (($x66 (forall ((input.ind-%var649X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var649X)))
 (=> $x50 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var649X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var648X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var648X)))
 (= $x50 false)))
 ))
 (let (($x68 (and $x20 $x66)))
 (let (($x121 (and $x68 $x171)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x119 $x121)))
 (let (($x21 (=> $x172 $x144)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x152)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x45)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x96 $x28)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x184 $x59)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (and $x90 $x135)))
 (let (($x190 (not $x118)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x179 $x27)))
 (let (($x127 (and (not $x157) $x190)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x36 $x182)))
 (let (($x69 (not $x16)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x22 $x18)))
 (let (($x83 (and (not $x39) $x69)))
 (let (($x140 (and (and (and (and (and (and $x83 $x127) $x62) $x180) $x165) $x160) $x155)))
 (let (($x169 (and $x140 $x150)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x19 (or false (or false (and (and true (or $x87 $x115)) (or $x132 $x168))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x19)))
 (let (($x82 (and $x99 $x169)))
 (let (($x144 (= $x82 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x56 (concat ?x86 (concat ?x122 ?x151)))))
 (let (($x73 (= input.dst.llvm-%m ?x185)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x142 (concat ?x148 (concat ?x110 ?x153)))))
 (let (($x63 (= input.dst.llvm-%n ?x76)))
 (let (($x5 (and $x63 $x73)))
 (let (($x188 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x99) $x169)))
 (let (($x170 (and $x188 $x5)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (and $x13 $x170)))
 (let (($x123 (= $x133 true)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x35 (and $x31 $x123)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x52 $x35)))
 (let (($x66 (forall ((input.ind-%var649X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var649X)))
 (=> $x50 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var649X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var648X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var648X)))
 (= $x50 false)))
 ))
 (let (($x68 (and $x20 $x66)))
 (let (($x121 (and $x68 $x171)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x119 $x121)))
 (let (($x21 (=> $x172 $x144)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x65)))
 (let (($x32 (= ?x146 input.dst.llvm-%n)))
 (let (($x137 (= $x32 true)))
 (let ((?x170 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x144 (concat ?x121 (concat ?x123 ?x170)))))
 (let (($x166 (= input.dst.llvm-%m ?x21)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x37 (concat ?x122 (concat ?x56 ?x63)))))
 (let (($x73 (= input.dst.llvm-%n ?x185)))
 (let (($x74 (and $x73 $x166)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x109)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x188)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x160 $x155)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x106 $x140)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x180 $x131)))
 (let (($x96 (not $x184)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x62 $x6)))
 (let (($x10 (and (not $x84) $x96)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x135 $x118)))
 (let (($x127 (not $x190)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x136 $x168)))
 (let (($x173 (and (not $x90) $x127)))
 (let (($x153 (and (and (and (and (and (and $x173 $x10) $x59) $x163) $x152) $x169) $x38)))
 (let (($x129 (and $x153 $x142)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x27 (or false (or false (and (and true (or $x48 $x22)) (or $x182 $x16))))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x149 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x167 (and (and (and $x149 $x134) $x129) $x74)))
 (let (($x87 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x81 (and $x87 $x167)))
 (let (($x158 (= $x81 true)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x125 $x158)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x54 (and $x187 $x9)))
 (let (($x113 (forall ((input.ind-%var659X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var659X)))
 (=> $x20 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var659X) (_ bv0 32)))))
 ))
 (let (($x64 (forall ((input.ind-%var658X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var658X)))
 (= $x20 false)))
 ))
 (let (($x85 (and $x64 $x113)))
 (let (($x60 (and $x85 $x54)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x119 $x60)))
 (let (($x181 (=> $x141 $x137)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x65)))
 (let (($x32 (= ?x146 input.dst.llvm-%n)))
 (let (($x137 (= $x32 true)))
 (let ((?x170 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x144 (concat ?x121 (concat ?x123 ?x170)))))
 (let (($x166 (= input.dst.llvm-%m ?x21)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x37 (concat ?x122 (concat ?x56 ?x63)))))
 (let (($x73 (= input.dst.llvm-%n ?x185)))
 (let (($x74 (and $x73 $x166)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x109)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x188)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x160 $x155)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x106 $x140)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x180 $x131)))
 (let (($x96 (not $x184)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x62 $x6)))
 (let (($x10 (and (not $x84) $x96)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x135 $x118)))
 (let (($x127 (not $x190)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x136 $x168)))
 (let (($x173 (and (not $x90) $x127)))
 (let (($x153 (and (and (and (and (and (and $x173 $x10) $x59) $x163) $x152) $x169) $x38)))
 (let (($x129 (and $x153 $x142)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x27 (or false (or false (and (and true (or $x48 $x22)) (or $x182 $x16))))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x149 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x167 (and (and (and $x149 $x134) $x129) $x74)))
 (let (($x87 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x81 (and $x87 $x167)))
 (let (($x158 (= $x81 true)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x125 $x158)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x54 (and $x187 $x9)))
 (let (($x113 (forall ((input.ind-%var659X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var659X)))
 (=> $x20 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var659X) (_ bv0 32)))))
 ))
 (let (($x64 (forall ((input.ind-%var658X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var658X)))
 (= $x20 false)))
 ))
 (let (($x85 (and $x64 $x113)))
 (let (($x60 (and $x85 $x54)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x119 $x60)))
 (let (($x181 (=> $x141 $x137)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x50 (= (_ bv0 2) ?x79)))
 (let (($x95 (= $x50 true)))
 (let ((?x167 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x65 (concat ?x60 (concat ?x158 ?x167)))))
 (let (($x32 (= input.dst.llvm-%m ?x146)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x172 (concat ?x123 (concat ?x144 ?x73)))))
 (let (($x166 (= input.dst.llvm-%n ?x21)))
 (let (($x137 (and $x166 $x32)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x49)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x101)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x169 $x38)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x150 $x153)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x163 $x148)))
 (let (($x160 (not $x106)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x59 $x15)))
 (let (($x45 (and (not $x165) $x160)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x131 $x184)))
 (let (($x10 (not $x96)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x36 $x16)))
 (let (($x28 (and (not $x180) $x10)))
 (let (($x63 (and (and (and (and (and (and $x28 $x45) $x140) $x46) $x109) $x129) $x156)))
 (let (($x17 (and $x63 $x37)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x6 (or false (or false (and (and true (or $x12 $x136)) (or $x118 $x190))))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x6)))
 (let (($x39 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x111 (and (and (and $x39 $x128) $x17) $x137)))
 (let (($x48 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x132 (and $x48 $x111)))
 (let (($x5 (= $x132 true)))
 (let (($x139 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (and $x139 $x5)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x161 $x76)))
 (let (($x115 (forall ((input.ind-%var669X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var669X)))
 (=> $x64 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var669X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var668X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var668X)))
 (= $x64 false)))
 ))
 (let (($x51 (and $x97 $x115)))
 (let (($x107 (and $x51 $x154)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x119 $x107)))
 (let (($x31 (=> $x147 $x95)))
 (not $x31)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x50 (= (_ bv0 2) ?x79)))
 (let (($x95 (= $x50 true)))
 (let ((?x167 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x65 (concat ?x60 (concat ?x158 ?x167)))))
 (let (($x32 (= input.dst.llvm-%m ?x146)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x172 (concat ?x123 (concat ?x144 ?x73)))))
 (let (($x166 (= input.dst.llvm-%n ?x21)))
 (let (($x137 (and $x166 $x32)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x49)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x101)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x169 $x38)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x150 $x153)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x163 $x148)))
 (let (($x160 (not $x106)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x59 $x15)))
 (let (($x45 (and (not $x165) $x160)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x131 $x184)))
 (let (($x10 (not $x96)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x36 $x16)))
 (let (($x28 (and (not $x180) $x10)))
 (let (($x63 (and (and (and (and (and (and $x28 $x45) $x140) $x46) $x109) $x129) $x156)))
 (let (($x17 (and $x63 $x37)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x6 (or false (or false (and (and true (or $x12 $x136)) (or $x118 $x190))))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x6)))
 (let (($x39 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x111 (and (and (and $x39 $x128) $x17) $x137)))
 (let (($x48 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x132 (and $x48 $x111)))
 (let (($x5 (= $x132 true)))
 (let (($x139 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (and $x139 $x5)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x161 $x76)))
 (let (($x115 (forall ((input.ind-%var669X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var669X)))
 (=> $x64 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var669X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var668X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var668X)))
 (= $x64 false)))
 ))
 (let (($x51 (and $x97 $x115)))
 (let (($x107 (and $x51 $x154)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x119 $x107)))
 (let (($x31 (=> $x147 $x95)))
 (not $x31)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x20)))
 (let (($x125 (= ?x77 input.spec-%var-n-1)))
 (let (($x85 (= $x125 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x79 (concat ?x107 (concat ?x5 ?x111)))))
 (let (($x95 (= input.dst.llvm-%m ?x50)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x141 (concat ?x158 (concat ?x65 ?x166)))))
 (let (($x32 (= input.dst.llvm-%n ?x146)))
 (let (($x31 (and $x32 $x95)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x35)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x26)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x129 $x156)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x142 $x63)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x46 $x122)))
 (let (($x169 (not $x150)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x140 $x178)))
 (let (($x188 (and (not $x152) $x169)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x148 $x106)))
 (let (($x45 (not $x160)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x135 $x190)))
 (let (($x155 (and (not $x163) $x45)))
 (let (($x73 (and (and (and (and (and (and $x155 $x188) $x153) $x47) $x49) $x17) $x151)))
 (let (($x171 (and $x73 $x172)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x15 (or false (or false (and (and true (or $x181 $x36)) (or $x184 $x96))))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x90 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x182 (and (and (and $x90 $x176) $x171) $x31)))
 (let (($x12 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x74 (and $x12 $x182)))
 (let (($x185 (= $x74 true)))
 (let (($x179 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (and $x179 $x185)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x69 $x52)))
 (let (($x22 (forall ((input.ind-%var679X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var679X)))
 (=> $x97 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var679X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var678X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var678X)))
 (= $x97 false)))
 ))
 (let (($x18 (and $x67 $x22)))
 (let (($x66 (and $x18 $x43)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x119 $x66)))
 (let (($x57 (=> $x189 $x85)))
 (not $x57))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x20)))
 (let (($x125 (= ?x77 input.spec-%var-n-1)))
 (let (($x85 (= $x125 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x79 (concat ?x107 (concat ?x5 ?x111)))))
 (let (($x95 (= input.dst.llvm-%m ?x50)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x141 (concat ?x158 (concat ?x65 ?x166)))))
 (let (($x32 (= input.dst.llvm-%n ?x146)))
 (let (($x31 (and $x32 $x95)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x35)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x26)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x129 $x156)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x142 $x63)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x46 $x122)))
 (let (($x169 (not $x150)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x140 $x178)))
 (let (($x188 (and (not $x152) $x169)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x148 $x106)))
 (let (($x45 (not $x160)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x135 $x190)))
 (let (($x155 (and (not $x163) $x45)))
 (let (($x73 (and (and (and (and (and (and $x155 $x188) $x153) $x47) $x49) $x17) $x151)))
 (let (($x171 (and $x73 $x172)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x15 (or false (or false (and (and true (or $x181 $x36)) (or $x184 $x96))))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x90 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x182 (and (and (and $x90 $x176) $x171) $x31)))
 (let (($x12 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x74 (and $x12 $x182)))
 (let (($x185 (= $x74 true)))
 (let (($x179 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (and $x179 $x185)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x69 $x52)))
 (let (($x22 (forall ((input.ind-%var679X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var679X)))
 (=> $x97 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var679X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var678X (_ BitVec 32)) )(let (($x97 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var678X)))
 (= $x97 false)))
 ))
 (let (($x18 (and $x67 $x22)))
 (let (($x66 (and $x18 $x43)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x119 $x66)))
 (let (($x57 (=> $x189 $x85)))
 (not $x57))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x44 (= $x149 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x20 (concat ?x66 (concat ?x185 ?x182)))))
 (let (($x125 (= input.dst.llvm-%m ?x77)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x147 (concat ?x5 (concat ?x79 ?x32)))))
 (let (($x95 (= input.dst.llvm-%n ?x50)))
 (let (($x85 (and $x95 $x125)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x9)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x55)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x17 $x151)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x37 $x73)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x47 $x123)))
 (let (($x129 (not $x142)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x153 $x133)))
 (let (($x101 (and (not $x109) $x129)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x122 $x150)))
 (let (($x188 (not $x169)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x131 $x96)))
 (let (($x38 (and (not $x46) $x188)))
 (let (($x166 (and (and (and (and (and (and $x38 $x101) $x63) $x82) $x35) $x171) $x170)))
 (let (($x54 (and $x166 $x141)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x178 (or false (or false (and (and true (or $x68 $x135)) (or $x106 $x160))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x178)))
 (let (($x180 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x102 (and (and (and $x180 $x110) $x54) $x85)))
 (let (($x181 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (and $x181 $x102)))
 (let (($x137 (= $x118 true)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x62 $x137)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x127 $x21)))
 (let (($x136 (forall ((input.ind-%var689X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var689X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var689X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var688X)))
 (= $x67 false)))
 ))
 (let (($x168 (and $x19 $x136)))
 (let (($x159 (and $x168 $x187)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x119 $x159)))
 (let (($x64 (=> $x113 $x44)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x44 (= $x149 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x20 (concat ?x66 (concat ?x185 ?x182)))))
 (let (($x125 (= input.dst.llvm-%m ?x77)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x147 (concat ?x5 (concat ?x79 ?x32)))))
 (let (($x95 (= input.dst.llvm-%n ?x50)))
 (let (($x85 (and $x95 $x125)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x9)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x55)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x17 $x151)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x37 $x73)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x47 $x123)))
 (let (($x129 (not $x142)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x153 $x133)))
 (let (($x101 (and (not $x109) $x129)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x122 $x150)))
 (let (($x188 (not $x169)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x131 $x96)))
 (let (($x38 (and (not $x46) $x188)))
 (let (($x166 (and (and (and (and (and (and $x38 $x101) $x63) $x82) $x35) $x171) $x170)))
 (let (($x54 (and $x166 $x141)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x178 (or false (or false (and (and true (or $x68 $x135)) (or $x106 $x160))))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x178)))
 (let (($x180 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x102 (and (and (and $x180 $x110) $x54) $x85)))
 (let (($x181 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (and $x181 $x102)))
 (let (($x137 (= $x118 true)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x62 $x137)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x127 $x21)))
 (let (($x136 (forall ((input.ind-%var689X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var689X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var689X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var688X)))
 (= $x67 false)))
 ))
 (let (($x168 (and $x19 $x136)))
 (let (($x159 (and $x168 $x187)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x119 $x159)))
 (let (($x64 (=> $x113 $x44)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (forall ((input.ind-%var709X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var709X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x162))))
 (=> false (= (_ bv0 32) ?x117))))))
 ))
 (let (($x100 (forall ((input.ind-%var708X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var708X) (bvult input.ind-%var708X (_ bv0 32)))))
 ))
 (let (($x88 (and $x100 $x8)))
 (let (($x114 (= $x88 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x44 (concat ?x159 (concat ?x137 ?x102)))))
 (let (($x94 (= input.dst.llvm-%m ?x64)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x189 (concat ?x185 (concat ?x20 ?x95)))))
 (let (($x125 (= input.dst.llvm-%n ?x77)))
 (let (($x92 (and $x125 $x94)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x76)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x25)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x171 $x170)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x172 $x166)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x82 $x158)))
 (let (($x17 (not $x37)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x63 $x81)))
 (let (($x26 (and (not $x49) $x17)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x123 $x142)))
 (let (($x101 (not $x129)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x148 $x160)))
 (let (($x156 (and (not $x47) $x101)))
 (let (($x32 (and (and (and (and (and (and $x156 $x26) $x73) $x30) $x9) $x54) $x167)))
 (let (($x154 (and $x32 $x147)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x133 (or false (or false (and (and true (or $x57 $x131)) (or $x150 $x169))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x133)))
 (let (($x163 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x146 (and (and (and $x163 $x56) $x154) $x92)))
 (let (($x68 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x161 (and $x68 $x146)))
 (let (($x83 (= $x161 true)))
 (let (($x59 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x59 $x83)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x39 (and $x10 $x115)))
 (let (($x36 (forall ((input.ind-%var699X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var699X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var699X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var698X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var698X)))
 (= $x19 false)))
 ))
 (let (($x16 (and $x27 $x36)))
 (let (($x13 (and $x16 $x39)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x97 (and $x119 $x13)))
 (let (($x103 (=> $x97 $x114)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (forall ((input.ind-%var709X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var709X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x162))))
 (=> false (= (_ bv0 32) ?x117))))))
 ))
 (let (($x100 (forall ((input.ind-%var708X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var708X) (bvult input.ind-%var708X (_ bv0 32)))))
 ))
 (let (($x88 (and $x100 $x8)))
 (let (($x114 (= $x88 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x44 (concat ?x159 (concat ?x137 ?x102)))))
 (let (($x94 (= input.dst.llvm-%m ?x64)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x189 (concat ?x185 (concat ?x20 ?x95)))))
 (let (($x125 (= input.dst.llvm-%n ?x77)))
 (let (($x92 (and $x125 $x94)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x76)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x25)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x171 $x170)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x172 $x166)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x82 $x158)))
 (let (($x17 (not $x37)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x63 $x81)))
 (let (($x26 (and (not $x49) $x17)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x123 $x142)))
 (let (($x101 (not $x129)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x148 $x160)))
 (let (($x156 (and (not $x47) $x101)))
 (let (($x32 (and (and (and (and (and (and $x156 $x26) $x73) $x30) $x9) $x54) $x167)))
 (let (($x154 (and $x32 $x147)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x133 (or false (or false (and (and true (or $x57 $x131)) (or $x150 $x169))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x133)))
 (let (($x163 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x146 (and (and (and $x163 $x56) $x154) $x92)))
 (let (($x68 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x161 (and $x68 $x146)))
 (let (($x83 (= $x161 true)))
 (let (($x59 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x59 $x83)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x39 (and $x10 $x115)))
 (let (($x36 (forall ((input.ind-%var699X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var699X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var699X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var698X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var698X)))
 (= $x19 false)))
 ))
 (let (($x16 (and $x27 $x36)))
 (let (($x13 (and $x16 $x39)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x97 (and $x119 $x13)))
 (let (($x103 (=> $x97 $x114)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (= $x99 false)))
 (let (($x224 (= $x223 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x46)))
 (let (($x216 (= ?x121 input.dst.llvm-%n)))
 (let (($x217 (= $x216 true)))
 (let (($x213 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x213 true)))
 (let (($x210 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x210 true)))
 (let (($x207 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x208 (= $x207 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x205 (= $x204 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (= $x201 true)))
 (let (($x197 (forall ((input.ind-%var725X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var725X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x98))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv2 32))) ?x58)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv3 32))) ?x124)))
 (let ((?x128 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var725X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var725X)))
 (=> $x86 (= ?x128 ?x194)))))))))
 ))
 (let (($x84 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x87 (and (bvule (_ bv0 32) input.ind-%var724X) (bvult input.ind-%var724X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var724X)))
 (= $x86 $x87))))
 ))
 (let (($x198 (and $x84 $x197)))
 (let (($x199 (= $x198 true)))
 (let ((?x11 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvadd input.dst.llvm-%m ?x11)))
 (let (($x162 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd ?x112 (_ bv3 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x7 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x71)))
 (let (($x191 (or false (or false (and (and true (or $x177 $x7)) (or $x130 $x162))))))
 (let (($x88 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) $x191)))
 (let (($x138 (=> (and $x99 (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32)))) $x191)))
 (let (($x175 (= $x138 true)))
 (let (($x83 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x115 (= $x83 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x187)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x149)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (and $x185 $x95)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x74 $x43)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x167 $x32)))
 (let (($x147 (not $x76)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x54 $x79)))
 (let (($x31 (and (not $x25) $x147)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x55 $x170)))
 (let (($x9 (not $x166)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x129 $x101)))
 (let (($x141 (and (not $x65) $x9)))
 (let (($x64 (and (and (and (and (and (and $x141 $x31) $x52) $x66) $x182) $x125) $x44)))
 (let (($x94 (and $x64 $x159)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x5 (or false (or false (and (and true (or $x82 $x158)) (or $x151 $x73))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x92 (and $x171 $x94)))
 (let (($x146 (= $x92 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x47 (= $x160 true)))
 (let (($x56 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x184 (= $x56 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x38 true)))
 (let (($x150 (= ?x121 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (= $x150 true)))
 (let ((?x57 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x178 (= (_ bv0 2) ?x57)))
 (let (($x131 (= $x178 true)))
 (let (($x169 (and $x131 $x122)))
 (let (($x133 (and $x169 $x153)))
 (let (($x148 (and $x133 $x184)))
 (let (($x60 (and $x148 $x47)))
 (let (($x161 (and $x60 $x146)))
 (let (($x39 (and $x161 $x115)))
 (let (($x114 (and $x39 $x175)))
 (let (($x200 (and $x114 $x199)))
 (let (($x203 (and $x200 $x202)))
 (let (($x206 (and $x203 $x205)))
 (let (($x209 (and $x206 $x208)))
 (let (($x212 (and $x209 $x211)))
 (let (($x215 (and $x212 $x214)))
 (let (($x218 (and $x215 $x217)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x219 (and $x109 $x218)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x220 (and $x163 $x219)))
 (let (($x15 (forall ((input.ind-%var735X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var735X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var735X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var734X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var734X)))
 (= $x19 false)))
 ))
 (let (($x135 (and $x181 $x15)))
 (let (($x221 (and $x135 $x220)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x222 (and $x119 $x221)))
 (let (($x225 (=> $x222 $x224)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (= $x99 false)))
 (let (($x224 (= $x223 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x46)))
 (let (($x216 (= ?x121 input.dst.llvm-%n)))
 (let (($x217 (= $x216 true)))
 (let (($x213 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x213 true)))
 (let (($x210 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x210 true)))
 (let (($x207 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x208 (= $x207 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x205 (= $x204 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (= $x201 true)))
 (let (($x197 (forall ((input.ind-%var725X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var725X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x98))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv2 32))) ?x58)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv3 32))) ?x124)))
 (let ((?x128 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var725X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var725X)))
 (=> $x86 (= ?x128 ?x194)))))))))
 ))
 (let (($x84 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x87 (and (bvule (_ bv0 32) input.ind-%var724X) (bvult input.ind-%var724X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var724X)))
 (= $x86 $x87))))
 ))
 (let (($x198 (and $x84 $x197)))
 (let (($x199 (= $x198 true)))
 (let ((?x11 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvadd input.dst.llvm-%m ?x11)))
 (let (($x162 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd ?x112 (_ bv3 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x7 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x71)))
 (let (($x191 (or false (or false (and (and true (or $x177 $x7)) (or $x130 $x162))))))
 (let (($x88 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) $x191)))
 (let (($x138 (=> (and $x99 (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32)))) $x191)))
 (let (($x175 (= $x138 true)))
 (let (($x83 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x115 (= $x83 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x187)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x149)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (and $x185 $x95)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x74 $x43)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x167 $x32)))
 (let (($x147 (not $x76)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x54 $x79)))
 (let (($x31 (and (not $x25) $x147)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x55 $x170)))
 (let (($x9 (not $x166)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x129 $x101)))
 (let (($x141 (and (not $x65) $x9)))
 (let (($x64 (and (and (and (and (and (and $x141 $x31) $x52) $x66) $x182) $x125) $x44)))
 (let (($x94 (and $x64 $x159)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x5 (or false (or false (and (and true (or $x82 $x158)) (or $x151 $x73))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x92 (and $x171 $x94)))
 (let (($x146 (= $x92 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x47 (= $x160 true)))
 (let (($x56 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x184 (= $x56 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x38 true)))
 (let (($x150 (= ?x121 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (= $x150 true)))
 (let ((?x57 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x178 (= (_ bv0 2) ?x57)))
 (let (($x131 (= $x178 true)))
 (let (($x169 (and $x131 $x122)))
 (let (($x133 (and $x169 $x153)))
 (let (($x148 (and $x133 $x184)))
 (let (($x60 (and $x148 $x47)))
 (let (($x161 (and $x60 $x146)))
 (let (($x39 (and $x161 $x115)))
 (let (($x114 (and $x39 $x175)))
 (let (($x200 (and $x114 $x199)))
 (let (($x203 (and $x200 $x202)))
 (let (($x206 (and $x203 $x205)))
 (let (($x209 (and $x206 $x208)))
 (let (($x212 (and $x209 $x211)))
 (let (($x215 (and $x212 $x214)))
 (let (($x218 (and $x215 $x217)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x219 (and $x109 $x218)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x220 (and $x163 $x219)))
 (let (($x15 (forall ((input.ind-%var735X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var735X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var735X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var734X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var734X)))
 (= $x19 false)))
 ))
 (let (($x135 (and $x181 $x15)))
 (let (($x221 (and $x135 $x220)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x222 (and $x119 $x221)))
 (let (($x225 (=> $x222 $x224)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x84800044)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x12020010)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x02020040)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x84800047)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x02020043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x84800044)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x02020040)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x12020013 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x12020012 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x12020011 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x12020010 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x198e5208)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd19cd280)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xc8eb5b04)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd19cd283)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x198e520b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd19cd280)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x198e5208)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #xc8eb5b07 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xc8eb5b06 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xc8eb5b05 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xc8eb5b04 (bvmul #x00000004 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (not $x180)))
 (let (($x134 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (not $x134)))
 (let (($x36 (or $x22 $x139)))
 (let (($x59 (= $x36 true)))
 (let ((?x23 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x23)))
 (let (($x89 (= ?x53 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x89 true)))
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x103)))
 (let (($x143 (= ?x85 input.dst.llvm-%n)))
 (let (($x70 (= $x143 true)))
 (let (($x50 (= ?x85 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x50 true)))
 (let (($x174 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x174 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x16 (= $x6 true)))
 (let (($x157 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x157 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x123 true)))
 (let (($x223 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul input.ind-%var945X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x210))))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x210 (_ bv2 32))) ?x214)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x210 (_ bv3 32))) ?x217)))
 (let ((?x145 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var945X)))
 (let (($x87 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var945X)))
 (=> $x87 (= ?x145 ?x220)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x193 (and (bvule (_ bv0 32) input.ind-%var944X) (bvult input.ind-%var944X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x87 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var944X)))
 (= $x87 $x193))))
 ))
 (let (($x224 (and $x61 $x223)))
 (let (($x225 (= $x224 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x114 (= $x175 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x88 (= $x191 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x117 (= $x116 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x51)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x97)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x146)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x92 $x161)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x94 $x83)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x182 $x21)))
 (let (($x125 (not $x77)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (and $x20 $x95)))
 (let (($x149 (and (not $x43) $x125)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x189 $x66)))
 (let (($x74 (not $x102)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x55 $x170)))
 (let (($x72 (and (not $x137) $x74)))
 (let (($x177 (and (and (and (and (and (and $x72 $x149) $x64) $x159) $x115) $x13) $x99)))
 (let (($x7 (and $x177 $x11)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x118 (or false (or false (and (and true (or $x54 $x79)) (or $x167 $x32))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x105 (and $x52 $x7)))
 (let (($x41 (= $x105 true)))
 (let ((?x129 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x101 (= (_ bv0 2) ?x129)))
 (let (($x65 (= $x101 true)))
 (let (($x130 (and $x65 $x41)))
 (let (($x164 (and $x130 $x117)))
 (let (($x138 (and $x164 $x88)))
 (let (($x86 (and $x138 $x114)))
 (let (($x226 (and $x86 $x225)))
 (let (($x106 (and $x226 $x142)))
 (let (($x10 (and $x106 $x12)))
 (let (($x40 (and $x10 $x16)))
 (let (($x152 (and $x40 $x27)))
 (let (($x93 (and $x152 $x24)))
 (let (($x78 (and $x93 $x70)))
 (let (($x42 (and $x78 $x80)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x5 $x42)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x18 (and $x132 $x108)))
 (let (($x151 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var955X)))
 (=> $x148 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var954X)))
 (= $x148 false)))
 ))
 (let (($x107 (and $x156 $x151)))
 (let (($x33 (and $x107 $x18)))
 (let (($x153 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x69 (and $x153 $x33)))
 (let ((?x19 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvadd input.dst.llvm-%m ?x19)))
 (let (($x46 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x119 (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x140 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x169 (or false (or false (and (and true (or $x109 $x140)) (or $x96 $x46))))))
 (let (($x38 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) $x169)))
 (let (($x28 (=> (and $x180 (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32)))) $x169)))
 (let (($x173 (and $x28 $x69)))
 (let (($x120 (=> $x173 $x59)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (not $x180)))
 (let (($x134 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (not $x134)))
 (let (($x36 (or $x22 $x139)))
 (let (($x59 (= $x36 true)))
 (let ((?x23 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x23)))
 (let (($x89 (= ?x53 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x89 true)))
 (let ((?x103 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x103)))
 (let (($x143 (= ?x85 input.dst.llvm-%n)))
 (let (($x70 (= $x143 true)))
 (let (($x50 (= ?x85 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x50 true)))
 (let (($x174 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x174 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x16 (= $x6 true)))
 (let (($x157 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x157 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x123 true)))
 (let (($x223 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul input.ind-%var945X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x210))))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x210 (_ bv2 32))) ?x214)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x210 (_ bv3 32))) ?x217)))
 (let ((?x145 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var945X)))
 (let (($x87 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var945X)))
 (=> $x87 (= ?x145 ?x220)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x193 (and (bvule (_ bv0 32) input.ind-%var944X) (bvult input.ind-%var944X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x87 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var944X)))
 (= $x87 $x193))))
 ))
 (let (($x224 (and $x61 $x223)))
 (let (($x225 (= $x224 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x114 (= $x175 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x88 (= $x191 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x117 (= $x116 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x51)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x97)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x146)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x92 $x161)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x94 $x83)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x182 $x21)))
 (let (($x125 (not $x77)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (and $x20 $x95)))
 (let (($x149 (and (not $x43) $x125)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x189 $x66)))
 (let (($x74 (not $x102)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x55 $x170)))
 (let (($x72 (and (not $x137) $x74)))
 (let (($x177 (and (and (and (and (and (and $x72 $x149) $x64) $x159) $x115) $x13) $x99)))
 (let (($x7 (and $x177 $x11)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x118 (or false (or false (and (and true (or $x54 $x79)) (or $x167 $x32))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x105 (and $x52 $x7)))
 (let (($x41 (= $x105 true)))
 (let ((?x129 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x101 (= (_ bv0 2) ?x129)))
 (let (($x65 (= $x101 true)))
 (let (($x130 (and $x65 $x41)))
 (let (($x164 (and $x130 $x117)))
 (let (($x138 (and $x164 $x88)))
 (let (($x86 (and $x138 $x114)))
 (let (($x226 (and $x86 $x225)))
 (let (($x106 (and $x226 $x142)))
 (let (($x10 (and $x106 $x12)))
 (let (($x40 (and $x10 $x16)))
 (let (($x152 (and $x40 $x27)))
 (let (($x93 (and $x152 $x24)))
 (let (($x78 (and $x93 $x70)))
 (let (($x42 (and $x78 $x80)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x5 $x42)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x18 (and $x132 $x108)))
 (let (($x151 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var955X)))
 (=> $x148 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var954X)))
 (= $x148 false)))
 ))
 (let (($x107 (and $x156 $x151)))
 (let (($x33 (and $x107 $x18)))
 (let (($x153 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x69 (and $x153 $x33)))
 (let ((?x19 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvadd input.dst.llvm-%m ?x19)))
 (let (($x46 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x119 (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x140 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x169 (or false (or false (and (and true (or $x109 $x140)) (or $x96 $x46))))))
 (let (($x38 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) $x169)))
 (let (($x28 (=> (and $x180 (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32)))) $x169)))
 (let (($x173 (and $x28 $x69)))
 (let (($x120 (=> $x173 $x59)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x249 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x247 (bvmul (_ bv4294967295 32) ?x246)))
 (let ((?x248 (bvneg ?x247)))
 (let (($x250 (= ?x248 ?x249)))
 (let (($x251 (= $x250 true)))
 (let ((?x234 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x234)))
 (let (($x236 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x237 (= $x236 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x232 (= $x231 true)))
 (let (($x228 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x229 (= $x228 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x172 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x207 true)))
 (let (($x206 (forall ((input.ind-%var965X (_ BitVec 32)) )(let ((?x84 (bvadd (bvmul input.ind-%var965X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x84))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv2 32))) ?x204)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv3 32))) ?x202)))
 (let ((?x36 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var965X)))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var965X)))
 (=> $x78 (= ?x36 ?x196)))))))))
 ))
 (let (($x173 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x33 (and (bvule (_ bv0 32) input.ind-%var964X) (bvult input.ind-%var964X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var964X)))
 (= $x78 $x33))))
 ))
 (let (($x136 (and $x173 $x206)))
 (let (($x179 (= $x136 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x40 (bvsub ?x135 ?x15)))
 (let (($x168 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x40) (bvult ?x135 ?x40))))
 (let (($x10 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x6 (ite $x10 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x106 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x157 (bvmul (_ bv4 64) ?x106)))
 (let ((?x12 ((_ extract 63 32) ?x157)))
 (let (($x16 (= ?x12 ?x6)))
 (let (($x103 (and $x16 $x168)))
 (let (($x123 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x85 (and $x123 $x103)))
 (let (($x180 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x180 $x85)))
 (let (($x24 (= $x50 true)))
 (let (($x222 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x223 (= $x222 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x220 (= $x217 true)))
 (let (($x213 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x211 (= $x213 true)))
 (let (($x216 (= $x180 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x98)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x87)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x191)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (and $x164 $x88)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x117 $x138)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (and $x99 $x177)))
 (let (($x11 (not $x51)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x13 $x71)))
 (let (($x105 (and (not $x97) $x11)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x146 $x161)))
 (let (($x115 (not $x83)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x20 $x95)))
 (let (($x39 (and (not $x92) $x115)))
 (let (($x210 (and (and (and (and (and (and $x39 $x105) $x130) $x116) $x175) $x86) $x192)))
 (let (($x218 (and $x210 $x193)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x159 (or false (or false (and (and true (or $x21 $x77)) (or $x112 $x44))))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x219 (and $x94 $x218)))
 (let (($x200 (= $x219 true)))
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x147)))
 (let (($x66 (= ?x31 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (= $x66 true)))
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x137 (= (_ bv0 2) ?x170)))
 (let (($x185 (= $x137 true)))
 (let (($x118 (= ?x31 input.dst.llvm-%n)))
 (let (($x52 (= $x118 true)))
 (let (($x189 (and $x52 $x185)))
 (let (($x74 (and $x189 $x102)))
 (let (($x215 (and $x74 $x200)))
 (let (($x212 (and $x215 $x216)))
 (let (($x214 (and $x212 $x211)))
 (let (($x221 (and $x214 $x220)))
 (let (($x224 (and $x221 $x223)))
 (let (($x93 (and $x224 $x24)))
 (let (($x126 (and $x93 $x179)))
 (let (($x208 (and $x126 $x14)))
 (let (($x62 (and $x208 $x37)))
 (let (($x230 (and $x62 $x229)))
 (let (($x233 (and $x230 $x232)))
 (let (($x238 (and $x233 $x237)))
 (let (($x32 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and (not $x32) $x238)))
 (let (($x154 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and $x154 $x240)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x242 (and $x54 $x241)))
 (let (($x9 (forall ((input.ind-%var975X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var975X)))
 (=> $x49 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var975X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var974X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var974X)))
 (= $x49 false)))
 ))
 (let (($x111 (and $x107 $x9)))
 (let (($x243 (and $x111 $x242)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x244 (and $x148 $x243)))
 (let (($x122 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd ?x135 (_ bv3 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x178 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x176 (or false (or false (and (and true (or $x57 $x178)) (or $x150 $x122))))))
 (let (($x184 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x176)))
 (let (($x119 (=> (and $x180 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x176)))
 (let (($x245 (and $x119 $x244)))
 (let (($x252 (=> $x245 $x251)))
 (not $x252)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x249 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x246 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x247 (bvmul (_ bv4294967295 32) ?x246)))
 (let ((?x248 (bvneg ?x247)))
 (let (($x250 (= ?x248 ?x249)))
 (let (($x251 (= $x250 true)))
 (let ((?x234 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x234)))
 (let (($x236 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x237 (= $x236 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x232 (= $x231 true)))
 (let (($x228 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x229 (= $x228 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x172 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x207 true)))
 (let (($x206 (forall ((input.ind-%var965X (_ BitVec 32)) )(let ((?x84 (bvadd (bvmul input.ind-%var965X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x84))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv2 32))) ?x204)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x84 (_ bv3 32))) ?x202)))
 (let ((?x36 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var965X)))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var965X)))
 (=> $x78 (= ?x36 ?x196)))))))))
 ))
 (let (($x173 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x33 (and (bvule (_ bv0 32) input.ind-%var964X) (bvult input.ind-%var964X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var964X)))
 (= $x78 $x33))))
 ))
 (let (($x136 (and $x173 $x206)))
 (let (($x179 (= $x136 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x40 (bvsub ?x135 ?x15)))
 (let (($x168 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x40) (bvult ?x135 ?x40))))
 (let (($x10 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x6 (ite $x10 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x106 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x157 (bvmul (_ bv4 64) ?x106)))
 (let ((?x12 ((_ extract 63 32) ?x157)))
 (let (($x16 (= ?x12 ?x6)))
 (let (($x103 (and $x16 $x168)))
 (let (($x123 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x85 (and $x123 $x103)))
 (let (($x180 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x180 $x85)))
 (let (($x24 (= $x50 true)))
 (let (($x222 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x223 (= $x222 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x220 (= $x217 true)))
 (let (($x213 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x211 (= $x213 true)))
 (let (($x216 (= $x180 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x98)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x87)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x191)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (and $x164 $x88)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x117 $x138)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (and $x99 $x177)))
 (let (($x11 (not $x51)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x13 $x71)))
 (let (($x105 (and (not $x97) $x11)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x146 $x161)))
 (let (($x115 (not $x83)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x20 $x95)))
 (let (($x39 (and (not $x92) $x115)))
 (let (($x210 (and (and (and (and (and (and $x39 $x105) $x130) $x116) $x175) $x86) $x192)))
 (let (($x218 (and $x210 $x193)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x159 (or false (or false (and (and true (or $x21 $x77)) (or $x112 $x44))))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x219 (and $x94 $x218)))
 (let (($x200 (= $x219 true)))
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x147)))
 (let (($x66 (= ?x31 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (= $x66 true)))
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x137 (= (_ bv0 2) ?x170)))
 (let (($x185 (= $x137 true)))
 (let (($x118 (= ?x31 input.dst.llvm-%n)))
 (let (($x52 (= $x118 true)))
 (let (($x189 (and $x52 $x185)))
 (let (($x74 (and $x189 $x102)))
 (let (($x215 (and $x74 $x200)))
 (let (($x212 (and $x215 $x216)))
 (let (($x214 (and $x212 $x211)))
 (let (($x221 (and $x214 $x220)))
 (let (($x224 (and $x221 $x223)))
 (let (($x93 (and $x224 $x24)))
 (let (($x126 (and $x93 $x179)))
 (let (($x208 (and $x126 $x14)))
 (let (($x62 (and $x208 $x37)))
 (let (($x230 (and $x62 $x229)))
 (let (($x233 (and $x230 $x232)))
 (let (($x238 (and $x233 $x237)))
 (let (($x32 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and (not $x32) $x238)))
 (let (($x154 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and $x154 $x240)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x242 (and $x54 $x241)))
 (let (($x9 (forall ((input.ind-%var975X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var975X)))
 (=> $x49 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var975X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var974X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var974X)))
 (= $x49 false)))
 ))
 (let (($x111 (and $x107 $x9)))
 (let (($x243 (and $x111 $x242)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x244 (and $x148 $x243)))
 (let (($x122 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd ?x135 (_ bv3 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x178 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x176 (or false (or false (and (and true (or $x57 $x178)) (or $x150 $x122))))))
 (let (($x184 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x176)))
 (let (($x119 (=> (and $x180 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x176)))
 (let (($x245 (and $x119 $x244)))
 (let (($x252 (=> $x245 $x251)))
 (not $x252)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x42 (bvule ?x80 (_ bv3 32))))
 (let (($x158 (= $x42 true)))
 (let ((?x181 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x181)))
 (let (($x56 (= ?x133 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x56 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x53 true)))
 (let (($x129 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x139 (= $x129 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x156 (= $x60 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x250)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x249 (= (_ bv0 32) ?x248)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x247 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x242)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x241 $x243)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (and $x240 $x244)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (and $x229 $x230)))
 (let (($x232 (not $x231)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x228 (and $x37 $x62)))
 (let (($x234 (and (not $x228) $x232)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x179 $x126)))
 (let (($x14 (not $x207)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x120 $x90)))
 (let (($x172 (and (not $x136) $x14)))
 (let (($x59 (and (and (and (and (and (and $x172 $x234) $x236) $x238) $x245) $x247) $x249)))
 (let (($x17 (and $x59 $x251)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x199 (or false (or false (and (and true (or $x160 $x205)) (or $x195 $x128))))))
 (let (($x206 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x199)))
 (let (($x5 (and $x206 $x17)))
 (let (($x73 (= $x5 true)))
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x69 (= $x33 true)))
 (let (($x78 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x78 true)))
 (let (($x50 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (= $x50 true)))
 (let (($x152 (forall ((input.ind-%var985X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var985X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x225))))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x225 (_ bv2 32))) ?x106)))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x225 (_ bv3 32))) ?x10)))
 (let ((?x192 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var985X)))
 (let (($x162 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var985X)))
 (=> $x162 (= ?x192 ?x174)))))))))
 ))
 (let (($x114 (forall ((input.ind-%var984X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var984X) (bvult input.ind-%var984X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x162 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var984X)))
 (= $x162 $x175))))
 ))
 (let (($x168 (and $x114 $x152)))
 (let (($x103 (= $x168 true)))
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x34)))
 (let (($x105 (= ?x182 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x105 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x115 (bvsub ?x135 ?x15)))
 (let (($x97 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x115) (bvult ?x135 ?x115))))
 (let (($x146 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x161 (ite $x146 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x95 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x92 (bvmul (_ bv4 64) ?x95)))
 (let ((?x8 ((_ extract 63 32) ?x92)))
 (let (($x83 (= ?x8 ?x161)))
 (let (($x7 (and $x83 $x97)))
 (let (($x94 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x99 (and $x94 $x7)))
 (let (($x165 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x177 (=> $x165 $x99)))
 (let (($x51 (= $x177 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x44 (= (_ bv0 2) ?x112)))
 (let (($x64 (= $x44 true)))
 (let (($x21 (= ?x182 input.dst.llvm-%n)))
 (let (($x77 (= $x21 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x74 (= $x102 true)))
 (let (($x66 (= $x165 true)))
 (let (($x43 (and $x66 $x74)))
 (let (($x125 (and $x43 $x77)))
 (let (($x183 (and $x125 $x64)))
 (let (($x11 (and $x183 $x51)))
 (let (($x41 (and $x11 $x29)))
 (let (($x85 (and $x41 $x103)))
 (let (($x93 (and $x85 $x24)))
 (let (($x108 (and $x93 $x18)))
 (let (($x173 (and $x108 $x69)))
 (let (($x35 (and $x173 $x73)))
 (let (($x26 (and $x35 $x156)))
 (let (($x143 (and $x26 $x139)))
 (let (($x227 (and $x143 $x89)))
 (let (($x63 (and $x227 $x82)))
 (let (($x189 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (and (not $x189) $x63)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (and $x137 $x67)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x58 (and $x52 $x127)))
 (let (($x147 (forall ((input.ind-%var995X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var995X)))
 (=> $x30 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var995X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var994X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var994X)))
 (= $x30 false)))
 ))
 (let (($x31 (and $x9 $x147)))
 (let (($x81 (and $x31 $x58)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x47 (and $x144 $x81)))
 (let (($x38 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd ?x135 (_ bv3 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x131 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x178)))
 (let (($x119 (or false (or false (and (and true (or $x96 $x131)) (or $x169 $x38))))))
 (let (($x148 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x119)))
 (let (($x155 (=> (and $x165 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x119)))
 (let (($x70 (and $x155 $x47)))
 (let (($x22 (=> $x70 $x158)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x42 (bvule ?x80 (_ bv3 32))))
 (let (($x158 (= $x42 true)))
 (let ((?x181 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x181)))
 (let (($x56 (= ?x133 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x56 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x53 true)))
 (let (($x129 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x139 (= $x129 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x156 (= $x60 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x250)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x249 (= (_ bv0 32) ?x248)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x247 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x242)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x241 $x243)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (and $x240 $x244)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (and $x229 $x230)))
 (let (($x232 (not $x231)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x228 (and $x37 $x62)))
 (let (($x234 (and (not $x228) $x232)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x179 $x126)))
 (let (($x14 (not $x207)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x120 $x90)))
 (let (($x172 (and (not $x136) $x14)))
 (let (($x59 (and (and (and (and (and (and $x172 $x234) $x236) $x238) $x245) $x247) $x249)))
 (let (($x17 (and $x59 $x251)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x199 (or false (or false (and (and true (or $x160 $x205)) (or $x195 $x128))))))
 (let (($x206 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x199)))
 (let (($x5 (and $x206 $x17)))
 (let (($x73 (= $x5 true)))
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x69 (= $x33 true)))
 (let (($x78 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x78 true)))
 (let (($x50 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (= $x50 true)))
 (let (($x152 (forall ((input.ind-%var985X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var985X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x225))))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x225 (_ bv2 32))) ?x106)))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x225 (_ bv3 32))) ?x10)))
 (let ((?x192 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var985X)))
 (let (($x162 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var985X)))
 (=> $x162 (= ?x192 ?x174)))))))))
 ))
 (let (($x114 (forall ((input.ind-%var984X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var984X) (bvult input.ind-%var984X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x162 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var984X)))
 (= $x162 $x175))))
 ))
 (let (($x168 (and $x114 $x152)))
 (let (($x103 (= $x168 true)))
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x34)))
 (let (($x105 (= ?x182 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x105 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x115 (bvsub ?x135 ?x15)))
 (let (($x97 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x115) (bvult ?x135 ?x115))))
 (let (($x146 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x161 (ite $x146 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x95 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x92 (bvmul (_ bv4 64) ?x95)))
 (let ((?x8 ((_ extract 63 32) ?x92)))
 (let (($x83 (= ?x8 ?x161)))
 (let (($x7 (and $x83 $x97)))
 (let (($x94 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x99 (and $x94 $x7)))
 (let (($x165 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x177 (=> $x165 $x99)))
 (let (($x51 (= $x177 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x44 (= (_ bv0 2) ?x112)))
 (let (($x64 (= $x44 true)))
 (let (($x21 (= ?x182 input.dst.llvm-%n)))
 (let (($x77 (= $x21 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x74 (= $x102 true)))
 (let (($x66 (= $x165 true)))
 (let (($x43 (and $x66 $x74)))
 (let (($x125 (and $x43 $x77)))
 (let (($x183 (and $x125 $x64)))
 (let (($x11 (and $x183 $x51)))
 (let (($x41 (and $x11 $x29)))
 (let (($x85 (and $x41 $x103)))
 (let (($x93 (and $x85 $x24)))
 (let (($x108 (and $x93 $x18)))
 (let (($x173 (and $x108 $x69)))
 (let (($x35 (and $x173 $x73)))
 (let (($x26 (and $x35 $x156)))
 (let (($x143 (and $x26 $x139)))
 (let (($x227 (and $x143 $x89)))
 (let (($x63 (and $x227 $x82)))
 (let (($x189 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (and (not $x189) $x63)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (and $x137 $x67)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x58 (and $x52 $x127)))
 (let (($x147 (forall ((input.ind-%var995X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var995X)))
 (=> $x30 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var995X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var994X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var994X)))
 (= $x30 false)))
 ))
 (let (($x31 (and $x9 $x147)))
 (let (($x81 (and $x31 $x58)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x47 (and $x144 $x81)))
 (let (($x38 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd ?x135 (_ bv3 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x131 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x178)))
 (let (($x119 (or false (or false (and (and true (or $x96 $x131)) (or $x169 $x38))))))
 (let (($x148 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x119)))
 (let (($x155 (=> (and $x165 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x119)))
 (let (($x70 (and $x155 $x47)))
 (let (($x22 (=> $x70 $x158)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00100000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x2a1000d0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x04101004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00100003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x04101007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00100000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x04101004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x2a1000d3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x2a1000d2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x2a1000d1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x2a1000d0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf97eb4d0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xedbf2054)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x89acfffc)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xedbf2057)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf97eb4d3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xedbf2054)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf97eb4d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x89acffff (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x89acfffe (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x89acfffd (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x89acfffc (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x223 (bvule ?x209 (_ bv4 32))))
 (let (($x141 (= $x223 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x213)))
 (let (($x200 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x200 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x217 (= $x218 true)))
 (let (($x145 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x117 (= $x145 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x87 (= $x167 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x91)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x158)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x127 $x81)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x67 $x47)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x139 $x143)))
 (let (($x89 (not $x53)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x156 $x26)))
 (let (($x181 (and (not $x129) $x89)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x251 $x17)))
 (let (($x73 (not $x5)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x253 $x237)))
 (let (($x60 (and (not $x250) $x73)))
 (let (($x111 (and (and (and (and (and (and $x60 $x181) $x56) $x63) $x70) $x42) $x22)))
 (let (($x54 (and $x111 $x104)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x240 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x240)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x240)))
 (let (($x248 (or false (or false (and (and true (or $x241 $x242)) (or $x245 $x72))))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x248)))
 (let (($x49 (and $x59 $x54)))
 (let (($x151 (= $x49 true)))
 (let (($x234 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x234 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (= $x230 true)))
 (let (($x62 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let ((?x196 (bvadd (bvmul input.ind-%var1075X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x196))))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv2 32))) ?x90)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv3 32))) ?x179)))
 (let ((?x93 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1075X)))
 (let (($x123 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1075X)))
 (=> $x123 (= ?x93 ?x14)))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var1074X) (bvult input.ind-%var1074X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x123 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1074X)))
 (= $x123 $x152))))
 ))
 (let (($x228 (and $x103 $x62)))
 (let (($x233 (= $x228 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x20)))
 (let (($x6 (= ?x95 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x6 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x162 (bvsub ?x135 ?x15)))
 (let (($x124 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x162) (bvult ?x135 ?x162))))
 (let (($x105 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x29 (ite $x105 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x177 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x177)))
 (let ((?x11 ((_ extract 63 32) ?x51)))
 (let (($x41 (= ?x11 ?x29)))
 (let (($x114 (and $x41 $x124)))
 (let (($x7 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x192 (and $x7 $x114)))
 (let (($x45 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x45 $x192)))
 (let (($x224 (= $x98 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x39 (= (_ bv0 2) ?x83)))
 (let (($x115 (= $x39 true)))
 (let (($x92 (= ?x95 input.dst.llvm-%n)))
 (let (($x8 (= $x92 true)))
 (let (($x183 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x187 (= $x183 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x44 (= $x112 true)))
 (let (($x149 (= $x45 true)))
 (let (($x64 (and $x149 $x44)))
 (let (($x159 (and $x64 $x187)))
 (let (($x146 (and $x159 $x8)))
 (let (($x13 (and $x146 $x115)))
 (let (($x225 (and $x13 $x224)))
 (let (($x212 (and $x225 $x16)))
 (let (($x229 (and $x212 $x233)))
 (let (($x232 (and $x229 $x231)))
 (let (($x235 (and $x232 $x252)))
 (let (($x65 (and $x235 $x151)))
 (let (($x130 (and $x65 $x87)))
 (let (($x193 (and $x130 $x117)))
 (let (($x220 (and $x193 $x217)))
 (let (($x219 (and $x220 $x215)))
 (let (($x125 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and (not $x125) $x219)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and $x21 $x214)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x61 (and $x113 $x221)))
 (let (($x102 (forall ((input.ind-%var1085X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1085X)))
 (=> $x79 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1085X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var1084X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1084X)))
 (= $x79 false)))
 ))
 (let (($x74 (and $x147 $x102)))
 (let (($x164 (and $x74 $x61)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x107 $x164)))
 (let (($x176 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd ?x135 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x150 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x155 (or false (or false (and (and true (or $x46 $x150)) (or $x28 $x176))))))
 (let (($x144 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x155)))
 (let (($x109 (=> (and $x45 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x155)))
 (let (($x222 (and $x109 $x191)))
 (let (($x32 (=> $x222 $x141)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x223 (bvule ?x209 (_ bv4 32))))
 (let (($x141 (= $x223 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x213)))
 (let (($x200 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x200 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x217 (= $x218 true)))
 (let (($x145 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x117 (= $x145 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x87 (= $x167 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x91)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x158)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x127 $x81)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x67 $x47)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x139 $x143)))
 (let (($x89 (not $x53)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x156 $x26)))
 (let (($x181 (and (not $x129) $x89)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x251 $x17)))
 (let (($x73 (not $x5)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x253 $x237)))
 (let (($x60 (and (not $x250) $x73)))
 (let (($x111 (and (and (and (and (and (and $x60 $x181) $x56) $x63) $x70) $x42) $x22)))
 (let (($x54 (and $x111 $x104)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x240 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x240)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x240)))
 (let (($x248 (or false (or false (and (and true (or $x241 $x242)) (or $x245 $x72))))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x248)))
 (let (($x49 (and $x59 $x54)))
 (let (($x151 (= $x49 true)))
 (let (($x234 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x234 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (= $x230 true)))
 (let (($x62 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let ((?x196 (bvadd (bvmul input.ind-%var1075X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x196))))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv2 32))) ?x90)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv3 32))) ?x179)))
 (let ((?x93 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1075X)))
 (let (($x123 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1075X)))
 (=> $x123 (= ?x93 ?x14)))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var1074X) (bvult input.ind-%var1074X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x123 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1074X)))
 (= $x123 $x152))))
 ))
 (let (($x228 (and $x103 $x62)))
 (let (($x233 (= $x228 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x20)))
 (let (($x6 (= ?x95 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x6 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x162 (bvsub ?x135 ?x15)))
 (let (($x124 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x162) (bvult ?x135 ?x162))))
 (let (($x105 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x29 (ite $x105 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x177 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x177)))
 (let ((?x11 ((_ extract 63 32) ?x51)))
 (let (($x41 (= ?x11 ?x29)))
 (let (($x114 (and $x41 $x124)))
 (let (($x7 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x192 (and $x7 $x114)))
 (let (($x45 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x45 $x192)))
 (let (($x224 (= $x98 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x39 (= (_ bv0 2) ?x83)))
 (let (($x115 (= $x39 true)))
 (let (($x92 (= ?x95 input.dst.llvm-%n)))
 (let (($x8 (= $x92 true)))
 (let (($x183 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x187 (= $x183 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x44 (= $x112 true)))
 (let (($x149 (= $x45 true)))
 (let (($x64 (and $x149 $x44)))
 (let (($x159 (and $x64 $x187)))
 (let (($x146 (and $x159 $x8)))
 (let (($x13 (and $x146 $x115)))
 (let (($x225 (and $x13 $x224)))
 (let (($x212 (and $x225 $x16)))
 (let (($x229 (and $x212 $x233)))
 (let (($x232 (and $x229 $x231)))
 (let (($x235 (and $x232 $x252)))
 (let (($x65 (and $x235 $x151)))
 (let (($x130 (and $x65 $x87)))
 (let (($x193 (and $x130 $x117)))
 (let (($x220 (and $x193 $x217)))
 (let (($x219 (and $x220 $x215)))
 (let (($x125 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and (not $x125) $x219)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and $x21 $x214)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x61 (and $x113 $x221)))
 (let (($x102 (forall ((input.ind-%var1085X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1085X)))
 (=> $x79 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1085X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var1084X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1084X)))
 (= $x79 false)))
 ))
 (let (($x74 (and $x147 $x102)))
 (let (($x164 (and $x74 $x61)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x107 $x164)))
 (let (($x176 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd ?x135 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x150 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x155 (or false (or false (and (and true (or $x46 $x150)) (or $x28 $x176))))))
 (let (($x144 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x155)))
 (let (($x109 (=> (and $x45 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x155)))
 (let (($x222 (and $x109 $x191)))
 (let (($x32 (=> $x222 $x141)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000230)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000233)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000230)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x3e6affbc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd53a7ff8)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd53a7ffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x3e6affbf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd53a7ff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x3e6affbc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x7fffffff (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7ffffffe (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7ffffffd (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7ffffffc (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x195 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x12 (bvule ?x195 (_ bv4294967294 32))))
 (let (($x10 (= $x12 true)))
 (let ((?x106 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x106)))
 (let (($x33 (= ?x108 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x33 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x157 (= $x24 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x166 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x141)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x209)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x219 $x221)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x215 $x61)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x130 $x145)))
 (let (($x193 (not $x117)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x65 $x167)))
 (let (($x217 (and (not $x87) $x193)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x111 $x91)))
 (let (($x54 (not $x104)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x133 $x56)))
 (let (($x151 (and (not $x22) $x54)))
 (let (($x154 (and (and (and (and (and (and $x151 $x217) $x213) $x200) $x164) $x222) $x223)))
 (let (($x170 (and $x154 $x32)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x42 (or false (or false (and (and true (or $x210 $x67)) (or $x81 $x47))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x31 (and $x158 $x170)))
 (let (($x52 (= $x31 true)))
 (let (($x53 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x89 (= $x53 true)))
 (let (($x227 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x227 true)))
 (let (($x60 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul input.ind-%var1165X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x246))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv2 32))) ?x59)))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv3 32))) ?x250)))
 (let ((?x228 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1165X)))
 (let (($x126 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x126 (= ?x228 ?x17)))))))))
 ))
 (let (($x14 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x90 (and (bvule (_ bv0 32) input.ind-%var1164X) (bvult input.ind-%var1164X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x126 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x126 $x90))))
 ))
 (let (($x156 (and $x14 $x60)))
 (let (($x26 (= $x156 true)))
 (let ((?x115 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x115)))
 (let (($x103 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x93 (= $x103 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x224 (bvsub ?x135 ?x15)))
 (let (($x212 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x224) (bvult ?x135 ?x224))))
 (let (($x114 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x192 (ite $x114 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x88 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x175 (bvmul (_ bv4 64) ?x88)))
 (let ((?x124 ((_ extract 63 32) ?x175)))
 (let (($x98 (= ?x124 ?x192)))
 (let (($x123 (and $x98 $x212)))
 (let (($x138 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x27 (and $x138 $x123)))
 (let (($x153 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (=> $x153 $x27)))
 (let (($x152 (= $x40 true)))
 (let ((?x177 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x51 (= (_ bv0 2) ?x177)))
 (let (($x11 (= $x51 true)))
 (let (($x71 (= ?x13 input.dst.llvm-%n)))
 (let (($x97 (= $x71 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x161 (= $x146 true)))
 (let (($x92 (= $x153 true)))
 (let (($x83 (and $x92 $x161)))
 (let (($x7 (and $x83 $x97)))
 (let (($x105 (and $x7 $x11)))
 (let (($x168 (and $x105 $x152)))
 (let (($x18 (and $x168 $x93)))
 (let (($x129 (and $x18 $x26)))
 (let (($x143 (and $x129 $x139)))
 (let (($x181 (and $x143 $x89)))
 (let (($x30 (and $x181 $x52)))
 (let (($x185 (and $x30 $x239)))
 (let (($x226 (and $x185 $x157)))
 (let (($x194 (and $x226 $x201)))
 (let (($x95 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x160 (and (not $x95) $x194)))
 (let (($x94 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x94 $x160)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x84 (and $x183 $x173)))
 (let (($x112 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x55 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1175X) (_ bv0 32)))))
 ))
 (let (($x102 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x55 false)))
 ))
 (let (($x44 (and $x102 $x112)))
 (let (($x69 (and $x44 $x84)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x9 $x69)))
 (let (($x119 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd ?x135 (_ bv3 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x169 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x109 (or false (or false (and (and true (or $x121 $x169)) (or $x184 $x119))))))
 (let (($x107 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x109)))
 (let (($x110 (=> (and $x153 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x109)))
 (let (($x205 (and $x110 $x197)))
 (let (($x174 (=> $x205 $x10)))
 (not $x174))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x195 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x12 (bvule ?x195 (_ bv4294967294 32))))
 (let (($x10 (= $x12 true)))
 (let ((?x106 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x106)))
 (let (($x33 (= ?x108 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x33 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x157 (= $x24 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x166 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x141)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x209)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x219 $x221)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x215 $x61)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x130 $x145)))
 (let (($x193 (not $x117)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x65 $x167)))
 (let (($x217 (and (not $x87) $x193)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x111 $x91)))
 (let (($x54 (not $x104)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x133 $x56)))
 (let (($x151 (and (not $x22) $x54)))
 (let (($x154 (and (and (and (and (and (and $x151 $x217) $x213) $x200) $x164) $x222) $x223)))
 (let (($x170 (and $x154 $x32)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x42 (or false (or false (and (and true (or $x210 $x67)) (or $x81 $x47))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x31 (and $x158 $x170)))
 (let (($x52 (= $x31 true)))
 (let (($x53 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x89 (= $x53 true)))
 (let (($x227 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x227 true)))
 (let (($x60 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul input.ind-%var1165X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x246))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv2 32))) ?x59)))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv3 32))) ?x250)))
 (let ((?x228 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1165X)))
 (let (($x126 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x126 (= ?x228 ?x17)))))))))
 ))
 (let (($x14 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x90 (and (bvule (_ bv0 32) input.ind-%var1164X) (bvult input.ind-%var1164X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x126 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x126 $x90))))
 ))
 (let (($x156 (and $x14 $x60)))
 (let (($x26 (= $x156 true)))
 (let ((?x115 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x115)))
 (let (($x103 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x93 (= $x103 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x224 (bvsub ?x135 ?x15)))
 (let (($x212 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x224) (bvult ?x135 ?x224))))
 (let (($x114 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x192 (ite $x114 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x88 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x175 (bvmul (_ bv4 64) ?x88)))
 (let ((?x124 ((_ extract 63 32) ?x175)))
 (let (($x98 (= ?x124 ?x192)))
 (let (($x123 (and $x98 $x212)))
 (let (($x138 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x27 (and $x138 $x123)))
 (let (($x153 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (=> $x153 $x27)))
 (let (($x152 (= $x40 true)))
 (let ((?x177 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x51 (= (_ bv0 2) ?x177)))
 (let (($x11 (= $x51 true)))
 (let (($x71 (= ?x13 input.dst.llvm-%n)))
 (let (($x97 (= $x71 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x161 (= $x146 true)))
 (let (($x92 (= $x153 true)))
 (let (($x83 (and $x92 $x161)))
 (let (($x7 (and $x83 $x97)))
 (let (($x105 (and $x7 $x11)))
 (let (($x168 (and $x105 $x152)))
 (let (($x18 (and $x168 $x93)))
 (let (($x129 (and $x18 $x26)))
 (let (($x143 (and $x129 $x139)))
 (let (($x181 (and $x143 $x89)))
 (let (($x30 (and $x181 $x52)))
 (let (($x185 (and $x30 $x239)))
 (let (($x226 (and $x185 $x157)))
 (let (($x194 (and $x226 $x201)))
 (let (($x95 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x160 (and (not $x95) $x194)))
 (let (($x94 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x94 $x160)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x84 (and $x183 $x173)))
 (let (($x112 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x55 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1175X) (_ bv0 32)))))
 ))
 (let (($x102 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x55 false)))
 ))
 (let (($x44 (and $x102 $x112)))
 (let (($x69 (and $x44 $x84)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x9 $x69)))
 (let (($x119 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd ?x135 (_ bv3 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x169 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x109 (or false (or false (and (and true (or $x121 $x169)) (or $x184 $x119))))))
 (let (($x107 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x109)))
 (let (($x110 (=> (and $x153 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x109)))
 (let (($x205 (and $x110 $x197)))
 (let (($x174 (=> $x205 $x10)))
 (not $x174))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 162 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x245 (bvsge ?x37 (_ bv0 32))))
 (let (($x43 (= $x245 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x249 (bvneg ?x100)))
 (let (($x234 (= ?x249 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x234 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x241 (= $x231 true)))
 (let (($x203 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x203 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x207)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x48)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x205)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x197 $x195)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x69 $x12)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x157 $x226)))
 (let (($x108 (not $x106)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x239 $x185)))
 (let (($x201 (and (not $x24) $x108)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x32 $x170)))
 (let (($x52 (not $x31)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x68 $x211)))
 (let (($x166 (and (not $x141) $x52)))
 (let (($x76 (and (and (and (and (and (and $x166 $x201) $x160) $x84) $x10) $x128) $x36)))
 (let (($x75 (and $x76 $x233)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x209 (or false (or false (and (and true (or $x219 $x214)) (or $x164 $x142))))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x209)))
 (let (($x77 (and $x154 $x75)))
 (let (($x62 (= $x77 true)))
 (let (($x217 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x217 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (= $x145 true)))
 (let (($x167 (forall ((input.ind-%var1185X (_ BitVec 32)) )(let ((?x80 (bvadd (bvmul input.ind-%var1185X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x80 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x80))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x80 (_ bv2 32))) ?x56)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x80 (_ bv3 32))) ?x111)))
 (let ((?x129 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1185X)))
 (let (($x238 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1185X)))
 (=> $x238 (= ?x129 ?x54)))))))))
 ))
 (let (($x73 (forall ((input.ind-%var1184X (_ BitVec 32)) )(let (($x17 (and (bvule (_ bv0 32) input.ind-%var1184X) (bvult input.ind-%var1184X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x238 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1184X)))
 (= $x238 $x17))))
 ))
 (let (($x87 (and $x73 $x167)))
 (let (($x218 (= $x87 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x29)))
 (let (($x229 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (= $x229 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x103 (bvsub ?x135 ?x15)))
 (let (($x199 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x103) (bvult ?x135 ?x103))))
 (let (($x40 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x152 (ite $x40 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvmul (_ bv4 64) ?x212)))
 (let ((?x27 ((_ extract 63 32) ?x123)))
 (let (($x168 (= ?x27 ?x152)))
 (let (($x120 (and $x168 $x199)))
 (let (($x6 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x90 (and $x6 $x120)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (=> $x190 $x90)))
 (let (($x14 (= $x179 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x114 (= (_ bv0 2) ?x124)))
 (let (($x192 (= $x114 true)))
 (let (($x138 (= ?x41 input.dst.llvm-%n)))
 (let (($x162 (= $x138 true)))
 (let (($x177 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x177 true)))
 (let (($x7 (= $x190 true)))
 (let (($x11 (and $x7 $x51)))
 (let (($x88 (and $x11 $x162)))
 (let (($x98 (and $x88 $x192)))
 (let (($x228 (and $x98 $x14)))
 (let (($x246 (and $x228 $x72)))
 (let (($x130 (and $x246 $x218)))
 (let (($x193 (and $x130 $x117)))
 (let (($x220 (and $x193 $x134)))
 (let (($x202 (and $x220 $x62)))
 (let (($x230 (and $x202 $x136)))
 (let (($x242 (and $x230 $x241)))
 (let (($x232 (and $x242 $x252)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and (not $x97) $x232)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and $x13 $x240)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x83 $x243)))
 (let (($x8 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x34 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1195X) (_ bv0 32)))))
 ))
 (let (($x112 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x34 false)))
 ))
 (let (($x146 (and $x112 $x8)))
 (let (($x208 (and $x146 $x196)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x206 (and $x147 $x208)))
 (let (($x155 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x135 (_ bv3 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x28 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x110 (or false (or false (and (and true (or $x122 $x28)) (or $x148 $x155))))))
 (let (($x9 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x110)))
 (let (($x178 (=> (and $x190 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x110)))
 (let (($x244 (and $x178 $x206)))
 (let (($x125 (=> $x244 $x43)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x245 (bvsge ?x37 (_ bv0 32))))
 (let (($x43 (= $x245 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x249 (bvneg ?x100)))
 (let (($x234 (= ?x249 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x234 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x241 (= $x231 true)))
 (let (($x203 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x203 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x207)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x48)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x205)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x197 $x195)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x69 $x12)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x157 $x226)))
 (let (($x108 (not $x106)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x239 $x185)))
 (let (($x201 (and (not $x24) $x108)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x32 $x170)))
 (let (($x52 (not $x31)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x68 $x211)))
 (let (($x166 (and (not $x141) $x52)))
 (let (($x76 (and (and (and (and (and (and $x166 $x201) $x160) $x84) $x10) $x128) $x36)))
 (let (($x75 (and $x76 $x233)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x209 (or false (or false (and (and true (or $x219 $x214)) (or $x164 $x142))))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x209)))
 (let (($x77 (and $x154 $x75)))
 (let (($x62 (= $x77 true)))
 (let (($x217 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x217 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (= $x145 true)))
 (let (($x167 (forall ((input.ind-%var1185X (_ BitVec 32)) )(let ((?x80 (bvadd (bvmul input.ind-%var1185X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x80 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x80))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x80 (_ bv2 32))) ?x56)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x80 (_ bv3 32))) ?x111)))
 (let ((?x129 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1185X)))
 (let (($x238 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1185X)))
 (=> $x238 (= ?x129 ?x54)))))))))
 ))
 (let (($x73 (forall ((input.ind-%var1184X (_ BitVec 32)) )(let (($x17 (and (bvule (_ bv0 32) input.ind-%var1184X) (bvult input.ind-%var1184X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x238 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1184X)))
 (= $x238 $x17))))
 ))
 (let (($x87 (and $x73 $x167)))
 (let (($x218 (= $x87 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x29)))
 (let (($x229 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (= $x229 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x103 (bvsub ?x135 ?x15)))
 (let (($x199 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x103) (bvult ?x135 ?x103))))
 (let (($x40 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x152 (ite $x40 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvmul (_ bv4 64) ?x212)))
 (let ((?x27 ((_ extract 63 32) ?x123)))
 (let (($x168 (= ?x27 ?x152)))
 (let (($x120 (and $x168 $x199)))
 (let (($x6 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x90 (and $x6 $x120)))
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (=> $x190 $x90)))
 (let (($x14 (= $x179 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x114 (= (_ bv0 2) ?x124)))
 (let (($x192 (= $x114 true)))
 (let (($x138 (= ?x41 input.dst.llvm-%n)))
 (let (($x162 (= $x138 true)))
 (let (($x177 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x177 true)))
 (let (($x7 (= $x190 true)))
 (let (($x11 (and $x7 $x51)))
 (let (($x88 (and $x11 $x162)))
 (let (($x98 (and $x88 $x192)))
 (let (($x228 (and $x98 $x14)))
 (let (($x246 (and $x228 $x72)))
 (let (($x130 (and $x246 $x218)))
 (let (($x193 (and $x130 $x117)))
 (let (($x220 (and $x193 $x134)))
 (let (($x202 (and $x220 $x62)))
 (let (($x230 (and $x202 $x136)))
 (let (($x242 (and $x230 $x241)))
 (let (($x232 (and $x242 $x252)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and (not $x97) $x232)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and $x13 $x240)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x83 $x243)))
 (let (($x8 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x34 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1195X) (_ bv0 32)))))
 ))
 (let (($x112 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x34 false)))
 ))
 (let (($x146 (and $x112 $x8)))
 (let (($x208 (and $x146 $x196)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x206 (and $x147 $x208)))
 (let (($x155 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x135 (_ bv3 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x28 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x110 (or false (or false (and (and true (or $x122 $x28)) (or $x148 $x155))))))
 (let (($x9 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x110)))
 (let (($x178 (=> (and $x190 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x110)))
 (let (($x244 (and $x178 $x206)))
 (let (($x125 (=> $x244 $x43)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 162 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x156 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (bvule ?x156 (_ bv4294967294 32))))
 (let (($x64 (= $x70 true)))
 (let ((?x63 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x63)))
 (let (($x181 (= ?x210 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x181 true)))
 (let (($x53 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x127 (= $x53 true)))
 (let (($x237 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x23 (= $x237 true)))
 (let (($x216 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let ((?x43 (bvadd (bvmul input.ind-%var1205X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x43))))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv2 32))) ?x213)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv3 32))) ?x21)))
 (let ((?x203 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1205X)))
 (let (($x10 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x10 (= ?x203 ?x183)))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1204X) (bvult input.ind-%var1204X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x10 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x10 $x207))))
 ))
 (let (($x20 (and $x75 $x216)))
 (let (($x26 (= $x20 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x137 (bvsub ?x135 ?x15)))
 (let (($x173 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x137) (bvult ?x135 ?x137))))
 (let (($x106 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x108 (ite $x106 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x33 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x157 (bvmul (_ bv4 64) ?x33)))
 (let ((?x226 ((_ extract 63 32) ?x157)))
 (let (($x201 (= ?x226 ?x108)))
 (let (($x84 (and $x201 $x173)))
 (let (($x185 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x74 (and $x185 $x84)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x69 (=> $x188 $x74)))
 (let (($x197 (= $x69 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x31 (= $x170 true)))
 (let (($x30 (= $x188 true)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x221)))
 (let ((?x219 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x219)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x223)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x134)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x217 $x220)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (and $x193 $x200)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x111 $x54)))
 (let (($x65 (not $x151)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x133 $x42)))
 (let (($x87 (and (not $x56) $x65)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x91 $x104)))
 (let (($x22 (not $x25)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x120 $x90)))
 (let (($x158 (and (not $x80) $x22)))
 (let (($x209 (and (and (and (and (and (and $x158 $x87) $x130) $x117) $x236) $x215) $x214)))
 (let (($x154 (and $x209 $x61)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x228 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x228)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x228)))
 (let (($x129 (or false (or false (and (and true (or $x229 $x72)) (or $x250 $x59))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x68 (and $x171 $x154)))
 (let (($x211 (= $x68 true)))
 (let (($x103 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x18 (= $x103 true)))
 (let (($x152 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x152 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x175)))
 (let (($x212 (= ?x124 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (= $x212 true)))
 (let ((?x225 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x224 (= (_ bv0 2) ?x225)))
 (let (($x6 (= $x224 true)))
 (let (($x114 (= ?x124 input.dst.llvm-%n)))
 (let (($x192 (= $x114 true)))
 (let (($x16 (and $x192 $x6)))
 (let (($x27 (and $x16 $x123)))
 (let (($x93 (and $x27 $x168)))
 (let (($x126 (and $x93 $x18)))
 (let (($x141 (and $x126 $x211)))
 (let (($x32 (and $x141 $x30)))
 (let (($x52 (and $x32 $x31)))
 (let (($x205 (and $x52 $x197)))
 (let (($x35 (and $x205 $x26)))
 (let (($x143 (and $x35 $x23)))
 (let (($x58 (and $x143 $x127)))
 (let (($x89 (and $x58 $x116)))
 (let (($x162 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (and (not $x162) $x89)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x41 $x67)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x251 (and $x11 $x81)))
 (let (($x99 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1215X)))
 (=> $x187 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1215X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1214X)))
 (= $x187 false)))
 ))
 (let (($x177 (and $x8 $x99)))
 (let (($x248 (and $x177 $x251)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x247 (and $x102 $x248)))
 (let (($x109 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd ?x135 (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x184 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x178 (or false (or false (and (and true (or $x38 $x184)) (or $x144 $x109))))))
 (let (($x147 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x178)))
 (let (($x131 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x178)))
 (let (($x47 (and $x131 $x247)))
 (let (($x95 (=> $x47 $x64)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x156 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (bvule ?x156 (_ bv4294967294 32))))
 (let (($x64 (= $x70 true)))
 (let ((?x63 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x63)))
 (let (($x181 (= ?x210 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x181 true)))
 (let (($x53 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x127 (= $x53 true)))
 (let (($x237 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x23 (= $x237 true)))
 (let (($x216 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let ((?x43 (bvadd (bvmul input.ind-%var1205X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x43))))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv2 32))) ?x213)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv3 32))) ?x21)))
 (let ((?x203 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1205X)))
 (let (($x10 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x10 (= ?x203 ?x183)))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1204X) (bvult input.ind-%var1204X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x10 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x10 $x207))))
 ))
 (let (($x20 (and $x75 $x216)))
 (let (($x26 (= $x20 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x137 (bvsub ?x135 ?x15)))
 (let (($x173 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x137) (bvult ?x135 ?x137))))
 (let (($x106 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x108 (ite $x106 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x33 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x157 (bvmul (_ bv4 64) ?x33)))
 (let ((?x226 ((_ extract 63 32) ?x157)))
 (let (($x201 (= ?x226 ?x108)))
 (let (($x84 (and $x201 $x173)))
 (let (($x185 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x74 (and $x185 $x84)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x69 (=> $x188 $x74)))
 (let (($x197 (= $x69 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x31 (= $x170 true)))
 (let (($x30 (= $x188 true)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x221)))
 (let ((?x219 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x219)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x223)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x134)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x217 $x220)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (and $x193 $x200)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x111 $x54)))
 (let (($x65 (not $x151)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x133 $x42)))
 (let (($x87 (and (not $x56) $x65)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x91 $x104)))
 (let (($x22 (not $x25)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x120 $x90)))
 (let (($x158 (and (not $x80) $x22)))
 (let (($x209 (and (and (and (and (and (and $x158 $x87) $x130) $x117) $x236) $x215) $x214)))
 (let (($x154 (and $x209 $x61)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x228 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x228)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x228)))
 (let (($x129 (or false (or false (and (and true (or $x229 $x72)) (or $x250 $x59))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x68 (and $x171 $x154)))
 (let (($x211 (= $x68 true)))
 (let (($x103 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x18 (= $x103 true)))
 (let (($x152 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x152 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x175)))
 (let (($x212 (= ?x124 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (= $x212 true)))
 (let ((?x225 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x224 (= (_ bv0 2) ?x225)))
 (let (($x6 (= $x224 true)))
 (let (($x114 (= ?x124 input.dst.llvm-%n)))
 (let (($x192 (= $x114 true)))
 (let (($x16 (and $x192 $x6)))
 (let (($x27 (and $x16 $x123)))
 (let (($x93 (and $x27 $x168)))
 (let (($x126 (and $x93 $x18)))
 (let (($x141 (and $x126 $x211)))
 (let (($x32 (and $x141 $x30)))
 (let (($x52 (and $x32 $x31)))
 (let (($x205 (and $x52 $x197)))
 (let (($x35 (and $x205 $x26)))
 (let (($x143 (and $x35 $x23)))
 (let (($x58 (and $x143 $x127)))
 (let (($x89 (and $x58 $x116)))
 (let (($x162 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (and (not $x162) $x89)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x41 $x67)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x251 (and $x11 $x81)))
 (let (($x99 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1215X)))
 (=> $x187 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1215X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x187 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1214X)))
 (= $x187 false)))
 ))
 (let (($x177 (and $x8 $x99)))
 (let (($x248 (and $x177 $x251)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x247 (and $x102 $x248)))
 (let (($x109 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd ?x135 (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x184 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x178 (or false (or false (and (and true (or $x38 $x184)) (or $x144 $x109))))))
 (let (($x147 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x178)))
 (let (($x131 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x178)))
 (let (($x47 (and $x131 $x247)))
 (let (($x95 (=> $x47 $x64)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (bvsge ?x62 (_ bv0 32))))
 (let (($x161 (= $x37 true)))
 (let ((?x232 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x240 (bvneg ?x232)))
 (let (($x100 (= ?x240 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x100 true)))
 (let (($x241 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (= $x241 true)))
 (let (($x174 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (= $x174 true)))
 (let (($x198 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let ((?x64 (bvadd (bvmul input.ind-%var1225X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x64))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv2 32))) ?x199)))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv3 32))) ?x94)))
 (let ((?x237 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1225X)))
 (let (($x253 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x253 (= ?x237 ?x83)))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x55 (and (bvule (_ bv0 32) input.ind-%var1224X) (bvult input.ind-%var1224X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x253 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x253 $x55))))
 ))
 (let (($x71 (and $x216 $x198)))
 (let (($x202 (= $x71 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x76 (bvsub ?x135 ?x15)))
 (let (($x75 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x76) (bvult ?x135 ?x76))))
 (let (($x197 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x205 (ite $x197 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvmul (_ bv4 64) ?x84)))
 (let ((?x69 ((_ extract 63 32) ?x74)))
 (let (($x10 (= ?x69 ?x205)))
 (let (($x203 (and $x10 $x75)))
 (let (($x182 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x230 (and $x182 $x203)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x245 (=> $x140 $x230)))
 (let (($x43 (= $x245 true)))
 (let (($x108 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x108 true)))
 (let (($x226 (= $x140 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x141)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x68)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (and $x78 $x214)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x215 $x209)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x117 $x191)))
 (let (($x217 (not $x193)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x130 $x142)))
 (let (($x220 (and (not $x145) $x217)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x54 $x151)))
 (let (($x87 (not $x65)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x5 $x73)))
 (let (($x218 (and (not $x111) $x87)))
 (let (($x239 (and (and (and (and (and (and $x218 $x220) $x236) $x223) $x221) $x154) $x211)))
 (let (($x185 (and $x239 $x30)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x42 (or false (or false (and (and true (or $x90 $x80)) (or $x104 $x25))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x24 (and $x167 $x185)))
 (let (($x33 (= $x24 true)))
 (let (($x238 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x250 (= $x238 true)))
 (let (($x229 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x229 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x123)))
 (let (($x179 (= ?x27 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (= $x179 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x103 (= (_ bv0 2) ?x93)))
 (let (($x18 (= $x103 true)))
 (let (($x40 (= ?x27 input.dst.llvm-%n)))
 (let (($x152 (= $x40 true)))
 (let (($x126 (and $x152 $x18)))
 (let (($x139 (and $x126 $x14)))
 (let (($x246 (and $x139 $x72)))
 (let (($x59 (and $x246 $x250)))
 (let (($x157 (and $x59 $x33)))
 (let (($x106 (and $x157 $x226)))
 (let (($x194 (and $x106 $x201)))
 (let (($x159 (and $x194 $x43)))
 (let (($x195 (and $x159 $x202)))
 (let (($x231 (and $x195 $x128)))
 (let (($x208 (and $x231 $x196)))
 (let (($x242 (and $x208 $x249)))
 (let (($x16 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and (not $x16) $x242)))
 (let (($x224 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x206 (and $x224 $x243)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x192 $x206)))
 (let (($x175 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1235X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x39 false)))
 ))
 (let (($x124 (and $x99 $x175)))
 (let (($x79 (and $x124 $x12)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x48 (and $x112 $x79)))
 (let (($x110 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd ?x135 (_ bv3 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x148 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x131 (or false (or false (and (and true (or $x176 $x148)) (or $x107 $x110))))))
 (let (($x102 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x131)))
 (let (($x150 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x131)))
 (let (($x244 (and $x150 $x48)))
 (let (($x97 (=> $x244 $x161)))
 (not $x97))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (bvsge ?x62 (_ bv0 32))))
 (let (($x161 (= $x37 true)))
 (let ((?x232 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x240 (bvneg ?x232)))
 (let (($x100 (= ?x240 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x100 true)))
 (let (($x241 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (= $x241 true)))
 (let (($x174 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (= $x174 true)))
 (let (($x198 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let ((?x64 (bvadd (bvmul input.ind-%var1225X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x64))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv2 32))) ?x199)))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv3 32))) ?x94)))
 (let ((?x237 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1225X)))
 (let (($x253 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x253 (= ?x237 ?x83)))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x55 (and (bvule (_ bv0 32) input.ind-%var1224X) (bvult input.ind-%var1224X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x253 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x253 $x55))))
 ))
 (let (($x71 (and $x216 $x198)))
 (let (($x202 (= $x71 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x76 (bvsub ?x135 ?x15)))
 (let (($x75 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x76) (bvult ?x135 ?x76))))
 (let (($x197 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x205 (ite $x197 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvmul (_ bv4 64) ?x84)))
 (let ((?x69 ((_ extract 63 32) ?x74)))
 (let (($x10 (= ?x69 ?x205)))
 (let (($x203 (and $x10 $x75)))
 (let (($x182 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x230 (and $x182 $x203)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x245 (=> $x140 $x230)))
 (let (($x43 (= $x245 true)))
 (let (($x108 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x108 true)))
 (let (($x226 (= $x140 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x141)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x68)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (and $x78 $x214)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x215 $x209)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x117 $x191)))
 (let (($x217 (not $x193)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x130 $x142)))
 (let (($x220 (and (not $x145) $x217)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x54 $x151)))
 (let (($x87 (not $x65)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x5 $x73)))
 (let (($x218 (and (not $x111) $x87)))
 (let (($x239 (and (and (and (and (and (and $x218 $x220) $x236) $x223) $x221) $x154) $x211)))
 (let (($x185 (and $x239 $x30)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x42 (or false (or false (and (and true (or $x90 $x80)) (or $x104 $x25))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x24 (and $x167 $x185)))
 (let (($x33 (= $x24 true)))
 (let (($x238 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x250 (= $x238 true)))
 (let (($x229 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x229 true)))
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x123)))
 (let (($x179 (= ?x27 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (= $x179 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x103 (= (_ bv0 2) ?x93)))
 (let (($x18 (= $x103 true)))
 (let (($x40 (= ?x27 input.dst.llvm-%n)))
 (let (($x152 (= $x40 true)))
 (let (($x126 (and $x152 $x18)))
 (let (($x139 (and $x126 $x14)))
 (let (($x246 (and $x139 $x72)))
 (let (($x59 (and $x246 $x250)))
 (let (($x157 (and $x59 $x33)))
 (let (($x106 (and $x157 $x226)))
 (let (($x194 (and $x106 $x201)))
 (let (($x159 (and $x194 $x43)))
 (let (($x195 (and $x159 $x202)))
 (let (($x231 (and $x195 $x128)))
 (let (($x208 (and $x231 $x196)))
 (let (($x242 (and $x208 $x249)))
 (let (($x16 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and (not $x16) $x242)))
 (let (($x224 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x206 (and $x224 $x243)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x192 $x206)))
 (let (($x175 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1235X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x39 false)))
 ))
 (let (($x124 (and $x99 $x175)))
 (let (($x79 (and $x124 $x12)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x48 (and $x112 $x79)))
 (let (($x110 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd ?x135 (_ bv3 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x148 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x131 (or false (or false (and (and true (or $x176 $x148)) (or $x107 $x110))))))
 (let (($x102 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x131)))
 (let (($x150 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x131)))
 (let (($x244 (and $x150 $x48)))
 (let (($x97 (=> $x244 $x161)))
 (not $x97))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x156 (bvule ?x26 input.dst.llvm-%n)))
 (let (($x51 (= $x156 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x67 (bvneg ?x89)))
 (let (($x63 (= ?x67 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x210 (= $x63 true)))
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x72)))
 (let (($x127 (= ?x246 input.dst.llvm-%n)))
 (let (($x251 (= $x127 true)))
 (let (($x85 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x85 true)))
 (let (($x138 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x138 true)))
 (let (($x11 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var1245X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x244))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv2 32))) ?x97)))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv3 32))) ?x17)))
 (let ((?x71 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1245X)))
 (let (($x115 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x115 (= ?x71 ?x13)))))))))
 ))
 (let (($x83 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var1244X) (bvult input.ind-%var1244X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x115 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x115 $x199))))
 ))
 (let (($x187 (and $x83 $x11)))
 (let (($x92 (= $x187 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x43 (bvsub ?x135 ?x15)))
 (let (($x21 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x43) (bvult ?x135 ?x43))))
 (let (($x203 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x230 (ite $x203 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x207 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x207)))
 (let ((?x75 ((_ extract 63 32) ?x233)))
 (let (($x245 (= ?x75 ?x230)))
 (let (($x55 (and $x245 $x21)))
 (let (($x36 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x66 (and $x36 $x55)))
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x216 (=> $x163 $x66)))
 (let (($x237 (= $x216 true)))
 (let (($x74 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x69 (= $x74 true)))
 (let (($x173 (= $x163 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x185)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x141)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x61)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x52 $x154)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x221 $x166)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x236 $x170)))
 (let (($x223 (not $x222)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x220 $x32)))
 (let (($x215 (and (not $x200) $x223)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x145 $x134)))
 (let (($x191 (not $x117)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x104 $x25)))
 (let (($x217 (and (not $x142) $x191)))
 (let (($x201 (and (and (and (and (and (and $x217 $x215) $x219) $x209) $x68) $x239) $x30)))
 (let (($x194 (and $x201 $x24)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x133)))
 (let (($x87 (or false (or false (and (and true (or $x42 $x167)) (or $x111 $x164))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x137 (and $x130 $x194)))
 (let (($x160 (= $x137 true)))
 (let (($x90 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x80 (= $x90 true)))
 (let (($x171 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x171 true)))
 (let (($x238 (= ?x246 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (= $x238 true)))
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x139 (= (_ bv0 2) ?x14)))
 (let (($x228 (= $x139 true)))
 (let (($x59 (and $x228 $x250)))
 (let (($x120 (and $x59 $x56)))
 (let (($x49 (and $x120 $x80)))
 (let (($x182 (and $x49 $x160)))
 (let (($x84 (and $x182 $x173)))
 (let (($x197 (and $x84 $x69)))
 (let (($x143 (and $x197 $x237)))
 (let (($x235 (and $x143 $x92)))
 (let (($x44 (and $x235 $x35)))
 (let (($x53 (and $x44 $x19)))
 (let (($x248 (and $x53 $x251)))
 (let (($x58 (and $x248 $x210)))
 (let (($x126 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and (not $x126) $x58)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and $x103 $x81)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x152 $x247)))
 (let (($x123 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (=> $x105 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1255X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1254X)))
 (= $x105 false)))
 ))
 (let (($x27 (and $x175 $x123)))
 (let (($x125 (and $x27 $x252)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x8 $x125)))
 (let (($x178 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd ?x135 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x144 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x148)))
 (let (($x150 (or false (or false (and (and true (or $x119 $x144)) (or $x9 $x178))))))
 (let (($x112 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x150)))
 (let (($x169 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x150)))
 (let (($x47 (and $x169 $x213)))
 (let (($x162 (=> $x47 $x51)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x156 (bvule ?x26 input.dst.llvm-%n)))
 (let (($x51 (= $x156 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x67 (bvneg ?x89)))
 (let (($x63 (= ?x67 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x210 (= $x63 true)))
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x72)))
 (let (($x127 (= ?x246 input.dst.llvm-%n)))
 (let (($x251 (= $x127 true)))
 (let (($x85 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x85 true)))
 (let (($x138 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x138 true)))
 (let (($x11 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var1245X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x244))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv2 32))) ?x97)))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv3 32))) ?x17)))
 (let ((?x71 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1245X)))
 (let (($x115 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x115 (= ?x71 ?x13)))))))))
 ))
 (let (($x83 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var1244X) (bvult input.ind-%var1244X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x115 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x115 $x199))))
 ))
 (let (($x187 (and $x83 $x11)))
 (let (($x92 (= $x187 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x43 (bvsub ?x135 ?x15)))
 (let (($x21 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x43) (bvult ?x135 ?x43))))
 (let (($x203 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x230 (ite $x203 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x207 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x207)))
 (let ((?x75 ((_ extract 63 32) ?x233)))
 (let (($x245 (= ?x75 ?x230)))
 (let (($x55 (and $x245 $x21)))
 (let (($x36 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x66 (and $x36 $x55)))
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x216 (=> $x163 $x66)))
 (let (($x237 (= $x216 true)))
 (let (($x74 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x69 (= $x74 true)))
 (let (($x173 (= $x163 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x185)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x141)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x61)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x52 $x154)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x221 $x166)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x236 $x170)))
 (let (($x223 (not $x222)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x220 $x32)))
 (let (($x215 (and (not $x200) $x223)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x145 $x134)))
 (let (($x191 (not $x117)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x104 $x25)))
 (let (($x217 (and (not $x142) $x191)))
 (let (($x201 (and (and (and (and (and (and $x217 $x215) $x219) $x209) $x68) $x239) $x30)))
 (let (($x194 (and $x201 $x24)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x133)))
 (let (($x87 (or false (or false (and (and true (or $x42 $x167)) (or $x111 $x164))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x137 (and $x130 $x194)))
 (let (($x160 (= $x137 true)))
 (let (($x90 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x80 (= $x90 true)))
 (let (($x171 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x171 true)))
 (let (($x238 (= ?x246 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (= $x238 true)))
 (let ((?x14 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x139 (= (_ bv0 2) ?x14)))
 (let (($x228 (= $x139 true)))
 (let (($x59 (and $x228 $x250)))
 (let (($x120 (and $x59 $x56)))
 (let (($x49 (and $x120 $x80)))
 (let (($x182 (and $x49 $x160)))
 (let (($x84 (and $x182 $x173)))
 (let (($x197 (and $x84 $x69)))
 (let (($x143 (and $x197 $x237)))
 (let (($x235 (and $x143 $x92)))
 (let (($x44 (and $x235 $x35)))
 (let (($x53 (and $x44 $x19)))
 (let (($x248 (and $x53 $x251)))
 (let (($x58 (and $x248 $x210)))
 (let (($x126 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and (not $x126) $x58)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and $x103 $x81)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x152 $x247)))
 (let (($x123 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (=> $x105 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1255X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1254X)))
 (= $x105 false)))
 ))
 (let (($x27 (and $x175 $x123)))
 (let (($x125 (and $x27 $x252)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x8 $x125)))
 (let (($x178 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd ?x135 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x144 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x148)))
 (let (($x150 (or false (or false (and (and true (or $x119 $x144)) (or $x9 $x178))))))
 (let (($x112 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x150)))
 (let (($x169 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x150)))
 (let (($x47 (and $x169 $x213)))
 (let (($x162 (=> $x47 $x51)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x297 (forall ((input.ind-%var1297X (_ BitVec 32)) )(let ((?x63 (bvadd (bvmul input.ind-%var1297X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x144 (bvadd ?x135 (_ bv3 32))))
 (let ((?x264 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x267 (store ?x264 (bvadd ?x135 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x270 (store ?x267 (bvadd ?x135 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x272 (store ?x270 ?x144 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x291 (concat (select ?x272 (bvadd ?x63 (_ bv2 32))) (concat (select ?x272 (bvadd ?x63 (_ bv1 32))) (select ?x272 ?x63)))))
 (let ((?x17 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1297X)))
 (let (($x101 (= input.ind-%var1297X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x295 (= (ite $x101 input.spec-%var-i-0.L3%6%bbentry ?x17) (concat (select ?x272 (bvadd ?x63 (_ bv3 32))) ?x291))))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1297X)))
 (let (($x186 (or $x83 $x101)))
 (=> $x186 $x295))))))))))))))))
 ))
 (let (($x255 (forall ((input.ind-%var1296X (_ BitVec 32)) )(let (($x232 (bvule (_ bv0 32) input.ind-%var1296X)))
 (let (($x132 (and $x232 (bvult input.ind-%var1296X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x101 (= input.ind-%var1296X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1296X)))
 (let (($x186 (or $x83 $x101)))
 (= $x186 $x132)))))))
 ))
 (let (($x298 (and $x255 $x297)))
 (let (($x299 (= $x298 true)))
 (let ((?x240 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x240)))
 (let (($x241 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x241 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x128 (= (_ bv0 2) ?x174)))
 (let (($x242 (= $x128 true)))
 (let (($x198 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x70 (= $x198 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x82 (= $x7 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x192 (= $x124 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x41 (= $x202 true)))
 (let (($x77 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let ((?x63 (bvadd (bvmul input.ind-%var1269X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x63))))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv2 32))) ?x247)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv3 32))) ?x213)))
 (let ((?x17 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1269X)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1269X)))
 (=> $x83 (= ?x17 ?x156)))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x232 (bvule (_ bv0 32) input.ind-%var1268X)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1268X)))
 (= $x83 (and $x232 (bvult input.ind-%var1268X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x45 (and $x37 $x77)))
 (let (($x91 (= $x45 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x183 (bvsub ?x135 ?x15)))
 (let (($x216 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x183) (bvult ?x135 ?x183))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x43 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x203 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x230 (bvmul (_ bv4 64) ?x203)))
 (let ((?x245 ((_ extract 63 32) ?x230)))
 (let (($x253 (= ?x245 ?x43)))
 (let (($x237 (and $x253 $x216)))
 (let (($x233 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x143 (and $x233 $x237)))
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (=> $x163 $x143)))
 (let (($x95 (= $x115 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x10 (= $x205 true)))
 (let (($x74 (= $x163 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x108)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x211)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x221 $x61)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x226 $x154)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x170 $x222)))
 (let (($x215 (not $x223)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x200 $x31)))
 (let (($x78 (and (not $x236) $x215)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x134 $x117)))
 (let (($x217 (not $x191)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x218 $x133)))
 (let (($x32 (and (not $x145) $x217)))
 (let (($x137 (and (and (and (and (and (and $x32 $x78) $x157) $x209) $x166) $x106) $x239)))
 (let (($x160 (and $x137 $x141)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x25 (or false (or false (and (and true (or $x73 $x111)) (or $x151 $x65))))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x25)))
 (let (($x182 (and $x193 $x160)))
 (let (($x173 (= $x182 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x171)))
 (let (($x80 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (= $x80 true)))
 (let (($x120 (= ?x56 input.dst.llvm-%n)))
 (let (($x90 (= $x120 true)))
 (let (($x22 (and $x90 $x49)))
 (let (($x84 (and $x22 $x173)))
 (let (($x69 (and $x84 $x74)))
 (let (($x36 (and $x69 $x10)))
 (let (($x180 (and $x36 $x95)))
 (let (($x146 (and $x180 $x91)))
 (let (($x225 (and $x146 $x41)))
 (let (($x39 (and $x225 $x192)))
 (let (($x6 (and $x39 $x82)))
 (let (($x116 (and $x6 $x70)))
 (let (($x243 (and $x116 $x242)))
 (let (($x231 (and $x243 $x196)))
 (let (($x59 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and (not $x59) $x231)))
 (let (($x238 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x206 (and $x238 $x249)))
 (let (($x229 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x64 (and $x229 $x206)))
 (let (($x14 (forall ((input.ind-%var1279X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1279X)))
 (=> $x98 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1279X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1278X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1278X)))
 (= $x98 false)))
 ))
 (let (($x139 (and $x123 $x14)))
 (let (($x136 (and $x139 $x64)))
 (let (($x99 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x99 $x136)))
 (let (($x131 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd ?x135 (_ bv3 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x107 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x169 (or false (or false (and (and true (or $x155 $x107)) (or $x147 $x131))))))
 (let (($x8 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x169)))
 (let (($x28 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x169)))
 (let (($x12 (and $x28 $x172)))
 (let (($x300 (=> $x12 $x299)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x297 (forall ((input.ind-%var1297X (_ BitVec 32)) )(let ((?x63 (bvadd (bvmul input.ind-%var1297X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x144 (bvadd ?x135 (_ bv3 32))))
 (let ((?x264 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x267 (store ?x264 (bvadd ?x135 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x270 (store ?x267 (bvadd ?x135 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x272 (store ?x270 ?x144 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x291 (concat (select ?x272 (bvadd ?x63 (_ bv2 32))) (concat (select ?x272 (bvadd ?x63 (_ bv1 32))) (select ?x272 ?x63)))))
 (let ((?x17 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1297X)))
 (let (($x101 (= input.ind-%var1297X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x295 (= (ite $x101 input.spec-%var-i-0.L3%6%bbentry ?x17) (concat (select ?x272 (bvadd ?x63 (_ bv3 32))) ?x291))))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1297X)))
 (let (($x186 (or $x83 $x101)))
 (=> $x186 $x295))))))))))))))))
 ))
 (let (($x255 (forall ((input.ind-%var1296X (_ BitVec 32)) )(let (($x232 (bvule (_ bv0 32) input.ind-%var1296X)))
 (let (($x132 (and $x232 (bvult input.ind-%var1296X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x101 (= input.ind-%var1296X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1296X)))
 (let (($x186 (or $x83 $x101)))
 (= $x186 $x132)))))))
 ))
 (let (($x298 (and $x255 $x297)))
 (let (($x299 (= $x298 true)))
 (let ((?x240 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x240)))
 (let (($x241 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x241 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x128 (= (_ bv0 2) ?x174)))
 (let (($x242 (= $x128 true)))
 (let (($x198 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x70 (= $x198 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x82 (= $x7 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x192 (= $x124 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x41 (= $x202 true)))
 (let (($x77 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let ((?x63 (bvadd (bvmul input.ind-%var1269X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x63))))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv2 32))) ?x247)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv3 32))) ?x213)))
 (let ((?x17 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1269X)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1269X)))
 (=> $x83 (= ?x17 ?x156)))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x232 (bvule (_ bv0 32) input.ind-%var1268X)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1268X)))
 (= $x83 (and $x232 (bvult input.ind-%var1268X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x45 (and $x37 $x77)))
 (let (($x91 (= $x45 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x183 (bvsub ?x135 ?x15)))
 (let (($x216 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x183) (bvult ?x135 ?x183))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x43 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x203 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x230 (bvmul (_ bv4 64) ?x203)))
 (let ((?x245 ((_ extract 63 32) ?x230)))
 (let (($x253 (= ?x245 ?x43)))
 (let (($x237 (and $x253 $x216)))
 (let (($x233 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x143 (and $x233 $x237)))
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (=> $x163 $x143)))
 (let (($x95 (= $x115 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x10 (= $x205 true)))
 (let (($x74 (= $x163 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x108)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x211)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x221 $x61)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x226 $x154)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x170 $x222)))
 (let (($x215 (not $x223)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x200 $x31)))
 (let (($x78 (and (not $x236) $x215)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x134 $x117)))
 (let (($x217 (not $x191)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x218 $x133)))
 (let (($x32 (and (not $x145) $x217)))
 (let (($x137 (and (and (and (and (and (and $x32 $x78) $x157) $x209) $x166) $x106) $x239)))
 (let (($x160 (and $x137 $x141)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x25 (or false (or false (and (and true (or $x73 $x111)) (or $x151 $x65))))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x25)))
 (let (($x182 (and $x193 $x160)))
 (let (($x173 (= $x182 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x171)))
 (let (($x80 (= ?x56 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (= $x80 true)))
 (let (($x120 (= ?x56 input.dst.llvm-%n)))
 (let (($x90 (= $x120 true)))
 (let (($x22 (and $x90 $x49)))
 (let (($x84 (and $x22 $x173)))
 (let (($x69 (and $x84 $x74)))
 (let (($x36 (and $x69 $x10)))
 (let (($x180 (and $x36 $x95)))
 (let (($x146 (and $x180 $x91)))
 (let (($x225 (and $x146 $x41)))
 (let (($x39 (and $x225 $x192)))
 (let (($x6 (and $x39 $x82)))
 (let (($x116 (and $x6 $x70)))
 (let (($x243 (and $x116 $x242)))
 (let (($x231 (and $x243 $x196)))
 (let (($x59 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and (not $x59) $x231)))
 (let (($x238 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x206 (and $x238 $x249)))
 (let (($x229 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x64 (and $x229 $x206)))
 (let (($x14 (forall ((input.ind-%var1279X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1279X)))
 (=> $x98 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1279X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1278X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1278X)))
 (= $x98 false)))
 ))
 (let (($x139 (and $x123 $x14)))
 (let (($x136 (and $x139 $x64)))
 (let (($x99 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x99 $x136)))
 (let (($x131 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd ?x135 (_ bv3 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x107 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x169 (or false (or false (and (and true (or $x155 $x107)) (or $x147 $x131))))))
 (let (($x8 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x169)))
 (let (($x28 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x169)))
 (let (($x12 (and $x28 $x172)))
 (let (($x300 (=> $x12 $x299)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x224 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x93 (bvmul (_ bv4294967295 32) ?x224)))
 (let ((?x27 (bvneg ?x93)))
 (let (($x105 (= ?x27 ?x152)))
 (let (($x88 (= $x105 true)))
 (let ((?x293 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x295 (bvneg ?x293)))
 (let (($x296 (= ?x295 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x296 true)))
 (let (($x287 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x287 true)))
 (let (($x292 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x290 (= $x292 true)))
 (let (($x270 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (= $x270 true)))
 (let (($x267 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x269 (= $x267 true)))
 (let (($x262 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let ((?x64 (bvadd (bvmul input.ind-%var1307X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x64))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv2 32))) ?x101)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv3 32))) ?x86)))
 (let ((?x39 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1307X)))
 (let (($x247 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1307X)))
 (=> $x247 (= ?x39 ?x255)))))))))
 ))
 (let (($x41 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x146 (and (bvule (_ bv0 32) input.ind-%var1306X) (bvult input.ind-%var1306X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x247 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1306X)))
 (= $x247 $x146))))
 ))
 (let (($x264 (and $x41 $x262)))
 (let (($x266 (= $x264 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x17 (bvsub ?x135 ?x15)))
 (let (($x47 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x17) (bvult ?x135 ?x17))))
 (let (($x60 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x165 (ite $x60 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x83 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvmul (_ bv4 64) ?x83)))
 (let ((?x23 ((_ extract 63 32) ?x232)))
 (let (($x37 (= ?x23 ?x165)))
 (let (($x26 (and $x37 $x47)))
 (let (($x95 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x35 (and $x95 $x26)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (=> $x188 $x35)))
 (let (($x125 (= $x252 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x66 true)))
 (let (($x21 (= $x188 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x10)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x197)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (and $x141 $x182)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x108 $x173)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x61 $x154)))
 (let (($x24 (not $x166)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x226 $x221)))
 (let (($x106 (and (not $x52) $x24)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x219 $x157)))
 (let (($x214 (not $x201)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x133 $x145)))
 (let (($x185 (and (not $x30) $x214)))
 (let (($x230 (and (and (and (and (and (and $x185 $x106) $x211) $x137) $x84) $x69) $x205)))
 (let (($x245 (and $x230 $x36)))
 (let (($x236 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x223 (or false (or false (and (and true (or $x191 $x217)) (or $x31 $x236))))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x223)))
 (let (($x159 (and $x78 $x245)))
 (let (($x43 (= $x159 true)))
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x5)))
 (let (($x104 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (= $x104 true)))
 (let ((?x151 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x65 (= (_ bv0 2) ?x151)))
 (let (($x87 (= $x65 true)))
 (let (($x111 (= ?x73 input.dst.llvm-%n)))
 (let (($x164 (= $x111 true)))
 (let (($x130 (and $x164 $x87)))
 (let (($x193 (and $x130 $x25)))
 (let (($x253 (and $x193 $x43)))
 (let (($x183 (and $x253 $x21)))
 (let (($x237 (and $x183 $x216)))
 (let (($x58 (and $x237 $x125)))
 (let (($x265 (and $x58 $x266)))
 (let (($x268 (and $x265 $x269)))
 (let (($x272 (and $x268 $x271)))
 (let (($x288 (and $x272 $x290)))
 (let (($x291 (and $x288 $x289)))
 (let (($x298 (and $x291 $x297)))
 (let (($x167 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and (not $x167) $x298)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x301 (and $x22 $x300)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x90 $x301)))
 (let (($x171 (forall ((input.ind-%var1317X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1317X)))
 (=> $x168 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1317X) (_ bv0 32)))))
 ))
 (let (($x14 (forall ((input.ind-%var1316X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1316X)))
 (= $x168 false)))
 ))
 (let (($x56 (and $x14 $x171)))
 (let (($x158 (and $x56 $x153)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x71 (and $x175 $x158)))
 (let (($x150 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd ?x135 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x9 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x28 (or false (or false (and (and true (or $x109 $x9)) (or $x102 $x150))))))
 (let (($x99 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x28)))
 (let (($x184 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x28)))
 (let (($x13 (and $x184 $x71)))
 (let (($x234 (=> $x13 $x88)))
 (not $x234)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x224 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x93 (bvmul (_ bv4294967295 32) ?x224)))
 (let ((?x27 (bvneg ?x93)))
 (let (($x105 (= ?x27 ?x152)))
 (let (($x88 (= $x105 true)))
 (let ((?x293 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x295 (bvneg ?x293)))
 (let (($x296 (= ?x295 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x296 true)))
 (let (($x287 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x287 true)))
 (let (($x292 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x290 (= $x292 true)))
 (let (($x270 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (= $x270 true)))
 (let (($x267 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x269 (= $x267 true)))
 (let (($x262 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let ((?x64 (bvadd (bvmul input.ind-%var1307X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x64))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv2 32))) ?x101)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x64 (_ bv3 32))) ?x86)))
 (let ((?x39 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1307X)))
 (let (($x247 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1307X)))
 (=> $x247 (= ?x39 ?x255)))))))))
 ))
 (let (($x41 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x146 (and (bvule (_ bv0 32) input.ind-%var1306X) (bvult input.ind-%var1306X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x247 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1306X)))
 (= $x247 $x146))))
 ))
 (let (($x264 (and $x41 $x262)))
 (let (($x266 (= $x264 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x17 (bvsub ?x135 ?x15)))
 (let (($x47 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x17) (bvult ?x135 ?x17))))
 (let (($x60 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x165 (ite $x60 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x83 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvmul (_ bv4 64) ?x83)))
 (let ((?x23 ((_ extract 63 32) ?x232)))
 (let (($x37 (= ?x23 ?x165)))
 (let (($x26 (and $x37 $x47)))
 (let (($x95 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x35 (and $x95 $x26)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (=> $x188 $x35)))
 (let (($x125 (= $x252 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x66 true)))
 (let (($x21 (= $x188 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x10)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x197)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (and $x141 $x182)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x108 $x173)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x61 $x154)))
 (let (($x24 (not $x166)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x226 $x221)))
 (let (($x106 (and (not $x52) $x24)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x219 $x157)))
 (let (($x214 (not $x201)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x133 $x145)))
 (let (($x185 (and (not $x30) $x214)))
 (let (($x230 (and (and (and (and (and (and $x185 $x106) $x211) $x137) $x84) $x69) $x205)))
 (let (($x245 (and $x230 $x36)))
 (let (($x236 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x223 (or false (or false (and (and true (or $x191 $x217)) (or $x31 $x236))))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x223)))
 (let (($x159 (and $x78 $x245)))
 (let (($x43 (= $x159 true)))
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x5)))
 (let (($x104 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (= $x104 true)))
 (let ((?x151 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x65 (= (_ bv0 2) ?x151)))
 (let (($x87 (= $x65 true)))
 (let (($x111 (= ?x73 input.dst.llvm-%n)))
 (let (($x164 (= $x111 true)))
 (let (($x130 (and $x164 $x87)))
 (let (($x193 (and $x130 $x25)))
 (let (($x253 (and $x193 $x43)))
 (let (($x183 (and $x253 $x21)))
 (let (($x237 (and $x183 $x216)))
 (let (($x58 (and $x237 $x125)))
 (let (($x265 (and $x58 $x266)))
 (let (($x268 (and $x265 $x269)))
 (let (($x272 (and $x268 $x271)))
 (let (($x288 (and $x272 $x290)))
 (let (($x291 (and $x288 $x289)))
 (let (($x298 (and $x291 $x297)))
 (let (($x167 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and (not $x167) $x298)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x301 (and $x22 $x300)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x90 $x301)))
 (let (($x171 (forall ((input.ind-%var1317X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1317X)))
 (=> $x168 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1317X) (_ bv0 32)))))
 ))
 (let (($x14 (forall ((input.ind-%var1316X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1316X)))
 (= $x168 false)))
 ))
 (let (($x56 (and $x14 $x171)))
 (let (($x158 (and $x56 $x153)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x71 (and $x175 $x158)))
 (let (($x150 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd ?x135 (_ bv3 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x9 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x28 (or false (or false (and (and true (or $x109 $x9)) (or $x102 $x150))))))
 (let (($x99 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x28)))
 (let (($x184 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x28)))
 (let (($x13 (and $x184 $x71)))
 (let (($x234 (=> $x13 $x88)))
 (not $x234)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x77 (bvule ?x162 (_ bv4294967294 32))))
 (let (($x231 (= $x77 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x198)))
 (let (($x241 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x242 (= $x241 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x156 true)))
 (let (($x250 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x192 (= $x250 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x18)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x88)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (and $x71 $x224)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x158 $x93)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x293 (and $x289 $x291)))
 (let (($x295 (not $x293)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x290 $x288)))
 (let (($x297 (and (not $x287) $x295)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x269 $x268)))
 (let (($x271 (not $x270)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x132 $x254)))
 (let (($x292 (and (not $x267) $x271)))
 (let (($x139 (and (and (and (and (and (and $x292 $x297) $x300) $x153) $x27) $x105) $x234)))
 (let (($x229 (and $x139 $x190)))
 (let (($x255 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x264 (or false (or false (and (and true (or $x172 $x12)) (or $x86 $x255))))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x264)))
 (let (($x98 (and $x265 $x229)))
 (let (($x212 (= $x98 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x82 (= $x39 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (= $x146 true)))
 (let (($x58 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var1327X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x23))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x23 (_ bv2 32))) ?x29)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x23 (_ bv3 32))) ?x63)))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1327X)))
 (let (($x137 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1327X)))
 (=> $x137 (= ?x230 ?x35)))))))))
 ))
 (let (($x69 (forall ((input.ind-%var1326X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1326X) (bvult input.ind-%var1326X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x137 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1326X)))
 (= $x137 $x75))))
 ))
 (let (($x247 (and $x69 $x58)))
 (let (($x91 (= $x247 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x117)))
 (let (($x76 (= ?x191 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x194 (= $x76 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x185 (bvsub ?x135 ?x15)))
 (let (($x68 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x185) (bvult ?x135 ?x185))))
 (let (($x157 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x201 (ite $x157 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x30 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x209 (bvmul (_ bv4 64) ?x30)))
 (let ((?x219 ((_ extract 63 32) ?x209)))
 (let (($x214 (= ?x219 ?x201)))
 (let (($x61 (and $x214 $x68)))
 (let (($x133 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x154 (and $x133 $x61)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (=> $x57 $x154)))
 (let (($x24 (= $x166 true)))
 (let ((?x236 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x33 (= (_ bv0 2) ?x236)))
 (let (($x170 (= $x33 true)))
 (let (($x217 (= ?x191 input.dst.llvm-%n)))
 (let (($x32 (= $x217 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x220 (= $x193 true)))
 (let (($x104 (= $x57 true)))
 (let (($x134 (and $x104 $x220)))
 (let (($x200 (and $x134 $x32)))
 (let (($x222 (and $x200 $x170)))
 (let (($x106 (and $x222 $x24)))
 (let (($x211 (and $x106 $x194)))
 (let (($x45 (and $x211 $x91)))
 (let (($x41 (and $x45 $x202)))
 (let (($x206 (and $x41 $x82)))
 (let (($x181 (and $x206 $x212)))
 (let (($x81 (and $x181 $x192)))
 (let (($x6 (and $x81 $x51)))
 (let (($x243 (and $x6 $x242)))
 (let (($x130 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (and (not $x130) $x243)))
 (let (($x65 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and $x65 $x113)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x174 (and $x164 $x70)))
 (let (($x5 (forall ((input.ind-%var1337X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1337X)))
 (=> $x72 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1337X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var1336X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1336X)))
 (= $x72 false)))
 ))
 (let (($x73 (and $x171 $x5)))
 (let (($x240 (and $x73 $x174)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x196 (and $x123 $x240)))
 (let (($x169 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd ?x135 (_ bv3 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x147 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x184 (or false (or false (and (and true (or $x110 $x147)) (or $x112 $x169))))))
 (let (($x175 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x148 (=> (and $x57 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x210 (and $x148 $x196)))
 (let (($x124 (=> $x210 $x231)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x77 (bvule ?x162 (_ bv4294967294 32))))
 (let (($x231 (= $x77 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x198)))
 (let (($x241 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x242 (= $x241 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x156 true)))
 (let (($x250 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x192 (= $x250 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x18)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x88)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (and $x71 $x224)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x158 $x93)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x293 (and $x289 $x291)))
 (let (($x295 (not $x293)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x290 $x288)))
 (let (($x297 (and (not $x287) $x295)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x269 $x268)))
 (let (($x271 (not $x270)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x132 $x254)))
 (let (($x292 (and (not $x267) $x271)))
 (let (($x139 (and (and (and (and (and (and $x292 $x297) $x300) $x153) $x27) $x105) $x234)))
 (let (($x229 (and $x139 $x190)))
 (let (($x255 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x264 (or false (or false (and (and true (or $x172 $x12)) (or $x86 $x255))))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x264)))
 (let (($x98 (and $x265 $x229)))
 (let (($x212 (= $x98 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x82 (= $x39 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (= $x146 true)))
 (let (($x58 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let ((?x23 (bvadd (bvmul input.ind-%var1327X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x23))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x23 (_ bv2 32))) ?x29)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x23 (_ bv3 32))) ?x63)))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1327X)))
 (let (($x137 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1327X)))
 (=> $x137 (= ?x230 ?x35)))))))))
 ))
 (let (($x69 (forall ((input.ind-%var1326X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1326X) (bvult input.ind-%var1326X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x137 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1326X)))
 (= $x137 $x75))))
 ))
 (let (($x247 (and $x69 $x58)))
 (let (($x91 (= $x247 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x117)))
 (let (($x76 (= ?x191 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x194 (= $x76 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x185 (bvsub ?x135 ?x15)))
 (let (($x68 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x185) (bvult ?x135 ?x185))))
 (let (($x157 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x201 (ite $x157 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x30 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x209 (bvmul (_ bv4 64) ?x30)))
 (let ((?x219 ((_ extract 63 32) ?x209)))
 (let (($x214 (= ?x219 ?x201)))
 (let (($x61 (and $x214 $x68)))
 (let (($x133 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x154 (and $x133 $x61)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (=> $x57 $x154)))
 (let (($x24 (= $x166 true)))
 (let ((?x236 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x33 (= (_ bv0 2) ?x236)))
 (let (($x170 (= $x33 true)))
 (let (($x217 (= ?x191 input.dst.llvm-%n)))
 (let (($x32 (= $x217 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x220 (= $x193 true)))
 (let (($x104 (= $x57 true)))
 (let (($x134 (and $x104 $x220)))
 (let (($x200 (and $x134 $x32)))
 (let (($x222 (and $x200 $x170)))
 (let (($x106 (and $x222 $x24)))
 (let (($x211 (and $x106 $x194)))
 (let (($x45 (and $x211 $x91)))
 (let (($x41 (and $x45 $x202)))
 (let (($x206 (and $x41 $x82)))
 (let (($x181 (and $x206 $x212)))
 (let (($x81 (and $x181 $x192)))
 (let (($x6 (and $x81 $x51)))
 (let (($x243 (and $x6 $x242)))
 (let (($x130 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (and (not $x130) $x243)))
 (let (($x65 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and $x65 $x113)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x174 (and $x164 $x70)))
 (let (($x5 (forall ((input.ind-%var1337X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1337X)))
 (=> $x72 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1337X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var1336X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1336X)))
 (= $x72 false)))
 ))
 (let (($x73 (and $x171 $x5)))
 (let (($x240 (and $x73 $x174)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x196 (and $x123 $x240)))
 (let (($x169 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd ?x135 (_ bv3 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x147 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x184 (or false (or false (and (and true (or $x110 $x147)) (or $x112 $x169))))))
 (let (($x175 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x148 (=> (and $x57 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x210 (and $x148 $x196)))
 (let (($x124 (=> $x210 $x231)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 162 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x83 (bvsge ?x197 (_ bv0 32))))
 (let (($x120 (= $x83 true)))
 (let ((?x66 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x216 (bvneg ?x66)))
 (let (($x253 (= ?x216 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x253 true)))
 (let (($x159 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x159 true)))
 (let (($x108 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x108 true)))
 (let ((?x233 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x233)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x96)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x249 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (and $x196 $x162)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x240 $x77)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (and $x51 $x6)))
 (let (($x100 (not $x198)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x192 $x81)))
 (let (($x242 (and (not $x156) $x100)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x190 $x229)))
 (let (($x212 (not $x98)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x213 $x301)))
 (let (($x250 (and (not $x18) $x212)))
 (let (($x179 (and (and (and (and (and (and $x250 $x242) $x113) $x174) $x231) $x249) $x64)))
 (let (($x208 (and $x179 $x10)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x158)))
 (let (($x88 (or false (or false (and (and true (or $x71 $x13)) (or $x27 $x103))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x42 (and $x139 $x208)))
 (let (($x205 (= $x42 true)))
 (let (($x297 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x297 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x293 (= $x291 true)))
 (let (($x288 (forall ((input.ind-%var1347X (_ BitVec 32)) )(let ((?x262 (bvadd (bvmul input.ind-%var1347X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x262))))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x262 (_ bv2 32))) ?x254)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x262 (_ bv3 32))) ?x269)))
 (let ((?x45 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1347X)))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1347X)))
 (=> $x55 (= ?x45 ?x271)))))))))
 ))
 (let (($x125 (forall ((input.ind-%var1346X (_ BitVec 32)) )(let (($x35 (and (bvule (_ bv0 32) input.ind-%var1346X) (bvult input.ind-%var1346X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1346X)))
 (= $x55 $x35))))
 ))
 (let (($x287 (and $x125 $x288)))
 (let (($x296 (= $x287 true)))
 (let ((?x223 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x223)))
 (let (($x36 (= ?x78 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x232 (= $x36 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x76 (bvsub ?x135 ?x15)))
 (let (($x84 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x76) (bvult ?x135 ?x76))))
 (let (($x166 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x24 (ite $x166 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x68 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x61 (bvmul (_ bv4 64) ?x68)))
 (let ((?x154 ((_ extract 63 32) ?x61)))
 (let (($x106 (= ?x154 ?x24)))
 (let (($x173 (and $x106 $x84)))
 (let (($x221 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x75 (and $x221 $x173)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (=> $x140 $x75)))
 (let (($x69 (= $x74 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x157 (= (_ bv0 2) ?x219)))
 (let (($x201 (= $x157 true)))
 (let (($x133 (= ?x78 input.dst.llvm-%n)))
 (let (($x145 (= $x133 true)))
 (let (($x236 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x236 true)))
 (let (($x200 (= $x140 true)))
 (let (($x170 (and $x200 $x33)))
 (let (($x30 (and $x170 $x145)))
 (let (($x214 (and $x30 $x201)))
 (let (($x230 (and $x214 $x69)))
 (let (($x23 (and $x230 $x232)))
 (let (($x289 (and $x23 $x296)))
 (let (($x295 (and $x289 $x293)))
 (let (($x298 (and $x295 $x218)))
 (let (($x207 (and $x298 $x205)))
 (let (($x245 (and $x207 $x141)))
 (let (($x115 (and $x245 $x143)))
 (let (($x43 (and $x115 $x21)))
 (let (($x32 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and (not $x32) $x43)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and $x191 $x237)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x239 (and $x134 $x95)))
 (let (($x25 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1357X)))
 (=> $x80 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1357X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var1356X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1356X)))
 (= $x80 false)))
 ))
 (let (($x193 (and $x5 $x25)))
 (let (($x160 (and $x193 $x239)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x14 $x160)))
 (let (($x28 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd ?x135 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x102 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x148 (or false (or false (and (and true (or $x178 $x102)) (or $x8 $x28))))))
 (let (($x123 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x148)))
 (let (($x144 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x148)))
 (let (($x180 (and $x144 $x182)))
 (let (($x167 (=> $x180 $x120)))
 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x83 (bvsge ?x197 (_ bv0 32))))
 (let (($x120 (= $x83 true)))
 (let ((?x66 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x216 (bvneg ?x66)))
 (let (($x253 (= ?x216 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x253 true)))
 (let (($x159 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x159 true)))
 (let (($x108 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x108 true)))
 (let ((?x233 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x233)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x96)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x249 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (and $x196 $x162)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x240 $x77)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (and $x51 $x6)))
 (let (($x100 (not $x198)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x192 $x81)))
 (let (($x242 (and (not $x156) $x100)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x190 $x229)))
 (let (($x212 (not $x98)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x213 $x301)))
 (let (($x250 (and (not $x18) $x212)))
 (let (($x179 (and (and (and (and (and (and $x250 $x242) $x113) $x174) $x231) $x249) $x64)))
 (let (($x208 (and $x179 $x10)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x158)))
 (let (($x88 (or false (or false (and (and true (or $x71 $x13)) (or $x27 $x103))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x42 (and $x139 $x208)))
 (let (($x205 (= $x42 true)))
 (let (($x297 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x297 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x293 (= $x291 true)))
 (let (($x288 (forall ((input.ind-%var1347X (_ BitVec 32)) )(let ((?x262 (bvadd (bvmul input.ind-%var1347X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x262))))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x262 (_ bv2 32))) ?x254)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x262 (_ bv3 32))) ?x269)))
 (let ((?x45 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1347X)))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1347X)))
 (=> $x55 (= ?x45 ?x271)))))))))
 ))
 (let (($x125 (forall ((input.ind-%var1346X (_ BitVec 32)) )(let (($x35 (and (bvule (_ bv0 32) input.ind-%var1346X) (bvult input.ind-%var1346X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x55 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1346X)))
 (= $x55 $x35))))
 ))
 (let (($x287 (and $x125 $x288)))
 (let (($x296 (= $x287 true)))
 (let ((?x223 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x223)))
 (let (($x36 (= ?x78 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x232 (= $x36 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x76 (bvsub ?x135 ?x15)))
 (let (($x84 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x76) (bvult ?x135 ?x76))))
 (let (($x166 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x24 (ite $x166 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x68 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x61 (bvmul (_ bv4 64) ?x68)))
 (let ((?x154 ((_ extract 63 32) ?x61)))
 (let (($x106 (= ?x154 ?x24)))
 (let (($x173 (and $x106 $x84)))
 (let (($x221 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x75 (and $x221 $x173)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (=> $x140 $x75)))
 (let (($x69 (= $x74 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x157 (= (_ bv0 2) ?x219)))
 (let (($x201 (= $x157 true)))
 (let (($x133 (= ?x78 input.dst.llvm-%n)))
 (let (($x145 (= $x133 true)))
 (let (($x236 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x236 true)))
 (let (($x200 (= $x140 true)))
 (let (($x170 (and $x200 $x33)))
 (let (($x30 (and $x170 $x145)))
 (let (($x214 (and $x30 $x201)))
 (let (($x230 (and $x214 $x69)))
 (let (($x23 (and $x230 $x232)))
 (let (($x289 (and $x23 $x296)))
 (let (($x295 (and $x289 $x293)))
 (let (($x298 (and $x295 $x218)))
 (let (($x207 (and $x298 $x205)))
 (let (($x245 (and $x207 $x141)))
 (let (($x115 (and $x245 $x143)))
 (let (($x43 (and $x115 $x21)))
 (let (($x32 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and (not $x32) $x43)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and $x191 $x237)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x239 (and $x134 $x95)))
 (let (($x25 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1357X)))
 (=> $x80 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1357X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var1356X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1356X)))
 (= $x80 false)))
 ))
 (let (($x193 (and $x5 $x25)))
 (let (($x160 (and $x193 $x239)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x14 $x160)))
 (let (($x28 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd ?x135 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x102 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x148 (or false (or false (and (and true (or $x178 $x102)) (or $x8 $x28))))))
 (let (($x123 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x148)))
 (let (($x144 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x148)))
 (let (($x180 (and $x144 $x182)))
 (let (($x167 (=> $x180 $x120)))
 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 162 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x247 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x294 (bvule ?x247 (_ bv4294967294 32))))
 (let (($x111 (= $x294 true)))
 (let ((?x50 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x50)))
 (let (($x206 (= ?x172 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x128 (= $x206 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x39 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (= $x67 true)))
 (let (($x299 (forall ((input.ind-%var1367X (_ BitVec 32)) )(let ((?x120 (bvadd (bvmul input.ind-%var1367X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x120))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x120 (_ bv2 32))) ?x300)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x120 (_ bv3 32))) ?x22)))
 (let ((?x108 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1367X)))
 (let (($x231 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1367X)))
 (=> $x231 (= ?x108 ?x164)))))))))
 ))
 (let (($x208 (forall ((input.ind-%var1366X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var1366X) (bvult input.ind-%var1366X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x231 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1366X)))
 (= $x231 $x233))))
 ))
 (let (($x87 (and $x208 $x299)))
 (let (($x91 (= $x87 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x238 (bvsub ?x135 ?x15)))
 (let (($x70 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x238) (bvult ?x135 ?x238))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x100 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x241 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x241)))
 (let ((?x6 ((_ extract 63 32) ?x51)))
 (let (($x242 (= ?x6 ?x100)))
 (let (($x174 (and $x242 $x70)))
 (let (($x81 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x56 (and $x81 $x174)))
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (=> $x163 $x56)))
 (let (($x196 (= $x240 true)))
 (let (($x229 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x229 true)))
 (let (($x181 (= $x163 true)))
 (let ((?x224 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x224)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x71)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x218)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x297 $x298)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x295 $x153)))
 (let (($x293 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x292 (and $x269 $x271)))
 (let (($x290 (not $x292)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (and $x132 $x264)))
 (let (($x287 (and (not $x254) $x290)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (and $x268 $x270)))
 (let (($x267 (not $x266)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (and $x173 $x75)))
 (let (($x265 (and (not $x262) $x267)))
 (let (($x88 (and (and (and (and (and (and $x265 $x287) $x289) $x293) $x7) $x158) $x13)))
 (let (($x139 (and $x88 $x93)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x232 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x45 (or false (or false (and (and true (or $x36 $x232)) (or $x63 $x29))))))
 (let (($x263 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x45)))
 (let (($x213 (and $x263 $x139)))
 (let (($x301 (= $x213 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x211 (= $x76 true)))
 (let (($x24 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x24 true)))
 (let ((?x209 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x209)))
 (let (($x68 (= ?x219 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x61 (= $x68 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x226)))
 (let (($x221 (= $x185 true)))
 (let (($x157 (= ?x219 input.dst.llvm-%n)))
 (let (($x201 (= $x157 true)))
 (let (($x52 (and $x201 $x221)))
 (let (($x154 (and $x52 $x61)))
 (let (($x194 (and $x154 $x106)))
 (let (($x137 (and $x194 $x211)))
 (let (($x18 (and $x137 $x301)))
 (let (($x190 (and $x18 $x181)))
 (let (($x212 (and $x190 $x98)))
 (let (($x210 (and $x212 $x196)))
 (let (($x47 (and $x210 $x91)))
 (let (($x41 (and $x47 $x165)))
 (let (($x101 (and $x41 $x136)))
 (let (($x82 (and $x101 $x128)))
 (let (($x145 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and (not $x145) $x82)))
 (let (($x78 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and $x78 $x12)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x26 (and $x170 $x86)))
 (let (($x31 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1377X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1377X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1376X)))
 (= $x54 false)))
 ))
 (let (($x236 (and $x25 $x31)))
 (let (($x37 (and $x236 $x26)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x171 $x37)))
 (let (($x184 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd ?x135 (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x112 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x144 (or false (or false (and (and true (or $x131 $x112)) (or $x99 $x184))))))
 (let (($x14 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x144)))
 (let (($x107 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x144)))
 (let (($x255 (and $x107 $x60)))
 (let (($x130 (=> $x255 $x111)))
 (not $x130))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x247 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x294 (bvule ?x247 (_ bv4294967294 32))))
 (let (($x111 (= $x294 true)))
 (let ((?x50 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x50)))
 (let (($x206 (= ?x172 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x128 (= $x206 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x39 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (= $x67 true)))
 (let (($x299 (forall ((input.ind-%var1367X (_ BitVec 32)) )(let ((?x120 (bvadd (bvmul input.ind-%var1367X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x120))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x120 (_ bv2 32))) ?x300)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x120 (_ bv3 32))) ?x22)))
 (let ((?x108 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1367X)))
 (let (($x231 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1367X)))
 (=> $x231 (= ?x108 ?x164)))))))))
 ))
 (let (($x208 (forall ((input.ind-%var1366X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var1366X) (bvult input.ind-%var1366X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x231 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1366X)))
 (= $x231 $x233))))
 ))
 (let (($x87 (and $x208 $x299)))
 (let (($x91 (= $x87 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x238 (bvsub ?x135 ?x15)))
 (let (($x70 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x238) (bvult ?x135 ?x238))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x100 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x241 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x241)))
 (let ((?x6 ((_ extract 63 32) ?x51)))
 (let (($x242 (= ?x6 ?x100)))
 (let (($x174 (and $x242 $x70)))
 (let (($x81 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x56 (and $x81 $x174)))
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (=> $x163 $x56)))
 (let (($x196 (= $x240 true)))
 (let (($x229 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x229 true)))
 (let (($x181 (= $x163 true)))
 (let ((?x224 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x224)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x71)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x218)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x297 $x298)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x295 $x153)))
 (let (($x293 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x292 (and $x269 $x271)))
 (let (($x290 (not $x292)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (and $x132 $x264)))
 (let (($x287 (and (not $x254) $x290)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (and $x268 $x270)))
 (let (($x267 (not $x266)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (and $x173 $x75)))
 (let (($x265 (and (not $x262) $x267)))
 (let (($x88 (and (and (and (and (and (and $x265 $x287) $x289) $x293) $x7) $x158) $x13)))
 (let (($x139 (and $x88 $x93)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x232 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x45 (or false (or false (and (and true (or $x36 $x232)) (or $x63 $x29))))))
 (let (($x263 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x45)))
 (let (($x213 (and $x263 $x139)))
 (let (($x301 (= $x213 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x211 (= $x76 true)))
 (let (($x24 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x24 true)))
 (let ((?x209 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x209)))
 (let (($x68 (= ?x219 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x61 (= $x68 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x226)))
 (let (($x221 (= $x185 true)))
 (let (($x157 (= ?x219 input.dst.llvm-%n)))
 (let (($x201 (= $x157 true)))
 (let (($x52 (and $x201 $x221)))
 (let (($x154 (and $x52 $x61)))
 (let (($x194 (and $x154 $x106)))
 (let (($x137 (and $x194 $x211)))
 (let (($x18 (and $x137 $x301)))
 (let (($x190 (and $x18 $x181)))
 (let (($x212 (and $x190 $x98)))
 (let (($x210 (and $x212 $x196)))
 (let (($x47 (and $x210 $x91)))
 (let (($x41 (and $x47 $x165)))
 (let (($x101 (and $x41 $x136)))
 (let (($x82 (and $x101 $x128)))
 (let (($x145 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and (not $x145) $x82)))
 (let (($x78 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and $x78 $x12)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x26 (and $x170 $x86)))
 (let (($x31 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1377X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1377X) (_ bv0 32)))))
 ))
 (let (($x25 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1376X)))
 (= $x54 false)))
 ))
 (let (($x236 (and $x25 $x31)))
 (let (($x37 (and $x236 $x26)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x171 $x37)))
 (let (($x184 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd ?x135 (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x112 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x144 (or false (or false (and (and true (or $x131 $x112)) (or $x99 $x184))))))
 (let (($x14 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x144)))
 (let (($x107 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x144)))
 (let (($x255 (and $x107 $x60)))
 (let (($x130 (=> $x255 $x111)))
 (not $x130))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x197 (bvsge ?x205 (_ bv0 32))))
 (let (($x220 (= $x197 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x237 (bvneg ?x43)))
 (let (($x66 (= ?x237 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x66 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x143 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x249 (= $x124 true)))
 (let (($x116 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let ((?x111 (bvadd (bvmul input.ind-%var1387X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x111))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv2 32))) ?x84)))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv3 32))) ?x65)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1387X)))
 (let (($x17 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1387X)))
 (=> $x17 (= ?x67 ?x134)))))))))
 ))
 (let (($x299 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var1386X) (bvult input.ind-%var1386X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x17 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1386X)))
 (= $x17 $x72))))
 ))
 (let (($x217 (and $x299 $x116)))
 (let (($x207 (= $x217 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x179 (bvsub ?x135 ?x15)))
 (let (($x208 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x179) (bvult ?x135 ?x179))))
 (let (($x196 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x210 (ite $x196 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x174 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x56 (bvmul (_ bv4 64) ?x174)))
 (let ((?x240 ((_ extract 63 32) ?x56)))
 (let (($x231 (= ?x240 ?x210)))
 (let (($x108 (and $x231 $x208)))
 (let (($x49 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x245 (and $x49 $x108)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (=> $x188 $x245)))
 (let (($x120 (= $x83 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x100 true)))
 (let (($x6 (= $x188 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x18)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x301 (= (_ bv0 32) ?x213)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x246 $x13)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x158 $x88)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x293 $x152)))
 (let (($x297 (not $x295)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x289 $x103)))
 (let (($x298 (and (not $x291) $x297)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (and $x271 $x292)))
 (let (($x287 (not $x290)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x252 $x125)))
 (let (($x296 (and (not $x269) $x287)))
 (let (($x192 (and (and (and (and (and (and $x296 $x298) $x7) $x234) $x224) $x139) $x301)))
 (let (($x81 (and $x192 $x181)))
 (let (($x266 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x262 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x264 (or false (or false (and (and true (or $x75 $x262)) (or $x270 $x266))))))
 (let (($x288 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x264)))
 (let (($x156 (and $x288 $x81)))
 (let (($x241 (= $x156 true)))
 (let (($x55 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x63 (= $x55 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x36 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x61)))
 (let (($x74 (= ?x154 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x74 true)))
 (let ((?x194 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x76 (= (_ bv0 2) ?x194)))
 (let (($x211 (= $x76 true)))
 (let (($x166 (= ?x154 input.dst.llvm-%n)))
 (let (($x24 (= $x166 true)))
 (let (($x137 (and $x24 $x211)))
 (let (($x202 (and $x137 $x69)))
 (let (($x23 (and $x202 $x232)))
 (let (($x29 (and $x23 $x63)))
 (let (($x51 (and $x29 $x241)))
 (let (($x198 (and $x51 $x6)))
 (let (($x243 (and $x198 $x242)))
 (let (($x151 (and $x243 $x120)))
 (let (($x162 (and $x151 $x207)))
 (let (($x159 (and $x162 $x249)))
 (let (($x160 (and $x159 $x239)))
 (let (($x115 (and $x160 $x216)))
 (let (($x52 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and (not $x52) $x115)))
 (let (($x185 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x185 $x95)))
 (let (($x201 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x201 $x182)))
 (let (($x209 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1397X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x31 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1396X)))
 (= $x215 false)))
 ))
 (let (($x219 (and $x31 $x209)))
 (let (($x168 (and $x219 $x77)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x5 $x168)))
 (let (($x148 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd ?x135 (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x8 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x107 (or false (or false (and (and true (or $x150 $x8)) (or $x175 $x148))))))
 (let (($x171 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x9 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x180 (and $x9 $x96)))
 (let (($x32 (=> $x180 $x220)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x197 (bvsge ?x205 (_ bv0 32))))
 (let (($x220 (= $x197 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x237 (bvneg ?x43)))
 (let (($x66 (= ?x237 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x66 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x143 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x249 (= $x124 true)))
 (let (($x116 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let ((?x111 (bvadd (bvmul input.ind-%var1387X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x111))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv2 32))) ?x84)))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv3 32))) ?x65)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1387X)))
 (let (($x17 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1387X)))
 (=> $x17 (= ?x67 ?x134)))))))))
 ))
 (let (($x299 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var1386X) (bvult input.ind-%var1386X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x17 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1386X)))
 (= $x17 $x72))))
 ))
 (let (($x217 (and $x299 $x116)))
 (let (($x207 (= $x217 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x179 (bvsub ?x135 ?x15)))
 (let (($x208 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x179) (bvult ?x135 ?x179))))
 (let (($x196 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x210 (ite $x196 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x174 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x56 (bvmul (_ bv4 64) ?x174)))
 (let ((?x240 ((_ extract 63 32) ?x56)))
 (let (($x231 (= ?x240 ?x210)))
 (let (($x108 (and $x231 $x208)))
 (let (($x49 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x245 (and $x49 $x108)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (=> $x188 $x245)))
 (let (($x120 (= $x83 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x100 true)))
 (let (($x6 (= $x188 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x18)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x301 (= (_ bv0 32) ?x213)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x246 $x13)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x158 $x88)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x293 $x152)))
 (let (($x297 (not $x295)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x289 $x103)))
 (let (($x298 (and (not $x291) $x297)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (and $x271 $x292)))
 (let (($x287 (not $x290)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x252 $x125)))
 (let (($x296 (and (not $x269) $x287)))
 (let (($x192 (and (and (and (and (and (and $x296 $x298) $x7) $x234) $x224) $x139) $x301)))
 (let (($x81 (and $x192 $x181)))
 (let (($x266 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x262 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x264 (or false (or false (and (and true (or $x75 $x262)) (or $x270 $x266))))))
 (let (($x288 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x264)))
 (let (($x156 (and $x288 $x81)))
 (let (($x241 (= $x156 true)))
 (let (($x55 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x63 (= $x55 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x36 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x61)))
 (let (($x74 (= ?x154 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x74 true)))
 (let ((?x194 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x76 (= (_ bv0 2) ?x194)))
 (let (($x211 (= $x76 true)))
 (let (($x166 (= ?x154 input.dst.llvm-%n)))
 (let (($x24 (= $x166 true)))
 (let (($x137 (and $x24 $x211)))
 (let (($x202 (and $x137 $x69)))
 (let (($x23 (and $x202 $x232)))
 (let (($x29 (and $x23 $x63)))
 (let (($x51 (and $x29 $x241)))
 (let (($x198 (and $x51 $x6)))
 (let (($x243 (and $x198 $x242)))
 (let (($x151 (and $x243 $x120)))
 (let (($x162 (and $x151 $x207)))
 (let (($x159 (and $x162 $x249)))
 (let (($x160 (and $x159 $x239)))
 (let (($x115 (and $x160 $x216)))
 (let (($x52 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and (not $x52) $x115)))
 (let (($x185 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x185 $x95)))
 (let (($x201 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x201 $x182)))
 (let (($x209 (forall ((input.ind-%var1397X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1397X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1397X) (_ bv0 32)))))
 ))
 (let (($x31 (forall ((input.ind-%var1396X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1396X)))
 (= $x215 false)))
 ))
 (let (($x219 (and $x31 $x209)))
 (let (($x168 (and $x219 $x77)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x5 $x168)))
 (let (($x148 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd ?x135 (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x8 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x107 (or false (or false (and (and true (or $x150 $x8)) (or $x175 $x148))))))
 (let (($x171 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x9 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x180 (and $x9 $x96)))
 (let (($x32 (=> $x180 $x220)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 162 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (bvule ?x91 input.dst.llvm-%n)))
 (let (($x33 (= $x247 true)))
 (let ((?x82 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x82)))
 (let (($x50 (= ?x12 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x50 true)))
 (let ((?x232 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x232)))
 (let (($x136 (= ?x23 input.dst.llvm-%n)))
 (let (($x26 (= $x136 true)))
 (let (($x225 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x46 (= $x225 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (= $x133 true)))
 (let (($x170 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var1407X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x180))))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv2 32))) ?x32)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv3 32))) ?x35)))
 (let ((?x217 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1407X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1407X)))
 (=> $x117 (= ?x217 ?x191)))))))))
 ))
 (let (($x134 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1406X) (bvult input.ind-%var1406X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1406X)))
 (= $x117 $x84))))
 ))
 (let (($x54 (and $x134 $x170)))
 (let (($x104 (= $x54 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x120 (bvsub ?x135 ?x15)))
 (let (($x22 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x120) (bvult ?x135 ?x120))))
 (let (($x108 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x245 (ite $x108 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x233 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x10 (bvmul (_ bv4 64) ?x233)))
 (let ((?x208 ((_ extract 63 32) ?x10)))
 (let (($x83 (= ?x208 ?x245)))
 (let (($x72 (and $x83 $x22)))
 (let (($x64 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x129 (and $x64 $x72)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (=> $x57 $x129)))
 (let (($x67 (= $x299 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x240 (= $x56 true)))
 (let (($x70 (= $x57 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x81)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x18)))
 (let ((?x301 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x301)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x212 $x139)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x224 $x250)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x7 $x229)))
 (let (($x234 (not $x105)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x298 $x190)))
 (let (($x158 (and (not $x153) $x234)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x291 $x218)))
 (let (($x152 (not $x293)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x270 $x266)))
 (let (($x297 (and (not $x103) $x152)))
 (let (($x242 (and (and (and (and (and (and $x297 $x158) $x71) $x88) $x213) $x192) $x181)))
 (let (($x243 (and $x242 $x156)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x287 (or false (or false (and (and true (or $x264 $x288)) (or $x269 $x27))))))
 (let (($x289 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x287)))
 (let (($x238 (and $x289 $x243)))
 (let (($x113 (= $x238 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x262 (= $x75 true)))
 (let (($x263 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x254 (= $x263 true)))
 (let (($x55 (= ?x23 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (= $x55 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x202 (= (_ bv0 2) ?x69)))
 (let (($x230 (= $x202 true)))
 (let (($x29 (and $x230 $x63)))
 (let (($x173 (and $x29 $x254)))
 (let (($x272 (and $x173 $x262)))
 (let (($x49 (and $x272 $x113)))
 (let (($x174 (and $x49 $x70)))
 (let (($x196 (and $x174 $x240)))
 (let (($x41 (and $x196 $x67)))
 (let (($x183 (and $x41 $x104)))
 (let (($x73 (and $x183 $x47)))
 (let (($x39 (and $x73 $x46)))
 (let (($x37 (and $x39 $x26)))
 (let (($x101 (and $x37 $x172)))
 (let (($x137 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and (not $x137) $x101)))
 (let (($x76 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x76 $x86)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x21 (and $x24 $x60)))
 (let (($x61 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1417X)))
 (=> $x222 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1417X) (_ bv0 32)))))
 ))
 (let (($x209 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1416X)))
 (= $x222 false)))
 ))
 (let (($x154 (and $x209 $x61)))
 (let (($x167 (and $x154 $x21)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x300 (and $x25 $x167)))
 (let (($x144 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x135 (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x99 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x9 (or false (or false (and (and true (or $x169 $x99)) (or $x123 $x144))))))
 (let (($x5 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x9)))
 (let (($x147 (=> (and $x57 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x9)))
 (let (($x255 (and $x147 $x300)))
 (let (($x145 (=> $x255 $x33)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (bvule ?x91 input.dst.llvm-%n)))
 (let (($x33 (= $x247 true)))
 (let ((?x82 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x82)))
 (let (($x50 (= ?x12 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x50 true)))
 (let ((?x232 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x232)))
 (let (($x136 (= ?x23 input.dst.llvm-%n)))
 (let (($x26 (= $x136 true)))
 (let (($x225 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x46 (= $x225 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (= $x133 true)))
 (let (($x170 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var1407X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x180))))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv2 32))) ?x32)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv3 32))) ?x35)))
 (let ((?x217 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1407X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1407X)))
 (=> $x117 (= ?x217 ?x191)))))))))
 ))
 (let (($x134 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x84 (and (bvule (_ bv0 32) input.ind-%var1406X) (bvult input.ind-%var1406X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1406X)))
 (= $x117 $x84))))
 ))
 (let (($x54 (and $x134 $x170)))
 (let (($x104 (= $x54 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x120 (bvsub ?x135 ?x15)))
 (let (($x22 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x120) (bvult ?x135 ?x120))))
 (let (($x108 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x245 (ite $x108 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x233 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x10 (bvmul (_ bv4 64) ?x233)))
 (let ((?x208 ((_ extract 63 32) ?x10)))
 (let (($x83 (= ?x208 ?x245)))
 (let (($x72 (and $x83 $x22)))
 (let (($x64 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x129 (and $x64 $x72)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (=> $x57 $x129)))
 (let (($x67 (= $x299 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x240 (= $x56 true)))
 (let (($x70 (= $x57 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x81)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x18)))
 (let ((?x301 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x301)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x212 $x139)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x224 $x250)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x7 $x229)))
 (let (($x234 (not $x105)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x298 $x190)))
 (let (($x158 (and (not $x153) $x234)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x291 $x218)))
 (let (($x152 (not $x293)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x270 $x266)))
 (let (($x297 (and (not $x103) $x152)))
 (let (($x242 (and (and (and (and (and (and $x297 $x158) $x71) $x88) $x213) $x192) $x181)))
 (let (($x243 (and $x242 $x156)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x287 (or false (or false (and (and true (or $x264 $x288)) (or $x269 $x27))))))
 (let (($x289 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x287)))
 (let (($x238 (and $x289 $x243)))
 (let (($x113 (= $x238 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x262 (= $x75 true)))
 (let (($x263 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x254 (= $x263 true)))
 (let (($x55 (= ?x23 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (= $x55 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x202 (= (_ bv0 2) ?x69)))
 (let (($x230 (= $x202 true)))
 (let (($x29 (and $x230 $x63)))
 (let (($x173 (and $x29 $x254)))
 (let (($x272 (and $x173 $x262)))
 (let (($x49 (and $x272 $x113)))
 (let (($x174 (and $x49 $x70)))
 (let (($x196 (and $x174 $x240)))
 (let (($x41 (and $x196 $x67)))
 (let (($x183 (and $x41 $x104)))
 (let (($x73 (and $x183 $x47)))
 (let (($x39 (and $x73 $x46)))
 (let (($x37 (and $x39 $x26)))
 (let (($x101 (and $x37 $x172)))
 (let (($x137 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and (not $x137) $x101)))
 (let (($x76 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x76 $x86)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x21 (and $x24 $x60)))
 (let (($x61 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1417X)))
 (=> $x222 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1417X) (_ bv0 32)))))
 ))
 (let (($x209 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1416X)))
 (= $x222 false)))
 ))
 (let (($x154 (and $x209 $x61)))
 (let (($x167 (and $x154 $x21)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x300 (and $x25 $x167)))
 (let (($x144 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x135 (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x99 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x9 (or false (or false (and (and true (or $x169 $x99)) (or $x123 $x144))))))
 (let (($x5 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x9)))
 (let (($x147 (=> (and $x57 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x9)))
 (let (($x255 (and $x147 $x300)))
 (let (($x145 (=> $x255 $x33)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x285 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var1451X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x99 (bvadd ?x135 (_ bv3 32))))
 (let ((?x19 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x244 (store ?x19 (bvadd ?x135 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x62 (store ?x244 (bvadd ?x135 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x40 (store ?x62 ?x99 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x79 (concat (select ?x40 (bvadd ?x50 (_ bv2 32))) (concat (select ?x40 (bvadd ?x50 (_ bv1 32))) (select ?x40 ?x50)))))
 (let ((?x35 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1451X)))
 (let (($x195 (= input.ind-%var1451X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x260 (= (ite $x195 input.spec-%var-i-0.L3%6%bbentry ?x35) (concat (select ?x40 (bvadd ?x50 (_ bv3 32))) ?x79))))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1451X)))
 (let (($x48 (or $x134 $x195)))
 (=> $x48 $x260))))))))))))))))
 ))
 (let (($x11 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let (($x43 (bvule (_ bv0 32) input.ind-%var1450X)))
 (let (($x199 (and $x43 (bvult input.ind-%var1450X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x195 (= input.ind-%var1450X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1450X)))
 (let (($x48 (or $x134 $x195)))
 (= $x48 $x199)))))))
 ))
 (let (($x257 (and $x11 $x285)))
 (let (($x259 (= $x257 true)))
 (let ((?x237 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x237)))
 (let (($x143 (= ?x66 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x143 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x249 (= (_ bv0 2) ?x124)))
 (let (($x115 (= $x249 true)))
 (let (($x116 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x294 (= $x116 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x200 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x219 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x207 true)))
 (let (($x42 (forall ((input.ind-%var1427X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var1427X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x50))))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv2 32))) ?x60)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv3 32))) ?x300)))
 (let ((?x35 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1427X)))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1427X)))
 (=> $x134 (= ?x35 ?x247)))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1426X (_ BitVec 32)) )(let (($x43 (bvule (_ bv0 32) input.ind-%var1426X)))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1426X)))
 (= $x134 (and $x43 (bvult input.ind-%var1426X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x38 (and $x197 $x42)))
 (let (($x268 (= $x38 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x164 (bvsub ?x135 ?x15)))
 (let (($x299 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x164) (bvult ?x135 ?x164))))
 (let (($x151 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x120 (ite $x151 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x108 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x108)))
 (let ((?x83 ((_ extract 63 32) ?x245)))
 (let (($x17 (= ?x83 ?x120)))
 (let (($x67 (and $x17 $x299)))
 (let (($x10 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x41 (and $x10 $x67)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (=> $x140 $x41)))
 (let (($x130 (= $x117 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x231 (= $x210 true)))
 (let (($x56 (= $x140 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x100)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x301)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x224 $x93)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x6 $x139)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x229 $x105)))
 (let (($x158 (not $x234)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x153 $x98)))
 (let (($x246 (and (not $x7) $x158)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x218 $x293)))
 (let (($x297 (not $x152)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x296 $x132)))
 (let (($x190 (and (not $x291) $x297)))
 (let (($x238 (and (and (and (and (and (and $x190 $x246) $x51) $x88) $x250) $x198) $x192)))
 (let (($x113 (and $x238 $x18)))
 (let (($x290 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x252 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x252)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x252)))
 (let (($x266 (or false (or false (and (and true (or $x125 $x269)) (or $x292 $x290))))))
 (let (($x295 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x266)))
 (let (($x49 (and $x295 $x113)))
 (let (($x70 (= $x49 true)))
 (let ((?x263 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x254 (bvneg ?x263)))
 (let (($x262 (= ?x254 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (= $x262 true)))
 (let (($x173 (= ?x254 input.dst.llvm-%n)))
 (let (($x75 (= $x173 true)))
 (let (($x267 (and $x75 $x272)))
 (let (($x174 (and $x267 $x70)))
 (let (($x240 (and $x174 $x56)))
 (let (($x64 (and $x240 $x231)))
 (let (($x121 (and $x64 $x130)))
 (let (($x193 (and $x121 $x268)))
 (let (($x226 (and $x193 $x78)))
 (let (($x215 (and $x226 $x201)))
 (let (($x221 (and $x215 $x186)))
 (let (($x128 (and $x221 $x294)))
 (let (($x95 (and $x128 $x115)))
 (let (($x159 (and $x95 $x239)))
 (let (($x29 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (and (not $x29) $x159)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x55 $x216)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x36 $x182)))
 (let (($x69 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let (($x214 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1437X)))
 (=> $x214 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1437X) (_ bv0 32)))))
 ))
 (let (($x61 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x214 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1436X)))
 (= $x214 false)))
 ))
 (let (($x202 (and $x61 $x69)))
 (let (($x141 (and $x202 $x111)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x31 $x141)))
 (let (($x107 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x135 (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x175 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x147 (or false (or false (and (and true (or $x28 $x175)) (or $x14 $x107))))))
 (let (($x25 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x147)))
 (let (($x102 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x147)))
 (let (($x77 (and $x102 $x203)))
 (let (($x286 (=> $x77 $x259)))
 (not $x286)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x285 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var1451X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x99 (bvadd ?x135 (_ bv3 32))))
 (let ((?x19 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x244 (store ?x19 (bvadd ?x135 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x62 (store ?x244 (bvadd ?x135 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x40 (store ?x62 ?x99 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x79 (concat (select ?x40 (bvadd ?x50 (_ bv2 32))) (concat (select ?x40 (bvadd ?x50 (_ bv1 32))) (select ?x40 ?x50)))))
 (let ((?x35 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1451X)))
 (let (($x195 (= input.ind-%var1451X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x260 (= (ite $x195 input.spec-%var-i-0.L3%6%bbentry ?x35) (concat (select ?x40 (bvadd ?x50 (_ bv3 32))) ?x79))))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1451X)))
 (let (($x48 (or $x134 $x195)))
 (=> $x48 $x260))))))))))))))))
 ))
 (let (($x11 (forall ((input.ind-%var1450X (_ BitVec 32)) )(let (($x43 (bvule (_ bv0 32) input.ind-%var1450X)))
 (let (($x199 (and $x43 (bvult input.ind-%var1450X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x195 (= input.ind-%var1450X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1450X)))
 (let (($x48 (or $x134 $x195)))
 (= $x48 $x199)))))))
 ))
 (let (($x257 (and $x11 $x285)))
 (let (($x259 (= $x257 true)))
 (let ((?x237 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x237)))
 (let (($x143 (= ?x66 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x143 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x249 (= (_ bv0 2) ?x124)))
 (let (($x115 (= $x249 true)))
 (let (($x116 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x294 (= $x116 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x200 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x219 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x207 true)))
 (let (($x42 (forall ((input.ind-%var1427X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var1427X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x50))))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv2 32))) ?x60)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv3 32))) ?x300)))
 (let ((?x35 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1427X)))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1427X)))
 (=> $x134 (= ?x35 ?x247)))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1426X (_ BitVec 32)) )(let (($x43 (bvule (_ bv0 32) input.ind-%var1426X)))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1426X)))
 (= $x134 (and $x43 (bvult input.ind-%var1426X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x38 (and $x197 $x42)))
 (let (($x268 (= $x38 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x164 (bvsub ?x135 ?x15)))
 (let (($x299 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x164) (bvult ?x135 ?x164))))
 (let (($x151 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x120 (ite $x151 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x108 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x108)))
 (let ((?x83 ((_ extract 63 32) ?x245)))
 (let (($x17 (= ?x83 ?x120)))
 (let (($x67 (and $x17 $x299)))
 (let (($x10 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x41 (and $x10 $x67)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (=> $x140 $x41)))
 (let (($x130 (= $x117 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x231 (= $x210 true)))
 (let (($x56 (= $x140 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x100)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x301)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x224 $x93)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x6 $x139)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x229 $x105)))
 (let (($x158 (not $x234)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x153 $x98)))
 (let (($x246 (and (not $x7) $x158)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x218 $x293)))
 (let (($x297 (not $x152)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x296 $x132)))
 (let (($x190 (and (not $x291) $x297)))
 (let (($x238 (and (and (and (and (and (and $x190 $x246) $x51) $x88) $x250) $x198) $x192)))
 (let (($x113 (and $x238 $x18)))
 (let (($x290 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x252 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x252)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x252)))
 (let (($x266 (or false (or false (and (and true (or $x125 $x269)) (or $x292 $x290))))))
 (let (($x295 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x266)))
 (let (($x49 (and $x295 $x113)))
 (let (($x70 (= $x49 true)))
 (let ((?x263 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x254 (bvneg ?x263)))
 (let (($x262 (= ?x254 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (= $x262 true)))
 (let (($x173 (= ?x254 input.dst.llvm-%n)))
 (let (($x75 (= $x173 true)))
 (let (($x267 (and $x75 $x272)))
 (let (($x174 (and $x267 $x70)))
 (let (($x240 (and $x174 $x56)))
 (let (($x64 (and $x240 $x231)))
 (let (($x121 (and $x64 $x130)))
 (let (($x193 (and $x121 $x268)))
 (let (($x226 (and $x193 $x78)))
 (let (($x215 (and $x226 $x201)))
 (let (($x221 (and $x215 $x186)))
 (let (($x128 (and $x221 $x294)))
 (let (($x95 (and $x128 $x115)))
 (let (($x159 (and $x95 $x239)))
 (let (($x29 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (and (not $x29) $x159)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x55 $x216)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x36 $x182)))
 (let (($x69 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let (($x214 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1437X)))
 (=> $x214 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1437X) (_ bv0 32)))))
 ))
 (let (($x61 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x214 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1436X)))
 (= $x214 false)))
 ))
 (let (($x202 (and $x61 $x69)))
 (let (($x141 (and $x202 $x111)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x31 $x141)))
 (let (($x107 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x135 (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x175 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x147 (or false (or false (and (and true (or $x28 $x175)) (or $x14 $x107))))))
 (let (($x25 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x147)))
 (let (($x102 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x147)))
 (let (($x77 (and $x102 $x203)))
 (let (($x286 (=> $x77 $x259)))
 (not $x286)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (not $x163)))
 (let (($x251 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (not $x251)))
 (let (($x227 (or $x244 $x248)))
 (let (($x62 (= $x227 true)))
 (let ((?x228 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x228)))
 (let (($x199 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x199 true)))
 (let ((?x216 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x216)))
 (let (($x77 (= ?x182 input.dst.llvm-%n)))
 (let (($x195 (= $x77 true)))
 (let (($x111 (= ?x182 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (= $x111 true)))
 (let (($x66 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x66 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x95 (= $x115 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x294 (= $x116 true)))
 (let (($x201 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul input.ind-%var1461X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x145 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x60))))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv2 32))) ?x145)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv3 32))) ?x268)))
 (let ((?x121 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1461X)))
 (let (($x245 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1461X)))
 (=> $x245 (= ?x121 ?x78)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x129 (and (bvule (_ bv0 32) input.ind-%var1460X) (bvult input.ind-%var1460X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x245 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1460X)))
 (= $x245 $x129))))
 ))
 (let (($x215 (and $x67 $x201)))
 (let (($x200 (= $x215 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x233 (= $x179 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x238)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x301)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x250 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (and $x93 $x250)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x212 $x156)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x246 $x181)))
 (let (($x51 (not $x71)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x105 $x234)))
 (let (($x13 (and (not $x158) $x51)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x190 $x153)))
 (let (($x7 (not $x98)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (and $x269 $x27)))
 (let (($x229 (and (not $x297) $x7)))
 (let (($x56 (and (and (and (and (and (and $x229 $x13) $x81) $x224) $x213) $x243) $x192)))
 (let (($x240 (and $x56 $x100)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x290 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x290)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x290)))
 (let (($x218 (or false (or false (and (and true (or $x287 $x289)) (or $x295 $x296))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x218)))
 (let (($x196 (and $x152 $x240)))
 (let (($x210 (= $x196 true)))
 (let ((?x288 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x103 (= (_ bv0 2) ?x288)))
 (let (($x252 (= $x103 true)))
 (let (($x231 (and $x252 $x210)))
 (let (($x10 (and $x231 $x233)))
 (let (($x186 (and $x10 $x200)))
 (let (($x128 (and $x186 $x294)))
 (let (($x249 (and $x128 $x124)))
 (let (($x237 (and $x249 $x95)))
 (let (($x239 (and $x237 $x143)))
 (let (($x203 (and $x239 $x141)))
 (let (($x48 (and $x203 $x195)))
 (let (($x11 (and $x48 $x177)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (and $x267 $x11)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x138 (and $x75 $x189)))
 (let (($x263 (forall ((input.ind-%var1471X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1471X)))
 (=> $x106 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1471X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1470X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1470X)))
 (= $x106 false)))
 ))
 (let (($x254 (and $x69 $x263)))
 (let (($x187 (and $x254 $x138)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x209 $x187)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let (($x9 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x135 (_ bv3 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x123 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x102 (or false (or false (and (and true (or $x184 $x123)) (or $x171 $x9))))))
 (let (($x31 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x112 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x94 (and $x112 $x19)))
 (let (($x89 (=> $x94 $x62)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (not $x163)))
 (let (($x251 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (not $x251)))
 (let (($x227 (or $x244 $x248)))
 (let (($x62 (= $x227 true)))
 (let ((?x228 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x228)))
 (let (($x199 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x199 true)))
 (let ((?x216 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x216)))
 (let (($x77 (= ?x182 input.dst.llvm-%n)))
 (let (($x195 (= $x77 true)))
 (let (($x111 (= ?x182 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (= $x111 true)))
 (let (($x66 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x66 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x95 (= $x115 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x90 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x294 (= $x116 true)))
 (let (($x201 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul input.ind-%var1461X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x145 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x60))))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv2 32))) ?x145)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv3 32))) ?x268)))
 (let ((?x121 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1461X)))
 (let (($x245 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1461X)))
 (=> $x245 (= ?x121 ?x78)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x129 (and (bvule (_ bv0 32) input.ind-%var1460X) (bvult input.ind-%var1460X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x245 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1460X)))
 (= $x245 $x129))))
 ))
 (let (($x215 (and $x67 $x201)))
 (let (($x200 (= $x215 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x233 (= $x179 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x238)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x301)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x250 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (and $x93 $x250)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x212 $x156)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x246 $x181)))
 (let (($x51 (not $x71)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x105 $x234)))
 (let (($x13 (and (not $x158) $x51)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x190 $x153)))
 (let (($x7 (not $x98)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (and $x269 $x27)))
 (let (($x229 (and (not $x297) $x7)))
 (let (($x56 (and (and (and (and (and (and $x229 $x13) $x81) $x224) $x213) $x243) $x192)))
 (let (($x240 (and $x56 $x100)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x290 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x290)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x290)))
 (let (($x218 (or false (or false (and (and true (or $x287 $x289)) (or $x295 $x296))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x218)))
 (let (($x196 (and $x152 $x240)))
 (let (($x210 (= $x196 true)))
 (let ((?x288 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x103 (= (_ bv0 2) ?x288)))
 (let (($x252 (= $x103 true)))
 (let (($x231 (and $x252 $x210)))
 (let (($x10 (and $x231 $x233)))
 (let (($x186 (and $x10 $x200)))
 (let (($x128 (and $x186 $x294)))
 (let (($x249 (and $x128 $x124)))
 (let (($x237 (and $x249 $x95)))
 (let (($x239 (and $x237 $x143)))
 (let (($x203 (and $x239 $x141)))
 (let (($x48 (and $x203 $x195)))
 (let (($x11 (and $x48 $x177)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (and $x267 $x11)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x138 (and $x75 $x189)))
 (let (($x263 (forall ((input.ind-%var1471X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1471X)))
 (=> $x106 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1471X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1470X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1470X)))
 (= $x106 false)))
 ))
 (let (($x254 (and $x69 $x263)))
 (let (($x187 (and $x254 $x138)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x209 $x187)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let (($x9 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x135 (_ bv3 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x123 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x102 (or false (or false (and (and true (or $x184 $x123)) (or $x171 $x9))))))
 (let (($x31 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x112 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x94 (and $x112 $x19)))
 (let (($x89 (=> $x94 $x62)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x185 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x194 (bvmul (_ bv4294967295 32) ?x185)))
 (let ((?x154 (bvneg ?x194)))
 (let (($x222 (= ?x154 ?x24)))
 (let (($x30 (= $x222 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x16)))
 (let (($x261 (= ?x260 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x261 true)))
 (let (($x275 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x281 (= $x275 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x284 (= $x114 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x230 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x101 true)))
 (let (($x167 (forall ((input.ind-%var1481X (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul input.ind-%var1481X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x47)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x255)))
 (let ((?x248 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1481X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1481X)))
 (=> $x195 (= ?x248 ?x122)))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1480X (_ BitVec 32)) )(let (($x138 (and (bvule (_ bv0 32) input.ind-%var1480X) (bvult input.ind-%var1480X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1480X)))
 (= $x195 $x138))))
 ))
 (let (($x108 (and $x19 $x167)))
 (let (($x17 (= $x108 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x95 (bvsub ?x135 ?x15)))
 (let (($x239 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x95) (bvult ?x135 ?x95))))
 (let (($x124 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x249 (ite $x124 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x294 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvmul (_ bv4 64) ?x294)))
 (let ((?x90 ((_ extract 63 32) ?x128)))
 (let (($x115 (= ?x90 ?x249)))
 (let (($x159 (and $x115 $x239)))
 (let (($x221 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x216 (and $x221 $x159)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x188 $x216)))
 (let (($x111 (= $x182 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x219 true)))
 (let (($x268 (= $x188 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x43)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x67)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x233 $x245)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x179 $x72)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x301 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x301 $x192)))
 (let (($x238 (not $x56)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x198 $x243)))
 (let (($x240 (and (not $x174) $x238)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x93 $x139)))
 (let (($x156 (not $x250)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x229 $x105)))
 (let (($x70 (and (not $x212) $x156)))
 (let (($x38 (and (and (and (and (and (and $x70 $x240) $x210) $x64) $x164) $x299) $x121)))
 (let (($x247 (and $x38 $x172)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x6 (or false (or false (and (and true (or $x246 $x181)) (or $x13 $x18))))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x6)))
 (let (($x33 (and $x49 $x247)))
 (let (($x300 (= $x33 true)))
 (let ((?x132 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x291 (bvneg ?x132)))
 (let (($x190 (= ?x291 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (= $x190 true)))
 (let ((?x269 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x27 (= (_ bv0 2) ?x269)))
 (let (($x297 (= $x27 true)))
 (let (($x298 (= ?x291 input.dst.llvm-%n)))
 (let (($x218 (= $x298 true)))
 (let (($x241 (and $x218 $x297)))
 (let (($x98 (and $x241 $x153)))
 (let (($x145 (and $x98 $x300)))
 (let (($x78 (and $x145 $x268)))
 (let (($x215 (and $x78 $x201)))
 (let (($x141 (and $x215 $x111)))
 (let (($x22 (and $x141 $x17)))
 (let (($x86 (and $x22 $x117)))
 (let (($x53 (and $x86 $x29)))
 (let (($x278 (and $x53 $x284)))
 (let (($x79 (and $x278 $x281)))
 (let (($x257 (and $x79 $x285)))
 (let (($x295 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x286 (and (not $x295) $x257)))
 (let (($x270 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and $x270 $x286)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x290 $x34)))
 (let (($x271 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1491X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1491X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1490X)))
 (= $x232 false)))
 ))
 (let (($x292 (and $x263 $x271)))
 (let (($x265 (and $x292 $x176)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x217 (and $x61 $x265)))
 (let (($x147 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x135 (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x14 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x112 (or false (or false (and (and true (or $x148 $x14)) (or $x5 $x147))))))
 (let (($x209 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x112)))
 (let (($x8 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x112)))
 (let (($x191 (and $x8 $x217)))
 (let (($x253 (=> $x191 $x30)))
 (not $x253)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x185 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x194 (bvmul (_ bv4294967295 32) ?x185)))
 (let ((?x154 (bvneg ?x194)))
 (let (($x222 (= ?x154 ?x24)))
 (let (($x30 (= $x222 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x16)))
 (let (($x261 (= ?x260 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x261 true)))
 (let (($x275 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x281 (= $x275 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x284 (= $x114 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x230 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x101 true)))
 (let (($x167 (forall ((input.ind-%var1481X (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul input.ind-%var1481X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x47)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x255)))
 (let ((?x248 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1481X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1481X)))
 (=> $x195 (= ?x248 ?x122)))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1480X (_ BitVec 32)) )(let (($x138 (and (bvule (_ bv0 32) input.ind-%var1480X) (bvult input.ind-%var1480X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1480X)))
 (= $x195 $x138))))
 ))
 (let (($x108 (and $x19 $x167)))
 (let (($x17 (= $x108 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x95 (bvsub ?x135 ?x15)))
 (let (($x239 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x95) (bvult ?x135 ?x95))))
 (let (($x124 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x249 (ite $x124 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x294 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvmul (_ bv4 64) ?x294)))
 (let ((?x90 ((_ extract 63 32) ?x128)))
 (let (($x115 (= ?x90 ?x249)))
 (let (($x159 (and $x115 $x239)))
 (let (($x221 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x216 (and $x221 $x159)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x188 $x216)))
 (let (($x111 (= $x182 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x219 true)))
 (let (($x268 (= $x188 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x43)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x67)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x233 $x245)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x179 $x72)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x301 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x301 $x192)))
 (let (($x238 (not $x56)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x198 $x243)))
 (let (($x240 (and (not $x174) $x238)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x93 $x139)))
 (let (($x156 (not $x250)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x229 $x105)))
 (let (($x70 (and (not $x212) $x156)))
 (let (($x38 (and (and (and (and (and (and $x70 $x240) $x210) $x64) $x164) $x299) $x121)))
 (let (($x247 (and $x38 $x172)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x6 (or false (or false (and (and true (or $x246 $x181)) (or $x13 $x18))))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x6)))
 (let (($x33 (and $x49 $x247)))
 (let (($x300 (= $x33 true)))
 (let ((?x132 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x291 (bvneg ?x132)))
 (let (($x190 (= ?x291 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (= $x190 true)))
 (let ((?x269 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x27 (= (_ bv0 2) ?x269)))
 (let (($x297 (= $x27 true)))
 (let (($x298 (= ?x291 input.dst.llvm-%n)))
 (let (($x218 (= $x298 true)))
 (let (($x241 (and $x218 $x297)))
 (let (($x98 (and $x241 $x153)))
 (let (($x145 (and $x98 $x300)))
 (let (($x78 (and $x145 $x268)))
 (let (($x215 (and $x78 $x201)))
 (let (($x141 (and $x215 $x111)))
 (let (($x22 (and $x141 $x17)))
 (let (($x86 (and $x22 $x117)))
 (let (($x53 (and $x86 $x29)))
 (let (($x278 (and $x53 $x284)))
 (let (($x79 (and $x278 $x281)))
 (let (($x257 (and $x79 $x285)))
 (let (($x295 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x286 (and (not $x295) $x257)))
 (let (($x270 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and $x270 $x286)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x290 $x34)))
 (let (($x271 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1491X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1491X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1490X)))
 (= $x232 false)))
 ))
 (let (($x292 (and $x263 $x271)))
 (let (($x265 (and $x292 $x176)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x217 (and $x61 $x265)))
 (let (($x147 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x135 (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x14 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x112 (or false (or false (and (and true (or $x148 $x14)) (or $x5 $x147))))))
 (let (($x209 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x112)))
 (let (($x8 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x112)))
 (let (($x191 (and $x8 $x217)))
 (let (($x253 (=> $x191 $x30)))
 (not $x253)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x177 (bvule ?x199 (_ bv4294967294 32))))
 (let (($x63 (= $x177 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x40)))
 (let (($x68 (= ?x214 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x68 true)))
 (let (($x228 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x97 (= $x228 true)))
 (let (($x264 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x264 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x211)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x30)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x191)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (and $x217 $x185)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x265 $x194)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x281 $x79)))
 (let (($x260 (not $x16)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x284 $x278)))
 (let (($x285 (and (not $x275) $x260)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x117 $x86)))
 (let (($x29 (not $x230)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x197 $x35)))
 (let (($x114 (and (not $x101) $x29)))
 (let (($x254 (and (and (and (and (and (and $x114 $x285) $x286) $x176) $x154) $x222) $x253)))
 (let (($x75 (and $x254 $x155)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x108 (or false (or false (and (and true (or $x165 $x58)) (or $x255 $x122))))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x106 (and $x22 $x75)))
 (let (($x74 (= $x106 true)))
 (let (($x248 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x62 (= $x248 true)))
 (let (($x138 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x187 (= $x138 true)))
 (let (($x141 (forall ((input.ind-%var1501X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var1501X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x90))))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x90 (_ bv2 32))) ?x237)))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x90 (_ bv3 32))) ?x143)))
 (let ((?x38 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1501X)))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1501X)))
 (=> $x64 (= ?x38 ?x216)))))))))
 ))
 (let (($x299 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) input.ind-%var1500X) (bvult input.ind-%var1500X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1500X)))
 (= $x64 $x12))))
 ))
 (let (($x195 (and $x299 $x141)))
 (let (($x189 (= $x195 true)))
 (let ((?x242 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x242)))
 (let (($x60 (= ?x246 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (= $x60 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x70 (bvsub ?x135 ?x15)))
 (let (($x100 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x70) (bvult ?x135 ?x70))))
 (let (($x139 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x250 (ite $x139 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x213 (bvmul (_ bv4 64) ?x212)))
 (let ((?x93 ((_ extract 63 32) ?x213)))
 (let (($x156 (= ?x93 ?x250)))
 (let (($x301 (and $x156 $x100)))
 (let (($x229 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x192 (and $x229 $x301)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (=> $x57 $x192)))
 (let (($x238 (= $x56 true)))
 (let ((?x18 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x88 (= (_ bv0 2) ?x18)))
 (let (($x81 (= $x88 true)))
 (let (($x181 (= ?x246 input.dst.llvm-%n)))
 (let (($x71 (= $x181 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x234 (= $x98 true)))
 (let (($x190 (= $x57 true)))
 (let (($x158 (and $x190 $x234)))
 (let (($x51 (and $x158 $x71)))
 (let (($x113 (and $x51 $x81)))
 (let (($x240 (and $x113 $x238)))
 (let (($x210 (and $x240 $x196)))
 (let (($x11 (and $x210 $x189)))
 (let (($x19 (and $x11 $x187)))
 (let (($x208 (and $x19 $x62)))
 (let (($x160 (and $x208 $x74)))
 (let (($x203 (and $x160 $x244)))
 (let (($x89 (and $x203 $x97)))
 (let (($x202 (and $x89 $x23)))
 (let (($x241 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and (not $x241) $x202)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and $x27 $x83)))
 (let (($x218 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x218 $x119)))
 (let (($x132 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1511X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1511X) (_ bv0 32)))))
 ))
 (let (($x271 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1510X)))
 (= $x262 false)))
 ))
 (let (($x291 (and $x271 $x132)))
 (let (($x36 (and $x291 $x134)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x206 (and $x69 $x36)))
 (let (($x102 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x135 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x171 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x8 (or false (or false (and (and true (or $x144 $x171)) (or $x25 $x102))))))
 (let (($x61 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x99 (=> (and $x57 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x77 (and $x99 $x206)))
 (let (($x251 (=> $x77 $x63)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x177 (bvule ?x199 (_ bv4294967294 32))))
 (let (($x63 (= $x177 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x40)))
 (let (($x68 (= ?x214 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x68 true)))
 (let (($x228 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x97 (= $x228 true)))
 (let (($x264 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x264 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x211)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x30)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x191)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (and $x217 $x185)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x265 $x194)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x281 $x79)))
 (let (($x260 (not $x16)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x284 $x278)))
 (let (($x285 (and (not $x275) $x260)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x117 $x86)))
 (let (($x29 (not $x230)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x197 $x35)))
 (let (($x114 (and (not $x101) $x29)))
 (let (($x254 (and (and (and (and (and (and $x114 $x285) $x286) $x176) $x154) $x222) $x253)))
 (let (($x75 (and $x254 $x155)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x108 (or false (or false (and (and true (or $x165 $x58)) (or $x255 $x122))))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x106 (and $x22 $x75)))
 (let (($x74 (= $x106 true)))
 (let (($x248 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x62 (= $x248 true)))
 (let (($x138 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x187 (= $x138 true)))
 (let (($x141 (forall ((input.ind-%var1501X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var1501X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x90))))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x90 (_ bv2 32))) ?x237)))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x90 (_ bv3 32))) ?x143)))
 (let ((?x38 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1501X)))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1501X)))
 (=> $x64 (= ?x38 ?x216)))))))))
 ))
 (let (($x299 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) input.ind-%var1500X) (bvult input.ind-%var1500X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x64 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1500X)))
 (= $x64 $x12))))
 ))
 (let (($x195 (and $x299 $x141)))
 (let (($x189 (= $x195 true)))
 (let ((?x242 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x242)))
 (let (($x60 (= ?x246 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (= $x60 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x70 (bvsub ?x135 ?x15)))
 (let (($x100 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x70) (bvult ?x135 ?x70))))
 (let (($x139 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x250 (ite $x139 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x213 (bvmul (_ bv4 64) ?x212)))
 (let ((?x93 ((_ extract 63 32) ?x213)))
 (let (($x156 (= ?x93 ?x250)))
 (let (($x301 (and $x156 $x100)))
 (let (($x229 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x192 (and $x229 $x301)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (=> $x57 $x192)))
 (let (($x238 (= $x56 true)))
 (let ((?x18 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x88 (= (_ bv0 2) ?x18)))
 (let (($x81 (= $x88 true)))
 (let (($x181 (= ?x246 input.dst.llvm-%n)))
 (let (($x71 (= $x181 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x234 (= $x98 true)))
 (let (($x190 (= $x57 true)))
 (let (($x158 (and $x190 $x234)))
 (let (($x51 (and $x158 $x71)))
 (let (($x113 (and $x51 $x81)))
 (let (($x240 (and $x113 $x238)))
 (let (($x210 (and $x240 $x196)))
 (let (($x11 (and $x210 $x189)))
 (let (($x19 (and $x11 $x187)))
 (let (($x208 (and $x19 $x62)))
 (let (($x160 (and $x208 $x74)))
 (let (($x203 (and $x160 $x244)))
 (let (($x89 (and $x203 $x97)))
 (let (($x202 (and $x89 $x23)))
 (let (($x241 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and (not $x241) $x202)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and $x27 $x83)))
 (let (($x218 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x218 $x119)))
 (let (($x132 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1511X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1511X) (_ bv0 32)))))
 ))
 (let (($x271 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1510X)))
 (= $x262 false)))
 ))
 (let (($x291 (and $x271 $x132)))
 (let (($x36 (and $x291 $x134)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x206 (and $x69 $x36)))
 (let (($x102 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x135 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x171 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x8 (or false (or false (and (and true (or $x144 $x171)) (or $x25 $x102))))))
 (let (($x61 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x99 (=> (and $x57 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x77 (and $x99 $x206)))
 (let (($x251 (=> $x77 $x63)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x67 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x294 (bvsge ?x67 (_ bv0 32))))
 (let (($x293 (= $x294 true)))
 (let ((?x219 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x219)))
 (let (($x145 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x268 (= $x145 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x33 true)))
 (let (($x179 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x233 (= $x179 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x207)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x109)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x77)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x206 $x199)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x36 $x177)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x97 $x89)))
 (let (($x214 (not $x40)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x228 (and $x244 $x203)))
 (let (($x23 (and (not $x228) $x214)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x155 $x75)))
 (let (($x74 (not $x106)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x48 $x34)))
 (let (($x264 (and (not $x211) $x74)))
 (let (($x45 (and (and (and (and (and (and $x264 $x23) $x83) $x134) $x63) $x130) $x151)))
 (let (($x103 (and $x45 $x43)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x265 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x265)))
 (let (($x191 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x265)))
 (let (($x30 (or false (or false (and (and true (or $x217 $x191)) (or $x154 $x55))))))
 (let (($x254 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x30)))
 (let (($x266 (and $x254 $x103)))
 (let (($x121 (= $x266 true)))
 (let (($x285 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x7 (= $x285 true)))
 (let (($x79 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (= $x79 true)))
 (let (($x278 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var1521X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x167))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv2 32))) ?x35)))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv3 32))) ?x117)))
 (let ((?x11 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1521X)))
 (let (($x226 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (=> $x226 (= ?x11 ?x29)))))))))
 ))
 (let (($x111 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var1520X) (bvult input.ind-%var1520X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x226 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1520X)))
 (= $x226 $x216))))
 ))
 (let (($x275 (and $x111 $x278)))
 (let (($x261 (= $x275 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x6)))
 (let (($x172 (= ?x49 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (= $x172 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x60 (bvsub ?x135 ?x15)))
 (let (($x164 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x60) (bvult ?x135 ?x60))))
 (let (($x56 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x238 (ite $x56 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x301 (bvmul (_ bv4 64) ?x100)))
 (let ((?x192 ((_ extract 63 32) ?x301)))
 (let (($x240 (= ?x192 ?x238)))
 (let (($x72 (and $x240 $x164)))
 (let (($x243 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x12 (and $x243 $x72)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (=> $x140 $x12)))
 (let (($x299 (= $x129 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x139 (= (_ bv0 2) ?x93)))
 (let (($x250 (= $x139 true)))
 (let (($x229 (= ?x49 input.dst.llvm-%n)))
 (let (($x105 (= $x229 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x88 (= $x18 true)))
 (let (($x51 (= $x140 true)))
 (let (($x81 (and $x51 $x88)))
 (let (($x212 (and $x81 $x105)))
 (let (($x156 (and $x212 $x250)))
 (let (($x38 (and $x156 $x299)))
 (let (($x90 (and $x38 $x128)))
 (let (($x281 (and $x90 $x261)))
 (let (($x260 (and $x281 $x16)))
 (let (($x257 (and $x260 $x7)))
 (let (($x193 (and $x257 $x121)))
 (let (($x247 (and $x193 $x233)))
 (let (($x186 (and $x247 $x200)))
 (let (($x300 (and $x186 $x268)))
 (let (($x71 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x71) $x300)))
 (let (($x246 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and $x246 $x215)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x158 $x221)))
 (let (($x153 (forall ((input.ind-%var1531X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1531X)))
 (=> $x287 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1531X) (_ bv0 32)))))
 ))
 (let (($x132 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1530X)))
 (= $x287 false)))
 ))
 (let (($x98 (and $x132 $x153)))
 (let (($x10 (and $x98 $x231)))
 (let (($x263 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x263 $x10)))
 (let (($x112 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd ?x135 (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x5 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x99 (or false (or false (and (and true (or $x107 $x5)) (or $x31 $x112))))))
 (let (($x69 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x99)))
 (let (($x175 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x99)))
 (let (($x116 (and $x175 $x245)))
 (let (($x295 (=> $x116 $x293)))
 (not $x295))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x67 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x294 (bvsge ?x67 (_ bv0 32))))
 (let (($x293 (= $x294 true)))
 (let ((?x219 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x219)))
 (let (($x145 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x268 (= $x145 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x33 true)))
 (let (($x179 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x233 (= $x179 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x207)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x109)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x77)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x206 $x199)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x36 $x177)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x97 $x89)))
 (let (($x214 (not $x40)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x228 (and $x244 $x203)))
 (let (($x23 (and (not $x228) $x214)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x155 $x75)))
 (let (($x74 (not $x106)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x48 $x34)))
 (let (($x264 (and (not $x211) $x74)))
 (let (($x45 (and (and (and (and (and (and $x264 $x23) $x83) $x134) $x63) $x130) $x151)))
 (let (($x103 (and $x45 $x43)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x265 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x265)))
 (let (($x191 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x265)))
 (let (($x30 (or false (or false (and (and true (or $x217 $x191)) (or $x154 $x55))))))
 (let (($x254 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x30)))
 (let (($x266 (and $x254 $x103)))
 (let (($x121 (= $x266 true)))
 (let (($x285 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x7 (= $x285 true)))
 (let (($x79 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (= $x79 true)))
 (let (($x278 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var1521X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x167))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv2 32))) ?x35)))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x167 (_ bv3 32))) ?x117)))
 (let ((?x11 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1521X)))
 (let (($x226 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (=> $x226 (= ?x11 ?x29)))))))))
 ))
 (let (($x111 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var1520X) (bvult input.ind-%var1520X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x226 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1520X)))
 (= $x226 $x216))))
 ))
 (let (($x275 (and $x111 $x278)))
 (let (($x261 (= $x275 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x6)))
 (let (($x172 (= ?x49 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (= $x172 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x60 (bvsub ?x135 ?x15)))
 (let (($x164 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x60) (bvult ?x135 ?x60))))
 (let (($x56 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x238 (ite $x56 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x301 (bvmul (_ bv4 64) ?x100)))
 (let ((?x192 ((_ extract 63 32) ?x301)))
 (let (($x240 (= ?x192 ?x238)))
 (let (($x72 (and $x240 $x164)))
 (let (($x243 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x12 (and $x243 $x72)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (=> $x140 $x12)))
 (let (($x299 (= $x129 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x139 (= (_ bv0 2) ?x93)))
 (let (($x250 (= $x139 true)))
 (let (($x229 (= ?x49 input.dst.llvm-%n)))
 (let (($x105 (= $x229 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x88 (= $x18 true)))
 (let (($x51 (= $x140 true)))
 (let (($x81 (and $x51 $x88)))
 (let (($x212 (and $x81 $x105)))
 (let (($x156 (and $x212 $x250)))
 (let (($x38 (and $x156 $x299)))
 (let (($x90 (and $x38 $x128)))
 (let (($x281 (and $x90 $x261)))
 (let (($x260 (and $x281 $x16)))
 (let (($x257 (and $x260 $x7)))
 (let (($x193 (and $x257 $x121)))
 (let (($x247 (and $x193 $x233)))
 (let (($x186 (and $x247 $x200)))
 (let (($x300 (and $x186 $x268)))
 (let (($x71 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x71) $x300)))
 (let (($x246 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and $x246 $x215)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x158 $x221)))
 (let (($x153 (forall ((input.ind-%var1531X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1531X)))
 (=> $x287 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1531X) (_ bv0 32)))))
 ))
 (let (($x132 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1530X)))
 (= $x287 false)))
 ))
 (let (($x98 (and $x132 $x153)))
 (let (($x10 (and $x98 $x231)))
 (let (($x263 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x263 $x10)))
 (let (($x112 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd ?x135 (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x5 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x99 (or false (or false (and (and true (or $x107 $x5)) (or $x31 $x112))))))
 (let (($x69 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x99)))
 (let (($x175 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x99)))
 (let (($x116 (and $x175 $x245)))
 (let (($x295 (=> $x116 $x293)))
 (not $x295))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x195 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (bvule ?x195 (_ bv4294967294 32))))
 (let (($x298 (= $x223 true)))
 (let ((?x50 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x50)))
 (let (($x208 (= ?x165 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x208 true)))
 (let (($x248 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (= $x248 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x249 (= $x66 true)))
 (let (($x259 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let ((?x293 (bvadd (bvmul input.ind-%var1541X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x293))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x293 (_ bv2 32))) ?x286)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x293 (_ bv3 32))) ?x270)))
 (let ((?x179 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1541X)))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1541X)))
 (=> $x63 (= ?x179 ?x218)))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1540X) (bvult input.ind-%var1540X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1540X)))
 (= $x63 $x207))))
 ))
 (let (($x297 (and $x103 $x259)))
 (let (($x189 (= $x297 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x267 (bvsub ?x135 ?x15)))
 (let (($x119 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x267) (bvult ?x135 ?x267))))
 (let (($x40 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x40 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x68 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x97 (bvmul (_ bv4 64) ?x68)))
 (let ((?x89 ((_ extract 63 32) ?x97)))
 (let (($x23 (= ?x89 ?x214)))
 (let (($x134 (and $x23 $x119)))
 (let (($x203 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x292 (and $x203 $x134)))
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (=> $x163 $x292)))
 (let (($x206 (= $x36 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x75 true)))
 (let (($x160 (= $x163 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x185)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x217)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (and $x285 $x257)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (and $x260 $x176)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x117 $x29)))
 (let (($x284 (not $x114)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x197 $x108)))
 (let (($x275 (and (not $x35) $x284)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x86 $x230)))
 (let (($x101 (not $x17)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x72 $x12)))
 (let (($x22 (and (not $x167) $x101)))
 (let (($x30 (and (and (and (and (and (and $x22 $x275) $x281) $x16) $x227) $x265) $x191)))
 (let (($x254 (and $x30 $x194)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x11 (or false (or false (and (and true (or $x172 $x128)) (or $x143 $x237))))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x48 (and $x91 $x254)))
 (let (($x34 (= $x48 true)))
 (let (($x60 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x210 (= $x60 true)))
 (let (($x238 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x240 (= $x238 true)))
 (let ((?x213 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x213)))
 (let (($x100 (= ?x93 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x301 (= $x100 true)))
 (let ((?x198 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x70 (= (_ bv0 2) ?x198)))
 (let (($x243 (= $x70 true)))
 (let (($x139 (= ?x93 input.dst.llvm-%n)))
 (let (($x250 (= $x139 true)))
 (let (($x174 (and $x250 $x243)))
 (let (($x192 (and $x174 $x301)))
 (let (($x196 (and $x192 $x240)))
 (let (($x64 (and $x196 $x210)))
 (let (($x211 (and $x64 $x34)))
 (let (($x155 (and $x211 $x160)))
 (let (($x74 (and $x155 $x106)))
 (let (($x77 (and $x74 $x206)))
 (let (($x239 (and $x77 $x189)))
 (let (($x19 (and $x239 $x249)))
 (let (($x47 (and $x19 $x120)))
 (let (($x62 (and $x47 $x76)))
 (let (($x105 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and (not $x105) $x62)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and $x49 $x58)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x81 $x255)))
 (let (($x13 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1551X)))
 (=> $x152 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1551X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1550X)))
 (= $x152 false)))
 ))
 (let (($x18 (and $x153 $x13)))
 (let (($x115 (and $x18 $x159)))
 (let (($x271 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x124 (and $x271 $x115)))
 (let (($x8 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x135 (_ bv3 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x25 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x175 (or false (or false (and (and true (or $x9 $x25)) (or $x209 $x8))))))
 (let (($x263 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x175)))
 (let (($x123 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x175)))
 (let (($x122 (and $x123 $x124)))
 (let (($x241 (=> $x122 $x298)))
 (not $x241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x195 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (bvule ?x195 (_ bv4294967294 32))))
 (let (($x298 (= $x223 true)))
 (let ((?x50 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x50)))
 (let (($x208 (= ?x165 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x208 true)))
 (let (($x248 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (= $x248 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x249 (= $x66 true)))
 (let (($x259 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let ((?x293 (bvadd (bvmul input.ind-%var1541X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x293))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x293 (_ bv2 32))) ?x286)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x293 (_ bv3 32))) ?x270)))
 (let ((?x179 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1541X)))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1541X)))
 (=> $x63 (= ?x179 ?x218)))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1540X) (bvult input.ind-%var1540X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1540X)))
 (= $x63 $x207))))
 ))
 (let (($x297 (and $x103 $x259)))
 (let (($x189 (= $x297 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x267 (bvsub ?x135 ?x15)))
 (let (($x119 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x267) (bvult ?x135 ?x267))))
 (let (($x40 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x40 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x68 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x97 (bvmul (_ bv4 64) ?x68)))
 (let ((?x89 ((_ extract 63 32) ?x97)))
 (let (($x23 (= ?x89 ?x214)))
 (let (($x134 (and $x23 $x119)))
 (let (($x203 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x292 (and $x203 $x134)))
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (=> $x163 $x292)))
 (let (($x206 (= $x36 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x75 true)))
 (let (($x160 (= $x163 true)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x185)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x217)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (and $x285 $x257)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (and $x260 $x176)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x117 $x29)))
 (let (($x284 (not $x114)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x197 $x108)))
 (let (($x275 (and (not $x35) $x284)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x86 $x230)))
 (let (($x101 (not $x17)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x72 $x12)))
 (let (($x22 (and (not $x167) $x101)))
 (let (($x30 (and (and (and (and (and (and $x22 $x275) $x281) $x16) $x227) $x265) $x191)))
 (let (($x254 (and $x30 $x194)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x11 (or false (or false (and (and true (or $x172 $x128)) (or $x143 $x237))))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x48 (and $x91 $x254)))
 (let (($x34 (= $x48 true)))
 (let (($x60 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x210 (= $x60 true)))
 (let (($x238 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x240 (= $x238 true)))
 (let ((?x213 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x213)))
 (let (($x100 (= ?x93 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x301 (= $x100 true)))
 (let ((?x198 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x70 (= (_ bv0 2) ?x198)))
 (let (($x243 (= $x70 true)))
 (let (($x139 (= ?x93 input.dst.llvm-%n)))
 (let (($x250 (= $x139 true)))
 (let (($x174 (and $x250 $x243)))
 (let (($x192 (and $x174 $x301)))
 (let (($x196 (and $x192 $x240)))
 (let (($x64 (and $x196 $x210)))
 (let (($x211 (and $x64 $x34)))
 (let (($x155 (and $x211 $x160)))
 (let (($x74 (and $x155 $x106)))
 (let (($x77 (and $x74 $x206)))
 (let (($x239 (and $x77 $x189)))
 (let (($x19 (and $x239 $x249)))
 (let (($x47 (and $x19 $x120)))
 (let (($x62 (and $x47 $x76)))
 (let (($x105 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and (not $x105) $x62)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and $x49 $x58)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x81 $x255)))
 (let (($x13 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1551X)))
 (=> $x152 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1551X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1550X)))
 (= $x152 false)))
 ))
 (let (($x18 (and $x153 $x13)))
 (let (($x115 (and $x18 $x159)))
 (let (($x271 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x124 (and $x271 $x115)))
 (let (($x8 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x135 (_ bv3 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x25 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x175 (or false (or false (and (and true (or $x9 $x25)) (or $x209 $x8))))))
 (let (($x263 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x175)))
 (let (($x123 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x175)))
 (let (($x122 (and $x123 $x124)))
 (let (($x241 (=> $x122 $x298)))
 (not $x241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x67 (bvsge ?x121 (_ bv0 32))))
 (let (($x234 (= $x67 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x300)))
 (let (($x219 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x219 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (= $x200 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (= $x251 true)))
 (let (($x125 (forall ((input.ind-%var1561X (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul input.ind-%var1561X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x164)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x27)))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1561X)))
 (let (($x95 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1561X)))
 (=> $x95 (= ?x66 ?x158)))))))))
 ))
 (let (($x259 (forall ((input.ind-%var1560X (_ BitVec 32)) )(let (($x262 (and (bvule (_ bv0 32) input.ind-%var1560X) (bvult input.ind-%var1560X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x95 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1560X)))
 (= $x95 $x262))))
 ))
 (let (($x181 (and $x259 $x125)))
 (let (($x193 (= $x181 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x45 (bvsub ?x135 ?x15)))
 (let (($x103 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x45) (bvult ?x135 ?x45))))
 (let (($x206 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x77 (ite $x206 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x134 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x292 (bvmul (_ bv4 64) ?x134)))
 (let ((?x36 ((_ extract 63 32) ?x292)))
 (let (($x63 (= ?x36 ?x77)))
 (let (($x179 (and $x63 $x103)))
 (let (($x289 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x247 (and $x289 $x179)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x188 $x247)))
 (let (($x293 (= $x294 true)))
 (let (($x214 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x23 (= $x214 true)))
 (let (($x89 (= $x188 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x211)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x48)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x217 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x217)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (and $x272 $x191)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x265 $x30)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (and $x16 $x24)))
 (let (($x285 (not $x260)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x281 $x55)))
 (let (($x257 (and (not $x79) $x285)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x29 $x114)))
 (let (($x275 (not $x284)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x182 $x111)))
 (let (($x261 (and (not $x117) $x275)))
 (let (($x244 (and (and (and (and (and (and $x261 $x257) $x227) $x253) $x185) $x254) $x34)))
 (let (($x203 (and $x244 $x160)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x108 (or false (or false (and (and true (or $x12 $x167)) (or $x230 $x17))))))
 (let (($x278 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x228 (and $x278 $x203)))
 (let (($x68 (= $x228 true)))
 (let (($x226 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x226 true)))
 (let (($x172 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x172 true)))
 (let ((?x301 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x301)))
 (let (($x129 (= ?x192 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (= $x129 true)))
 (let ((?x196 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x60 (= (_ bv0 2) ?x196)))
 (let (($x210 (= $x60 true)))
 (let (($x56 (= ?x192 input.dst.llvm-%n)))
 (let (($x238 (= $x56 true)))
 (let (($x64 (and $x238 $x210)))
 (let (($x187 (and $x64 $x299)))
 (let (($x90 (and $x187 $x128)))
 (let (($x237 (and $x90 $x143)))
 (let (($x97 (and $x237 $x68)))
 (let (($x40 (and $x97 $x89)))
 (let (($x202 (and $x40 $x23)))
 (let (($x269 (and $x202 $x293)))
 (let (($x199 (and $x269 $x193)))
 (let (($x33 (and $x199 $x130)))
 (let (($x10 (and $x33 $x231)))
 (let (($x186 (and $x10 $x201)))
 (let (($x174 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and (not $x174) $x186)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x245 (and $x70 $x221)))
 (let (($x250 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x250 $x245)))
 (let (($x213 (forall ((input.ind-%var1571X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1571X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1571X) (_ bv0 32)))))
 ))
 (let (($x13 (forall ((input.ind-%var1570X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1570X)))
 (= $x224 false)))
 ))
 (let (($x93 (and $x13 $x213)))
 (let (($x232 (and $x93 $x177)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x132 $x232)))
 (let (($x99 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x135 (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x31 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x25)))
 (let (($x123 (or false (or false (and (and true (or $x147 $x31)) (or $x61 $x99))))))
 (let (($x271 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x14 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x116 (and $x14 $x109)))
 (let (($x71 (=> $x116 $x234)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x67 (bvsge ?x121 (_ bv0 32))))
 (let (($x234 (= $x67 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x300)))
 (let (($x219 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x219 true)))
 (let (($x200 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (= $x200 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (= $x251 true)))
 (let (($x125 (forall ((input.ind-%var1561X (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul input.ind-%var1561X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x164)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x27)))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1561X)))
 (let (($x95 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1561X)))
 (=> $x95 (= ?x66 ?x158)))))))))
 ))
 (let (($x259 (forall ((input.ind-%var1560X (_ BitVec 32)) )(let (($x262 (and (bvule (_ bv0 32) input.ind-%var1560X) (bvult input.ind-%var1560X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x95 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1560X)))
 (= $x95 $x262))))
 ))
 (let (($x181 (and $x259 $x125)))
 (let (($x193 (= $x181 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x45 (bvsub ?x135 ?x15)))
 (let (($x103 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x45) (bvult ?x135 ?x45))))
 (let (($x206 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x77 (ite $x206 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x134 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x292 (bvmul (_ bv4 64) ?x134)))
 (let ((?x36 ((_ extract 63 32) ?x292)))
 (let (($x63 (= ?x36 ?x77)))
 (let (($x179 (and $x63 $x103)))
 (let (($x289 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x247 (and $x289 $x179)))
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (=> $x188 $x247)))
 (let (($x293 (= $x294 true)))
 (let (($x214 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x23 (= $x214 true)))
 (let (($x89 (= $x188 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x211)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x48)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x217 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x217)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (and $x272 $x191)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x265 $x30)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (and $x16 $x24)))
 (let (($x285 (not $x260)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x281 $x55)))
 (let (($x257 (and (not $x79) $x285)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x29 $x114)))
 (let (($x275 (not $x284)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x182 $x111)))
 (let (($x261 (and (not $x117) $x275)))
 (let (($x244 (and (and (and (and (and (and $x261 $x257) $x227) $x253) $x185) $x254) $x34)))
 (let (($x203 (and $x244 $x160)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x108 (or false (or false (and (and true (or $x12 $x167)) (or $x230 $x17))))))
 (let (($x278 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x228 (and $x278 $x203)))
 (let (($x68 (= $x228 true)))
 (let (($x226 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x226 true)))
 (let (($x172 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x172 true)))
 (let ((?x301 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x301)))
 (let (($x129 (= ?x192 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (= $x129 true)))
 (let ((?x196 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x60 (= (_ bv0 2) ?x196)))
 (let (($x210 (= $x60 true)))
 (let (($x56 (= ?x192 input.dst.llvm-%n)))
 (let (($x238 (= $x56 true)))
 (let (($x64 (and $x238 $x210)))
 (let (($x187 (and $x64 $x299)))
 (let (($x90 (and $x187 $x128)))
 (let (($x237 (and $x90 $x143)))
 (let (($x97 (and $x237 $x68)))
 (let (($x40 (and $x97 $x89)))
 (let (($x202 (and $x40 $x23)))
 (let (($x269 (and $x202 $x293)))
 (let (($x199 (and $x269 $x193)))
 (let (($x33 (and $x199 $x130)))
 (let (($x10 (and $x33 $x231)))
 (let (($x186 (and $x10 $x201)))
 (let (($x174 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and (not $x174) $x186)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x245 (and $x70 $x221)))
 (let (($x250 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x250 $x245)))
 (let (($x213 (forall ((input.ind-%var1571X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1571X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1571X) (_ bv0 32)))))
 ))
 (let (($x13 (forall ((input.ind-%var1570X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1570X)))
 (= $x224 false)))
 ))
 (let (($x93 (and $x13 $x213)))
 (let (($x232 (and $x93 $x177)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x132 $x232)))
 (let (($x99 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x135 (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x31 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x25)))
 (let (($x123 (or false (or false (and (and true (or $x147 $x31)) (or $x61 $x99))))))
 (let (($x271 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x14 (=> (and $x188 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x116 (and $x14 $x109)))
 (let (($x71 (=> $x116 $x234)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (bvule ?x189 input.dst.llvm-%n)))
 (let (($x88 (= $x195 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x62)))
 (let (($x50 (= ?x58 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x50 true)))
 (let ((?x128 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x128)))
 (let (($x120 (= ?x90 input.dst.llvm-%n)))
 (let (($x159 (= $x120 true)))
 (let (($x94 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x110 (= $x94 true)))
 (let (($x229 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (= $x229 true)))
 (let (($x81 (forall ((input.ind-%var1581X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var1581X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x116))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv2 32))) ?x71)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv3 32))) ?x216)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1581X)))
 (let (($x242 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1581X)))
 (=> $x242 (= ?x181 ?x246)))))))))
 ))
 (let (($x158 (forall ((input.ind-%var1580X (_ BitVec 32)) )(let (($x164 (and (bvule (_ bv0 32) input.ind-%var1580X) (bvult input.ind-%var1580X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x242 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1580X)))
 (= $x242 $x164))))
 ))
 (let (($x152 (and $x158 $x81)))
 (let (($x190 (= $x152 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x293 (bvsub ?x135 ?x15)))
 (let (($x270 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x293) (bvult ?x135 ?x293))))
 (let (($x179 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x247 (ite $x179 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x207 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x43 (bvmul (_ bv4 64) ?x207)))
 (let ((?x103 ((_ extract 63 32) ?x43)))
 (let (($x294 (= ?x103 ?x247)))
 (let (($x262 (and $x294 $x270)))
 (let (($x151 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x252 (and $x151 $x262)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (=> $x57 $x252)))
 (let (($x66 (= $x259 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x36 (= $x292 true)))
 (let (($x119 (= $x57 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x203)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x211)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x244 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x194)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x74 $x254)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x185 $x264)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x227 $x75)))
 (let (($x253 (not $x222)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x257 $x155)))
 (let (($x265 (and (not $x176) $x253)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x79 $x7)))
 (let (($x24 (not $x16)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x230 $x17)))
 (let (($x285 (and (not $x55) $x24)))
 (let (($x23 (and (and (and (and (and (and $x285 $x265) $x217) $x30) $x48) $x244) $x160)))
 (let (($x202 (and $x23 $x228)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x278 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x275 (or false (or false (and (and true (or $x108 $x278)) (or $x117 $x154))))))
 (let (($x281 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x275)))
 (let (($x267 (and $x281 $x202)))
 (let (($x83 (= $x267 true)))
 (let (($x12 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x167 (= $x12 true)))
 (let (($x91 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x35 (= $x91 true)))
 (let (($x226 (= ?x90 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (= $x226 true)))
 (let ((?x299 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x187 (= (_ bv0 2) ?x299)))
 (let (($x38 (= $x187 true)))
 (let (($x237 (and $x38 $x143)))
 (let (($x72 (and $x237 $x35)))
 (let (($x53 (and $x72 $x167)))
 (let (($x289 (and $x53 $x83)))
 (let (($x134 (and $x289 $x119)))
 (let (($x206 (and $x134 $x36)))
 (let (($x19 (and $x206 $x66)))
 (let (($x78 (and $x19 $x190)))
 (let (($x291 (and $x78 $x239)))
 (let (($x248 (and $x291 $x110)))
 (let (($x115 (and $x248 $x159)))
 (let (($x47 (and $x115 $x165)))
 (let (($x64 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and (not $x64) $x47)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x60 $x255)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x238 $x124)))
 (let (($x301 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1591X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1591X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1590X)))
 (= $x113 false)))
 ))
 (let (($x192 (and $x213 $x301)))
 (let (($x295 (and $x192 $x268)))
 (let (($x153 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x286 (and $x153 $x295)))
 (let (($x175 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd ?x135 (_ bv3 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x209 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x14 (or false (or false (and (and true (or $x102 $x209)) (or $x69 $x175))))))
 (let (($x132 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x171 (=> (and $x57 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x122 (and $x171 $x286)))
 (let (($x105 (=> $x122 $x88)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (bvule ?x189 input.dst.llvm-%n)))
 (let (($x88 (= $x195 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x62)))
 (let (($x50 (= ?x58 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x50 true)))
 (let ((?x128 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x128)))
 (let (($x120 (= ?x90 input.dst.llvm-%n)))
 (let (($x159 (= $x120 true)))
 (let (($x94 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x110 (= $x94 true)))
 (let (($x229 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (= $x229 true)))
 (let (($x81 (forall ((input.ind-%var1581X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var1581X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x116))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv2 32))) ?x71)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv3 32))) ?x216)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1581X)))
 (let (($x242 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1581X)))
 (=> $x242 (= ?x181 ?x246)))))))))
 ))
 (let (($x158 (forall ((input.ind-%var1580X (_ BitVec 32)) )(let (($x164 (and (bvule (_ bv0 32) input.ind-%var1580X) (bvult input.ind-%var1580X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x242 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1580X)))
 (= $x242 $x164))))
 ))
 (let (($x152 (and $x158 $x81)))
 (let (($x190 (= $x152 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x293 (bvsub ?x135 ?x15)))
 (let (($x270 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x293) (bvult ?x135 ?x293))))
 (let (($x179 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x247 (ite $x179 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x207 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x43 (bvmul (_ bv4 64) ?x207)))
 (let ((?x103 ((_ extract 63 32) ?x43)))
 (let (($x294 (= ?x103 ?x247)))
 (let (($x262 (and $x294 $x270)))
 (let (($x151 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x252 (and $x151 $x262)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (=> $x57 $x252)))
 (let (($x66 (= $x259 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x36 (= $x292 true)))
 (let (($x119 (= $x57 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x203)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x211)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x244 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x194)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x74 $x254)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x185 $x264)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x227 $x75)))
 (let (($x253 (not $x222)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x257 $x155)))
 (let (($x265 (and (not $x176) $x253)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x79 $x7)))
 (let (($x24 (not $x16)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x230 $x17)))
 (let (($x285 (and (not $x55) $x24)))
 (let (($x23 (and (and (and (and (and (and $x285 $x265) $x217) $x30) $x48) $x244) $x160)))
 (let (($x202 (and $x23 $x228)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x278 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x275 (or false (or false (and (and true (or $x108 $x278)) (or $x117 $x154))))))
 (let (($x281 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x275)))
 (let (($x267 (and $x281 $x202)))
 (let (($x83 (= $x267 true)))
 (let (($x12 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x167 (= $x12 true)))
 (let (($x91 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x35 (= $x91 true)))
 (let (($x226 (= ?x90 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (= $x226 true)))
 (let ((?x299 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x187 (= (_ bv0 2) ?x299)))
 (let (($x38 (= $x187 true)))
 (let (($x237 (and $x38 $x143)))
 (let (($x72 (and $x237 $x35)))
 (let (($x53 (and $x72 $x167)))
 (let (($x289 (and $x53 $x83)))
 (let (($x134 (and $x289 $x119)))
 (let (($x206 (and $x134 $x36)))
 (let (($x19 (and $x206 $x66)))
 (let (($x78 (and $x19 $x190)))
 (let (($x291 (and $x78 $x239)))
 (let (($x248 (and $x291 $x110)))
 (let (($x115 (and $x248 $x159)))
 (let (($x47 (and $x115 $x165)))
 (let (($x64 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and (not $x64) $x47)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x60 $x255)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x238 $x124)))
 (let (($x301 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1591X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1591X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1590X)))
 (= $x113 false)))
 ))
 (let (($x192 (and $x213 $x301)))
 (let (($x295 (and $x192 $x268)))
 (let (($x153 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x286 (and $x153 $x295)))
 (let (($x175 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd ?x135 (_ bv3 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x209 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x14 (or false (or false (and (and true (or $x102 $x209)) (or $x69 $x175))))))
 (let (($x132 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x171 (=> (and $x57 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x122 (and $x171 $x286)))
 (let (($x105 (=> $x122 $x88)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x276 (forall ((input.ind-%var1625X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var1625X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x209 (bvadd ?x135 (_ bv3 32))))
 (let ((?x46 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x180 (store ?x46 (bvadd ?x135 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x205 (store ?x180 (bvadd ?x135 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x166 (store ?x205 ?x209 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x168 (concat (select ?x166 (bvadd ?x50 (_ bv2 32))) (concat (select ?x166 (bvadd ?x50 (_ bv1 32))) (select ?x166 ?x50)))))
 (let ((?x216 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1625X)))
 (let (($x162 (= input.ind-%var1625X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x92 (= (ite $x162 input.spec-%var-i-0.L3%6%bbentry ?x216) (concat (select ?x166 (bvadd ?x50 (_ bv3 32))) ?x168))))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1625X)))
 (let (($x96 (or $x158 $x162)))
 (=> $x96 $x92))))))))))))))))
 ))
 (let (($x170 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x300 (bvule (_ bv0 32) input.ind-%var1624X)))
 (let (($x84 (and $x300 (bvult input.ind-%var1624X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x162 (= input.ind-%var1624X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1624X)))
 (let (($x96 (or $x158 $x162)))
 (= $x96 $x84)))))))
 ))
 (let (($x127 (and $x170 $x276)))
 (let (($x85 (= $x127 true)))
 (let ((?x215 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x215)))
 (let (($x200 (= ?x219 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x231 (= $x200 true)))
 (let ((?x251 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x130 (= (_ bv0 2) ?x251)))
 (let (($x186 (= $x130 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x223 (= $x125 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x21 (= $x51 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (= $x93 true)))
 (let (($x193 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x193 true)))
 (let (($x266 (forall ((input.ind-%var1601X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var1601X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x50))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv2 32))) ?x124)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv3 32))) ?x286)))
 (let ((?x216 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1601X)))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1601X)))
 (=> $x158 (= ?x216 ?x195)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1600X (_ BitVec 32)) )(let (($x300 (bvule (_ bv0 32) input.ind-%var1600X)))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1600X)))
 (= $x158 (and $x300 (bvult input.ind-%var1600X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x150 (and $x67 $x266)))
 (let (($x86 (= $x150 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x218 (bvsub ?x135 ?x15)))
 (let (($x259 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x218) (bvult ?x135 ?x218))))
 (let (($x269 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x293 (ite $x269 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x179 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x247 (bvmul (_ bv4 64) ?x179)))
 (let ((?x294 ((_ extract 63 32) ?x247)))
 (let (($x95 (= ?x294 ?x293)))
 (let (($x66 (and $x95 $x259)))
 (let (($x43 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x19 (and $x43 $x66)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (=> $x140 $x19)))
 (let (($x241 (= $x242 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x77 true)))
 (let (($x292 (= $x140 true)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x214)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x34)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (and $x185 $x194)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x89 $x254)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (and $x75 $x222)))
 (let (($x265 (not $x253)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (and $x176 $x106)))
 (let (($x272 (and (not $x227) $x265)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x7 $x16)))
 (let (($x285 (not $x24)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x261 $x197)))
 (let (($x155 (and (not $x79) $x285)))
 (let (($x267 (and (and (and (and (and (and $x155 $x272) $x97) $x30) $x264) $x40) $x244)))
 (let (($x83 (and $x267 $x211)))
 (let (($x284 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x17 (or false (or false (and (and true (or $x111 $x117)) (or $x114 $x284))))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x289 (and $x260 $x83)))
 (let (($x119 (= $x289 true)))
 (let ((?x91 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x91)))
 (let (($x167 (= ?x35 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x167 true)))
 (let (($x72 (= ?x35 input.dst.llvm-%n)))
 (let (($x12 (= $x72 true)))
 (let (($x101 (and $x12 $x53)))
 (let (($x134 (and $x101 $x119)))
 (let (($x36 (and $x134 $x292)))
 (let (($x151 (and $x36 $x63)))
 (let (($x178 (and $x151 $x241)))
 (let (($x98 (and $x178 $x86)))
 (let (($x198 (and $x98 $x49)))
 (let (($x224 (and $x198 $x250)))
 (let (($x243 (and $x224 $x21)))
 (let (($x76 (and $x243 $x223)))
 (let (($x221 (and $x76 $x186)))
 (let (($x33 (and $x221 $x231)))
 (let (($x237 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and (not $x237) $x33)))
 (let (($x226 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x245 (and $x226 $x201)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x298 (and $x172 $x245)))
 (let (($x299 (forall ((input.ind-%var1611X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1611X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1611X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var1610X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1610X)))
 (= $x156 false)))
 ))
 (let (($x187 (and $x301 $x299)))
 (let (($x233 (and $x187 $x298)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x42 (and $x13 $x233)))
 (let (($x123 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x209 (bvadd ?x135 (_ bv3 32))))
 (let (($x263 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x209)))
 (let (($x61 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x209)))
 (let (($x171 (or false (or false (and (and true (or $x112 $x61)) (or $x263 $x123))))))
 (let (($x153 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x171)))
 (let (($x5 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x171)))
 (let (($x177 (and $x5 $x42)))
 (let (($x277 (=> $x177 $x85)))
 (not $x277)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x276 (forall ((input.ind-%var1625X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var1625X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x209 (bvadd ?x135 (_ bv3 32))))
 (let ((?x46 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x135 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x180 (store ?x46 (bvadd ?x135 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x205 (store ?x180 (bvadd ?x135 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x166 (store ?x205 ?x209 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x168 (concat (select ?x166 (bvadd ?x50 (_ bv2 32))) (concat (select ?x166 (bvadd ?x50 (_ bv1 32))) (select ?x166 ?x50)))))
 (let ((?x216 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1625X)))
 (let (($x162 (= input.ind-%var1625X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x92 (= (ite $x162 input.spec-%var-i-0.L3%6%bbentry ?x216) (concat (select ?x166 (bvadd ?x50 (_ bv3 32))) ?x168))))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1625X)))
 (let (($x96 (or $x158 $x162)))
 (=> $x96 $x92))))))))))))))))
 ))
 (let (($x170 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x300 (bvule (_ bv0 32) input.ind-%var1624X)))
 (let (($x84 (and $x300 (bvult input.ind-%var1624X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x162 (= input.ind-%var1624X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1624X)))
 (let (($x96 (or $x158 $x162)))
 (= $x96 $x84)))))))
 ))
 (let (($x127 (and $x170 $x276)))
 (let (($x85 (= $x127 true)))
 (let ((?x215 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x215)))
 (let (($x200 (= ?x219 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x231 (= $x200 true)))
 (let ((?x251 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x130 (= (_ bv0 2) ?x251)))
 (let (($x186 (= $x130 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x223 (= $x125 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x21 (= $x51 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (= $x93 true)))
 (let (($x193 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x193 true)))
 (let (($x266 (forall ((input.ind-%var1601X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var1601X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x50))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv2 32))) ?x124)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv3 32))) ?x286)))
 (let ((?x216 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1601X)))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1601X)))
 (=> $x158 (= ?x216 ?x195)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1600X (_ BitVec 32)) )(let (($x300 (bvule (_ bv0 32) input.ind-%var1600X)))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1600X)))
 (= $x158 (and $x300 (bvult input.ind-%var1600X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x150 (and $x67 $x266)))
 (let (($x86 (= $x150 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x218 (bvsub ?x135 ?x15)))
 (let (($x259 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x135 ?x218) (bvult ?x135 ?x218))))
 (let (($x269 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x293 (ite $x269 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x179 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x247 (bvmul (_ bv4 64) ?x179)))
 (let ((?x294 ((_ extract 63 32) ?x247)))
 (let (($x95 (= ?x294 ?x293)))
 (let (($x66 (and $x95 $x259)))
 (let (($x43 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x19 (and $x43 $x66)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (=> $x140 $x19)))
 (let (($x241 (= $x242 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x77 true)))
 (let (($x292 (= $x140 true)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x214)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x34)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (and $x185 $x194)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x89 $x254)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (and $x75 $x222)))
 (let (($x265 (not $x253)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (and $x176 $x106)))
 (let (($x272 (and (not $x227) $x265)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x7 $x16)))
 (let (($x285 (not $x24)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x261 $x197)))
 (let (($x155 (and (not $x79) $x285)))
 (let (($x267 (and (and (and (and (and (and $x155 $x272) $x97) $x30) $x264) $x40) $x244)))
 (let (($x83 (and $x267 $x211)))
 (let (($x284 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x17 (or false (or false (and (and true (or $x111 $x117)) (or $x114 $x284))))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x289 (and $x260 $x83)))
 (let (($x119 (= $x289 true)))
 (let ((?x91 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x91)))
 (let (($x167 (= ?x35 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x167 true)))
 (let (($x72 (= ?x35 input.dst.llvm-%n)))
 (let (($x12 (= $x72 true)))
 (let (($x101 (and $x12 $x53)))
 (let (($x134 (and $x101 $x119)))
 (let (($x36 (and $x134 $x292)))
 (let (($x151 (and $x36 $x63)))
 (let (($x178 (and $x151 $x241)))
 (let (($x98 (and $x178 $x86)))
 (let (($x198 (and $x98 $x49)))
 (let (($x224 (and $x198 $x250)))
 (let (($x243 (and $x224 $x21)))
 (let (($x76 (and $x243 $x223)))
 (let (($x221 (and $x76 $x186)))
 (let (($x33 (and $x221 $x231)))
 (let (($x237 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and (not $x237) $x33)))
 (let (($x226 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x245 (and $x226 $x201)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x298 (and $x172 $x245)))
 (let (($x299 (forall ((input.ind-%var1611X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1611X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1611X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var1610X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1610X)))
 (= $x156 false)))
 ))
 (let (($x187 (and $x301 $x299)))
 (let (($x233 (and $x187 $x298)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x42 (and $x13 $x233)))
 (let (($x123 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x209 (bvadd ?x135 (_ bv3 32))))
 (let (($x263 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x209)))
 (let (($x61 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x209)))
 (let (($x171 (or false (or false (and (and true (or $x112 $x61)) (or $x263 $x123))))))
 (let (($x153 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x171)))
 (let (($x5 (=> (and $x140 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x171)))
 (let (($x177 (and $x5 $x42)))
 (let (($x277 (=> $x177 $x85)))
 (not $x277)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (not $x163)))
 (let (($x180 (= $x26 false)))
 (let (($x37 (= $x180 true)))
 (let ((?x173 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x173)))
 (let (($x84 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x84 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x117)))
 (let (($x177 (= ?x154 input.dst.llvm-%n)))
 (let (($x162 (= $x177 true)))
 (let (($x298 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (= $x298 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x33 true)))
 (let (($x215 (forall ((input.ind-%var1635X (_ BitVec 32)) )(let ((?x250 (bvadd (bvmul input.ind-%var1635X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x250))))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv2 32))) ?x243)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv3 32))) ?x76)))
 (let ((?x239 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1635X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1635X)))
 (=> $x241 (= ?x239 ?x130)))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1634X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var1634X) (bvult input.ind-%var1634X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1634X)))
 (= $x241 $x216))))
 ))
 (let (($x219 (and $x58 $x215)))
 (let (($x200 (= $x219 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x259 (= $x252 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x207)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x151)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x134)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x119 $x292)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x289 $x36)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x228 $x48)))
 (let (($x202 (not $x40)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x194 $x254)))
 (let (($x244 (and (not $x264) $x202)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x191 $x30)))
 (let (($x89 (not $x203)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x7 $x16)))
 (let (($x74 (and (not $x23) $x89)))
 (let (($x293 (and (and (and (and (and (and $x74 $x244) $x214) $x83) $x206) $x63) $x45)))
 (let (($x95 (and $x293 $x43)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x160 (or false (or false (and (and true (or $x176 $x106)) (or $x75 $x222))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x160)))
 (let (($x270 (and $x97 $x95)))
 (let (($x218 (= $x270 true)))
 (let (($x261 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x197 (= $x261 true)))
 (let (($x230 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x230 true)))
 (let (($x29 (= ?x154 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (= $x29 true)))
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x55 (= (_ bv0 2) ?x278)))
 (let (($x182 (= $x55 true)))
 (let (($x284 (and $x182 $x114)))
 (let (($x260 (and $x284 $x17)))
 (let (($x79 (and $x260 $x197)))
 (let (($x262 (and $x79 $x218)))
 (let (($x66 (and $x262 $x259)))
 (let (($x231 (and $x66 $x200)))
 (let (($x245 (and $x231 $x201)))
 (let (($x42 (and $x245 $x233)))
 (let (($x96 (and $x42 $x162)))
 (let (($x170 (and $x96 $x236)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (and $x101 $x170)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x12 $x161)))
 (let (($x91 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1645X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1645X) (_ bv0 32)))))
 ))
 (let (($x299 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1644X)))
 (= $x240 false)))
 ))
 (let (($x35 (and $x299 $x91)))
 (let (($x54 (and $x35 $x133)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x46 (and $x213 $x54)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let (($x14 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd ?x135 (_ bv3 32))))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x69 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x5 (or false (or false (and (and true (or $x8 $x69)) (or $x271 $x14))))))
 (let (($x13 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x5)))
 (let (($x25 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x5)))
 (let (($x65 (and $x25 $x46)))
 (let (($x146 (=> $x65 $x37)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (not $x163)))
 (let (($x180 (= $x26 false)))
 (let (($x37 (= $x180 true)))
 (let ((?x173 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x173)))
 (let (($x84 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x84 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x117)))
 (let (($x177 (= ?x154 input.dst.llvm-%n)))
 (let (($x162 (= $x177 true)))
 (let (($x298 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (= $x298 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x33 true)))
 (let (($x215 (forall ((input.ind-%var1635X (_ BitVec 32)) )(let ((?x250 (bvadd (bvmul input.ind-%var1635X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x250))))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv2 32))) ?x243)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv3 32))) ?x76)))
 (let ((?x239 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1635X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1635X)))
 (=> $x241 (= ?x239 ?x130)))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1634X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var1634X) (bvult input.ind-%var1634X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1634X)))
 (= $x241 $x216))))
 ))
 (let (($x219 (and $x58 $x215)))
 (let (($x200 (= $x219 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x259 (= $x252 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x207)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x151)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x134)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x119 $x292)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x289 $x36)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x228 $x48)))
 (let (($x202 (not $x40)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x194 $x254)))
 (let (($x244 (and (not $x264) $x202)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x191 $x30)))
 (let (($x89 (not $x203)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x7 $x16)))
 (let (($x74 (and (not $x23) $x89)))
 (let (($x293 (and (and (and (and (and (and $x74 $x244) $x214) $x83) $x206) $x63) $x45)))
 (let (($x95 (and $x293 $x43)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x160 (or false (or false (and (and true (or $x176 $x106)) (or $x75 $x222))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x160)))
 (let (($x270 (and $x97 $x95)))
 (let (($x218 (= $x270 true)))
 (let (($x261 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x197 (= $x261 true)))
 (let (($x230 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x230 true)))
 (let (($x29 (= ?x154 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (= $x29 true)))
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x55 (= (_ bv0 2) ?x278)))
 (let (($x182 (= $x55 true)))
 (let (($x284 (and $x182 $x114)))
 (let (($x260 (and $x284 $x17)))
 (let (($x79 (and $x260 $x197)))
 (let (($x262 (and $x79 $x218)))
 (let (($x66 (and $x262 $x259)))
 (let (($x231 (and $x66 $x200)))
 (let (($x245 (and $x231 $x201)))
 (let (($x42 (and $x245 $x233)))
 (let (($x96 (and $x42 $x162)))
 (let (($x170 (and $x96 $x236)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (and $x101 $x170)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x12 $x161)))
 (let (($x91 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1645X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1645X) (_ bv0 32)))))
 ))
 (let (($x299 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1644X)))
 (= $x240 false)))
 ))
 (let (($x35 (and $x299 $x91)))
 (let (($x54 (and $x35 $x133)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x46 (and $x213 $x54)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let (($x14 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd ?x135 (_ bv3 32))))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x69 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x5 (or false (or false (and (and true (or $x8 $x69)) (or $x271 $x14))))))
 (let (($x13 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x5)))
 (let (($x25 (=> (and $x163 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x5)))
 (let (($x65 (and $x25 $x46)))
 (let (($x146 (=> $x65 $x37)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000170)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x4401ec59)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x4401ec59)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000000e4)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x4401ec59)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x4401ec59)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000173)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000000e7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000170)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000000e4)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x4401ec59)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!1 (bvmul #x00000004 x!0))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x4401ec59 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x005e3bd2)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x005e3bd2)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x410fd248)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9ca43ccc)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x005e3bd2)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x005e3bd2)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9ca43ccf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x410fd24b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9ca43ccc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x410fd248)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x005e3bd2)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!7 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x005e3bd2 x!0)
         (ite (bvule #x005e3bd3 x!0) #x005e3bd3 #x005e3bd2)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x122 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x198 (or $x122 $x148)))
 (let (($x38 (= $x198 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x124)))
 (let (($x165 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x165 true)))
 (let ((?x158 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x158)))
 (let (($x98 (= ?x300 input.dst.llvm-%n)))
 (let (($x105 (= $x98 true)))
 (let (($x47 (= ?x300 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (= $x47 true)))
 (let (($x208 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x208 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x156 (= $x172 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (= $x60 true)))
 (let (($x257 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x257 true)))
 (let (($x180 (forall ((input.ind-%var1719X (_ BitVec 32)) )(let ((?x162 (bvadd (bvmul input.ind-%var1719X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x162))))
 (let ((?x161 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv2 32))) ?x84)))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv3 32))) ?x161)))
 (let ((?x51 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1719X)))
 (let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1719X)))
 (=> $x67 (= ?x51 ?x46)))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1718X (_ BitVec 32)) )(let (($x250 (and (bvule (_ bv0 32) input.ind-%var1718X) (bvult input.ind-%var1718X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1718X)))
 (= $x67 $x250))))
 ))
 (let (($x37 (and $x251 $x180)))
 (let (($x146 (= $x37 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x262 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x206)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x292)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x211)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (and $x179 $x83)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x214 $x247)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x34 (and $x254 $x264)))
 (let (($x228 (not $x34)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (and $x89 $x74)))
 (let (($x40 (and (not $x194) $x228)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x16 $x23)))
 (let (($x191 (not $x185)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x197 $x79)))
 (let (($x203 (and (not $x7) $x191)))
 (let (($x293 (and (and (and (and (and (and $x203 $x40) $x244) $x267) $x289) $x134) $x36)))
 (let (($x207 (and $x293 $x294)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x217 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x217)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x217)))
 (let (($x272 (or false (or false (and (and true (or $x155 $x176)) (or $x68 $x75))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x272)))
 (let (($x43 (and $x97 $x207)))
 (let (($x95 (= $x43 true)))
 (let ((?x230 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x17 (= (_ bv0 2) ?x230)))
 (let (($x260 (= $x17 true)))
 (let (($x270 (and $x260 $x95)))
 (let (($x259 (and $x270 $x252)))
 (let (($x205 (and $x259 $x146)))
 (let (($x268 (and $x205 $x178)))
 (let (($x187 (and $x268 $x90)))
 (let (($x100 (and $x187 $x156)))
 (let (($x189 (and $x100 $x143)))
 (let (($x86 (and $x189 $x255)))
 (let (($x266 (and $x86 $x105)))
 (let (($x150 (and $x266 $x195)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (and $x275 $x150)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x242 (and $x29 $x193)))
 (let (($x111 (forall ((input.ind-%var1729X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1729X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1729X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var1728X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1728X)))
 (= $x128 false)))
 ))
 (let (($x117 (and $x91 $x111)))
 (let (($x249 (and $x117 $x242)))
 (let (($x301 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x301 $x249)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let (($x171 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd ?x135 (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x263 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x69)))
 (let (($x25 (or false (or false (and (and true (or $x99 $x263)) (or $x132 $x171))))))
 (let (($x213 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x31 (=> (and $x148 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x49 (and $x31 $x141)))
 (let (($x237 (=> $x49 $x38)))
 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x122 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x198 (or $x122 $x148)))
 (let (($x38 (= $x198 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x124)))
 (let (($x165 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x165 true)))
 (let ((?x158 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x158)))
 (let (($x98 (= ?x300 input.dst.llvm-%n)))
 (let (($x105 (= $x98 true)))
 (let (($x47 (= ?x300 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (= $x47 true)))
 (let (($x208 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x208 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x156 (= $x172 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (= $x60 true)))
 (let (($x257 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x257 true)))
 (let (($x180 (forall ((input.ind-%var1719X (_ BitVec 32)) )(let ((?x162 (bvadd (bvmul input.ind-%var1719X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x162))))
 (let ((?x161 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv2 32))) ?x84)))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv3 32))) ?x161)))
 (let ((?x51 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1719X)))
 (let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1719X)))
 (=> $x67 (= ?x51 ?x46)))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1718X (_ BitVec 32)) )(let (($x250 (and (bvule (_ bv0 32) input.ind-%var1718X) (bvult input.ind-%var1718X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x67 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1718X)))
 (= $x67 $x250))))
 ))
 (let (($x37 (and $x251 $x180)))
 (let (($x146 (= $x37 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x262 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x206)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x292)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x211)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (and $x179 $x83)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x214 $x247)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x34 (and $x254 $x264)))
 (let (($x228 (not $x34)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (and $x89 $x74)))
 (let (($x40 (and (not $x194) $x228)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x16 $x23)))
 (let (($x191 (not $x185)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x197 $x79)))
 (let (($x203 (and (not $x7) $x191)))
 (let (($x293 (and (and (and (and (and (and $x203 $x40) $x244) $x267) $x289) $x134) $x36)))
 (let (($x207 (and $x293 $x294)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x217 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x217)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x217)))
 (let (($x272 (or false (or false (and (and true (or $x155 $x176)) (or $x68 $x75))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x272)))
 (let (($x43 (and $x97 $x207)))
 (let (($x95 (= $x43 true)))
 (let ((?x230 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x17 (= (_ bv0 2) ?x230)))
 (let (($x260 (= $x17 true)))
 (let (($x270 (and $x260 $x95)))
 (let (($x259 (and $x270 $x252)))
 (let (($x205 (and $x259 $x146)))
 (let (($x268 (and $x205 $x178)))
 (let (($x187 (and $x268 $x90)))
 (let (($x100 (and $x187 $x156)))
 (let (($x189 (and $x100 $x143)))
 (let (($x86 (and $x189 $x255)))
 (let (($x266 (and $x86 $x105)))
 (let (($x150 (and $x266 $x195)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (and $x275 $x150)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x242 (and $x29 $x193)))
 (let (($x111 (forall ((input.ind-%var1729X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1729X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1729X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var1728X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1728X)))
 (= $x128 false)))
 ))
 (let (($x117 (and $x91 $x111)))
 (let (($x249 (and $x117 $x242)))
 (let (($x301 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x301 $x249)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x135 (bvadd input.dst.llvm-%m ?x15)))
 (let (($x171 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd ?x135 (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x263 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x69)))
 (let (($x25 (or false (or false (and (and true (or $x99 $x263)) (or $x132 $x171))))))
 (let (($x213 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x31 (=> (and $x148 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x49 (and $x31 $x141)))
 (let (($x237 (=> $x49 $x38)))
 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x52 (forall ((input.ind-%var1759X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1759X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x124))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv2 32))) ?x150)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv3 32))) ?x249)))
 (let ((?x28 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1759X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1759X)))
 (=> $x236 (= ?x28 ?x122)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1758X (_ BitVec 32)) )(let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1758X)))
 (= $x236 (and (bvule (_ bv0 32) input.ind-%var1758X) (bvult input.ind-%var1758X input.dst.llvm-%n)))))
 ))
 (let (($x92 (and $x298 $x52)))
 (let (($x235 (= $x92 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x111)))
 (let (($x10 (= ?x117 input.dst.llvm-%n)))
 (let (($x108 (= $x10 true)))
 (let ((?x35 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x12 (= (_ bv0 2) ?x35)))
 (let (($x240 (= $x12 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x21 (= $x131 true)))
 (let (($x237 (forall ((input.ind-%var1739X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1739X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x124))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv2 32))) ?x150)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv3 32))) ?x249)))
 (let ((?x28 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1739X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1739X)))
 (=> $x236 (= ?x28 ?x122)))))))))
 ))
 (let (($x180 (forall ((input.ind-%var1738X (_ BitVec 32)) )(let (($x46 (bvule (_ bv0 32) input.ind-%var1738X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1738X)))
 (= $x236 (and $x46 (bvult input.ind-%var1738X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x39 (and $x180 $x237)))
 (let (($x184 (= $x39 true)))
 (let (($x224 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x177 (not $x224)))
 (let (($x162 (= $x177 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x270 (= (_ bv0 32) ?x95)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x207)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x206)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x119 $x292)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x151 $x36)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x63 $x103)))
 (let (($x269 (not $x267)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x244 (and $x77 $x202)))
 (let (($x179 (and (not $x244) $x269)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x48 $x254)))
 (let (($x34 (not $x264)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x176 $x106)))
 (let (($x40 (and (not $x194) $x34)))
 (let (($x93 (and (and (and (and (and (and $x40 $x179) $x83) $x289) $x293) $x294) $x43)))
 (let (($x295 (and $x93 $x270)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x253 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x253)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x253)))
 (let (($x203 (or false (or false (and (and true (or $x265 $x272)) (or $x30 $x16))))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x203)))
 (let (($x250 (and $x74 $x295)))
 (let (($x290 (= $x250 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x285 (= $x24 true)))
 (let (($x230 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x17 (= $x230 true)))
 (let (($x284 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x275 (= $x284 true)))
 (let (($x154 (= ?x117 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x154 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x55 (= $x101 true)))
 (let ((?x301 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x299 (bvneg ?x301)))
 (let (($x11 (= ?x299 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x11 true)))
 (let (($x182 (and $x91 $x55)))
 (let (($x114 (and $x182 $x29)))
 (let (($x281 (and $x114 $x275)))
 (let (($x260 (and $x281 $x17)))
 (let (($x160 (and $x260 $x285)))
 (let (($x251 (and $x160 $x290)))
 (let (($x133 (and $x251 $x162)))
 (let (($x261 (and $x133 $x184)))
 (let (($x226 (and $x261 $x21)))
 (let (($x129 (and $x226 $x240)))
 (let (($x223 (and $x129 $x108)))
 (let (($x31 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and $x31 $x223)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (and $x25 $x66)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x153 $x216)))
 (let (($x132 (forall ((input.ind-%var1749X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1749X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1749X) (_ bv0 32)))))
 ))
 (let (($x102 (forall ((input.ind-%var1748X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1748X)))
 (= $x15 false)))
 ))
 (let (($x14 (and $x102 $x132)))
 (let (($x243 (and $x14 $x6)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x76 (and $x57 $x243)))
 (let (($x276 (=> $x76 $x235)))
 (not $x276)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x52 (forall ((input.ind-%var1759X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1759X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x124))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv2 32))) ?x150)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv3 32))) ?x249)))
 (let ((?x28 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1759X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1759X)))
 (=> $x236 (= ?x28 ?x122)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1758X (_ BitVec 32)) )(let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1758X)))
 (= $x236 (and (bvule (_ bv0 32) input.ind-%var1758X) (bvult input.ind-%var1758X input.dst.llvm-%n)))))
 ))
 (let (($x92 (and $x298 $x52)))
 (let (($x235 (= $x92 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x111)))
 (let (($x10 (= ?x117 input.dst.llvm-%n)))
 (let (($x108 (= $x10 true)))
 (let ((?x35 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x12 (= (_ bv0 2) ?x35)))
 (let (($x240 (= $x12 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x21 (= $x131 true)))
 (let (($x237 (forall ((input.ind-%var1739X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1739X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x124))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv2 32))) ?x150)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv3 32))) ?x249)))
 (let ((?x28 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1739X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1739X)))
 (=> $x236 (= ?x28 ?x122)))))))))
 ))
 (let (($x180 (forall ((input.ind-%var1738X (_ BitVec 32)) )(let (($x46 (bvule (_ bv0 32) input.ind-%var1738X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1738X)))
 (= $x236 (and $x46 (bvult input.ind-%var1738X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x39 (and $x180 $x237)))
 (let (($x184 (= $x39 true)))
 (let (($x224 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x177 (not $x224)))
 (let (($x162 (= $x177 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x270 (= (_ bv0 32) ?x95)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x207)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x206)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x119 $x292)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x151 $x36)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x63 $x103)))
 (let (($x269 (not $x267)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x244 (and $x77 $x202)))
 (let (($x179 (and (not $x244) $x269)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x48 $x254)))
 (let (($x34 (not $x264)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x176 $x106)))
 (let (($x40 (and (not $x194) $x34)))
 (let (($x93 (and (and (and (and (and (and $x40 $x179) $x83) $x289) $x293) $x294) $x43)))
 (let (($x295 (and $x93 $x270)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x253 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x253)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x253)))
 (let (($x203 (or false (or false (and (and true (or $x265 $x272)) (or $x30 $x16))))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x203)))
 (let (($x250 (and $x74 $x295)))
 (let (($x290 (= $x250 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x285 (= $x24 true)))
 (let (($x230 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x17 (= $x230 true)))
 (let (($x284 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x275 (= $x284 true)))
 (let (($x154 (= ?x117 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x154 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x55 (= $x101 true)))
 (let ((?x301 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x299 (bvneg ?x301)))
 (let (($x11 (= ?x299 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x11 true)))
 (let (($x182 (and $x91 $x55)))
 (let (($x114 (and $x182 $x29)))
 (let (($x281 (and $x114 $x275)))
 (let (($x260 (and $x281 $x17)))
 (let (($x160 (and $x260 $x285)))
 (let (($x251 (and $x160 $x290)))
 (let (($x133 (and $x251 $x162)))
 (let (($x261 (and $x133 $x184)))
 (let (($x226 (and $x261 $x21)))
 (let (($x129 (and $x226 $x240)))
 (let (($x223 (and $x129 $x108)))
 (let (($x31 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and $x31 $x223)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (and $x25 $x66)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x153 $x216)))
 (let (($x132 (forall ((input.ind-%var1749X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1749X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1749X) (_ bv0 32)))))
 ))
 (let (($x102 (forall ((input.ind-%var1748X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1748X)))
 (= $x15 false)))
 ))
 (let (($x14 (and $x102 $x132)))
 (let (($x243 (and $x14 $x6)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x76 (and $x57 $x243)))
 (let (($x276 (=> $x76 $x235)))
 (not $x276)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (not $x188)))
 (let (($x280 (or $x188 $x125)))
 (let (($x273 (= $x280 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x98)))
 (let (($x105 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x105 true)))
 (let ((?x74 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x74)))
 (let (($x219 (= ?x176 input.dst.llvm-%n)))
 (let (($x96 (= $x219 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x300 (= $x143 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x100 true)))
 (let (($x47 (forall ((input.ind-%var1769X (_ BitVec 32)) )(let ((?x9 (bvadd (bvmul input.ind-%var1769X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x9))))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv2 32))) ?x107)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv3 32))) ?x205)))
 (let ((?x216 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1769X)))
 (let (($x184 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1769X)))
 (=> $x184 (= ?x216 ?x32)))))))))
 ))
 (let (($x10 (forall ((input.ind-%var1768X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1768X) (bvult input.ind-%var1768X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x184 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1768X)))
 (= $x184 $x240))))
 ))
 (let (($x255 (and $x10 $x47)))
 (let (($x19 (= $x255 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x198 (= $x122 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x187)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x266 (= (_ bv0 32) ?x60)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x161)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x46 $x65)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x236 $x26)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x270 $x295)))
 (let (($x290 (not $x250)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x43 $x93)))
 (let (($x51 (and (not $x95) $x290)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x293 $x259)))
 (let (($x294 (not $x206)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x63 $x103)))
 (let (($x207 (and (not $x36) $x294)))
 (let (($x165 (and (and (and (and (and (and $x207 $x51) $x177) $x133) $x180) $x178) $x266)))
 (let (($x195 (and $x165 $x124)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x179)))
 (let (($x134 (or false (or false (and (and true (or $x218 $x211)) (or $x247 $x289))))))
 (let (($x292 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x286 (and $x292 $x195)))
 (let (($x150 (= $x286 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x202 (= $x77 true)))
 (let (($x264 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x34 (= $x264 true)))
 (let (($x106 (= ?x176 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x194 (= $x106 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x23)))
 (let (($x191 (= $x185 true)))
 (let (($x228 (and $x191 $x194)))
 (let (($x40 (and $x228 $x34)))
 (let (($x244 (and $x40 $x202)))
 (let (($x249 (and $x244 $x150)))
 (let (($x38 (and $x249 $x198)))
 (let (($x158 (and $x38 $x19)))
 (let (($x156 (and $x158 $x208)))
 (let (($x86 (and $x156 $x300)))
 (let (($x84 (and $x86 $x96)))
 (let (($x175 (and $x84 $x61)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and $x7 $x175)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x197 $x239)))
 (let (($x222 (forall ((input.ind-%var1779X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1779X)))
 (=> $x284 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1779X) (_ bv0 32)))))
 ))
 (let (($x17 (forall ((input.ind-%var1778X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1778X)))
 (= $x284 false)))
 ))
 (let (($x272 (and $x17 $x222)))
 (let (($x200 (and $x272 $x201)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x117 $x200)))
 (let ((?x209 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd input.dst.llvm-%m ?x209)))
 (let (($x11 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x102 (_ bv3 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x213 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x55 (or false (or false (and (and true (or $x25 $x213)) (or $x128 $x11))))))
 (let (($x111 (=> (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32))) $x55)))
 (let (($x8 (=> (and $x188 (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32)))) $x55)))
 (let (($x233 (and $x8 $x231)))
 (let (($x82 (=> $x233 $x273)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (not $x188)))
 (let (($x280 (or $x188 $x125)))
 (let (($x273 (= $x280 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x98)))
 (let (($x105 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x105 true)))
 (let ((?x74 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x74)))
 (let (($x219 (= ?x176 input.dst.llvm-%n)))
 (let (($x96 (= $x219 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x300 (= $x143 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x100 true)))
 (let (($x47 (forall ((input.ind-%var1769X (_ BitVec 32)) )(let ((?x9 (bvadd (bvmul input.ind-%var1769X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x9))))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv2 32))) ?x107)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv3 32))) ?x205)))
 (let ((?x216 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1769X)))
 (let (($x184 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1769X)))
 (=> $x184 (= ?x216 ?x32)))))))))
 ))
 (let (($x10 (forall ((input.ind-%var1768X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1768X) (bvult input.ind-%var1768X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x184 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1768X)))
 (= $x184 $x240))))
 ))
 (let (($x255 (and $x10 $x47)))
 (let (($x19 (= $x255 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x198 (= $x122 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x187)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x266 (= (_ bv0 32) ?x60)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x161)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x46 $x65)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x236 $x26)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x270 $x295)))
 (let (($x290 (not $x250)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x43 $x93)))
 (let (($x51 (and (not $x95) $x290)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x293 $x259)))
 (let (($x294 (not $x206)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x63 $x103)))
 (let (($x207 (and (not $x36) $x294)))
 (let (($x165 (and (and (and (and (and (and $x207 $x51) $x177) $x133) $x180) $x178) $x266)))
 (let (($x195 (and $x165 $x124)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x179)))
 (let (($x134 (or false (or false (and (and true (or $x218 $x211)) (or $x247 $x289))))))
 (let (($x292 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x286 (and $x292 $x195)))
 (let (($x150 (= $x286 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x202 (= $x77 true)))
 (let (($x264 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x34 (= $x264 true)))
 (let (($x106 (= ?x176 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x194 (= $x106 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x185 (= (_ bv0 2) ?x23)))
 (let (($x191 (= $x185 true)))
 (let (($x228 (and $x191 $x194)))
 (let (($x40 (and $x228 $x34)))
 (let (($x244 (and $x40 $x202)))
 (let (($x249 (and $x244 $x150)))
 (let (($x38 (and $x249 $x198)))
 (let (($x158 (and $x38 $x19)))
 (let (($x156 (and $x158 $x208)))
 (let (($x86 (and $x156 $x300)))
 (let (($x84 (and $x86 $x96)))
 (let (($x175 (and $x84 $x61)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and $x7 $x175)))
 (let (($x197 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x197 $x239)))
 (let (($x222 (forall ((input.ind-%var1779X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1779X)))
 (=> $x284 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1779X) (_ bv0 32)))))
 ))
 (let (($x17 (forall ((input.ind-%var1778X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1778X)))
 (= $x284 false)))
 ))
 (let (($x272 (and $x17 $x222)))
 (let (($x200 (and $x272 $x201)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x117 $x200)))
 (let ((?x209 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd input.dst.llvm-%m ?x209)))
 (let (($x11 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x102 (_ bv3 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x213 (bvugt ?x102 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x55 (or false (or false (and (and true (or $x25 $x213)) (or $x128 $x11))))))
 (let (($x111 (=> (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32))) $x55)))
 (let (($x8 (=> (and $x188 (bvule ?x102 (bvsub (bvadd ?x102 (_ bv4 32)) (_ bv1 32)))) $x55)))
 (let (($x233 (and $x8 $x231)))
 (let (($x82 (=> $x233 $x273)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x43)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x294)))
 (let ((?x259 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x103)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x292 $x36)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x134 $x67)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (and $x179 $x218)))
 (let (($x83 (not $x211)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x267 $x269)))
 (let (($x247 (and (not $x45) $x83)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x264 $x34)))
 (let (($x77 (not $x40)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x68 $x253)))
 (let (($x244 (and (not $x254) $x77)))
 (let (($x290 (and (and (and (and (and (and $x244 $x247) $x252) $x119) $x293) $x206) $x207)))
 (let (($x51 (and $x290 $x93)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x194 (or false (or false (and (and true (or $x79 $x30)) (or $x191 $x203))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x194)))
 (let (($x263 (and $x48 $x51)))
 (let (($x37 (= $x263 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x180 (concat ?x26 (concat ?x46 (concat ?x162 ?x177)))))
 (let (($x216 (= ?x180 input.dst.llvm-%n)))
 (let (($x243 (= $x216 true)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x286 (concat ?x187 (concat ?x60 ?x178)))))
 (let (($x240 (= ?x150 input.dst.llvm-%m)))
 (let (($x129 (= $x240 true)))
 (let (($x249 (= input.dst.llvm-%m ?x150)))
 (let (($x193 (= input.dst.llvm-%n ?x180)))
 (let (($x122 (and $x193 $x249)))
 (let (($x38 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x48) $x51)))
 (let (($x184 (and $x38 $x122)))
 (let (($x271 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (and $x271 $x184)))
 (let (($x35 (= $x12 true)))
 (let (($x10 (and $x35 $x129)))
 (let (($x99 (and $x10 $x243)))
 (let (($x111 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x111 $x99)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x54 (and $x167 $x9)))
 (let (($x299 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1789X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1789X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1788X)))
 (= $x209 false)))
 ))
 (let (($x11 (and $x182 $x299)))
 (let (($x173 (and $x11 $x54)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x57 $x173)))
 (let (($x163 (=> $x92 $x37)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x43)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x294)))
 (let ((?x259 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x103)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x292 $x36)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x134 $x67)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (and $x179 $x218)))
 (let (($x83 (not $x211)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x267 $x269)))
 (let (($x247 (and (not $x45) $x83)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x264 $x34)))
 (let (($x77 (not $x40)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x68 $x253)))
 (let (($x244 (and (not $x254) $x77)))
 (let (($x290 (and (and (and (and (and (and $x244 $x247) $x252) $x119) $x293) $x206) $x207)))
 (let (($x51 (and $x290 $x93)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x194 (or false (or false (and (and true (or $x79 $x30)) (or $x191 $x203))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x194)))
 (let (($x263 (and $x48 $x51)))
 (let (($x37 (= $x263 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x180 (concat ?x26 (concat ?x46 (concat ?x162 ?x177)))))
 (let (($x216 (= ?x180 input.dst.llvm-%n)))
 (let (($x243 (= $x216 true)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x286 (concat ?x187 (concat ?x60 ?x178)))))
 (let (($x240 (= ?x150 input.dst.llvm-%m)))
 (let (($x129 (= $x240 true)))
 (let (($x249 (= input.dst.llvm-%m ?x150)))
 (let (($x193 (= input.dst.llvm-%n ?x180)))
 (let (($x122 (and $x193 $x249)))
 (let (($x38 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x48) $x51)))
 (let (($x184 (and $x38 $x122)))
 (let (($x271 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (and $x271 $x184)))
 (let (($x35 (= $x12 true)))
 (let (($x10 (and $x35 $x129)))
 (let (($x99 (and $x10 $x243)))
 (let (($x111 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x111 $x99)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x54 (and $x167 $x9)))
 (let (($x299 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1789X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1789X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1788X)))
 (= $x209 false)))
 ))
 (let (($x11 (and $x182 $x299)))
 (let (($x173 (and $x11 $x54)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x57 $x173)))
 (let (($x163 (=> $x92 $x37)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x5)))
 (let (($x108 (= ?x147 input.dst.llvm-%n)))
 (let (($x112 (= $x108 true)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x9 (concat ?x216 (concat ?x240 ?x12)))))
 (let (($x224 (= ?x54 input.dst.llvm-%n)))
 (let (($x102 (= $x224 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x48 (concat ?x74 (concat ?x23 ?x7)))))
 (let (($x92 (= input.dst.llvm-%m ?x198)))
 (let (($x173 (= input.dst.llvm-%n ?x54)))
 (let (($x263 (and $x173 $x92)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x187)))
 (let ((?x286 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x286)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x177)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (and $x162 $x133)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x49 $x161)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x93 $x51)))
 (let (($x141 (not $x38)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (and $x207 $x290)))
 (let (($x26 (and (not $x43) $x141)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x293 $x295)))
 (let (($x206 (not $x259)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x267 $x269)))
 (let (($x294 (and (not $x67) $x206)))
 (let (($x249 (and (and (and (and (and (and $x294 $x26) $x189) $x46) $x180) $x195) $x165)))
 (let (($x122 (and $x249 $x242)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x211)))
 (let (($x63 (or false (or false (and (and true (or $x83 $x247)) (or $x151 $x119))))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x77 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x144 (and (and (and $x77 $x36) $x122) $x263)))
 (let (($x264 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x17 (and $x264 $x144)))
 (let (($x160 (= $x17 true)))
 (let (($x253 (= ?x198 input.dst.llvm-%m)))
 (let (($x254 (= $x253 true)))
 (let (($x28 (and $x254 $x160)))
 (let (($x153 (and $x28 $x102)))
 (let (($x272 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x272 $x153)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x265 $x13)))
 (let (($x114 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1799X)))
 (=> $x182 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1799X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var1798X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1798X)))
 (= $x182 false)))
 ))
 (let (($x284 (and $x128 $x114)))
 (let (($x268 (and $x284 $x188)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x123 (and $x57 $x268)))
 (let (($x107 (=> $x123 $x112)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x5)))
 (let (($x108 (= ?x147 input.dst.llvm-%n)))
 (let (($x112 (= $x108 true)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x9 (concat ?x216 (concat ?x240 ?x12)))))
 (let (($x224 (= ?x54 input.dst.llvm-%n)))
 (let (($x102 (= $x224 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x48 (concat ?x74 (concat ?x23 ?x7)))))
 (let (($x92 (= input.dst.llvm-%m ?x198)))
 (let (($x173 (= input.dst.llvm-%n ?x54)))
 (let (($x263 (and $x173 $x92)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x187)))
 (let ((?x286 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x286)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x177)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (and $x162 $x133)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x49 $x161)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x93 $x51)))
 (let (($x141 (not $x38)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (and $x207 $x290)))
 (let (($x26 (and (not $x43) $x141)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x293 $x295)))
 (let (($x206 (not $x259)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x267 $x269)))
 (let (($x294 (and (not $x67) $x206)))
 (let (($x249 (and (and (and (and (and (and $x294 $x26) $x189) $x46) $x180) $x195) $x165)))
 (let (($x122 (and $x249 $x242)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x211)))
 (let (($x63 (or false (or false (and (and true (or $x83 $x247)) (or $x151 $x119))))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x77 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x144 (and (and (and $x77 $x36) $x122) $x263)))
 (let (($x264 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x17 (and $x264 $x144)))
 (let (($x160 (= $x17 true)))
 (let (($x253 (= ?x198 input.dst.llvm-%m)))
 (let (($x254 (= $x253 true)))
 (let (($x28 (and $x254 $x160)))
 (let (($x153 (and $x28 $x102)))
 (let (($x272 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x272 $x153)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x265 $x13)))
 (let (($x114 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1799X)))
 (=> $x182 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1799X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var1798X (_ BitVec 32)) )(let (($x182 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1798X)))
 (= $x182 false)))
 ))
 (let (($x284 (and $x128 $x114)))
 (let (($x268 (and $x284 $x188)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x123 (and $x57 $x268)))
 (let (($x107 (=> $x123 $x112)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x213 (= (_ bv0 2) ?x209)))
 (let (($x111 (= $x213 true)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x188 (concat ?x102 (concat ?x160 ?x144)))))
 (let (($x79 (= ?x268 input.dst.llvm-%m)))
 (let (($x244 (= $x79 true)))
 (let (($x123 (= input.dst.llvm-%m ?x268)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x103 (concat ?x40 (concat ?x254 ?x68)))))
 (let (($x92 (= input.dst.llvm-%n ?x179)))
 (let (($x31 (and $x92 $x123)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x10)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x99)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x249 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x286 $x249)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x150 $x187)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x49 $x162)))
 (let (($x133 (not $x177)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (and $x236 $x46)))
 (let (($x180 (and (not $x266) $x133)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x38 $x141)))
 (let (($x60 (not $x26)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x119 $x270)))
 (let (($x178 (and (not $x51) $x60)))
 (let (($x54 (and (and (and (and (and (and $x178 $x180) $x193) $x195) $x242) $x163) $x9)))
 (let (($x173 (and $x54 $x216)))
 (let (($x206 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x43 (or false (or false (and (and true (or $x267 $x269)) (or $x259 $x206))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x151 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x108 (and (and (and $x151 $x93) $x173) $x31)))
 (let (($x247 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x112 (and $x247 $x108)))
 (let (($x107 (= $x112 true)))
 (let (($x83 (= ?x179 input.dst.llvm-%n)))
 (let (($x218 (= $x83 true)))
 (let (($x205 (and $x218 $x107)))
 (let (($x97 (and $x205 $x244)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x23 $x97)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x203 $x184)))
 (let (($x194 (forall ((input.ind-%var1809X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1809X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1809X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1808X)))
 (= $x128 false)))
 ))
 (let (($x48 (and $x117 $x194)))
 (let (($x101 (and $x48 $x25)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x57 $x101)))
 (let (($x11 (=> $x91 $x111)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x213 (= (_ bv0 2) ?x209)))
 (let (($x111 (= $x213 true)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x188 (concat ?x102 (concat ?x160 ?x144)))))
 (let (($x79 (= ?x268 input.dst.llvm-%m)))
 (let (($x244 (= $x79 true)))
 (let (($x123 (= input.dst.llvm-%m ?x268)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x103 (concat ?x40 (concat ?x254 ?x68)))))
 (let (($x92 (= input.dst.llvm-%n ?x179)))
 (let (($x31 (and $x92 $x123)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x10)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x99)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x249 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x286 $x249)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x150 $x187)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x49 $x162)))
 (let (($x133 (not $x177)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (and $x236 $x46)))
 (let (($x180 (and (not $x266) $x133)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x38 $x141)))
 (let (($x60 (not $x26)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x119 $x270)))
 (let (($x178 (and (not $x51) $x60)))
 (let (($x54 (and (and (and (and (and (and $x178 $x180) $x193) $x195) $x242) $x163) $x9)))
 (let (($x173 (and $x54 $x216)))
 (let (($x206 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x43 (or false (or false (and (and true (or $x267 $x269)) (or $x259 $x206))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x151 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x108 (and (and (and $x151 $x93) $x173) $x31)))
 (let (($x247 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x112 (and $x247 $x108)))
 (let (($x107 (= $x112 true)))
 (let (($x83 (= ?x179 input.dst.llvm-%n)))
 (let (($x218 (= $x83 true)))
 (let (($x205 (and $x218 $x107)))
 (let (($x97 (and $x205 $x244)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x23 $x97)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x203 $x184)))
 (let (($x194 (forall ((input.ind-%var1809X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1809X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1809X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1808X)))
 (= $x128 false)))
 ))
 (let (($x48 (and $x117 $x194)))
 (let (($x101 (and $x48 $x25)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x57 $x101)))
 (let (($x11 (=> $x91 $x111)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x272 (bvneg ?x55)))
 (let (($x284 (= ?x272 input.spec-%var-n-1)))
 (let (($x197 (= $x284 true)))
 (let ((?x250 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x43 (concat ?x294 (concat ?x259 ?x250)))))
 (let (($x213 (= input.dst.llvm-%m ?x93)))
 (let ((?x211 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x65 (concat ?x252 (concat ?x218 ?x211)))))
 (let (($x209 (= input.dst.llvm-%n ?x63)))
 (let (($x111 (and $x209 $x213)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x205)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x112)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (and $x144 $x153)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x160 $x268)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x173 $x147)))
 (let (($x13 (not $x92)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (and $x54 $x10)))
 (let (($x224 (and (not $x216) $x13)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x129 $x122)))
 (let (($x243 (not $x163)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x178 $x236)))
 (let (($x9 (and (not $x242) $x243)))
 (let (($x91 (and (and (and (and (and (and $x9 $x224) $x102) $x17) $x123) $x108) $x107)))
 (let (($x148 (and $x91 $x79)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x165 (or false (or false (and (and true (or $x177 $x133)) (or $x240 $x195))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x26 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x191 (and (and (and $x26 $x187) $x148) $x111)))
 (let (($x189 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x251 (and $x189 $x191)))
 (let (($x263 (= $x251 true)))
 (let (($x119 (= ?x93 input.dst.llvm-%m)))
 (let (($x270 (= $x119 true)))
 (let (($x267 (= ?x63 input.dst.llvm-%n)))
 (let (($x36 (= $x267 true)))
 (let (($x51 (and $x36 $x270)))
 (let (($x176 (and $x51 $x263)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x254 $x176)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x222 (and $x34 $x167)))
 (let (($x262 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1819X)))
 (=> $x117 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1819X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1818X)))
 (= $x117 false)))
 ))
 (let (($x103 (and $x106 $x262)))
 (let (($x230 (and $x103 $x222)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x57 $x230)))
 (let (($x299 (=> $x14 $x197)))
 (not $x299))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x272 (bvneg ?x55)))
 (let (($x284 (= ?x272 input.spec-%var-n-1)))
 (let (($x197 (= $x284 true)))
 (let ((?x250 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x43 (concat ?x294 (concat ?x259 ?x250)))))
 (let (($x213 (= input.dst.llvm-%m ?x93)))
 (let ((?x211 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x65 (concat ?x252 (concat ?x218 ?x211)))))
 (let (($x209 (= input.dst.llvm-%n ?x63)))
 (let (($x111 (and $x209 $x213)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x205)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x112)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x28)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (and $x144 $x153)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x160 $x268)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x173 $x147)))
 (let (($x13 (not $x92)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (and $x54 $x10)))
 (let (($x224 (and (not $x216) $x13)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x129 $x122)))
 (let (($x243 (not $x163)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x178 $x236)))
 (let (($x9 (and (not $x242) $x243)))
 (let (($x91 (and (and (and (and (and (and $x9 $x224) $x102) $x17) $x123) $x108) $x107)))
 (let (($x148 (and $x91 $x79)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x165 (or false (or false (and (and true (or $x177 $x133)) (or $x240 $x195))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x26 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x191 (and (and (and $x26 $x187) $x148) $x111)))
 (let (($x189 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x251 (and $x189 $x191)))
 (let (($x263 (= $x251 true)))
 (let (($x119 (= ?x93 input.dst.llvm-%m)))
 (let (($x270 (= $x119 true)))
 (let (($x267 (= ?x63 input.dst.llvm-%n)))
 (let (($x36 (= $x267 true)))
 (let (($x51 (and $x36 $x270)))
 (let (($x176 (and $x51 $x263)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x254 $x176)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x222 (and $x34 $x167)))
 (let (($x262 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1819X)))
 (=> $x117 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1819X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1818X)))
 (= $x117 false)))
 ))
 (let (($x103 (and $x106 $x262)))
 (let (($x230 (and $x103 $x222)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x57 $x230)))
 (let (($x299 (=> $x14 $x197)))
 (not $x299))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x301 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x128 (= $x301 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x167 (concat ?x251 (concat ?x213 ?x8)))))
 (let (($x202 (= ?x222 input.dst.llvm-%n)))
 (let (($x60 (= $x202 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x295 (concat ?x250 (concat ?x206 (concat ?x36 ?x37)))))
 (let (($x14 (= input.dst.llvm-%m ?x295)))
 (let (($x230 (= input.dst.llvm-%n ?x222)))
 (let (($x182 (and $x230 $x14)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x25)))
 (let ((?x268 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x268)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (and $x97 $x184)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x102 $x160)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x10 $x216)))
 (let (($x173 (not $x188)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x243 $x9)))
 (let (($x92 (and (not $x54) $x173)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x236 $x242)))
 (let (($x129 (not $x99)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x26 $x46)))
 (let (($x163 (and (not $x178) $x129)))
 (let (($x205 (and (and (and (and (and (and $x163 $x92) $x13) $x244) $x144) $x153) $x123)))
 (let (($x79 (and $x205 $x31)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x165 (or false (or false (and (and true (or $x49 $x133)) (or $x193 $x195))))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x38 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x284 (and (and (and $x38 $x11) $x79) $x182)))
 (let (($x270 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x197 (and $x270 $x284)))
 (let (($x299 (= $x197 true)))
 (let (($x93 (= ?x295 input.dst.llvm-%m)))
 (let (($x5 (= $x93 true)))
 (let (($x171 (and $x5 $x299)))
 (let (($x269 (and $x171 $x60)))
 (let (($x218 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (and $x218 $x269)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x289 $x77)))
 (let (($x292 (forall ((input.ind-%var1829X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1829X)))
 (=> $x106 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1829X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var1828X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1828X)))
 (= $x106 false)))
 ))
 (let (($x65 (and $x45 $x292)))
 (let (($x74 (and $x65 $x265)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x57 $x74)))
 (let (($x228 (=> $x185 $x128)))
 (not $x228))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x301 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x128 (= $x301 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x167 (concat ?x251 (concat ?x213 ?x8)))))
 (let (($x202 (= ?x222 input.dst.llvm-%n)))
 (let (($x60 (= $x202 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x295 (concat ?x250 (concat ?x206 (concat ?x36 ?x37)))))
 (let (($x14 (= input.dst.llvm-%m ?x295)))
 (let (($x230 (= input.dst.llvm-%n ?x222)))
 (let (($x182 (and $x230 $x14)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x25)))
 (let ((?x268 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x268)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (and $x97 $x184)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x102 $x160)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x10 $x216)))
 (let (($x173 (not $x188)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x243 $x9)))
 (let (($x92 (and (not $x54) $x173)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x236 $x242)))
 (let (($x129 (not $x99)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x26 $x46)))
 (let (($x163 (and (not $x178) $x129)))
 (let (($x205 (and (and (and (and (and (and $x163 $x92) $x13) $x244) $x144) $x153) $x123)))
 (let (($x79 (and $x205 $x31)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x165 (or false (or false (and (and true (or $x49 $x133)) (or $x193 $x195))))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x38 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x284 (and (and (and $x38 $x11) $x79) $x182)))
 (let (($x270 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x197 (and $x270 $x284)))
 (let (($x299 (= $x197 true)))
 (let (($x93 (= ?x295 input.dst.llvm-%m)))
 (let (($x5 (= $x93 true)))
 (let (($x171 (and $x5 $x299)))
 (let (($x269 (and $x171 $x60)))
 (let (($x218 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (and $x218 $x269)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x289 $x77)))
 (let (($x292 (forall ((input.ind-%var1829X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1829X)))
 (=> $x106 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1829X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var1828X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1828X)))
 (= $x106 false)))
 ))
 (let (($x65 (and $x45 $x292)))
 (let (($x74 (and $x65 $x265)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x57 $x74)))
 (let (($x228 (=> $x185 $x128)))
 (not $x228))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x261 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let ((?x239 (bvadd (bvmul input.ind-%var1849X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x233))))
 (=> false (= (_ bv0 32) ?x69))))))
 ))
 (let (($x172 (forall ((input.ind-%var1848X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1848X) (bvult input.ind-%var1848X (_ bv0 32)))))
 ))
 (let (($x6 (and $x172 $x261)))
 (let (($x275 (= $x6 true)))
 (let ((?x284 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x265 (concat ?x60 (concat ?x299 ?x284)))))
 (let (($x148 (= ?x74 input.dst.llvm-%m)))
 (let (($x203 (= $x148 true)))
 (let (($x185 (= input.dst.llvm-%m ?x74)))
 (let ((?x207 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x187 (concat ?x189 (concat ?x5 ?x207)))))
 (let (($x14 (= input.dst.llvm-%n ?x161)))
 (let (($x301 (and $x14 $x185)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x191)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x176)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x268 $x205)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x91 $x25)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x102 $x97)))
 (let (($x184 (not $x17)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x224 $x244)))
 (let (($x144 (and (not $x112) $x184)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x188 $x173)))
 (let (($x108 (not $x92)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x195 $x12)))
 (let (($x101 (and (not $x216) $x108)))
 (let (($x222 (and (and (and (and (and (and $x101 $x144) $x28) $x153) $x31) $x272) $x167)))
 (let (($x230 (and $x222 $x251)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x55)))
 (let (($x54 (or false (or false (and (and true (or $x26 $x46)) (or $x99 $x129))))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x193 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x23 (and (and (and $x193 $x10) $x230) $x301)))
 (let (($x133 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x247 (and $x133 $x23)))
 (let (($x141 (= $x247 true)))
 (let (($x49 (= ?x161 input.dst.llvm-%n)))
 (let (($x162 (= $x49 true)))
 (let (($x151 (and $x162 $x141)))
 (let (($x40 (and $x151 $x203)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x194 (and $x36 $x40)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x264 (and $x43 $x194)))
 (let (($x259 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1839X)))
 (=> $x45 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1839X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1838X)))
 (= $x45 false)))
 ))
 (let (($x250 (and $x134 $x259)))
 (let (($x271 (and $x250 $x264)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x57 $x271)))
 (let (($x227 (=> $x117 $x275)))
 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x261 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let ((?x239 (bvadd (bvmul input.ind-%var1849X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x233))))
 (=> false (= (_ bv0 32) ?x69))))))
 ))
 (let (($x172 (forall ((input.ind-%var1848X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1848X) (bvult input.ind-%var1848X (_ bv0 32)))))
 ))
 (let (($x6 (and $x172 $x261)))
 (let (($x275 (= $x6 true)))
 (let ((?x284 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x265 (concat ?x60 (concat ?x299 ?x284)))))
 (let (($x148 (= ?x74 input.dst.llvm-%m)))
 (let (($x203 (= $x148 true)))
 (let (($x185 (= input.dst.llvm-%m ?x74)))
 (let ((?x207 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x187 (concat ?x189 (concat ?x5 ?x207)))))
 (let (($x14 (= input.dst.llvm-%n ?x161)))
 (let (($x301 (and $x14 $x185)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x191)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x176)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x268 $x205)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x91 $x25)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x102 $x97)))
 (let (($x184 (not $x17)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x224 $x244)))
 (let (($x144 (and (not $x112) $x184)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x188 $x173)))
 (let (($x108 (not $x92)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x195 $x12)))
 (let (($x101 (and (not $x216) $x108)))
 (let (($x222 (and (and (and (and (and (and $x101 $x144) $x28) $x153) $x31) $x272) $x167)))
 (let (($x230 (and $x222 $x251)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x55)))
 (let (($x54 (or false (or false (and (and true (or $x26 $x46)) (or $x99 $x129))))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x193 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x23 (and (and (and $x193 $x10) $x230) $x301)))
 (let (($x133 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x247 (and $x133 $x23)))
 (let (($x141 (= $x247 true)))
 (let (($x49 (= ?x161 input.dst.llvm-%n)))
 (let (($x162 (= $x49 true)))
 (let (($x151 (and $x162 $x141)))
 (let (($x40 (and $x151 $x203)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x194 (and $x36 $x40)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x264 (and $x43 $x194)))
 (let (($x259 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1839X)))
 (=> $x45 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1839X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1838X)))
 (= $x45 false)))
 ))
 (let (($x250 (and $x134 $x259)))
 (let (($x271 (and $x250 $x264)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x57 $x271)))
 (let (($x227 (=> $x117 $x275)))
 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x70 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x196 (bvmul (_ bv4294967295 32) ?x70)))
 (let ((?x192 (bvneg ?x196)))
 (let (($x113 (= ?x192 ?x238)))
 (let (($x212 (= $x113 true)))
 (let ((?x221 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x221)))
 (let (($x58 (= ?x282 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (= $x58 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x245 (= $x149 true)))
 (let (($x42 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x42 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x241 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x24 (= $x135 true)))
 (let (($x226 (forall ((input.ind-%var1859X (_ BitVec 32)) )(let ((?x76 (bvadd (bvmul input.ind-%var1859X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x76))))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv2 32))) ?x235)))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv3 32))) ?x298)))
 (let ((?x143 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1859X)))
 (let (($x106 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1859X)))
 (=> $x106 (= ?x143 ?x127)))))))))
 ))
 (let (($x98 (forall ((input.ind-%var1858X (_ BitVec 32)) )(let (($x100 (and (bvule (_ bv0 32) input.ind-%var1858X) (bvult input.ind-%var1858X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x106 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1858X)))
 (= $x106 $x100))))
 ))
 (let (($x53 (and $x98 $x226)))
 (let (($x257 (= $x53 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x227 (bvsub ?x134 ?x179)))
 (let (($x182 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x227) (bvult ?x134 ?x227))))
 (let (($x261 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x6 (ite $x261 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x69 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvmul (_ bv4 64) ?x69)))
 (let ((?x214 ((_ extract 63 32) ?x140)))
 (let (($x275 (= ?x214 ?x6)))
 (let (($x294 (and $x275 $x182)))
 (let (($x233 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x34 (and $x233 $x294)))
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (=> $x132 $x34)))
 (let (($x262 (= $x252 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x280 (= $x125 true)))
 (let (($x239 (= $x132 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x40)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x148)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x74 $x301)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x269 $x23)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x228 $x14)))
 (let (($x265 (not $x77)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (and $x191 $x251)))
 (let (($x60 (and (not $x230) $x265)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x79 $x272)))
 (let (($x176 (not $x263)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x102 $x97)))
 (let (($x222 (and (not $x111) $x176)))
 (let (($x32 (and (and (and (and (and (and $x222 $x60) $x299) $x171) $x247) $x151) $x203)))
 (let (($x90 (and $x32 $x194)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x205 (or false (or false (and (and true (or $x209 $x107)) (or $x153 $x8))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x205)))
 (let (($x172 (and $x31 $x90)))
 (let (($x19 (= $x172 true)))
 (let ((?x195 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x195)))
 (let (($x224 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (= $x224 true)))
 (let ((?x173 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x92 (= (_ bv0 2) ?x173)))
 (let (($x108 (= $x92 true)))
 (let (($x216 (= ?x12 input.dst.llvm-%n)))
 (let (($x13 (= $x216 true)))
 (let (($x101 (and $x13 $x108)))
 (let (($x112 (and $x101 $x244)))
 (let (($x175 (and $x112 $x19)))
 (let (($x82 (and $x175 $x239)))
 (let (($x200 (and $x82 $x280)))
 (let (($x292 (and $x200 $x262)))
 (let (($x223 (and $x292 $x257)))
 (let (($x75 (and $x223 $x24)))
 (let (($x278 (and $x75 $x72)))
 (let (($x157 (and $x278 $x50)))
 (let (($x186 (and $x157 $x245)))
 (let (($x88 (and $x186 $x168)))
 (let (($x10 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and (not $x10) $x88)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x9 $x277)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x129 $x80)))
 (let (($x236 (forall ((input.ind-%var1869X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1869X)))
 (=> $x133 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1869X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1868X)))
 (= $x133 false)))
 ))
 (let (($x99 (and $x193 $x236)))
 (let (($x22 (and $x99 $x169)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x161 $x22)))
 (let (($x51 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd ?x134 (_ bv3 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x37 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x207 (or false (or false (and (and true (or $x36 $x37)) (or $x270 $x51))))))
 (let (($x38 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x207)))
 (let (($x83 (=> (and $x132 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x207)))
 (let (($x246 (and $x83 $x181)))
 (let (($x145 (=> $x246 $x212)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x70 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x196 (bvmul (_ bv4294967295 32) ?x70)))
 (let ((?x192 (bvneg ?x196)))
 (let (($x113 (= ?x192 ?x238)))
 (let (($x212 (= $x113 true)))
 (let ((?x221 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x221)))
 (let (($x58 (= ?x282 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (= $x58 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x245 (= $x149 true)))
 (let (($x42 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x42 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x241 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x24 (= $x135 true)))
 (let (($x226 (forall ((input.ind-%var1859X (_ BitVec 32)) )(let ((?x76 (bvadd (bvmul input.ind-%var1859X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x76))))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv2 32))) ?x235)))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv3 32))) ?x298)))
 (let ((?x143 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1859X)))
 (let (($x106 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1859X)))
 (=> $x106 (= ?x143 ?x127)))))))))
 ))
 (let (($x98 (forall ((input.ind-%var1858X (_ BitVec 32)) )(let (($x100 (and (bvule (_ bv0 32) input.ind-%var1858X) (bvult input.ind-%var1858X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x106 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1858X)))
 (= $x106 $x100))))
 ))
 (let (($x53 (and $x98 $x226)))
 (let (($x257 (= $x53 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x227 (bvsub ?x134 ?x179)))
 (let (($x182 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x227) (bvult ?x134 ?x227))))
 (let (($x261 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x6 (ite $x261 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x69 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvmul (_ bv4 64) ?x69)))
 (let ((?x214 ((_ extract 63 32) ?x140)))
 (let (($x275 (= ?x214 ?x6)))
 (let (($x294 (and $x275 $x182)))
 (let (($x233 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x34 (and $x233 $x294)))
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (=> $x132 $x34)))
 (let (($x262 (= $x252 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x280 (= $x125 true)))
 (let (($x239 (= $x132 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x40)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x148)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x74 $x301)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x269 $x23)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x228 $x14)))
 (let (($x265 (not $x77)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (and $x191 $x251)))
 (let (($x60 (and (not $x230) $x265)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x79 $x272)))
 (let (($x176 (not $x263)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x102 $x97)))
 (let (($x222 (and (not $x111) $x176)))
 (let (($x32 (and (and (and (and (and (and $x222 $x60) $x299) $x171) $x247) $x151) $x203)))
 (let (($x90 (and $x32 $x194)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x205 (or false (or false (and (and true (or $x209 $x107)) (or $x153 $x8))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x205)))
 (let (($x172 (and $x31 $x90)))
 (let (($x19 (= $x172 true)))
 (let ((?x195 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x195)))
 (let (($x224 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (= $x224 true)))
 (let ((?x173 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x92 (= (_ bv0 2) ?x173)))
 (let (($x108 (= $x92 true)))
 (let (($x216 (= ?x12 input.dst.llvm-%n)))
 (let (($x13 (= $x216 true)))
 (let (($x101 (and $x13 $x108)))
 (let (($x112 (and $x101 $x244)))
 (let (($x175 (and $x112 $x19)))
 (let (($x82 (and $x175 $x239)))
 (let (($x200 (and $x82 $x280)))
 (let (($x292 (and $x200 $x262)))
 (let (($x223 (and $x292 $x257)))
 (let (($x75 (and $x223 $x24)))
 (let (($x278 (and $x75 $x72)))
 (let (($x157 (and $x278 $x50)))
 (let (($x186 (and $x157 $x245)))
 (let (($x88 (and $x186 $x168)))
 (let (($x10 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and (not $x10) $x88)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x9 $x277)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x129 $x80)))
 (let (($x236 (forall ((input.ind-%var1869X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1869X)))
 (=> $x133 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1869X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1868X)))
 (= $x133 false)))
 ))
 (let (($x99 (and $x193 $x236)))
 (let (($x22 (and $x99 $x169)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x161 $x22)))
 (let (($x51 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd ?x134 (_ bv3 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x37 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x207 (or false (or false (and (and true (or $x36 $x37)) (or $x270 $x51))))))
 (let (($x38 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x207)))
 (let (($x83 (=> (and $x132 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x207)))
 (let (($x246 (and $x83 $x181)))
 (let (($x145 (=> $x246 $x212)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x211 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x16 (bvule ?x211 (_ bv4294967294 32))))
 (let (($x237 (= $x16 true)))
 (let ((?x146 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x146)))
 (let (($x89 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x89 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x65 (= $x218 true)))
 (let (($x11 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x156 (= $x11 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x210)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x212)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x246)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (and $x181 $x70)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x22 $x196)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (and $x245 $x186)))
 (let (($x282 (not $x221)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x50 $x157)))
 (let (($x168 (and (not $x149) $x282)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x24 $x75)))
 (let (($x72 (not $x241)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x215 $x52)))
 (let (($x42 (and (not $x135) $x72)))
 (let (($x150 (and (and (and (and (and (and $x42 $x168) $x277) $x169) $x192) $x113) $x145)))
 (let (($x147 (and $x150 $x198)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x298 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x53 (or false (or false (and (and true (or $x217 $x155)) (or $x298 $x127))))))
 (let (($x223 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x53)))
 (let (($x177 (and $x223 $x147)))
 (let (($x49 (= $x177 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x300 (= $x143 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (= $x100 true)))
 (let (($x292 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var1879X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x214))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x214 (_ bv2 32))) ?x260)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x214 (_ bv3 32))) ?x240)))
 (let ((?x32 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1879X)))
 (let (($x171 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1879X)))
 (=> $x171 (= ?x32 ?x34)))))))))
 ))
 (let (($x151 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x114 (and (bvule (_ bv0 32) input.ind-%var1878X) (bvult input.ind-%var1878X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x171 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1878X)))
 (= $x171 $x114))))
 ))
 (let (($x106 (and $x151 $x292)))
 (let (($x158 (= $x106 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x209 (bvneg ?x144)))
 (let (($x264 (= ?x209 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x197 (= $x264 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x222 (bvsub ?x134 ?x179)))
 (let (($x202 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x222) (bvult ?x134 ?x222))))
 (let (($x272 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x263 (ite $x272 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x111 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x167 (bvmul (_ bv4 64) ?x111)))
 (let ((?x79 ((_ extract 63 32) ?x167)))
 (let (($x176 (= ?x79 ?x263)))
 (let (($x228 (and $x176 $x202)))
 (let (($x102 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x14 (and $x102 $x228)))
 (let (($x45 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x77 (=> $x45 $x14)))
 (let (($x265 (= $x77 true)))
 (let ((?x8 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x8)))
 (let (($x268 (= $x91 true)))
 (let (($x107 (= ?x209 input.dst.llvm-%n)))
 (let (($x28 (= $x107 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x112 true)))
 (let (($x224 (= $x45 true)))
 (let (($x184 (and $x224 $x17)))
 (let (($x213 (and $x184 $x28)))
 (let (($x123 (and $x213 $x268)))
 (let (($x60 (and $x123 $x265)))
 (let (($x299 (and $x60 $x197)))
 (let (($x254 (and $x299 $x158)))
 (let (($x98 (and $x254 $x84)))
 (let (($x21 (and $x98 $x300)))
 (let (($x35 (and $x21 $x49)))
 (let (($x95 (and $x35 $x156)))
 (let (($x96 (and $x95 $x65)))
 (let (($x154 (and $x96 $x285)))
 (let (($x101 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and (not $x101) $x154)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x92 $x48)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x13 $x103)))
 (let (($x195 (forall ((input.ind-%var1889X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1889X)))
 (=> $x165 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1889X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1888X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1888X)))
 (= $x165 false)))
 ))
 (let (($x12 (and $x236 $x195)))
 (let (($x29 (and $x12 $x105)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x162 $x29)))
 (let (($x93 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x134 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x266 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x83 (or false (or false (and (and true (or $x295 $x266)) (or $x189 $x93))))))
 (let (($x161 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x83)))
 (let (($x259 (=> (and $x45 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x83)))
 (let (($x30 (and $x259 $x66)))
 (let (($x219 (=> $x30 $x237)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x211 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x16 (bvule ?x211 (_ bv4294967294 32))))
 (let (($x237 (= $x16 true)))
 (let ((?x146 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x146)))
 (let (($x89 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x89 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x65 (= $x218 true)))
 (let (($x11 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x156 (= $x11 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x210)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x212)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x246)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (and $x181 $x70)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x22 $x196)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (and $x245 $x186)))
 (let (($x282 (not $x221)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x50 $x157)))
 (let (($x168 (and (not $x149) $x282)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x24 $x75)))
 (let (($x72 (not $x241)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x215 $x52)))
 (let (($x42 (and (not $x135) $x72)))
 (let (($x150 (and (and (and (and (and (and $x42 $x168) $x277) $x169) $x192) $x113) $x145)))
 (let (($x147 (and $x150 $x198)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x298 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x53 (or false (or false (and (and true (or $x217 $x155)) (or $x298 $x127))))))
 (let (($x223 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x53)))
 (let (($x177 (and $x223 $x147)))
 (let (($x49 (= $x177 true)))
 (let (($x143 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x300 (= $x143 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (= $x100 true)))
 (let (($x292 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var1879X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x214))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x214 (_ bv2 32))) ?x260)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x214 (_ bv3 32))) ?x240)))
 (let ((?x32 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1879X)))
 (let (($x171 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1879X)))
 (=> $x171 (= ?x32 ?x34)))))))))
 ))
 (let (($x151 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x114 (and (bvule (_ bv0 32) input.ind-%var1878X) (bvult input.ind-%var1878X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x171 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1878X)))
 (= $x171 $x114))))
 ))
 (let (($x106 (and $x151 $x292)))
 (let (($x158 (= $x106 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x209 (bvneg ?x144)))
 (let (($x264 (= ?x209 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x197 (= $x264 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x222 (bvsub ?x134 ?x179)))
 (let (($x202 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x222) (bvult ?x134 ?x222))))
 (let (($x272 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x263 (ite $x272 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x111 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x167 (bvmul (_ bv4 64) ?x111)))
 (let ((?x79 ((_ extract 63 32) ?x167)))
 (let (($x176 (= ?x79 ?x263)))
 (let (($x228 (and $x176 $x202)))
 (let (($x102 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x14 (and $x102 $x228)))
 (let (($x45 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x77 (=> $x45 $x14)))
 (let (($x265 (= $x77 true)))
 (let ((?x8 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x8)))
 (let (($x268 (= $x91 true)))
 (let (($x107 (= ?x209 input.dst.llvm-%n)))
 (let (($x28 (= $x107 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x112 true)))
 (let (($x224 (= $x45 true)))
 (let (($x184 (and $x224 $x17)))
 (let (($x213 (and $x184 $x28)))
 (let (($x123 (and $x213 $x268)))
 (let (($x60 (and $x123 $x265)))
 (let (($x299 (and $x60 $x197)))
 (let (($x254 (and $x299 $x158)))
 (let (($x98 (and $x254 $x84)))
 (let (($x21 (and $x98 $x300)))
 (let (($x35 (and $x21 $x49)))
 (let (($x95 (and $x35 $x156)))
 (let (($x96 (and $x95 $x65)))
 (let (($x154 (and $x96 $x285)))
 (let (($x101 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (and (not $x101) $x154)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x92 $x48)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x13 $x103)))
 (let (($x195 (forall ((input.ind-%var1889X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1889X)))
 (=> $x165 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1889X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1888X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1888X)))
 (= $x165 false)))
 ))
 (let (($x12 (and $x236 $x195)))
 (let (($x29 (and $x12 $x105)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x162 $x29)))
 (let (($x93 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x134 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x266 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x37)))
 (let (($x83 (or false (or false (and (and true (or $x295 $x266)) (or $x189 $x93))))))
 (let (($x161 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x83)))
 (let (($x259 (=> (and $x45 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x83)))
 (let (($x30 (and $x259 $x66)))
 (let (($x219 (=> $x30 $x237)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x69 (bvsge ?x148 (_ bv0 32))))
 (let (($x242 (= $x69 true)))
 (let ((?x125 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x280 (bvneg ?x125)))
 (let (($x175 (= ?x280 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x175 true)))
 (let (($x172 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x231 (= $x172 true)))
 (let (($x269 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x74 (= $x269 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x117)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x255)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x219)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x30)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x66 $x211)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x29 $x16)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x65 $x96)))
 (let (($x281 (not $x146)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (and $x156 $x95)))
 (let (($x285 (and (not $x218) $x281)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x198 $x147)))
 (let (($x49 (not $x177)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x253 $x80)))
 (let (($x11 (and (not $x210) $x49)))
 (let (($x124 (and (and (and (and (and (and $x11 $x285) $x48) $x105) $x237) $x131) $x76)))
 (let (($x178 (and $x124 $x40)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x212 (or false (or false (and (and true (or $x181 $x246)) (or $x192 $x180))))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x212)))
 (let (($x54 (and $x150 $x178)))
 (let (($x203 (= $x54 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x160 (= $x168 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (= $x186 true)))
 (let (($x157 (forall ((input.ind-%var1899X (_ BitVec 32)) )(let ((?x226 (bvadd (bvmul input.ind-%var1899X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x226))))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x226 (_ bv2 32))) ?x52)))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x226 (_ bv3 32))) ?x24)))
 (let ((?x254 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1899X)))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1899X)))
 (=> $x166 (= ?x254 ?x72)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1898X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var1898X) (bvult input.ind-%var1898X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1898X)))
 (= $x166 $x34))))
 ))
 (let (($x149 (and $x262 $x157)))
 (let (($x58 (= $x149 true)))
 (let ((?x205 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x205)))
 (let (($x194 (= ?x31 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (= $x194 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x264 (bvsub ?x134 ?x179)))
 (let (($x247 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x264) (bvult ?x134 ?x264))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x265 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x202 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x228 (bvmul (_ bv4 64) ?x202)))
 (let ((?x14 ((_ extract 63 32) ?x228)))
 (let (($x60 (= ?x14 ?x265)))
 (let (($x23 (and $x60 $x247)))
 (let (($x251 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x114 (and $x251 $x23)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (=> $x15 $x114)))
 (let (($x151 (= $x141 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x272 (= (_ bv0 2) ?x79)))
 (let (($x263 (= $x272 true)))
 (let (($x102 (= ?x31 input.dst.llvm-%n)))
 (let (($x97 (= $x102 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x91 (= $x8 true)))
 (let (($x213 (= $x15 true)))
 (let (($x268 (and $x213 $x91)))
 (let (($x111 (and $x268 $x97)))
 (let (($x176 (and $x111 $x263)))
 (let (($x32 (and $x176 $x151)))
 (let (($x214 (and $x32 $x140)))
 (let (($x245 (and $x214 $x58)))
 (let (($x282 (and $x245 $x221)))
 (let (($x88 (and $x282 $x160)))
 (let (($x271 (and $x88 $x203)))
 (let (($x90 (and $x271 $x74)))
 (let (($x201 (and $x90 $x231)))
 (let (($x19 (and $x201 $x239)))
 (let (($x28 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x28) $x19)))
 (let (($x209 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x209 $x200)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x184 $x233)))
 (let (($x244 (forall ((input.ind-%var1909X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1909X)))
 (=> $x163 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1909X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1908X)))
 (= $x163 false)))
 ))
 (let (($x112 (and $x195 $x244)))
 (let (($x185 (and $x112 $x284)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x301 (and $x193 $x185)))
 (let (($x207 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x134 (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x270 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x266)))
 (let (($x259 (or false (or false (and (and true (or $x249 $x270)) (or $x5 $x207))))))
 (let (($x162 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x259)))
 (let (($x290 (=> (and $x15 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x259)))
 (let (($x273 (and $x290 $x301)))
 (let (($x10 (=> $x273 $x242)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x69 (bvsge ?x148 (_ bv0 32))))
 (let (($x242 (= $x69 true)))
 (let ((?x125 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x280 (bvneg ?x125)))
 (let (($x175 (= ?x280 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x175 true)))
 (let (($x172 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x231 (= $x172 true)))
 (let (($x269 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x74 (= $x269 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x117)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x255)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x219)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x30)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x66 $x211)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x29 $x16)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x65 $x96)))
 (let (($x281 (not $x146)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (and $x156 $x95)))
 (let (($x285 (and (not $x218) $x281)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x198 $x147)))
 (let (($x49 (not $x177)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x253 $x80)))
 (let (($x11 (and (not $x210) $x49)))
 (let (($x124 (and (and (and (and (and (and $x11 $x285) $x48) $x105) $x237) $x131) $x76)))
 (let (($x178 (and $x124 $x40)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x212 (or false (or false (and (and true (or $x181 $x246)) (or $x192 $x180))))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x212)))
 (let (($x54 (and $x150 $x178)))
 (let (($x203 (= $x54 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x160 (= $x168 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (= $x186 true)))
 (let (($x157 (forall ((input.ind-%var1899X (_ BitVec 32)) )(let ((?x226 (bvadd (bvmul input.ind-%var1899X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x226))))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x226 (_ bv2 32))) ?x52)))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x226 (_ bv3 32))) ?x24)))
 (let ((?x254 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1899X)))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1899X)))
 (=> $x166 (= ?x254 ?x72)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1898X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var1898X) (bvult input.ind-%var1898X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1898X)))
 (= $x166 $x34))))
 ))
 (let (($x149 (and $x262 $x157)))
 (let (($x58 (= $x149 true)))
 (let ((?x205 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x205)))
 (let (($x194 (= ?x31 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (= $x194 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x264 (bvsub ?x134 ?x179)))
 (let (($x247 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x264) (bvult ?x134 ?x264))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x265 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x202 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x228 (bvmul (_ bv4 64) ?x202)))
 (let ((?x14 ((_ extract 63 32) ?x228)))
 (let (($x60 (= ?x14 ?x265)))
 (let (($x23 (and $x60 $x247)))
 (let (($x251 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x114 (and $x251 $x23)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (=> $x15 $x114)))
 (let (($x151 (= $x141 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x272 (= (_ bv0 2) ?x79)))
 (let (($x263 (= $x272 true)))
 (let (($x102 (= ?x31 input.dst.llvm-%n)))
 (let (($x97 (= $x102 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x91 (= $x8 true)))
 (let (($x213 (= $x15 true)))
 (let (($x268 (and $x213 $x91)))
 (let (($x111 (and $x268 $x97)))
 (let (($x176 (and $x111 $x263)))
 (let (($x32 (and $x176 $x151)))
 (let (($x214 (and $x32 $x140)))
 (let (($x245 (and $x214 $x58)))
 (let (($x282 (and $x245 $x221)))
 (let (($x88 (and $x282 $x160)))
 (let (($x271 (and $x88 $x203)))
 (let (($x90 (and $x271 $x74)))
 (let (($x201 (and $x90 $x231)))
 (let (($x19 (and $x201 $x239)))
 (let (($x28 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x28) $x19)))
 (let (($x209 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x209 $x200)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x184 $x233)))
 (let (($x244 (forall ((input.ind-%var1909X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1909X)))
 (=> $x163 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1909X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1908X)))
 (= $x163 false)))
 ))
 (let (($x112 (and $x195 $x244)))
 (let (($x185 (and $x112 $x284)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x301 (and $x193 $x185)))
 (let (($x207 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd ?x134 (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x270 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x266)))
 (let (($x259 (or false (or false (and (and true (or $x249 $x270)) (or $x5 $x207))))))
 (let (($x162 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x259)))
 (let (($x290 (=> (and $x15 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x259)))
 (let (($x273 (and $x290 $x301)))
 (let (($x10 (=> $x273 $x242)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x170 (bvule ?x106 input.dst.llvm-%n)))
 (let (($x216 (= $x170 true)))
 (let ((?x33 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x33)))
 (let (($x21 (= ?x217 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x21 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x176)))
 (let (($x143 (= ?x191 input.dst.llvm-%n)))
 (let (($x130 (= $x143 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (= $x67 true)))
 (let (($x108 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x108 true)))
 (let (($x13 (forall ((input.ind-%var1919X (_ BitVec 32)) )(let ((?x273 (bvadd (bvmul input.ind-%var1919X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x273))))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv2 32))) ?x10)))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv3 32))) ?x277)))
 (let ((?x54 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1919X)))
 (let (($x30 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1919X)))
 (=> $x30 (= ?x54 ?x9)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1918X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1918X) (bvult input.ind-%var1918X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x30 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1918X)))
 (= $x30 $x255))))
 ))
 (let (($x165 (and $x124 $x13)))
 (let (($x122 (= $x165 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x146 (bvsub ?x134 ?x179)))
 (let (($x154 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x146) (bvult ?x134 ?x146))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x65 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x156 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x95 (bvmul (_ bv4 64) ?x156)))
 (let ((?x218 ((_ extract 63 32) ?x95)))
 (let (($x96 (= ?x218 ?x65)))
 (let (($x48 (and $x96 $x154)))
 (let (($x49 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x243 (and $x49 $x48)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (=> $x57 $x243)))
 (let (($x105 (= $x103 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x35 (= $x210 true)))
 (let (($x253 (= $x57 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x22)))
 (let ((?x208 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x208)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x221)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x186 $x282)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x245 $x168)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x215 $x53)))
 (let (($x24 (not $x52)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x135 $x278)))
 (let (($x42 (and (not $x223) $x24)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x84 $x39)))
 (let (($x75 (not $x226)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x299 $x171)))
 (let (($x257 (and (not $x254) $x75)))
 (let (($x238 (and (and (and (and (and (and $x257 $x42) $x157) $x58) $x160) $x169) $x145)))
 (let (($x113 (and $x238 $x181)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x34 (or false (or false (and (and true (or $x141 $x151)) (or $x140 $x214))))))
 (let (($x262 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x34)))
 (let (($x55 (and $x262 $x113)))
 (let (($x212 (= $x55 true)))
 (let (($x265 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x60 (= $x265 true)))
 (let (($x228 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x14 (= $x228 true)))
 (let (($x222 (= ?x191 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (= $x222 true)))
 (let ((?x167 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x79 (= (_ bv0 2) ?x167)))
 (let (($x272 (= $x79 true)))
 (let (($x230 (and $x272 $x251)))
 (let (($x77 (and $x230 $x14)))
 (let (($x197 (and $x77 $x60)))
 (let (($x150 (and $x197 $x212)))
 (let (($x80 (and $x150 $x253)))
 (let (($x198 (and $x80 $x35)))
 (let (($x99 (and $x198 $x105)))
 (let (($x85 (and $x99 $x122)))
 (let (($x182 (and $x85 $x158)))
 (let (($x98 (and $x182 $x6)))
 (let (($x235 (and $x98 $x130)))
 (let (($x300 (and $x235 $x61)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (and (not $x97) $x300)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x298 (and $x31 $x155)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x268 $x298)))
 (let (($x153 (forall ((input.ind-%var1929X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1929X)))
 (=> $x188 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1929X) (_ bv0 32)))))
 ))
 (let (($x244 (forall ((input.ind-%var1928X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1928X)))
 (= $x188 false)))
 ))
 (let (($x8 (and $x244 $x153)))
 (let (($x275 (and $x8 $x294)))
 (let (($x236 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x261 (and $x236 $x275)))
 (let (($x83 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x270 (bvadd ?x134 (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x270)))
 (let (($x189 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x270)))
 (let (($x290 (or false (or false (and (and true (or $x187 $x189)) (or $x38 $x83))))))
 (let (($x193 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x290)))
 (let (($x267 (=> (and $x57 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x290)))
 (let (($x127 (and $x267 $x261)))
 (let (($x101 (=> $x127 $x216)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x170 (bvule ?x106 input.dst.llvm-%n)))
 (let (($x216 (= $x170 true)))
 (let ((?x33 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x33)))
 (let (($x21 (= ?x217 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x21 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x176)))
 (let (($x143 (= ?x191 input.dst.llvm-%n)))
 (let (($x130 (= $x143 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (= $x67 true)))
 (let (($x108 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x108 true)))
 (let (($x13 (forall ((input.ind-%var1919X (_ BitVec 32)) )(let ((?x273 (bvadd (bvmul input.ind-%var1919X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x273))))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv2 32))) ?x10)))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv3 32))) ?x277)))
 (let ((?x54 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1919X)))
 (let (($x30 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1919X)))
 (=> $x30 (= ?x54 ?x9)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1918X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1918X) (bvult input.ind-%var1918X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x30 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1918X)))
 (= $x30 $x255))))
 ))
 (let (($x165 (and $x124 $x13)))
 (let (($x122 (= $x165 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x146 (bvsub ?x134 ?x179)))
 (let (($x154 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x146) (bvult ?x134 ?x146))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x65 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x156 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x95 (bvmul (_ bv4 64) ?x156)))
 (let ((?x218 ((_ extract 63 32) ?x95)))
 (let (($x96 (= ?x218 ?x65)))
 (let (($x48 (and $x96 $x154)))
 (let (($x49 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x243 (and $x49 $x48)))
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (=> $x57 $x243)))
 (let (($x105 (= $x103 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x35 (= $x210 true)))
 (let (($x253 (= $x57 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x22)))
 (let ((?x208 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x208)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x221)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x186 $x282)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x245 $x168)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x215 $x53)))
 (let (($x24 (not $x52)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x135 $x278)))
 (let (($x42 (and (not $x223) $x24)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x84 $x39)))
 (let (($x75 (not $x226)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x299 $x171)))
 (let (($x257 (and (not $x254) $x75)))
 (let (($x238 (and (and (and (and (and (and $x257 $x42) $x157) $x58) $x160) $x169) $x145)))
 (let (($x113 (and $x238 $x181)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x34 (or false (or false (and (and true (or $x141 $x151)) (or $x140 $x214))))))
 (let (($x262 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x34)))
 (let (($x55 (and $x262 $x113)))
 (let (($x212 (= $x55 true)))
 (let (($x265 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x60 (= $x265 true)))
 (let (($x228 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x14 (= $x228 true)))
 (let (($x222 (= ?x191 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (= $x222 true)))
 (let ((?x167 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x79 (= (_ bv0 2) ?x167)))
 (let (($x272 (= $x79 true)))
 (let (($x230 (and $x272 $x251)))
 (let (($x77 (and $x230 $x14)))
 (let (($x197 (and $x77 $x60)))
 (let (($x150 (and $x197 $x212)))
 (let (($x80 (and $x150 $x253)))
 (let (($x198 (and $x80 $x35)))
 (let (($x99 (and $x198 $x105)))
 (let (($x85 (and $x99 $x122)))
 (let (($x182 (and $x85 $x158)))
 (let (($x98 (and $x182 $x6)))
 (let (($x235 (and $x98 $x130)))
 (let (($x300 (and $x235 $x61)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (and (not $x97) $x300)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x298 (and $x31 $x155)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x268 $x298)))
 (let (($x153 (forall ((input.ind-%var1929X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1929X)))
 (=> $x188 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1929X) (_ bv0 32)))))
 ))
 (let (($x244 (forall ((input.ind-%var1928X (_ BitVec 32)) )(let (($x188 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1928X)))
 (= $x188 false)))
 ))
 (let (($x8 (and $x244 $x153)))
 (let (($x275 (and $x8 $x294)))
 (let (($x236 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x261 (and $x236 $x275)))
 (let (($x83 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x270 (bvadd ?x134 (_ bv3 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x270)))
 (let (($x189 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x270)))
 (let (($x290 (or false (or false (and (and true (or $x187 $x189)) (or $x38 $x83))))))
 (let (($x193 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x290)))
 (let (($x267 (=> (and $x57 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x290)))
 (let (($x127 (and $x267 $x261)))
 (let (($x101 (=> $x127 $x216)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (bvule ?x40 (_ bv4294967294 32))))
 (let (($x17 (= $x185 true)))
 (let ((?x280 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x175 (bvneg ?x280)))
 (let (($x172 (= ?x175 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x231 (= $x172 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x74 true)))
 (let (($x16 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x237 (= $x16 true)))
 (let (($x68 (forall ((input.ind-%var1939X (_ BitVec 32)) )(let ((?x216 (bvadd (bvmul input.ind-%var1939X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x216))))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv2 32))) ?x264)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv3 32))) ?x92)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1939X)))
 (let (($x242 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1939X)))
 (=> $x242 (= ?x67 ?x184)))))))))
 ))
 (let (($x85 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1938X) (bvult input.ind-%var1938X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x242 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1938X)))
 (= $x242 $x165))))
 ))
 (let (($x107 (and $x85 $x68)))
 (let (($x178 (= $x107 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x76 (bvsub ?x134 ?x179)))
 (let (($x301 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x76) (bvult ?x134 ?x76))))
 (let (($x133 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x131 (ite $x133 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x105 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvmul (_ bv4 64) ?x105)))
 (let ((?x30 ((_ extract 63 32) ?x99)))
 (let (($x255 (= ?x30 ?x131)))
 (let (($x273 (and $x255 $x301)))
 (let (($x243 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x227 (and $x243 $x273)))
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (=> $x132 $x227)))
 (let (($x125 (= $x100 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x285 (= $x146 true)))
 (let (($x96 (= $x132 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x210)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x253)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (and $x238 $x181)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x145 $x113)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (and $x186 $x221)))
 (let (($x168 (not $x282)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x245 (and $x58 $x196)))
 (let (($x192 (and (not $x245) $x168)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x42 $x246)))
 (let (($x157 (not $x50)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x262 $x299)))
 (let (($x149 (and (not $x24) $x157)))
 (let (($x156 (and (and (and (and (and (and $x149 $x192) $x169) $x208) $x55) $x150) $x80)))
 (let (($x95 (and $x156 $x35)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x215 (or false (or false (and (and true (or $x84 $x39)) (or $x257 $x135))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x218 (and $x52 $x95)))
 (let (($x89 (= $x218 true)))
 (let (($x166 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x240 (= $x166 true)))
 (let (($x194 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x194 true)))
 (let ((?x228 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x228)))
 (let (($x114 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (= $x114 true)))
 (let ((?x197 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x247 (= (_ bv0 2) ?x197)))
 (let (($x23 (= $x247 true)))
 (let (($x77 (= ?x14 input.dst.llvm-%n)))
 (let (($x265 (= $x77 true)))
 (let (($x252 (and $x265 $x23)))
 (let (($x151 (and $x252 $x141)))
 (let (($x214 (and $x151 $x140)))
 (let (($x260 (and $x214 $x240)))
 (let (($x65 (and $x260 $x89)))
 (let (($x281 (and $x65 $x96)))
 (let (($x26 (and $x281 $x285)))
 (let (($x86 (and $x26 $x125)))
 (let (($x29 (and $x86 $x178)))
 (let (($x269 (and $x29 $x237)))
 (let (($x200 (and $x269 $x19)))
 (let (($x90 (and $x200 $x231)))
 (let (($x230 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and (not $x230) $x90)))
 (let (($x222 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x222 $x239)))
 (let (($x263 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x66 (and $x263 $x233)))
 (let (($x167 (forall ((input.ind-%var1949X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1949X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1949X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var1948X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1948X)))
 (= $x25 false)))
 ))
 (let (($x79 (and $x153 $x167)))
 (let (($x129 (and $x79 $x66)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x219 (and $x195 $x129)))
 (let (($x259 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x134 (_ bv3 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x5 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x267 (or false (or false (and (and true (or $x51 $x5)) (or $x161 $x259))))))
 (let (($x236 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x267)))
 (let (($x37 (=> (and $x132 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x267)))
 (let (($x284 (and $x37 $x219)))
 (let (($x28 (=> $x284 $x17)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (bvule ?x40 (_ bv4294967294 32))))
 (let (($x17 (= $x185 true)))
 (let ((?x280 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x175 (bvneg ?x280)))
 (let (($x172 (= ?x175 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x231 (= $x172 true)))
 (let (($x74 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x74 true)))
 (let (($x16 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x237 (= $x16 true)))
 (let (($x68 (forall ((input.ind-%var1939X (_ BitVec 32)) )(let ((?x216 (bvadd (bvmul input.ind-%var1939X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x216))))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv2 32))) ?x264)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv3 32))) ?x92)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1939X)))
 (let (($x242 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1939X)))
 (=> $x242 (= ?x67 ?x184)))))))))
 ))
 (let (($x85 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1938X) (bvult input.ind-%var1938X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x242 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1938X)))
 (= $x242 $x165))))
 ))
 (let (($x107 (and $x85 $x68)))
 (let (($x178 (= $x107 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x76 (bvsub ?x134 ?x179)))
 (let (($x301 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x76) (bvult ?x134 ?x76))))
 (let (($x133 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x131 (ite $x133 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x105 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvmul (_ bv4 64) ?x105)))
 (let ((?x30 ((_ extract 63 32) ?x99)))
 (let (($x255 (= ?x30 ?x131)))
 (let (($x273 (and $x255 $x301)))
 (let (($x243 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x227 (and $x243 $x273)))
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (=> $x132 $x227)))
 (let (($x125 (= $x100 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x285 (= $x146 true)))
 (let (($x96 (= $x132 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x210)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x253)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (and $x238 $x181)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x145 $x113)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (and $x186 $x221)))
 (let (($x168 (not $x282)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x245 (and $x58 $x196)))
 (let (($x192 (and (not $x245) $x168)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x42 $x246)))
 (let (($x157 (not $x50)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x262 $x299)))
 (let (($x149 (and (not $x24) $x157)))
 (let (($x156 (and (and (and (and (and (and $x149 $x192) $x169) $x208) $x55) $x150) $x80)))
 (let (($x95 (and $x156 $x35)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x215 (or false (or false (and (and true (or $x84 $x39)) (or $x257 $x135))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x218 (and $x52 $x95)))
 (let (($x89 (= $x218 true)))
 (let (($x166 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x240 (= $x166 true)))
 (let (($x194 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x194 true)))
 (let ((?x228 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x228)))
 (let (($x114 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (= $x114 true)))
 (let ((?x197 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x247 (= (_ bv0 2) ?x197)))
 (let (($x23 (= $x247 true)))
 (let (($x77 (= ?x14 input.dst.llvm-%n)))
 (let (($x265 (= $x77 true)))
 (let (($x252 (and $x265 $x23)))
 (let (($x151 (and $x252 $x141)))
 (let (($x214 (and $x151 $x140)))
 (let (($x260 (and $x214 $x240)))
 (let (($x65 (and $x260 $x89)))
 (let (($x281 (and $x65 $x96)))
 (let (($x26 (and $x281 $x285)))
 (let (($x86 (and $x26 $x125)))
 (let (($x29 (and $x86 $x178)))
 (let (($x269 (and $x29 $x237)))
 (let (($x200 (and $x269 $x19)))
 (let (($x90 (and $x200 $x231)))
 (let (($x230 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and (not $x230) $x90)))
 (let (($x222 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x222 $x239)))
 (let (($x263 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x66 (and $x263 $x233)))
 (let (($x167 (forall ((input.ind-%var1949X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1949X)))
 (=> $x25 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1949X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var1948X (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1948X)))
 (= $x25 false)))
 ))
 (let (($x79 (and $x153 $x167)))
 (let (($x129 (and $x79 $x66)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x219 (and $x195 $x129)))
 (let (($x259 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x134 (_ bv3 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x5 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x267 (or false (or false (and (and true (or $x51 $x5)) (or $x161 $x259))))))
 (let (($x236 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x267)))
 (let (($x37 (=> (and $x132 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x267)))
 (let (($x284 (and $x37 $x219)))
 (let (($x28 (=> $x284 $x17)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvsge ?x158 (_ bv0 32))))
 (let (($x91 (= $x106 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x300)))
 (let (($x33 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x217 (= $x33 true)))
 (let (($x130 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x294 (= $x130 true)))
 (let (($x10 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x10 true)))
 (let (($x82 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let ((?x17 (bvadd (bvmul input.ind-%var1959X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x17))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv2 32))) ?x34)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv3 32))) ?x209)))
 (let ((?x16 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1959X)))
 (let (($x211 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (=> $x211 (= ?x16 ?x268)))))))))
 ))
 (let (($x68 (forall ((input.ind-%var1958X (_ BitVec 32)) )(let (($x163 (and (bvule (_ bv0 32) input.ind-%var1958X) (bvult input.ind-%var1958X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x211 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1958X)))
 (= $x211 $x163))))
 ))
 (let (($x102 (and $x68 $x82)))
 (let (($x182 (= $x102 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x13 (bvsub ?x134 ?x179)))
 (let (($x85 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x13) (bvult ?x134 ?x13))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x86 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x273 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x227 (bvmul (_ bv4 64) ?x273)))
 (let ((?x100 ((_ extract 63 32) ?x227)))
 (let (($x242 (= ?x100 ?x86)))
 (let (($x67 (and $x242 $x85)))
 (let (($x271 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x98 (and $x271 $x67)))
 (let (($x45 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (=> $x45 $x98)))
 (let (($x216 (= $x170 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x131 true)))
 (let (($x30 (= $x45 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x65)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x218)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x253)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (and $x11 $x80)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x150 $x156)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x208 $x177)))
 (let (($x238 (not $x145)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x169 $x147)))
 (let (($x181 (and (not $x180) $x238)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x221 $x282)))
 (let (($x192 (not $x168)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x223 $x72)))
 (let (($x88 (and (not $x186) $x192)))
 (let (($x48 (and (and (and (and (and (and $x88 $x181) $x55) $x212) $x210) $x95) $x89)))
 (let (($x243 (and $x48 $x96)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x262)))
 (let (($x196 (or false (or false (and (and true (or $x299 $x24)) (or $x246 $x50))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x196)))
 (let (($x103 (and $x160 $x243)))
 (let (($x105 (= $x103 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x257 (= $x75 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x39 (= $x84 true)))
 (let ((?x141 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x141)))
 (let (($x171 (= ?x151 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (= $x171 true)))
 (let ((?x214 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x166 (= (_ bv0 2) ?x214)))
 (let (($x240 (= $x166 true)))
 (let (($x32 (= ?x151 input.dst.llvm-%n)))
 (let (($x194 (= $x32 true)))
 (let (($x260 (and $x194 $x240)))
 (let (($x53 (and $x260 $x254)))
 (let (($x226 (and $x53 $x39)))
 (let (($x135 (and $x226 $x257)))
 (let (($x99 (and $x135 $x105)))
 (let (($x133 (and $x99 $x30)))
 (let (($x124 (and $x133 $x255)))
 (let (($x144 (and $x124 $x216)))
 (let (($x289 (and $x144 $x182)))
 (let (($x143 (and $x289 $x277)))
 (let (($x275 (and $x143 $x294)))
 (let (($x235 (and $x275 $x217)))
 (let (($x252 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x298 (and (not $x252) $x235)))
 (let (($x247 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and $x247 $x298)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x69 (and $x265 $x261)))
 (let (($x228 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1969X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1969X) (_ bv0 32)))))
 ))
 (let (($x167 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1968X)))
 (= $x123 false)))
 ))
 (let (($x14 (and $x167 $x228)))
 (let (($x9 (and $x14 $x69)))
 (let (($x244 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x244 $x9)))
 (let (($x290 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x134 (_ bv3 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x38 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x37 (or false (or false (and (and true (or $x93 $x38)) (or $x162 $x290))))))
 (let (($x195 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x37)))
 (let (($x266 (=> (and $x45 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x37)))
 (let (($x127 (and $x266 $x173)))
 (let (($x97 (=> $x127 $x91)))
 (not $x97))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x158 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvsge ?x158 (_ bv0 32))))
 (let (($x91 (= $x106 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x300)))
 (let (($x33 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x217 (= $x33 true)))
 (let (($x130 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x294 (= $x130 true)))
 (let (($x10 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x10 true)))
 (let (($x82 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let ((?x17 (bvadd (bvmul input.ind-%var1959X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x17))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv2 32))) ?x34)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv3 32))) ?x209)))
 (let ((?x16 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1959X)))
 (let (($x211 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (=> $x211 (= ?x16 ?x268)))))))))
 ))
 (let (($x68 (forall ((input.ind-%var1958X (_ BitVec 32)) )(let (($x163 (and (bvule (_ bv0 32) input.ind-%var1958X) (bvult input.ind-%var1958X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x211 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1958X)))
 (= $x211 $x163))))
 ))
 (let (($x102 (and $x68 $x82)))
 (let (($x182 (= $x102 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x13 (bvsub ?x134 ?x179)))
 (let (($x85 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x13) (bvult ?x134 ?x13))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x86 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x273 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x227 (bvmul (_ bv4 64) ?x273)))
 (let ((?x100 ((_ extract 63 32) ?x227)))
 (let (($x242 (= ?x100 ?x86)))
 (let (($x67 (and $x242 $x85)))
 (let (($x271 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x98 (and $x271 $x67)))
 (let (($x45 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (=> $x45 $x98)))
 (let (($x216 (= $x170 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x131 true)))
 (let (($x30 (= $x45 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x65)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x218)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x253)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (and $x11 $x80)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x150 $x156)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x208 $x177)))
 (let (($x238 (not $x145)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x169 $x147)))
 (let (($x181 (and (not $x180) $x238)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x221 $x282)))
 (let (($x192 (not $x168)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x223 $x72)))
 (let (($x88 (and (not $x186) $x192)))
 (let (($x48 (and (and (and (and (and (and $x88 $x181) $x55) $x212) $x210) $x95) $x89)))
 (let (($x243 (and $x48 $x96)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x262)))
 (let (($x196 (or false (or false (and (and true (or $x299 $x24)) (or $x246 $x50))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x196)))
 (let (($x103 (and $x160 $x243)))
 (let (($x105 (= $x103 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x257 (= $x75 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x39 (= $x84 true)))
 (let ((?x141 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x141)))
 (let (($x171 (= ?x151 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (= $x171 true)))
 (let ((?x214 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x166 (= (_ bv0 2) ?x214)))
 (let (($x240 (= $x166 true)))
 (let (($x32 (= ?x151 input.dst.llvm-%n)))
 (let (($x194 (= $x32 true)))
 (let (($x260 (and $x194 $x240)))
 (let (($x53 (and $x260 $x254)))
 (let (($x226 (and $x53 $x39)))
 (let (($x135 (and $x226 $x257)))
 (let (($x99 (and $x135 $x105)))
 (let (($x133 (and $x99 $x30)))
 (let (($x124 (and $x133 $x255)))
 (let (($x144 (and $x124 $x216)))
 (let (($x289 (and $x144 $x182)))
 (let (($x143 (and $x289 $x277)))
 (let (($x275 (and $x143 $x294)))
 (let (($x235 (and $x275 $x217)))
 (let (($x252 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x298 (and (not $x252) $x235)))
 (let (($x247 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and $x247 $x298)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x69 (and $x265 $x261)))
 (let (($x228 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1969X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1969X) (_ bv0 32)))))
 ))
 (let (($x167 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1968X)))
 (= $x123 false)))
 ))
 (let (($x14 (and $x167 $x228)))
 (let (($x9 (and $x14 $x69)))
 (let (($x244 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x244 $x9)))
 (let (($x290 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x134 (_ bv3 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x38 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x37 (or false (or false (and (and true (or $x93 $x38)) (or $x162 $x290))))))
 (let (($x195 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x37)))
 (let (($x266 (=> (and $x45 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x37)))
 (let (($x127 (and $x266 $x173)))
 (let (($x97 (=> $x127 $x91)))
 (not $x97))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (forall ((input.ind-%var2003X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var2003X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x38 (bvadd ?x134 (_ bv3 32))))
 (let ((?x110 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x116 (store ?x110 (bvadd ?x134 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x121 (store ?x116 (bvadd ?x134 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x56 (store ?x121 ?x38 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x232 (concat (select ?x56 (bvadd ?x33 (_ bv2 32))) (concat (select ?x56 (bvadd ?x33 (_ bv1 32))) (select ?x56 ?x33)))))
 (let ((?x119 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2003X)))
 (let (($x199 (= input.ind-%var2003X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x104 (= (ite $x199 input.spec-%var-i-0.L3%6%bbentry ?x119) (concat (select ?x56 (bvadd ?x33 (_ bv3 32))) ?x232))))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2003X)))
 (let (($x109 (or $x92 $x199)))
 (=> $x109 $x104))))))))))))))))
 ))
 (let (($x81 (forall ((input.ind-%var2002X (_ BitVec 32)) )(let (($x17 (bvule (_ bv0 32) input.ind-%var2002X)))
 (let (($x164 (and $x17 (bvult input.ind-%var2002X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x199 (= input.ind-%var2002X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2002X)))
 (let (($x109 (or $x92 $x199)))
 (= $x109 $x164)))))))
 ))
 (let (($x136 (and $x81 $x20)))
 (let (($x225 (= $x136 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x239 (bvneg ?x90)))
 (let (($x280 (= ?x239 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x280 true)))
 (let ((?x74 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x19 (= (_ bv0 2) ?x74)))
 (let (($x66 (= $x19 true)))
 (let (($x29 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x112 (= $x29 true)))
 (let (($x213 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x213 true)))
 (let (($x79 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x263 (= $x79 true)))
 (let (($x237 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x31 (= $x237 true)))
 (let (($x117 (forall ((input.ind-%var1979X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var1979X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x261)))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x173)))
 (let ((?x119 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1979X)))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1979X)))
 (=> $x92 (= ?x119 ?x106)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let (($x17 (bvule (_ bv0 32) input.ind-%var1978X)))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1978X)))
 (= $x92 (and $x17 (bvult input.ind-%var1978X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x63 (and $x231 $x117)))
 (let (($x278 (= $x63 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x12 (bvsub ?x134 ?x179)))
 (let (($x85 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x12) (bvult ?x134 ?x12))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x86 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x273 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x227 (bvmul (_ bv4 64) ?x273)))
 (let ((?x100 ((_ extract 63 32) ?x227)))
 (let (($x242 (= ?x100 ?x86)))
 (let (($x67 (and $x242 $x85)))
 (let (($x271 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x98 (and $x271 $x67)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (=> $x15 $x98)))
 (let (($x216 (= $x170 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x131 true)))
 (let (($x99 (= $x15 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x26)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x156)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x49 $x285)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x146 $x150)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (and $x180 $x22)))
 (let (($x177 (not $x208)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x88 $x169)))
 (let (($x238 (and (not $x147) $x177)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x186 $x198)))
 (let (($x282 (not $x221)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x135 $x215)))
 (let (($x192 (and (not $x72) $x282)))
 (let (($x65 (and (and (and (and (and (and $x192 $x238) $x281) $x55) $x11) $x80) $x210)))
 (let (($x96 (and $x65 $x35)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x262)))
 (let (($x196 (or false (or false (and (and true (or $x299 $x24)) (or $x246 $x50))))))
 (let (($x223 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x196)))
 (let (($x243 (and $x223 $x96)))
 (let (($x103 (= $x243 true)))
 (let ((?x254 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x254)))
 (let (($x39 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x226 (= $x39 true)))
 (let (($x241 (= ?x53 input.dst.llvm-%n)))
 (let (($x84 (= $x241 true)))
 (let (($x75 (and $x84 $x226)))
 (let (($x105 (and $x75 $x103)))
 (let (($x30 (and $x105 $x99)))
 (let (($x124 (and $x30 $x255)))
 (let (($x144 (and $x124 $x216)))
 (let (($x203 (and $x144 $x278)))
 (let (($x191 (and $x203 $x31)))
 (let (($x25 (and $x191 $x263)))
 (let (($x251 (and $x25 $x276)))
 (let (($x7 (and $x251 $x112)))
 (let (($x129 (and $x7 $x66)))
 (let (($x200 (and $x129 $x175)))
 (let (($x260 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and (not $x260) $x200)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x219 (and $x166 $x233)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x61 (and $x194 $x219)))
 (let (($x141 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1989X)))
 (=> $x176 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1989X) (_ bv0 32)))))
 ))
 (let (($x228 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1988X)))
 (= $x176 false)))
 ))
 (let (($x151 (and $x228 $x141)))
 (let (($x101 (and $x151 $x61)))
 (let (($x153 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x264 (and $x153 $x101)))
 (let (($x267 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd ?x134 (_ bv3 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x161 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x266 (or false (or false (and (and true (or $x207 $x161)) (or $x193 $x267))))))
 (let (($x244 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x266)))
 (let (($x270 (=> (and $x15 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x266)))
 (let (($x284 (and $x270 $x264)))
 (let (($x204 (=> $x284 $x225)))
 (not $x204)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x20 (forall ((input.ind-%var2003X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var2003X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x38 (bvadd ?x134 (_ bv3 32))))
 (let ((?x110 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x116 (store ?x110 (bvadd ?x134 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x121 (store ?x116 (bvadd ?x134 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x56 (store ?x121 ?x38 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x232 (concat (select ?x56 (bvadd ?x33 (_ bv2 32))) (concat (select ?x56 (bvadd ?x33 (_ bv1 32))) (select ?x56 ?x33)))))
 (let ((?x119 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2003X)))
 (let (($x199 (= input.ind-%var2003X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x104 (= (ite $x199 input.spec-%var-i-0.L3%6%bbentry ?x119) (concat (select ?x56 (bvadd ?x33 (_ bv3 32))) ?x232))))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2003X)))
 (let (($x109 (or $x92 $x199)))
 (=> $x109 $x104))))))))))))))))
 ))
 (let (($x81 (forall ((input.ind-%var2002X (_ BitVec 32)) )(let (($x17 (bvule (_ bv0 32) input.ind-%var2002X)))
 (let (($x164 (and $x17 (bvult input.ind-%var2002X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x199 (= input.ind-%var2002X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2002X)))
 (let (($x109 (or $x92 $x199)))
 (= $x109 $x164)))))))
 ))
 (let (($x136 (and $x81 $x20)))
 (let (($x225 (= $x136 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x239 (bvneg ?x90)))
 (let (($x280 (= ?x239 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x280 true)))
 (let ((?x74 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x19 (= (_ bv0 2) ?x74)))
 (let (($x66 (= $x19 true)))
 (let (($x29 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x112 (= $x29 true)))
 (let (($x213 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x213 true)))
 (let (($x79 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x263 (= $x79 true)))
 (let (($x237 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x31 (= $x237 true)))
 (let (($x117 (forall ((input.ind-%var1979X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var1979X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x261)))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x173)))
 (let ((?x119 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1979X)))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1979X)))
 (=> $x92 (= ?x119 ?x106)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let (($x17 (bvule (_ bv0 32) input.ind-%var1978X)))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1978X)))
 (= $x92 (and $x17 (bvult input.ind-%var1978X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x63 (and $x231 $x117)))
 (let (($x278 (= $x63 true)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let ((?x12 (bvsub ?x134 ?x179)))
 (let (($x85 (ite (bvsge ?x179 (_ bv0 32)) (bvuge ?x134 ?x12) (bvult ?x134 ?x12))))
 (let (($x125 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x86 (ite $x125 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x273 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x227 (bvmul (_ bv4 64) ?x273)))
 (let ((?x100 ((_ extract 63 32) ?x227)))
 (let (($x242 (= ?x100 ?x86)))
 (let (($x67 (and $x242 $x85)))
 (let (($x271 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x98 (and $x271 $x67)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (=> $x15 $x98)))
 (let (($x216 (= $x170 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x131 true)))
 (let (($x99 (= $x15 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x26)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x156)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x49 $x285)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x146 $x150)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (and $x180 $x22)))
 (let (($x177 (not $x208)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x88 $x169)))
 (let (($x238 (and (not $x147) $x177)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x186 $x198)))
 (let (($x282 (not $x221)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x135 $x215)))
 (let (($x192 (and (not $x72) $x282)))
 (let (($x65 (and (and (and (and (and (and $x192 $x238) $x281) $x55) $x11) $x80) $x210)))
 (let (($x96 (and $x65 $x35)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x262)))
 (let (($x196 (or false (or false (and (and true (or $x299 $x24)) (or $x246 $x50))))))
 (let (($x223 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x196)))
 (let (($x243 (and $x223 $x96)))
 (let (($x103 (= $x243 true)))
 (let ((?x254 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x254)))
 (let (($x39 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x226 (= $x39 true)))
 (let (($x241 (= ?x53 input.dst.llvm-%n)))
 (let (($x84 (= $x241 true)))
 (let (($x75 (and $x84 $x226)))
 (let (($x105 (and $x75 $x103)))
 (let (($x30 (and $x105 $x99)))
 (let (($x124 (and $x30 $x255)))
 (let (($x144 (and $x124 $x216)))
 (let (($x203 (and $x144 $x278)))
 (let (($x191 (and $x203 $x31)))
 (let (($x25 (and $x191 $x263)))
 (let (($x251 (and $x25 $x276)))
 (let (($x7 (and $x251 $x112)))
 (let (($x129 (and $x7 $x66)))
 (let (($x200 (and $x129 $x175)))
 (let (($x260 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and (not $x260) $x200)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x219 (and $x166 $x233)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x61 (and $x194 $x219)))
 (let (($x141 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1989X)))
 (=> $x176 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1989X) (_ bv0 32)))))
 ))
 (let (($x228 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x176 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1988X)))
 (= $x176 false)))
 ))
 (let (($x151 (and $x228 $x141)))
 (let (($x101 (and $x151 $x61)))
 (let (($x153 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x264 (and $x153 $x101)))
 (let (($x267 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd ?x134 (_ bv3 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x161 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x266 (or false (or false (and (and true (or $x207 $x161)) (or $x193 $x267))))))
 (let (($x244 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x266)))
 (let (($x270 (=> (and $x15 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x266)))
 (let (($x284 (and $x270 $x264)))
 (let (($x204 (=> $x284 $x225)))
 (not $x204)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (not $x57)))
 (let (($x159 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (not $x159)))
 (let (($x138 (or $x116 $x115)))
 (let (($x121 (= $x138 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x286)))
 (let (($x164 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x164 true)))
 (let ((?x233 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x233)))
 (let (($x284 (= ?x219 input.dst.llvm-%n)))
 (let (($x199 (= $x284 true)))
 (let (($x61 (= ?x219 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (= $x61 true)))
 (let (($x239 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x280 (= $x239 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x66 true)))
 (let (($x293 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (= $x293 true)))
 (let (($x29 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x112 (= $x29 true)))
 (let (($x263 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let ((?x261 (bvadd (bvmul input.ind-%var2013X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x97)))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x278)))
 (let ((?x144 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2013X)))
 (let (($x227 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2013X)))
 (=> $x227 (= ?x144 ?x31)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var2012X (_ BitVec 32)) )(let (($x122 (and (bvule (_ bv0 32) input.ind-%var2012X) (bvult input.ind-%var2012X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x227 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2012X)))
 (= $x227 $x122))))
 ))
 (let (($x25 (and $x67 $x263)))
 (let (($x213 (= $x25 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x54 (= $x76 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x65)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x156)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x150)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (and $x285 $x11)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x212 $x89)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x238 $x95)))
 (let (($x281 (not $x181)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x22 $x208)))
 (let (($x113 (and (not $x177) $x281)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x192 $x88)))
 (let (($x147 (not $x169)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x24 $x70)))
 (let (($x180 (and (not $x282) $x147)))
 (let (($x99 (and (and (and (and (and (and $x180 $x113) $x218) $x49) $x253) $x48) $x210)))
 (let (($x30 (and $x99 $x26)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x186 (or false (or false (and (and true (or $x157 $x149)) (or $x223 $x135))))))
 (let (($x221 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x186)))
 (let (($x133 (and $x221 $x30)))
 (let (($x131 (= $x133 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x160 (= (_ bv0 2) ?x245)))
 (let (($x262 (= $x160 true)))
 (let (($x255 (and $x262 $x131)))
 (let (($x271 (and $x255 $x54)))
 (let (($x276 (and $x271 $x213)))
 (let (($x7 (and $x276 $x112)))
 (let (($x19 (and $x7 $x74)))
 (let (($x90 (and $x19 $x129)))
 (let (($x175 (and $x90 $x280)))
 (let (($x264 (and $x175 $x101)))
 (let (($x109 (and $x264 $x199)))
 (let (($x81 (and $x109 $x18)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x220 (and $x75 $x81)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x229 (and $x84 $x220)))
 (let (($x254 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2023X)))
 (=> $x60 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2023X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2022X)))
 (= $x60 false)))
 ))
 (let (($x53 (and $x141 $x254)))
 (let (($x152 (and $x53 $x229)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x167 $x152)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let (($x37 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd ?x134 (_ bv3 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x162 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x270 (or false (or false (and (and true (or $x83 $x162)) (or $x236 $x37))))))
 (let (($x153 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x270)))
 (let (($x189 (=> (and $x57 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x270)))
 (let (($x27 (and $x189 $x110)))
 (let (($x62 (=> $x27 $x121)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x57 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (not $x57)))
 (let (($x159 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (not $x159)))
 (let (($x138 (or $x116 $x115)))
 (let (($x121 (= $x138 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x286)))
 (let (($x164 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x164 true)))
 (let ((?x233 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x233)))
 (let (($x284 (= ?x219 input.dst.llvm-%n)))
 (let (($x199 (= $x284 true)))
 (let (($x61 (= ?x219 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (= $x61 true)))
 (let (($x239 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x280 (= $x239 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x66 true)))
 (let (($x293 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (= $x293 true)))
 (let (($x29 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x112 (= $x29 true)))
 (let (($x263 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let ((?x261 (bvadd (bvmul input.ind-%var2013X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x97)))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x278)))
 (let ((?x144 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2013X)))
 (let (($x227 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2013X)))
 (=> $x227 (= ?x144 ?x31)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var2012X (_ BitVec 32)) )(let (($x122 (and (bvule (_ bv0 32) input.ind-%var2012X) (bvult input.ind-%var2012X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x227 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2012X)))
 (= $x227 $x122))))
 ))
 (let (($x25 (and $x67 $x263)))
 (let (($x213 (= $x25 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x54 (= $x76 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x65)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x156)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x150)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (and $x285 $x11)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x212 $x89)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x238 $x95)))
 (let (($x281 (not $x181)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x22 $x208)))
 (let (($x113 (and (not $x177) $x281)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x192 $x88)))
 (let (($x147 (not $x169)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x24 $x70)))
 (let (($x180 (and (not $x282) $x147)))
 (let (($x99 (and (and (and (and (and (and $x180 $x113) $x218) $x49) $x253) $x48) $x210)))
 (let (($x30 (and $x99 $x26)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x186 (or false (or false (and (and true (or $x157 $x149)) (or $x223 $x135))))))
 (let (($x221 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x186)))
 (let (($x133 (and $x221 $x30)))
 (let (($x131 (= $x133 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x160 (= (_ bv0 2) ?x245)))
 (let (($x262 (= $x160 true)))
 (let (($x255 (and $x262 $x131)))
 (let (($x271 (and $x255 $x54)))
 (let (($x276 (and $x271 $x213)))
 (let (($x7 (and $x276 $x112)))
 (let (($x19 (and $x7 $x74)))
 (let (($x90 (and $x19 $x129)))
 (let (($x175 (and $x90 $x280)))
 (let (($x264 (and $x175 $x101)))
 (let (($x109 (and $x264 $x199)))
 (let (($x81 (and $x109 $x18)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x220 (and $x75 $x81)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x229 (and $x84 $x220)))
 (let (($x254 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2023X)))
 (=> $x60 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2023X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2022X)))
 (= $x60 false)))
 ))
 (let (($x53 (and $x141 $x254)))
 (let (($x152 (and $x53 $x229)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x167 $x152)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let (($x37 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd ?x134 (_ bv3 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x162 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x270 (or false (or false (and (and true (or $x83 $x162)) (or $x236 $x37))))))
 (let (($x153 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x270)))
 (let (($x189 (=> (and $x57 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x270)))
 (let (($x27 (and $x189 $x110)))
 (let (($x62 (=> $x27 $x121)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x235 (or $x13 $x132)))
 (let (($x170 (= $x235 true)))
 (let ((?x33 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x33)))
 (let (($x231 (= ?x127 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x231 true)))
 (let ((?x216 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x216)))
 (let (($x205 (= ?x301 input.dst.llvm-%n)))
 (let (($x182 (= $x205 true)))
 (let (($x125 (= ?x301 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (= $x125 true)))
 (let (($x176 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x202 (= $x176 true)))
 (let (($x214 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x151 (= $x214 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x100 true)))
 (let (($x56 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x56 true)))
 (let (($x116 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul input.ind-%var2033X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x199))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv2 32))) ?x164)))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv3 32))) ?x220)))
 (let ((?x29 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2033X)))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2033X)))
 (=> $x63 (= ?x29 ?x110)))))))))
 ))
 (let (($x25 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x79 (and (bvule (_ bv0 32) input.ind-%var2032X) (bvult input.ind-%var2032X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (= $x63 $x79))))
 ))
 (let (($x115 (and $x25 $x116)))
 (let (($x138 (= $x115 true)))
 (let (($x261 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x203 (= $x261 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x124)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x255 (= (_ bv0 32) ?x131)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x156 $x99)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x105 $x65)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (and $x243 $x212)))
 (let (($x150 (not $x285)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x96 $x146)))
 (let (($x89 (and (not $x49) $x150)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x181 $x281)))
 (let (($x35 (not $x113)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x168 $x186)))
 (let (($x218 (and (not $x95) $x35)))
 (let (($x122 (and (and (and (and (and (and $x218 $x89) $x103) $x48) $x26) $x133) $x255)))
 (let (($x85 (and $x122 $x76)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x177 (or false (or false (and (and true (or $x282 $x145)) (or $x169 $x147))))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x177)))
 (let (($x67 (and $x238 $x85)))
 (let (($x144 (= $x67 true)))
 (let ((?x223 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x135 (= (_ bv0 2) ?x223)))
 (let (($x215 (= $x135 true)))
 (let (($x17 (and $x215 $x144)))
 (let (($x237 (and $x17 $x203)))
 (let (($x121 (and $x237 $x138)))
 (let (($x299 (and $x121 $x206)))
 (let (($x247 (and $x299 $x92)))
 (let (($x194 (and $x247 $x151)))
 (let (($x21 (and $x194 $x202)))
 (let (($x185 (and $x21 $x86)))
 (let (($x69 (and $x185 $x182)))
 (let (($x8 (and $x69 $x119)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and $x58 $x8)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x50 $x34)))
 (let (($x42 (forall ((input.ind-%var2043X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2043X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2043X) (_ bv0 32)))))
 ))
 (let (($x254 (forall ((input.ind-%var2042X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2042X)))
 (= $x140 false)))
 ))
 (let (($x246 (and $x254 $x42)))
 (let (($x9 (and $x246 $x158)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x273 (and $x228 $x9)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let (($x266 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd ?x134 (_ bv3 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x193 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x189 (or false (or false (and (and true (or $x259 $x193)) (or $x195 $x266))))))
 (let (($x167 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x189)))
 (let (($x5 (=> (and $x132 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x189)))
 (let (($x242 (and $x5 $x273)))
 (let (($x298 (=> $x242 $x170)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x235 (or $x13 $x132)))
 (let (($x170 (= $x235 true)))
 (let ((?x33 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x33)))
 (let (($x231 (= ?x127 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x231 true)))
 (let ((?x216 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x216)))
 (let (($x205 (= ?x301 input.dst.llvm-%n)))
 (let (($x182 (= $x205 true)))
 (let (($x125 (= ?x301 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (= $x125 true)))
 (let (($x176 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x202 (= $x176 true)))
 (let (($x214 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x151 (= $x214 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x100 true)))
 (let (($x56 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x56 true)))
 (let (($x116 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul input.ind-%var2033X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x199))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv2 32))) ?x164)))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv3 32))) ?x220)))
 (let ((?x29 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2033X)))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2033X)))
 (=> $x63 (= ?x29 ?x110)))))))))
 ))
 (let (($x25 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x79 (and (bvule (_ bv0 32) input.ind-%var2032X) (bvult input.ind-%var2032X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (= $x63 $x79))))
 ))
 (let (($x115 (and $x25 $x116)))
 (let (($x138 (= $x115 true)))
 (let (($x261 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x203 (= $x261 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x124)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x255 (= (_ bv0 32) ?x131)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x156 $x99)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x105 $x65)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (and $x243 $x212)))
 (let (($x150 (not $x285)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x96 $x146)))
 (let (($x89 (and (not $x49) $x150)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x181 $x281)))
 (let (($x35 (not $x113)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x168 $x186)))
 (let (($x218 (and (not $x95) $x35)))
 (let (($x122 (and (and (and (and (and (and $x218 $x89) $x103) $x48) $x26) $x133) $x255)))
 (let (($x85 (and $x122 $x76)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x177 (or false (or false (and (and true (or $x282 $x145)) (or $x169 $x147))))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x177)))
 (let (($x67 (and $x238 $x85)))
 (let (($x144 (= $x67 true)))
 (let ((?x223 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x135 (= (_ bv0 2) ?x223)))
 (let (($x215 (= $x135 true)))
 (let (($x17 (and $x215 $x144)))
 (let (($x237 (and $x17 $x203)))
 (let (($x121 (and $x237 $x138)))
 (let (($x299 (and $x121 $x206)))
 (let (($x247 (and $x299 $x92)))
 (let (($x194 (and $x247 $x151)))
 (let (($x21 (and $x194 $x202)))
 (let (($x185 (and $x21 $x86)))
 (let (($x69 (and $x185 $x182)))
 (let (($x8 (and $x69 $x119)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and $x58 $x8)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x50 $x34)))
 (let (($x42 (forall ((input.ind-%var2043X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2043X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2043X) (_ bv0 32)))))
 ))
 (let (($x254 (forall ((input.ind-%var2042X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2042X)))
 (= $x140 false)))
 ))
 (let (($x246 (and $x254 $x42)))
 (let (($x9 (and $x246 $x158)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x273 (and $x228 $x9)))
 (let ((?x179 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%m ?x179)))
 (let (($x266 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd ?x134 (_ bv3 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x193 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x189 (or false (or false (and (and true (or $x259 $x193)) (or $x195 $x266))))))
 (let (($x167 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x189)))
 (let (($x5 (=> (and $x132 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x189)))
 (let (($x242 (and $x5 $x273)))
 (let (($x298 (=> $x242 $x170)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x174 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var2073X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x8)))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x9)))
 (let ((?x62 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2073X)))
 (let (($x18 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2073X)))
 (=> $x18 (= ?x62 ?x13)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x18 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2072X)))
 (= $x18 (and (bvule (_ bv0 32) input.ind-%var2072X) (bvult input.ind-%var2072X input.dst.llvm-%n)))))
 ))
 (let (($x104 (and $x61 $x174)))
 (let (($x183 (= $x104 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x42)))
 (let (($x172 (= ?x246 input.dst.llvm-%n)))
 (let (($x52 (= $x172 true)))
 (let ((?x53 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x84 (= (_ bv0 2) ?x53)))
 (let (($x60 (= $x84 true)))
 (let (($x106 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x106 true)))
 (let (($x298 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var2053X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x8)))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x9)))
 (let ((?x62 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2053X)))
 (let (($x18 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2053X)))
 (=> $x18 (= ?x62 ?x13)))))))))
 ))
 (let (($x116 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x110 (bvule (_ bv0 32) input.ind-%var2052X)))
 (let (($x18 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2052X)))
 (= $x18 (and $x110 (bvult input.ind-%var2052X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x32 (and $x116 $x298)))
 (let (($x43 (= $x32 true)))
 (let (($x7 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (not $x7)))
 (let (($x199 (= $x284 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x144)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x85)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x255 (and $x30 $x131)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x165 $x255)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x271 $x80)))
 (let (($x227 (not $x48)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x54 $x253)))
 (let (($x156 (and (not $x103) $x227)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x11 $x243)))
 (let (($x285 (not $x212)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x145 $x192)))
 (let (($x89 (and (not $x49) $x285)))
 (let (($x191 (and (and (and (and (and (and $x89 $x156) $x99) $x26) $x122) $x76) $x67)))
 (let (($x31 (and $x191 $x17)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x177 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x218 (or false (or false (and (and true (or $x208 $x177)) (or $x55 $x181))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x218)))
 (let (($x79 (and $x146 $x31)))
 (let (($x263 (= $x79 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x24 (= $x221 true)))
 (let (($x223 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (= $x223 true)))
 (let (($x149 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x58 (= $x149 true)))
 (let (($x198 (= ?x246 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x198 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x160 (= $x75 true)))
 (let ((?x228 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x228)))
 (let (($x171 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x254 (= $x171 true)))
 (let (($x262 (and $x254 $x160)))
 (let (($x157 (and $x262 $x50)))
 (let (($x196 (and $x157 $x58)))
 (let (($x215 (and $x196 $x135)))
 (let (($x154 (and $x215 $x24)))
 (let (($x25 (and $x154 $x263)))
 (let (($x229 (and $x25 $x199)))
 (let (($x72 (and $x229 $x43)))
 (let (($x166 (and $x72 $x112)))
 (let (($x114 (and $x166 $x60)))
 (let (($x251 (and $x114 $x52)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (and $x5 $x251)))
 (let (($x189 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and $x189 $x155)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x173 (and $x244 $x91)))
 (let (($x195 (forall ((input.ind-%var2063X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2063X)))
 (=> $x179 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2063X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var2062X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2062X)))
 (= $x179 false)))
 ))
 (let (($x37 (and $x93 $x195)))
 (let (($x293 (and $x37 $x173)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x74 (and $x45 $x293)))
 (let (($x20 (=> $x74 $x183)))
 (not $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x174 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var2073X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x8)))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x9)))
 (let ((?x62 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2073X)))
 (let (($x18 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2073X)))
 (=> $x18 (= ?x62 ?x13)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x18 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2072X)))
 (= $x18 (and (bvule (_ bv0 32) input.ind-%var2072X) (bvult input.ind-%var2072X input.dst.llvm-%n)))))
 ))
 (let (($x104 (and $x61 $x174)))
 (let (($x183 (= $x104 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x42)))
 (let (($x172 (= ?x246 input.dst.llvm-%n)))
 (let (($x52 (= $x172 true)))
 (let ((?x53 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x84 (= (_ bv0 2) ?x53)))
 (let (($x60 (= $x84 true)))
 (let (($x106 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x106 true)))
 (let (($x298 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul input.ind-%var2053X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x8)))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x9)))
 (let ((?x62 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2053X)))
 (let (($x18 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2053X)))
 (=> $x18 (= ?x62 ?x13)))))))))
 ))
 (let (($x116 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x110 (bvule (_ bv0 32) input.ind-%var2052X)))
 (let (($x18 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2052X)))
 (= $x18 (and $x110 (bvult input.ind-%var2052X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x32 (and $x116 $x298)))
 (let (($x43 (= $x32 true)))
 (let (($x7 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x284 (not $x7)))
 (let (($x199 (= $x284 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x144)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x85)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x255 (and $x30 $x131)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x165 $x255)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x271 $x80)))
 (let (($x227 (not $x48)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x54 $x253)))
 (let (($x156 (and (not $x103) $x227)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x11 $x243)))
 (let (($x285 (not $x212)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x145 $x192)))
 (let (($x89 (and (not $x49) $x285)))
 (let (($x191 (and (and (and (and (and (and $x89 $x156) $x99) $x26) $x122) $x76) $x67)))
 (let (($x31 (and $x191 $x17)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x177 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x218 (or false (or false (and (and true (or $x208 $x177)) (or $x55 $x181))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x218)))
 (let (($x79 (and $x146 $x31)))
 (let (($x263 (= $x79 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x24 (= $x221 true)))
 (let (($x223 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (= $x223 true)))
 (let (($x149 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x58 (= $x149 true)))
 (let (($x198 (= ?x246 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x198 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x160 (= $x75 true)))
 (let ((?x228 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x228)))
 (let (($x171 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x254 (= $x171 true)))
 (let (($x262 (and $x254 $x160)))
 (let (($x157 (and $x262 $x50)))
 (let (($x196 (and $x157 $x58)))
 (let (($x215 (and $x196 $x135)))
 (let (($x154 (and $x215 $x24)))
 (let (($x25 (and $x154 $x263)))
 (let (($x229 (and $x25 $x199)))
 (let (($x72 (and $x229 $x43)))
 (let (($x166 (and $x72 $x112)))
 (let (($x114 (and $x166 $x60)))
 (let (($x251 (and $x114 $x52)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (and $x5 $x251)))
 (let (($x189 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and $x189 $x155)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x173 (and $x244 $x91)))
 (let (($x195 (forall ((input.ind-%var2063X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2063X)))
 (=> $x179 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2063X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var2062X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2062X)))
 (= $x179 false)))
 ))
 (let (($x37 (and $x93 $x195)))
 (let (($x293 (and $x37 $x173)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x74 (and $x45 $x293)))
 (let (($x20 (=> $x74 $x183)))
 (not $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791783/query
